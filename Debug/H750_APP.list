
H750_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebb4  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  9000ee54  9000ee54  0001ee54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000f0c4  9000f0c4  0002a078  2**0
                  CONTENTS
  4 .ARM          00000008  9000f0c4  9000f0c4  0001f0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000f0cc  9000f0cc  0002a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000f0cc  9000f0cc  0001f0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  9000f0d0  9000f0d0  0001f0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a078  24000000  9000f0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012da0  2400a078  9001914c  0002a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2401ce18  9001914c  0002ce18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000625b4  00000000  00000000  0002a0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a334  00000000  00000000  0008c65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002680  00000000  00000000  00096990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00044a08  00000000  00000000  00099010  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00031720  00000000  00000000  000dda18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00184072  00000000  00000000  0010f138  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002931aa  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002180  00000000  00000000  00293228  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00009e7c  00000000  00000000  002953a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	2400a078 	.word	0x2400a078
900002bc:	00000000 	.word	0x00000000
900002c0:	9000ee3c 	.word	0x9000ee3c

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	2400a07c 	.word	0x2400a07c
900002dc:	9000ee3c 	.word	0x9000ee3c

900002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
900002e0:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
900002e2:	481d      	ldr	r0, [pc, #116]	; (90000358 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
900002e4:	491d      	ldr	r1, [pc, #116]	; (9000035c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @
900002e6:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
900002ea:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
900002ec:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table
900002f0:	491b      	ldr	r1, [pc, #108]	; (90000360 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
900002f2:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
900002f6:	481b      	ldr	r0, [pc, #108]	; (90000364 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
900002f8:	4919      	ldr	r1, [pc, #100]	; (90000360 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
900002fa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
900002fc:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
900002fe:	481a      	ldr	r0, [pc, #104]	; (90000368 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
90000300:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
90000302:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
90000306:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
90000308:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
9000030c:	4917      	ldr	r1, [pc, #92]	; (9000036c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
9000030e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
90000310:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
90000314:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
90000316:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
9000031a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
9000031e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
90000322:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
90000326:	4912      	ldr	r1, [pc, #72]	; (90000370 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
90000328:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
9000032c:	4770      	bx	lr

9000032e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
9000032e:	f7ff bffe 	b.w	9000032e <__tx_BadHandler>

90000332 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
90000332:	f7ff bffe 	b.w	90000332 <__tx_HardfaultHandler>

90000336 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
90000336:	f7ff bffe 	b.w	90000336 <__tx_SVCallHandler>

9000033a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
9000033a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
9000033c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
90000340:	4770      	bx	lr

90000342 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
90000342:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
90000344:	f000 f88c 	bl	90000460 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
90000348:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
9000034c:	4770      	bx	lr

9000034e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
9000034e:	f7ff bffe 	b.w	9000034e <__tx_NMIHandler>

90000352 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
90000352:	f7ff bffe 	b.w	90000352 <__tx_DBGHandler>
90000356:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
90000358:	2401c7b4 	.word	0x2401c7b4
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
9000035c:	2401d418 	.word	0x2401d418
    LDR     r1, =_vectors                           @ Pickup address of vector table
90000360:	90000000 	.word	0x90000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
90000364:	2401c864 	.word	0x2401c864
    LDR     r0, =0xE0001000                         @ Build address of DWT register
90000368:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
9000036c:	00493dff 	.word	0x00493dff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
90000370:	40ff0000 	.word	0x40ff0000
	...

90000380 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOV     r0, #0                                  @ Build value for TX_FALSE
90000380:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
90000384:	4a22      	ldr	r2, [pc, #136]	; (90000410 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
90000386:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
90000388:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
9000038a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
9000038e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
90000392:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
90000396:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
9000039a:	f3bf 8f6f 	isb	sy

9000039e <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
9000039e:	e7fe      	b.n	9000039e <__tx_wait_here>

900003a0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
900003a0:	481c      	ldr	r0, [pc, #112]	; (90000414 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
900003a2:	4a1d      	ldr	r2, [pc, #116]	; (90000418 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
900003a4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
900003a8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
900003aa:	b169      	cbz	r1, 900003c8 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
900003ac:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
900003ae:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
900003b2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
900003b6:	4c19      	ldr	r4, [pc, #100]	; (9000041c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
900003b8:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
900003bc:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
900003be:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
900003c2:	b10d      	cbz	r5, 900003c8 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
900003c4:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
900003c6:	6023      	str	r3, [r4, #0]

900003c8 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
900003c8:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
900003ca:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
900003cc:	b189      	cbz	r1, 900003f2 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
900003ce:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
900003d0:	b662      	cpsie	i

900003d2 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
900003d2:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
900003d4:	4c11      	ldr	r4, [pc, #68]	; (9000041c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
900003d6:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
900003d8:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
900003dc:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
900003de:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
900003e0:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
900003e4:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
900003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
900003ec:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
900003f0:	4770      	bx	lr

900003f2 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
900003f2:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
900003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
900003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
900003f8:	b909      	cbnz	r1, 900003fe <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
900003fa:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
900003fc:	e7f9      	b.n	900003f2 <__tx_ts_wait>

900003fe <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
900003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
90000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV
90000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
9000040a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
9000040c:	e7e1      	b.n	900003d2 <__tx_ts_restore>
9000040e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
90000410:	2401c868 	.word	0x2401c868
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
90000414:	2401c86c 	.word	0x2401c86c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
90000418:	2401c870 	.word	0x2401c870
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
9000041c:	2401c904 	.word	0x2401c904

90000420 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
90000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
90000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
90000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
9000042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
9000042e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
90000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
90000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
90000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
90000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
9000043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
9000043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
9000043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r10
90000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r11
90000442:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
90000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
90000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
90000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
9000044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
9000044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
9000044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
90000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
90000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
90000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
9000045a:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
9000045c:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
9000045e:	4770      	bx	lr

90000460 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
90000460:	4926      	ldr	r1, [pc, #152]	; (900004fc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
90000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
90000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
90000468:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
9000046a:	4b25      	ldr	r3, [pc, #148]	; (90000500 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
9000046c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
9000046e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
90000470:	d008      	beq.n	90000484 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
90000472:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
90000476:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
90000478:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
9000047a:	d103      	bne.n	90000484 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
9000047c:	4b21      	ldr	r3, [pc, #132]	; (90000504 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
9000047e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
90000482:	6018      	str	r0, [r3, #0]

90000484 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
90000484:	4920      	ldr	r1, [pc, #128]	; (90000508 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
90000486:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
90000488:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
9000048a:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
9000048c:	d004      	beq.n	90000498 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
9000048e:	4b1f      	ldr	r3, [pc, #124]	; (9000050c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
90000490:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
90000494:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
90000496:	e008      	b.n	900004aa <__tx_timer_done>

90000498 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
90000498:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
9000049c:	4b1c      	ldr	r3, [pc, #112]	; (90000510 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
9000049e:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
900004a0:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
900004a2:	d101      	bne.n	900004a8 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
900004a4:	4b1b      	ldr	r3, [pc, #108]	; (90000514 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
900004a6:	6818      	ldr	r0, [r3, #0]

900004a8 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
900004a8:	6008      	str	r0, [r1, #0]

900004aa <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
900004aa:	4b16      	ldr	r3, [pc, #88]	; (90000504 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
900004ac:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
900004ae:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
900004b0:	d103      	bne.n	900004ba <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
900004b2:	4916      	ldr	r1, [pc, #88]	; (9000050c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
900004b4:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
900004b6:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
900004b8:	d01c      	beq.n	900004f4 <__tx_timer_nothing_expired>

900004ba <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
900004ba:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
900004be:	4913      	ldr	r1, [pc, #76]	; (9000050c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
900004c0:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
900004c2:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
900004c4:	d001      	beq.n	900004ca <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
900004c6:	f00c fced 	bl	9000cea4 <_tx_timer_expiration_process>

900004ca <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
900004ca:	4b0e      	ldr	r3, [pc, #56]	; (90000504 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
900004cc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
900004ce:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
900004d0:	d00e      	beq.n	900004f0 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
900004d2:	f00c fbd1 	bl	9000cc78 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
900004d6:	4810      	ldr	r0, [pc, #64]	; (90000518 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
900004d8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
900004da:	b949      	cbnz	r1, 900004f0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
900004dc:	480f      	ldr	r0, [pc, #60]	; (9000051c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
900004de:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
900004e0:	4a0f      	ldr	r2, [pc, #60]	; (90000520 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
900004e2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
900004e4:	480f      	ldr	r0, [pc, #60]	; (90000524 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
900004e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
900004ea:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
900004ec:	d000      	beq.n	900004f0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
900004ee:	6002      	str	r2, [r0, #0]

900004f0 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
900004f0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

900004f4 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
900004f4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
900004f8:	4770      	bx	lr
900004fa:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
900004fc:	2401cde0 	.word	0x2401cde0
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
90000500:	2401c904 	.word	0x2401c904
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
90000504:	2401cddc 	.word	0x2401cddc
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
90000508:	2401c87c 	.word	0x2401c87c
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
9000050c:	2401c900 	.word	0x2401c900
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
90000510:	2401c90c 	.word	0x2401c90c
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
90000514:	2401c9c8 	.word	0x2401c9c8
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
90000518:	2401c868 	.word	0x2401c868
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
9000051c:	2401c86c 	.word	0x2401c86c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
90000520:	2401c870 	.word	0x2401c870
    LDR     r0, =0xE000ED04                         @ Build address of control register
90000524:	e000ed04 	.word	0xe000ed04
	...

90000530 <memchr>:
90000530:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000534:	2a10      	cmp	r2, #16
90000536:	db2b      	blt.n	90000590 <memchr+0x60>
90000538:	f010 0f07 	tst.w	r0, #7
9000053c:	d008      	beq.n	90000550 <memchr+0x20>
9000053e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000542:	3a01      	subs	r2, #1
90000544:	428b      	cmp	r3, r1
90000546:	d02d      	beq.n	900005a4 <memchr+0x74>
90000548:	f010 0f07 	tst.w	r0, #7
9000054c:	b342      	cbz	r2, 900005a0 <memchr+0x70>
9000054e:	d1f6      	bne.n	9000053e <memchr+0xe>
90000550:	b4f0      	push	{r4, r5, r6, r7}
90000552:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000556:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000055a:	f022 0407 	bic.w	r4, r2, #7
9000055e:	f07f 0700 	mvns.w	r7, #0
90000562:	2300      	movs	r3, #0
90000564:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000568:	3c08      	subs	r4, #8
9000056a:	ea85 0501 	eor.w	r5, r5, r1
9000056e:	ea86 0601 	eor.w	r6, r6, r1
90000572:	fa85 f547 	uadd8	r5, r5, r7
90000576:	faa3 f587 	sel	r5, r3, r7
9000057a:	fa86 f647 	uadd8	r6, r6, r7
9000057e:	faa5 f687 	sel	r6, r5, r7
90000582:	b98e      	cbnz	r6, 900005a8 <memchr+0x78>
90000584:	d1ee      	bne.n	90000564 <memchr+0x34>
90000586:	bcf0      	pop	{r4, r5, r6, r7}
90000588:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000058c:	f002 0207 	and.w	r2, r2, #7
90000590:	b132      	cbz	r2, 900005a0 <memchr+0x70>
90000592:	f810 3b01 	ldrb.w	r3, [r0], #1
90000596:	3a01      	subs	r2, #1
90000598:	ea83 0301 	eor.w	r3, r3, r1
9000059c:	b113      	cbz	r3, 900005a4 <memchr+0x74>
9000059e:	d1f8      	bne.n	90000592 <memchr+0x62>
900005a0:	2000      	movs	r0, #0
900005a2:	4770      	bx	lr
900005a4:	3801      	subs	r0, #1
900005a6:	4770      	bx	lr
900005a8:	2d00      	cmp	r5, #0
900005aa:	bf06      	itte	eq
900005ac:	4635      	moveq	r5, r6
900005ae:	3803      	subeq	r0, #3
900005b0:	3807      	subne	r0, #7
900005b2:	f015 0f01 	tst.w	r5, #1
900005b6:	d107      	bne.n	900005c8 <memchr+0x98>
900005b8:	3001      	adds	r0, #1
900005ba:	f415 7f80 	tst.w	r5, #256	; 0x100
900005be:	bf02      	ittt	eq
900005c0:	3001      	addeq	r0, #1
900005c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900005c6:	3001      	addeq	r0, #1
900005c8:	bcf0      	pop	{r4, r5, r6, r7}
900005ca:	3801      	subs	r0, #1
900005cc:	4770      	bx	lr
900005ce:	bf00      	nop

900005d0 <__aeabi_uldivmod>:
900005d0:	b953      	cbnz	r3, 900005e8 <__aeabi_uldivmod+0x18>
900005d2:	b94a      	cbnz	r2, 900005e8 <__aeabi_uldivmod+0x18>
900005d4:	2900      	cmp	r1, #0
900005d6:	bf08      	it	eq
900005d8:	2800      	cmpeq	r0, #0
900005da:	bf1c      	itt	ne
900005dc:	f04f 31ff 	movne.w	r1, #4294967295
900005e0:	f04f 30ff 	movne.w	r0, #4294967295
900005e4:	f000 b972 	b.w	900008cc <__aeabi_idiv0>
900005e8:	f1ad 0c08 	sub.w	ip, sp, #8
900005ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900005f0:	f000 f806 	bl	90000600 <__udivmoddi4>
900005f4:	f8dd e004 	ldr.w	lr, [sp, #4]
900005f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900005fc:	b004      	add	sp, #16
900005fe:	4770      	bx	lr

90000600 <__udivmoddi4>:
90000600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000604:	9e08      	ldr	r6, [sp, #32]
90000606:	4604      	mov	r4, r0
90000608:	4688      	mov	r8, r1
9000060a:	2b00      	cmp	r3, #0
9000060c:	d14b      	bne.n	900006a6 <__udivmoddi4+0xa6>
9000060e:	428a      	cmp	r2, r1
90000610:	4615      	mov	r5, r2
90000612:	d967      	bls.n	900006e4 <__udivmoddi4+0xe4>
90000614:	fab2 f282 	clz	r2, r2
90000618:	b14a      	cbz	r2, 9000062e <__udivmoddi4+0x2e>
9000061a:	f1c2 0720 	rsb	r7, r2, #32
9000061e:	fa01 f302 	lsl.w	r3, r1, r2
90000622:	fa20 f707 	lsr.w	r7, r0, r7
90000626:	4095      	lsls	r5, r2
90000628:	ea47 0803 	orr.w	r8, r7, r3
9000062c:	4094      	lsls	r4, r2
9000062e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
90000632:	0c23      	lsrs	r3, r4, #16
90000634:	fbb8 f7fe 	udiv	r7, r8, lr
90000638:	fa1f fc85 	uxth.w	ip, r5
9000063c:	fb0e 8817 	mls	r8, lr, r7, r8
90000640:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
90000644:	fb07 f10c 	mul.w	r1, r7, ip
90000648:	4299      	cmp	r1, r3
9000064a:	d909      	bls.n	90000660 <__udivmoddi4+0x60>
9000064c:	18eb      	adds	r3, r5, r3
9000064e:	f107 30ff 	add.w	r0, r7, #4294967295
90000652:	f080 811b 	bcs.w	9000088c <__udivmoddi4+0x28c>
90000656:	4299      	cmp	r1, r3
90000658:	f240 8118 	bls.w	9000088c <__udivmoddi4+0x28c>
9000065c:	3f02      	subs	r7, #2
9000065e:	442b      	add	r3, r5
90000660:	1a5b      	subs	r3, r3, r1
90000662:	b2a4      	uxth	r4, r4
90000664:	fbb3 f0fe 	udiv	r0, r3, lr
90000668:	fb0e 3310 	mls	r3, lr, r0, r3
9000066c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000670:	fb00 fc0c 	mul.w	ip, r0, ip
90000674:	45a4      	cmp	ip, r4
90000676:	d909      	bls.n	9000068c <__udivmoddi4+0x8c>
90000678:	192c      	adds	r4, r5, r4
9000067a:	f100 33ff 	add.w	r3, r0, #4294967295
9000067e:	f080 8107 	bcs.w	90000890 <__udivmoddi4+0x290>
90000682:	45a4      	cmp	ip, r4
90000684:	f240 8104 	bls.w	90000890 <__udivmoddi4+0x290>
90000688:	3802      	subs	r0, #2
9000068a:	442c      	add	r4, r5
9000068c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
90000690:	eba4 040c 	sub.w	r4, r4, ip
90000694:	2700      	movs	r7, #0
90000696:	b11e      	cbz	r6, 900006a0 <__udivmoddi4+0xa0>
90000698:	40d4      	lsrs	r4, r2
9000069a:	2300      	movs	r3, #0
9000069c:	e9c6 4300 	strd	r4, r3, [r6]
900006a0:	4639      	mov	r1, r7
900006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900006a6:	428b      	cmp	r3, r1
900006a8:	d909      	bls.n	900006be <__udivmoddi4+0xbe>
900006aa:	2e00      	cmp	r6, #0
900006ac:	f000 80eb 	beq.w	90000886 <__udivmoddi4+0x286>
900006b0:	2700      	movs	r7, #0
900006b2:	e9c6 0100 	strd	r0, r1, [r6]
900006b6:	4638      	mov	r0, r7
900006b8:	4639      	mov	r1, r7
900006ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900006be:	fab3 f783 	clz	r7, r3
900006c2:	2f00      	cmp	r7, #0
900006c4:	d147      	bne.n	90000756 <__udivmoddi4+0x156>
900006c6:	428b      	cmp	r3, r1
900006c8:	d302      	bcc.n	900006d0 <__udivmoddi4+0xd0>
900006ca:	4282      	cmp	r2, r0
900006cc:	f200 80fa 	bhi.w	900008c4 <__udivmoddi4+0x2c4>
900006d0:	1a84      	subs	r4, r0, r2
900006d2:	eb61 0303 	sbc.w	r3, r1, r3
900006d6:	2001      	movs	r0, #1
900006d8:	4698      	mov	r8, r3
900006da:	2e00      	cmp	r6, #0
900006dc:	d0e0      	beq.n	900006a0 <__udivmoddi4+0xa0>
900006de:	e9c6 4800 	strd	r4, r8, [r6]
900006e2:	e7dd      	b.n	900006a0 <__udivmoddi4+0xa0>
900006e4:	b902      	cbnz	r2, 900006e8 <__udivmoddi4+0xe8>
900006e6:	deff      	udf	#255	; 0xff
900006e8:	fab2 f282 	clz	r2, r2
900006ec:	2a00      	cmp	r2, #0
900006ee:	f040 808f 	bne.w	90000810 <__udivmoddi4+0x210>
900006f2:	1b49      	subs	r1, r1, r5
900006f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
900006f8:	fa1f f885 	uxth.w	r8, r5
900006fc:	2701      	movs	r7, #1
900006fe:	fbb1 fcfe 	udiv	ip, r1, lr
90000702:	0c23      	lsrs	r3, r4, #16
90000704:	fb0e 111c 	mls	r1, lr, ip, r1
90000708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000070c:	fb08 f10c 	mul.w	r1, r8, ip
90000710:	4299      	cmp	r1, r3
90000712:	d907      	bls.n	90000724 <__udivmoddi4+0x124>
90000714:	18eb      	adds	r3, r5, r3
90000716:	f10c 30ff 	add.w	r0, ip, #4294967295
9000071a:	d202      	bcs.n	90000722 <__udivmoddi4+0x122>
9000071c:	4299      	cmp	r1, r3
9000071e:	f200 80cd 	bhi.w	900008bc <__udivmoddi4+0x2bc>
90000722:	4684      	mov	ip, r0
90000724:	1a59      	subs	r1, r3, r1
90000726:	b2a3      	uxth	r3, r4
90000728:	fbb1 f0fe 	udiv	r0, r1, lr
9000072c:	fb0e 1410 	mls	r4, lr, r0, r1
90000730:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
90000734:	fb08 f800 	mul.w	r8, r8, r0
90000738:	45a0      	cmp	r8, r4
9000073a:	d907      	bls.n	9000074c <__udivmoddi4+0x14c>
9000073c:	192c      	adds	r4, r5, r4
9000073e:	f100 33ff 	add.w	r3, r0, #4294967295
90000742:	d202      	bcs.n	9000074a <__udivmoddi4+0x14a>
90000744:	45a0      	cmp	r8, r4
90000746:	f200 80b6 	bhi.w	900008b6 <__udivmoddi4+0x2b6>
9000074a:	4618      	mov	r0, r3
9000074c:	eba4 0408 	sub.w	r4, r4, r8
90000750:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
90000754:	e79f      	b.n	90000696 <__udivmoddi4+0x96>
90000756:	f1c7 0c20 	rsb	ip, r7, #32
9000075a:	40bb      	lsls	r3, r7
9000075c:	fa22 fe0c 	lsr.w	lr, r2, ip
90000760:	ea4e 0e03 	orr.w	lr, lr, r3
90000764:	fa01 f407 	lsl.w	r4, r1, r7
90000768:	fa20 f50c 	lsr.w	r5, r0, ip
9000076c:	fa21 f30c 	lsr.w	r3, r1, ip
90000770:	ea4f 481e 	mov.w	r8, lr, lsr #16
90000774:	4325      	orrs	r5, r4
90000776:	fbb3 f9f8 	udiv	r9, r3, r8
9000077a:	0c2c      	lsrs	r4, r5, #16
9000077c:	fb08 3319 	mls	r3, r8, r9, r3
90000780:	fa1f fa8e 	uxth.w	sl, lr
90000784:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
90000788:	fb09 f40a 	mul.w	r4, r9, sl
9000078c:	429c      	cmp	r4, r3
9000078e:	fa02 f207 	lsl.w	r2, r2, r7
90000792:	fa00 f107 	lsl.w	r1, r0, r7
90000796:	d90b      	bls.n	900007b0 <__udivmoddi4+0x1b0>
90000798:	eb1e 0303 	adds.w	r3, lr, r3
9000079c:	f109 30ff 	add.w	r0, r9, #4294967295
900007a0:	f080 8087 	bcs.w	900008b2 <__udivmoddi4+0x2b2>
900007a4:	429c      	cmp	r4, r3
900007a6:	f240 8084 	bls.w	900008b2 <__udivmoddi4+0x2b2>
900007aa:	f1a9 0902 	sub.w	r9, r9, #2
900007ae:	4473      	add	r3, lr
900007b0:	1b1b      	subs	r3, r3, r4
900007b2:	b2ad      	uxth	r5, r5
900007b4:	fbb3 f0f8 	udiv	r0, r3, r8
900007b8:	fb08 3310 	mls	r3, r8, r0, r3
900007bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
900007c0:	fb00 fa0a 	mul.w	sl, r0, sl
900007c4:	45a2      	cmp	sl, r4
900007c6:	d908      	bls.n	900007da <__udivmoddi4+0x1da>
900007c8:	eb1e 0404 	adds.w	r4, lr, r4
900007cc:	f100 33ff 	add.w	r3, r0, #4294967295
900007d0:	d26b      	bcs.n	900008aa <__udivmoddi4+0x2aa>
900007d2:	45a2      	cmp	sl, r4
900007d4:	d969      	bls.n	900008aa <__udivmoddi4+0x2aa>
900007d6:	3802      	subs	r0, #2
900007d8:	4474      	add	r4, lr
900007da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
900007de:	fba0 8902 	umull	r8, r9, r0, r2
900007e2:	eba4 040a 	sub.w	r4, r4, sl
900007e6:	454c      	cmp	r4, r9
900007e8:	46c2      	mov	sl, r8
900007ea:	464b      	mov	r3, r9
900007ec:	d354      	bcc.n	90000898 <__udivmoddi4+0x298>
900007ee:	d051      	beq.n	90000894 <__udivmoddi4+0x294>
900007f0:	2e00      	cmp	r6, #0
900007f2:	d069      	beq.n	900008c8 <__udivmoddi4+0x2c8>
900007f4:	ebb1 050a 	subs.w	r5, r1, sl
900007f8:	eb64 0403 	sbc.w	r4, r4, r3
900007fc:	fa04 fc0c 	lsl.w	ip, r4, ip
90000800:	40fd      	lsrs	r5, r7
90000802:	40fc      	lsrs	r4, r7
90000804:	ea4c 0505 	orr.w	r5, ip, r5
90000808:	e9c6 5400 	strd	r5, r4, [r6]
9000080c:	2700      	movs	r7, #0
9000080e:	e747      	b.n	900006a0 <__udivmoddi4+0xa0>
90000810:	f1c2 0320 	rsb	r3, r2, #32
90000814:	fa20 f703 	lsr.w	r7, r0, r3
90000818:	4095      	lsls	r5, r2
9000081a:	fa01 f002 	lsl.w	r0, r1, r2
9000081e:	fa21 f303 	lsr.w	r3, r1, r3
90000822:	ea4f 4e15 	mov.w	lr, r5, lsr #16
90000826:	4338      	orrs	r0, r7
90000828:	0c01      	lsrs	r1, r0, #16
9000082a:	fbb3 f7fe 	udiv	r7, r3, lr
9000082e:	fa1f f885 	uxth.w	r8, r5
90000832:	fb0e 3317 	mls	r3, lr, r7, r3
90000836:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000083a:	fb07 f308 	mul.w	r3, r7, r8
9000083e:	428b      	cmp	r3, r1
90000840:	fa04 f402 	lsl.w	r4, r4, r2
90000844:	d907      	bls.n	90000856 <__udivmoddi4+0x256>
90000846:	1869      	adds	r1, r5, r1
90000848:	f107 3cff 	add.w	ip, r7, #4294967295
9000084c:	d22f      	bcs.n	900008ae <__udivmoddi4+0x2ae>
9000084e:	428b      	cmp	r3, r1
90000850:	d92d      	bls.n	900008ae <__udivmoddi4+0x2ae>
90000852:	3f02      	subs	r7, #2
90000854:	4429      	add	r1, r5
90000856:	1acb      	subs	r3, r1, r3
90000858:	b281      	uxth	r1, r0
9000085a:	fbb3 f0fe 	udiv	r0, r3, lr
9000085e:	fb0e 3310 	mls	r3, lr, r0, r3
90000862:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000866:	fb00 f308 	mul.w	r3, r0, r8
9000086a:	428b      	cmp	r3, r1
9000086c:	d907      	bls.n	9000087e <__udivmoddi4+0x27e>
9000086e:	1869      	adds	r1, r5, r1
90000870:	f100 3cff 	add.w	ip, r0, #4294967295
90000874:	d217      	bcs.n	900008a6 <__udivmoddi4+0x2a6>
90000876:	428b      	cmp	r3, r1
90000878:	d915      	bls.n	900008a6 <__udivmoddi4+0x2a6>
9000087a:	3802      	subs	r0, #2
9000087c:	4429      	add	r1, r5
9000087e:	1ac9      	subs	r1, r1, r3
90000880:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
90000884:	e73b      	b.n	900006fe <__udivmoddi4+0xfe>
90000886:	4637      	mov	r7, r6
90000888:	4630      	mov	r0, r6
9000088a:	e709      	b.n	900006a0 <__udivmoddi4+0xa0>
9000088c:	4607      	mov	r7, r0
9000088e:	e6e7      	b.n	90000660 <__udivmoddi4+0x60>
90000890:	4618      	mov	r0, r3
90000892:	e6fb      	b.n	9000068c <__udivmoddi4+0x8c>
90000894:	4541      	cmp	r1, r8
90000896:	d2ab      	bcs.n	900007f0 <__udivmoddi4+0x1f0>
90000898:	ebb8 0a02 	subs.w	sl, r8, r2
9000089c:	eb69 020e 	sbc.w	r2, r9, lr
900008a0:	3801      	subs	r0, #1
900008a2:	4613      	mov	r3, r2
900008a4:	e7a4      	b.n	900007f0 <__udivmoddi4+0x1f0>
900008a6:	4660      	mov	r0, ip
900008a8:	e7e9      	b.n	9000087e <__udivmoddi4+0x27e>
900008aa:	4618      	mov	r0, r3
900008ac:	e795      	b.n	900007da <__udivmoddi4+0x1da>
900008ae:	4667      	mov	r7, ip
900008b0:	e7d1      	b.n	90000856 <__udivmoddi4+0x256>
900008b2:	4681      	mov	r9, r0
900008b4:	e77c      	b.n	900007b0 <__udivmoddi4+0x1b0>
900008b6:	3802      	subs	r0, #2
900008b8:	442c      	add	r4, r5
900008ba:	e747      	b.n	9000074c <__udivmoddi4+0x14c>
900008bc:	f1ac 0c02 	sub.w	ip, ip, #2
900008c0:	442b      	add	r3, r5
900008c2:	e72f      	b.n	90000724 <__udivmoddi4+0x124>
900008c4:	4638      	mov	r0, r7
900008c6:	e708      	b.n	900006da <__udivmoddi4+0xda>
900008c8:	4637      	mov	r7, r6
900008ca:	e6e9      	b.n	900006a0 <__udivmoddi4+0xa0>

900008cc <__aeabi_idiv0>:
900008cc:	4770      	bx	lr
900008ce:	bf00      	nop

900008d0 <threadx_entry_main>:

void	thread_0_entry(ULONG thread_input);
void	thread_1_entry(ULONG thread_input);

int threadx_entry_main(void)
{
900008d0:	b580      	push	{r7, lr}
900008d2:	af00      	add	r7, sp, #0
	tx_kernel_enter();
900008d4:	f00b fa5a 	bl	9000bd8c <_tx_initialize_kernel_enter>
	return 0;
900008d8:	2300      	movs	r3, #0
}
900008da:	4618      	mov	r0, r3
900008dc:	bd80      	pop	{r7, pc}
	...

900008e0 <tx_application_define>:


void tx_application_define(void* first_unused_memory)
{
900008e0:	b580      	push	{r7, lr}
900008e2:	b08c      	sub	sp, #48	; 0x30
900008e4:	af08      	add	r7, sp, #32
900008e6:	6078      	str	r0, [r7, #4]
	CHAR* pointer = TX_NULL;
900008e8:	2300      	movs	r3, #0
900008ea:	60fb      	str	r3, [r7, #12]

	trace_status = tx_trace_enable(&trace_buffer_start, TRACE_BUFF_SIZE, TRACE_REG_ENTRIES);
900008ec:	2228      	movs	r2, #40	; 0x28
900008ee:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
900008f2:	482c      	ldr	r0, [pc, #176]	; (900009a4 <tx_application_define+0xc4>)
900008f4:	f00c fcfa 	bl	9000d2ec <_tx_trace_enable>
900008f8:	4602      	mov	r2, r0
900008fa:	4b2b      	ldr	r3, [pc, #172]	; (900009a8 <tx_application_define+0xc8>)
900008fc:	601a      	str	r2, [r3, #0]

	if(trace_status == TX_SUCCESS)
900008fe:	4b2a      	ldr	r3, [pc, #168]	; (900009a8 <tx_application_define+0xc8>)
90000900:	681b      	ldr	r3, [r3, #0]
90000902:	2b00      	cmp	r3, #0
90000904:	d103      	bne.n	9000090e <tx_application_define+0x2e>
	{
		printf("TraceX enable success !\r\n");
90000906:	4829      	ldr	r0, [pc, #164]	; (900009ac <tx_application_define+0xcc>)
90000908:	f00d fbc4 	bl	9000e094 <puts>
9000090c:	e002      	b.n	90000914 <tx_application_define+0x34>
	}
	else
	{
		printf("TraceX enable fail!\r\n");
9000090e:	4828      	ldr	r0, [pc, #160]	; (900009b0 <tx_application_define+0xd0>)
90000910:	f00d fbc0 	bl	9000e094 <puts>
	}

	tx_byte_pool_create(&byte_pool_0,"byte pool 0",memory_area,DEMO_BYTE_POOL_SIZE);
90000914:	2334      	movs	r3, #52	; 0x34
90000916:	9300      	str	r3, [sp, #0]
90000918:	f242 33a0 	movw	r3, #9120	; 0x23a0
9000091c:	4a25      	ldr	r2, [pc, #148]	; (900009b4 <tx_application_define+0xd4>)
9000091e:	4926      	ldr	r1, [pc, #152]	; (900009b8 <tx_application_define+0xd8>)
90000920:	4826      	ldr	r0, [pc, #152]	; (900009bc <tx_application_define+0xdc>)
90000922:	f00d f98b 	bl	9000dc3c <_txe_byte_pool_create>


	tx_byte_allocate(&byte_pool_0,(VOID **)&pointer, DEMO_STATCK_SIZE,TX_NO_WAIT);
90000926:	f107 010c 	add.w	r1, r7, #12
9000092a:	2300      	movs	r3, #0
9000092c:	f44f 6280 	mov.w	r2, #1024	; 0x400
90000930:	4822      	ldr	r0, [pc, #136]	; (900009bc <tx_application_define+0xdc>)
90000932:	f00d f90f 	bl	9000db54 <_txe_byte_allocate>
	tx_thread_create(&thread_0,"thread 0",thread_0_entry,0,
90000936:	68fb      	ldr	r3, [r7, #12]
90000938:	22b4      	movs	r2, #180	; 0xb4
9000093a:	9206      	str	r2, [sp, #24]
9000093c:	2201      	movs	r2, #1
9000093e:	9205      	str	r2, [sp, #20]
90000940:	2204      	movs	r2, #4
90000942:	9204      	str	r2, [sp, #16]
90000944:	2210      	movs	r2, #16
90000946:	9203      	str	r2, [sp, #12]
90000948:	2210      	movs	r2, #16
9000094a:	9202      	str	r2, [sp, #8]
9000094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
90000950:	9201      	str	r2, [sp, #4]
90000952:	9300      	str	r3, [sp, #0]
90000954:	2300      	movs	r3, #0
90000956:	4a1a      	ldr	r2, [pc, #104]	; (900009c0 <tx_application_define+0xe0>)
90000958:	491a      	ldr	r1, [pc, #104]	; (900009c4 <tx_application_define+0xe4>)
9000095a:	481b      	ldr	r0, [pc, #108]	; (900009c8 <tx_application_define+0xe8>)
9000095c:	f00d fa08 	bl	9000dd70 <_txe_thread_create>
			pointer,DEMO_STATCK_SIZE,16,16,4,TX_AUTO_START);

	tx_byte_allocate(&byte_pool_0,(VOID **)&pointer, DEMO_STATCK_SIZE,TX_NO_WAIT);
90000960:	f107 010c 	add.w	r1, r7, #12
90000964:	2300      	movs	r3, #0
90000966:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000096a:	4814      	ldr	r0, [pc, #80]	; (900009bc <tx_application_define+0xdc>)
9000096c:	f00d f8f2 	bl	9000db54 <_txe_byte_allocate>
	tx_thread_create(&thread_1,"thread 1",thread_1_entry,1,
90000970:	68fb      	ldr	r3, [r7, #12]
90000972:	22b4      	movs	r2, #180	; 0xb4
90000974:	9206      	str	r2, [sp, #24]
90000976:	2201      	movs	r2, #1
90000978:	9205      	str	r2, [sp, #20]
9000097a:	2204      	movs	r2, #4
9000097c:	9204      	str	r2, [sp, #16]
9000097e:	2210      	movs	r2, #16
90000980:	9203      	str	r2, [sp, #12]
90000982:	2210      	movs	r2, #16
90000984:	9202      	str	r2, [sp, #8]
90000986:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000098a:	9201      	str	r2, [sp, #4]
9000098c:	9300      	str	r3, [sp, #0]
9000098e:	2301      	movs	r3, #1
90000990:	4a0e      	ldr	r2, [pc, #56]	; (900009cc <tx_application_define+0xec>)
90000992:	490f      	ldr	r1, [pc, #60]	; (900009d0 <tx_application_define+0xf0>)
90000994:	480f      	ldr	r0, [pc, #60]	; (900009d4 <tx_application_define+0xf4>)
90000996:	f00d f9eb 	bl	9000dd70 <_txe_thread_create>
				pointer,DEMO_STATCK_SIZE,16,16,4,TX_AUTO_START);

}
9000099a:	bf00      	nop
9000099c:	3710      	adds	r7, #16
9000099e:	46bd      	mov	sp, r7
900009a0:	bd80      	pop	{r7, pc}
900009a2:	bf00      	nop
900009a4:	2400a0b4 	.word	0x2400a0b4
900009a8:	24019ab4 	.word	0x24019ab4
900009ac:	9000ee54 	.word	0x9000ee54
900009b0:	9000ee70 	.word	0x9000ee70
900009b4:	24019ba8 	.word	0x24019ba8
900009b8:	9000ee88 	.word	0x9000ee88
900009bc:	24019b74 	.word	0x24019b74
900009c0:	900009d9 	.word	0x900009d9
900009c4:	9000ee94 	.word	0x9000ee94
900009c8:	2401bf48 	.word	0x2401bf48
900009cc:	900009f9 	.word	0x900009f9
900009d0:	9000eea0 	.word	0x9000eea0
900009d4:	24019abc 	.word	0x24019abc

900009d8 <thread_0_entry>:


void thread_0_entry(ULONG thread_input)
{
900009d8:	b580      	push	{r7, lr}
900009da:	b082      	sub	sp, #8
900009dc:	af00      	add	r7, sp, #0
900009de:	6078      	str	r0, [r7, #4]
//	UINT status;

	while(1)
	{
		thread_0_counter++;
900009e0:	4b04      	ldr	r3, [pc, #16]	; (900009f4 <thread_0_entry+0x1c>)
900009e2:	681b      	ldr	r3, [r3, #0]
900009e4:	3301      	adds	r3, #1
900009e6:	4a03      	ldr	r2, [pc, #12]	; (900009f4 <thread_0_entry+0x1c>)
900009e8:	6013      	str	r3, [r2, #0]
		tx_thread_sleep(100);
900009ea:	2064      	movs	r0, #100	; 0x64
900009ec:	f00b fc02 	bl	9000c1f4 <_tx_thread_sleep>
		thread_0_counter++;
900009f0:	e7f6      	b.n	900009e0 <thread_0_entry+0x8>
900009f2:	bf00      	nop
900009f4:	24019ab8 	.word	0x24019ab8

900009f8 <thread_1_entry>:
	}
}

void thread_1_entry(ULONG thread_input)
{
900009f8:	b580      	push	{r7, lr}
900009fa:	b084      	sub	sp, #16
900009fc:	af02      	add	r7, sp, #8
900009fe:	6078      	str	r0, [r7, #4]
//	UINT status;
	if(HAL_DMA2D_Start(&hdma2d, (uint32_t)_ac5_16, (uint32_t)0xc0000000, 128, 160) != HAL_OK){}
90000a00:	4910      	ldr	r1, [pc, #64]	; (90000a44 <thread_1_entry+0x4c>)
90000a02:	23a0      	movs	r3, #160	; 0xa0
90000a04:	9300      	str	r3, [sp, #0]
90000a06:	2380      	movs	r3, #128	; 0x80
90000a08:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
90000a0c:	480e      	ldr	r0, [pc, #56]	; (90000a48 <thread_1_entry+0x50>)
90000a0e:	f002 f8a3 	bl	90002b58 <HAL_DMA2D_Start>

	while(1)
	{
		thread_1_counter++;
90000a12:	4b0e      	ldr	r3, [pc, #56]	; (90000a4c <thread_1_entry+0x54>)
90000a14:	681b      	ldr	r3, [r3, #0]
90000a16:	3301      	adds	r3, #1
90000a18:	4a0c      	ldr	r2, [pc, #48]	; (90000a4c <thread_1_entry+0x54>)
90000a1a:	6013      	str	r3, [r2, #0]

	    if (thread_1_counter > 181)
90000a1c:	4b0b      	ldr	r3, [pc, #44]	; (90000a4c <thread_1_entry+0x54>)
90000a1e:	681b      	ldr	r3, [r3, #0]
90000a20:	2bb5      	cmp	r3, #181	; 0xb5
90000a22:	d902      	bls.n	90000a2a <thread_1_entry+0x32>
	    {
	    	thread_1_counter = 1;
90000a24:	4b09      	ldr	r3, [pc, #36]	; (90000a4c <thread_1_entry+0x54>)
90000a26:	2201      	movs	r2, #1
90000a28:	601a      	str	r2, [r3, #0]
	    }

	    HAL_LTDC_SetWindowPosition(&hltdc, (thread_1_counter*4), 0, 0);
90000a2a:	4b08      	ldr	r3, [pc, #32]	; (90000a4c <thread_1_entry+0x54>)
90000a2c:	681b      	ldr	r3, [r3, #0]
90000a2e:	0099      	lsls	r1, r3, #2
90000a30:	2300      	movs	r3, #0
90000a32:	2200      	movs	r2, #0
90000a34:	4806      	ldr	r0, [pc, #24]	; (90000a50 <thread_1_entry+0x58>)
90000a36:	f002 ffe7 	bl	90003a08 <HAL_LTDC_SetWindowPosition>

		tx_thread_sleep(50);
90000a3a:	2032      	movs	r0, #50	; 0x32
90000a3c:	f00b fbda 	bl	9000c1f4 <_tx_thread_sleep>
		thread_1_counter++;
90000a40:	e7e7      	b.n	90000a12 <thread_1_entry+0x1a>
90000a42:	bf00      	nop
90000a44:	24000000 	.word	0x24000000
90000a48:	2401c020 	.word	0x2401c020
90000a4c:	24019b70 	.word	0x24019b70
90000a50:	2401c108 	.word	0x2401c108

90000a54 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
90000a54:	b580      	push	{r7, lr}
90000a56:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
90000a58:	4b0d      	ldr	r3, [pc, #52]	; (90000a90 <MX_CRC_Init+0x3c>)
90000a5a:	4a0e      	ldr	r2, [pc, #56]	; (90000a94 <MX_CRC_Init+0x40>)
90000a5c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90000a5e:	4b0c      	ldr	r3, [pc, #48]	; (90000a90 <MX_CRC_Init+0x3c>)
90000a60:	2200      	movs	r2, #0
90000a62:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
90000a64:	4b0a      	ldr	r3, [pc, #40]	; (90000a90 <MX_CRC_Init+0x3c>)
90000a66:	2200      	movs	r2, #0
90000a68:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
90000a6a:	4b09      	ldr	r3, [pc, #36]	; (90000a90 <MX_CRC_Init+0x3c>)
90000a6c:	2200      	movs	r2, #0
90000a6e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
90000a70:	4b07      	ldr	r3, [pc, #28]	; (90000a90 <MX_CRC_Init+0x3c>)
90000a72:	2200      	movs	r2, #0
90000a74:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90000a76:	4b06      	ldr	r3, [pc, #24]	; (90000a90 <MX_CRC_Init+0x3c>)
90000a78:	2201      	movs	r2, #1
90000a7a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90000a7c:	4804      	ldr	r0, [pc, #16]	; (90000a90 <MX_CRC_Init+0x3c>)
90000a7e:	f001 fcd9 	bl	90002434 <HAL_CRC_Init>
90000a82:	4603      	mov	r3, r0
90000a84:	2b00      	cmp	r3, #0
90000a86:	d001      	beq.n	90000a8c <MX_CRC_Init+0x38>
  {
    Error_Handler();
90000a88:	f000 fdfc 	bl	90001684 <Error_Handler>
  }

}
90000a8c:	bf00      	nop
90000a8e:	bd80      	pop	{r7, pc}
90000a90:	2401bffc 	.word	0x2401bffc
90000a94:	58024c00 	.word	0x58024c00

90000a98 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
90000a98:	b480      	push	{r7}
90000a9a:	b085      	sub	sp, #20
90000a9c:	af00      	add	r7, sp, #0
90000a9e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
90000aa0:	687b      	ldr	r3, [r7, #4]
90000aa2:	681b      	ldr	r3, [r3, #0]
90000aa4:	4a0b      	ldr	r2, [pc, #44]	; (90000ad4 <HAL_CRC_MspInit+0x3c>)
90000aa6:	4293      	cmp	r3, r2
90000aa8:	d10e      	bne.n	90000ac8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90000aaa:	4b0b      	ldr	r3, [pc, #44]	; (90000ad8 <HAL_CRC_MspInit+0x40>)
90000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ab0:	4a09      	ldr	r2, [pc, #36]	; (90000ad8 <HAL_CRC_MspInit+0x40>)
90000ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000aba:	4b07      	ldr	r3, [pc, #28]	; (90000ad8 <HAL_CRC_MspInit+0x40>)
90000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90000ac4:	60fb      	str	r3, [r7, #12]
90000ac6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
90000ac8:	bf00      	nop
90000aca:	3714      	adds	r7, #20
90000acc:	46bd      	mov	sp, r7
90000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ad2:	4770      	bx	lr
90000ad4:	58024c00 	.word	0x58024c00
90000ad8:	58024400 	.word	0x58024400

90000adc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
90000adc:	b580      	push	{r7, lr}
90000ade:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
90000ae0:	4b1c      	ldr	r3, [pc, #112]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000ae2:	4a1d      	ldr	r2, [pc, #116]	; (90000b58 <MX_DMA2D_Init+0x7c>)
90000ae4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
90000ae6:	4b1b      	ldr	r3, [pc, #108]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000ae8:	2200      	movs	r2, #0
90000aea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
90000aec:	4b19      	ldr	r3, [pc, #100]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000aee:	2202      	movs	r2, #2
90000af0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
90000af2:	4b18      	ldr	r3, [pc, #96]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000af4:	2200      	movs	r2, #0
90000af6:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
90000af8:	4b16      	ldr	r3, [pc, #88]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000afa:	2200      	movs	r2, #0
90000afc:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
90000afe:	4b15      	ldr	r3, [pc, #84]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b00:	2200      	movs	r2, #0
90000b02:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
90000b04:	4b13      	ldr	r3, [pc, #76]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b06:	2200      	movs	r2, #0
90000b08:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
90000b0a:	4b12      	ldr	r3, [pc, #72]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b0c:	2202      	movs	r2, #2
90000b0e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90000b10:	4b10      	ldr	r3, [pc, #64]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b12:	2200      	movs	r2, #0
90000b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
90000b16:	4b0f      	ldr	r3, [pc, #60]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b18:	2200      	movs	r2, #0
90000b1a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
90000b1c:	4b0d      	ldr	r3, [pc, #52]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b1e:	2200      	movs	r2, #0
90000b20:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
90000b22:	4b0c      	ldr	r3, [pc, #48]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b24:	2200      	movs	r2, #0
90000b26:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
90000b28:	4b0a      	ldr	r3, [pc, #40]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b2a:	2200      	movs	r2, #0
90000b2c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90000b2e:	4809      	ldr	r0, [pc, #36]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b30:	f001 ffae 	bl	90002a90 <HAL_DMA2D_Init>
90000b34:	4603      	mov	r3, r0
90000b36:	2b00      	cmp	r3, #0
90000b38:	d001      	beq.n	90000b3e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
90000b3a:	f000 fda3 	bl	90001684 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90000b3e:	2101      	movs	r1, #1
90000b40:	4804      	ldr	r0, [pc, #16]	; (90000b54 <MX_DMA2D_Init+0x78>)
90000b42:	f002 f945 	bl	90002dd0 <HAL_DMA2D_ConfigLayer>
90000b46:	4603      	mov	r3, r0
90000b48:	2b00      	cmp	r3, #0
90000b4a:	d001      	beq.n	90000b50 <MX_DMA2D_Init+0x74>
  {
    Error_Handler();
90000b4c:	f000 fd9a 	bl	90001684 <Error_Handler>
  }

}
90000b50:	bf00      	nop
90000b52:	bd80      	pop	{r7, pc}
90000b54:	2401c020 	.word	0x2401c020
90000b58:	52001000 	.word	0x52001000

90000b5c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
90000b5c:	b580      	push	{r7, lr}
90000b5e:	b084      	sub	sp, #16
90000b60:	af00      	add	r7, sp, #0
90000b62:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
90000b64:	687b      	ldr	r3, [r7, #4]
90000b66:	681b      	ldr	r3, [r3, #0]
90000b68:	4a0e      	ldr	r2, [pc, #56]	; (90000ba4 <HAL_DMA2D_MspInit+0x48>)
90000b6a:	4293      	cmp	r3, r2
90000b6c:	d116      	bne.n	90000b9c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90000b6e:	4b0e      	ldr	r3, [pc, #56]	; (90000ba8 <HAL_DMA2D_MspInit+0x4c>)
90000b70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90000b74:	4a0c      	ldr	r2, [pc, #48]	; (90000ba8 <HAL_DMA2D_MspInit+0x4c>)
90000b76:	f043 0310 	orr.w	r3, r3, #16
90000b7a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
90000b7e:	4b0a      	ldr	r3, [pc, #40]	; (90000ba8 <HAL_DMA2D_MspInit+0x4c>)
90000b80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90000b84:	f003 0310 	and.w	r3, r3, #16
90000b88:	60fb      	str	r3, [r7, #12]
90000b8a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
90000b8c:	2200      	movs	r2, #0
90000b8e:	2100      	movs	r1, #0
90000b90:	205a      	movs	r0, #90	; 0x5a
90000b92:	f001 fc27 	bl	900023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90000b96:	205a      	movs	r0, #90	; 0x5a
90000b98:	f001 fc3e 	bl	90002418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
90000b9c:	bf00      	nop
90000b9e:	3710      	adds	r7, #16
90000ba0:	46bd      	mov	sp, r7
90000ba2:	bd80      	pop	{r7, pc}
90000ba4:	52001000 	.word	0x52001000
90000ba8:	58024400 	.word	0x58024400

90000bac <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
90000bac:	b580      	push	{r7, lr}
90000bae:	b088      	sub	sp, #32
90000bb0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
90000bb2:	1d3b      	adds	r3, r7, #4
90000bb4:	2200      	movs	r2, #0
90000bb6:	601a      	str	r2, [r3, #0]
90000bb8:	605a      	str	r2, [r3, #4]
90000bba:	609a      	str	r2, [r3, #8]
90000bbc:	60da      	str	r2, [r3, #12]
90000bbe:	611a      	str	r2, [r3, #16]
90000bc0:	615a      	str	r2, [r3, #20]
90000bc2:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
90000bc4:	4b1f      	ldr	r3, [pc, #124]	; (90000c44 <MX_FMC_Init+0x98>)
90000bc6:	4a20      	ldr	r2, [pc, #128]	; (90000c48 <MX_FMC_Init+0x9c>)
90000bc8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
90000bca:	4b1e      	ldr	r3, [pc, #120]	; (90000c44 <MX_FMC_Init+0x98>)
90000bcc:	2200      	movs	r2, #0
90000bce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
90000bd0:	4b1c      	ldr	r3, [pc, #112]	; (90000c44 <MX_FMC_Init+0x98>)
90000bd2:	2201      	movs	r2, #1
90000bd4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
90000bd6:	4b1b      	ldr	r3, [pc, #108]	; (90000c44 <MX_FMC_Init+0x98>)
90000bd8:	2208      	movs	r2, #8
90000bda:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90000bdc:	4b19      	ldr	r3, [pc, #100]	; (90000c44 <MX_FMC_Init+0x98>)
90000bde:	2210      	movs	r2, #16
90000be0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90000be2:	4b18      	ldr	r3, [pc, #96]	; (90000c44 <MX_FMC_Init+0x98>)
90000be4:	2240      	movs	r2, #64	; 0x40
90000be6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
90000be8:	4b16      	ldr	r3, [pc, #88]	; (90000c44 <MX_FMC_Init+0x98>)
90000bea:	f44f 7280 	mov.w	r2, #256	; 0x100
90000bee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90000bf0:	4b14      	ldr	r3, [pc, #80]	; (90000c44 <MX_FMC_Init+0x98>)
90000bf2:	2200      	movs	r2, #0
90000bf4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
90000bf6:	4b13      	ldr	r3, [pc, #76]	; (90000c44 <MX_FMC_Init+0x98>)
90000bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
90000bfc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90000bfe:	4b11      	ldr	r3, [pc, #68]	; (90000c44 <MX_FMC_Init+0x98>)
90000c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90000c04:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
90000c06:	4b0f      	ldr	r3, [pc, #60]	; (90000c44 <MX_FMC_Init+0x98>)
90000c08:	2200      	movs	r2, #0
90000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
90000c0c:	2302      	movs	r3, #2
90000c0e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
90000c10:	2308      	movs	r3, #8
90000c12:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
90000c14:	2306      	movs	r3, #6
90000c16:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
90000c18:	2306      	movs	r3, #6
90000c1a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
90000c1c:	2304      	movs	r3, #4
90000c1e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
90000c20:	2302      	movs	r3, #2
90000c22:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
90000c24:	2302      	movs	r3, #2
90000c26:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
90000c28:	1d3b      	adds	r3, r7, #4
90000c2a:	4619      	mov	r1, r3
90000c2c:	4805      	ldr	r0, [pc, #20]	; (90000c44 <MX_FMC_Init+0x98>)
90000c2e:	f007 fbfb 	bl	90008428 <HAL_SDRAM_Init>
90000c32:	4603      	mov	r3, r0
90000c34:	2b00      	cmp	r3, #0
90000c36:	d001      	beq.n	90000c3c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
90000c38:	f000 fd24 	bl	90001684 <Error_Handler>
  }

}
90000c3c:	bf00      	nop
90000c3e:	3720      	adds	r7, #32
90000c40:	46bd      	mov	sp, r7
90000c42:	bd80      	pop	{r7, pc}
90000c44:	2401c088 	.word	0x2401c088
90000c48:	52004140 	.word	0x52004140

90000c4c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
90000c4c:	b580      	push	{r7, lr}
90000c4e:	b086      	sub	sp, #24
90000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000c52:	1d3b      	adds	r3, r7, #4
90000c54:	2200      	movs	r2, #0
90000c56:	601a      	str	r2, [r3, #0]
90000c58:	605a      	str	r2, [r3, #4]
90000c5a:	609a      	str	r2, [r3, #8]
90000c5c:	60da      	str	r2, [r3, #12]
90000c5e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
90000c60:	4b3c      	ldr	r3, [pc, #240]	; (90000d54 <HAL_FMC_MspInit+0x108>)
90000c62:	681b      	ldr	r3, [r3, #0]
90000c64:	2b00      	cmp	r3, #0
90000c66:	d170      	bne.n	90000d4a <HAL_FMC_MspInit+0xfe>
    return;
  }
  FMC_Initialized = 1;
90000c68:	4b3a      	ldr	r3, [pc, #232]	; (90000d54 <HAL_FMC_MspInit+0x108>)
90000c6a:	2201      	movs	r2, #1
90000c6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
90000c6e:	4b3a      	ldr	r3, [pc, #232]	; (90000d58 <HAL_FMC_MspInit+0x10c>)
90000c70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90000c74:	4a38      	ldr	r2, [pc, #224]	; (90000d58 <HAL_FMC_MspInit+0x10c>)
90000c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90000c7a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
90000c7e:	4b36      	ldr	r3, [pc, #216]	; (90000d58 <HAL_FMC_MspInit+0x10c>)
90000c80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90000c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90000c88:	603b      	str	r3, [r7, #0]
90000c8a:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90000c8c:	f64f 7383 	movw	r3, #65411	; 0xff83
90000c90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c92:	2302      	movs	r3, #2
90000c94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c96:	2300      	movs	r3, #0
90000c98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c9a:	2303      	movs	r3, #3
90000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000c9e:	230c      	movs	r3, #12
90000ca0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000ca2:	1d3b      	adds	r3, r7, #4
90000ca4:	4619      	mov	r1, r3
90000ca6:	482d      	ldr	r0, [pc, #180]	; (90000d5c <HAL_FMC_MspInit+0x110>)
90000ca8:	f002 f9ec 	bl	90003084 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90000cac:	f248 1337 	movw	r3, #33079	; 0x8137
90000cb0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cb2:	2302      	movs	r3, #2
90000cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cb6:	2300      	movs	r3, #0
90000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000cba:	2303      	movs	r3, #3
90000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000cbe:	230c      	movs	r3, #12
90000cc0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000cc2:	1d3b      	adds	r3, r7, #4
90000cc4:	4619      	mov	r1, r3
90000cc6:	4826      	ldr	r0, [pc, #152]	; (90000d60 <HAL_FMC_MspInit+0x114>)
90000cc8:	f002 f9dc 	bl	90003084 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90000ccc:	f24c 7303 	movw	r3, #50947	; 0xc703
90000cd0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cd2:	2302      	movs	r3, #2
90000cd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cd6:	2300      	movs	r3, #0
90000cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000cda:	2303      	movs	r3, #3
90000cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000cde:	230c      	movs	r3, #12
90000ce0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000ce2:	1d3b      	adds	r3, r7, #4
90000ce4:	4619      	mov	r1, r3
90000ce6:	481f      	ldr	r0, [pc, #124]	; (90000d64 <HAL_FMC_MspInit+0x118>)
90000ce8:	f002 f9cc 	bl	90003084 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90000cec:	f64f 033f 	movw	r3, #63551	; 0xf83f
90000cf0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cf2:	2302      	movs	r3, #2
90000cf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cf6:	2300      	movs	r3, #0
90000cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000cfa:	2303      	movs	r3, #3
90000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000cfe:	230c      	movs	r3, #12
90000d00:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000d02:	1d3b      	adds	r3, r7, #4
90000d04:	4619      	mov	r1, r3
90000d06:	4818      	ldr	r0, [pc, #96]	; (90000d68 <HAL_FMC_MspInit+0x11c>)
90000d08:	f002 f9bc 	bl	90003084 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
90000d0c:	230c      	movs	r3, #12
90000d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d10:	2302      	movs	r3, #2
90000d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d14:	2300      	movs	r3, #0
90000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d18:	2303      	movs	r3, #3
90000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000d1c:	230c      	movs	r3, #12
90000d1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000d20:	1d3b      	adds	r3, r7, #4
90000d22:	4619      	mov	r1, r3
90000d24:	4811      	ldr	r0, [pc, #68]	; (90000d6c <HAL_FMC_MspInit+0x120>)
90000d26:	f002 f9ad 	bl	90003084 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
90000d2a:	2320      	movs	r3, #32
90000d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d2e:	2302      	movs	r3, #2
90000d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d32:	2300      	movs	r3, #0
90000d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d36:	2303      	movs	r3, #3
90000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000d3a:	230c      	movs	r3, #12
90000d3c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000d3e:	1d3b      	adds	r3, r7, #4
90000d40:	4619      	mov	r1, r3
90000d42:	480b      	ldr	r0, [pc, #44]	; (90000d70 <HAL_FMC_MspInit+0x124>)
90000d44:	f002 f99e 	bl	90003084 <HAL_GPIO_Init>
90000d48:	e000      	b.n	90000d4c <HAL_FMC_MspInit+0x100>
    return;
90000d4a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
90000d4c:	3718      	adds	r7, #24
90000d4e:	46bd      	mov	sp, r7
90000d50:	bd80      	pop	{r7, pc}
90000d52:	bf00      	nop
90000d54:	2400a094 	.word	0x2400a094
90000d58:	58024400 	.word	0x58024400
90000d5c:	58021000 	.word	0x58021000
90000d60:	58021800 	.word	0x58021800
90000d64:	58020c00 	.word	0x58020c00
90000d68:	58021400 	.word	0x58021400
90000d6c:	58020800 	.word	0x58020800
90000d70:	58021c00 	.word	0x58021c00

90000d74 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
90000d74:	b580      	push	{r7, lr}
90000d76:	b082      	sub	sp, #8
90000d78:	af00      	add	r7, sp, #0
90000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
90000d7c:	f7ff ff66 	bl	90000c4c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90000d80:	bf00      	nop
90000d82:	3708      	adds	r7, #8
90000d84:	46bd      	mov	sp, r7
90000d86:	bd80      	pop	{r7, pc}

90000d88 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
90000d88:	b580      	push	{r7, lr}
90000d8a:	b090      	sub	sp, #64	; 0x40
90000d8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d92:	2200      	movs	r2, #0
90000d94:	601a      	str	r2, [r3, #0]
90000d96:	605a      	str	r2, [r3, #4]
90000d98:	609a      	str	r2, [r3, #8]
90000d9a:	60da      	str	r2, [r3, #12]
90000d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000d9e:	4b86      	ldr	r3, [pc, #536]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000da4:	4a84      	ldr	r2, [pc, #528]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000da6:	f043 0302 	orr.w	r3, r3, #2
90000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000dae:	4b82      	ldr	r3, [pc, #520]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000db4:	f003 0302 	and.w	r3, r3, #2
90000db8:	62bb      	str	r3, [r7, #40]	; 0x28
90000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
90000dbc:	4b7e      	ldr	r3, [pc, #504]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000dc2:	4a7d      	ldr	r2, [pc, #500]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000dcc:	4b7a      	ldr	r3, [pc, #488]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90000dd6:	627b      	str	r3, [r7, #36]	; 0x24
90000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
90000dda:	4b77      	ldr	r3, [pc, #476]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000de0:	4a75      	ldr	r2, [pc, #468]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000dea:	4b73      	ldr	r3, [pc, #460]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
90000df4:	623b      	str	r3, [r7, #32]
90000df6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000df8:	4b6f      	ldr	r3, [pc, #444]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000dfe:	4a6e      	ldr	r2, [pc, #440]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e00:	f043 0308 	orr.w	r3, r3, #8
90000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000e08:	4b6b      	ldr	r3, [pc, #428]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e0e:	f003 0308 	and.w	r3, r3, #8
90000e12:	61fb      	str	r3, [r7, #28]
90000e14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000e16:	4b68      	ldr	r3, [pc, #416]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e1c:	4a66      	ldr	r2, [pc, #408]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e1e:	f043 0304 	orr.w	r3, r3, #4
90000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000e26:	4b64      	ldr	r3, [pc, #400]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e2c:	f003 0304 	and.w	r3, r3, #4
90000e30:	61bb      	str	r3, [r7, #24]
90000e32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000e34:	4b60      	ldr	r3, [pc, #384]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e3a:	4a5f      	ldr	r2, [pc, #380]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e3c:	f043 0310 	orr.w	r3, r3, #16
90000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000e44:	4b5c      	ldr	r3, [pc, #368]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e4a:	f003 0310 	and.w	r3, r3, #16
90000e4e:	617b      	str	r3, [r7, #20]
90000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90000e52:	4b59      	ldr	r3, [pc, #356]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e58:	4a57      	ldr	r2, [pc, #348]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000e62:	4b55      	ldr	r3, [pc, #340]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
90000e6c:	613b      	str	r3, [r7, #16]
90000e6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90000e70:	4b51      	ldr	r3, [pc, #324]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e76:	4a50      	ldr	r2, [pc, #320]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000e80:	4b4d      	ldr	r3, [pc, #308]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
90000e8a:	60fb      	str	r3, [r7, #12]
90000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90000e8e:	4b4a      	ldr	r3, [pc, #296]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000e94:	4a48      	ldr	r2, [pc, #288]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000e96:	f043 0301 	orr.w	r3, r3, #1
90000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000e9e:	4b46      	ldr	r3, [pc, #280]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ea4:	f003 0301 	and.w	r3, r3, #1
90000ea8:	60bb      	str	r3, [r7, #8]
90000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90000eac:	4b42      	ldr	r3, [pc, #264]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000eb2:	4a41      	ldr	r2, [pc, #260]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000eb4:	f043 0320 	orr.w	r3, r3, #32
90000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000ebc:	4b3e      	ldr	r3, [pc, #248]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ec2:	f003 0320 	and.w	r3, r3, #32
90000ec6:	607b      	str	r3, [r7, #4]
90000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000eca:	4b3b      	ldr	r3, [pc, #236]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ed0:	4a39      	ldr	r2, [pc, #228]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000eda:	4b37      	ldr	r3, [pc, #220]	; (90000fb8 <MX_GPIO_Init+0x230>)
90000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
90000ee4:	603b      	str	r3, [r7, #0]
90000ee6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|TS_RST_Pin, GPIO_PIN_SET);
90000ee8:	2201      	movs	r2, #1
90000eea:	2118      	movs	r1, #24
90000eec:	4833      	ldr	r0, [pc, #204]	; (90000fbc <MX_GPIO_Init+0x234>)
90000eee:	f002 fa79 	bl	900033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
90000ef2:	2201      	movs	r2, #1
90000ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90000ef8:	4831      	ldr	r0, [pc, #196]	; (90000fc0 <MX_GPIO_Init+0x238>)
90000efa:	f002 fa73 	bl	900033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
90000efe:	2201      	movs	r2, #1
90000f00:	f44f 7180 	mov.w	r1, #256	; 0x100
90000f04:	482f      	ldr	r0, [pc, #188]	; (90000fc4 <MX_GPIO_Init+0x23c>)
90000f06:	f002 fa6d 	bl	900033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
90000f0a:	2310      	movs	r3, #16
90000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000f0e:	2301      	movs	r3, #1
90000f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000f12:	2301      	movs	r3, #1
90000f14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000f16:	2303      	movs	r3, #3
90000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
90000f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f1e:	4619      	mov	r1, r3
90000f20:	4826      	ldr	r0, [pc, #152]	; (90000fbc <MX_GPIO_Init+0x234>)
90000f22:	f002 f8af 	bl	90003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_RST_Pin;
90000f26:	2308      	movs	r3, #8
90000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000f2a:	2301      	movs	r3, #1
90000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000f2e:	2301      	movs	r3, #1
90000f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f32:	2300      	movs	r3, #0
90000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TS_RST_GPIO_Port, &GPIO_InitStruct);
90000f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f3a:	4619      	mov	r1, r3
90000f3c:	481f      	ldr	r0, [pc, #124]	; (90000fbc <MX_GPIO_Init+0x234>)
90000f3e:	f002 f8a1 	bl	90003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
90000f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000f48:	2301      	movs	r3, #1
90000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000f4c:	2301      	movs	r3, #1
90000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f50:	2300      	movs	r3, #0
90000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
90000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f58:	4619      	mov	r1, r3
90000f5a:	4819      	ldr	r0, [pc, #100]	; (90000fc0 <MX_GPIO_Init+0x238>)
90000f5c:	f002 f892 	bl	90003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_INT_Pin;
90000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
90000f66:	4b18      	ldr	r3, [pc, #96]	; (90000fc8 <MX_GPIO_Init+0x240>)
90000f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000f6a:	2301      	movs	r3, #1
90000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TS_INT_GPIO_Port, &GPIO_InitStruct);
90000f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f72:	4619      	mov	r1, r3
90000f74:	4815      	ldr	r0, [pc, #84]	; (90000fcc <MX_GPIO_Init+0x244>)
90000f76:	f002 f885 	bl	90003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
90000f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
90000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000f80:	2301      	movs	r3, #1
90000f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000f84:	2301      	movs	r3, #1
90000f86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f88:	2300      	movs	r3, #0
90000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
90000f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f90:	4619      	mov	r1, r3
90000f92:	480c      	ldr	r0, [pc, #48]	; (90000fc4 <MX_GPIO_Init+0x23c>)
90000f94:	f002 f876 	bl	90003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
90000f98:	2310      	movs	r3, #16
90000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
90000f9c:	4b0a      	ldr	r3, [pc, #40]	; (90000fc8 <MX_GPIO_Init+0x240>)
90000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fa0:	2300      	movs	r3, #0
90000fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
90000fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fa8:	4619      	mov	r1, r3
90000faa:	4809      	ldr	r0, [pc, #36]	; (90000fd0 <MX_GPIO_Init+0x248>)
90000fac:	f002 f86a 	bl	90003084 <HAL_GPIO_Init>

}
90000fb0:	bf00      	nop
90000fb2:	3740      	adds	r7, #64	; 0x40
90000fb4:	46bd      	mov	sp, r7
90000fb6:	bd80      	pop	{r7, pc}
90000fb8:	58024400 	.word	0x58024400
90000fbc:	58020c00 	.word	0x58020c00
90000fc0:	58020800 	.word	0x58020800
90000fc4:	58022000 	.word	0x58022000
90000fc8:	11310000 	.word	0x11310000
90000fcc:	58021800 	.word	0x58021800
90000fd0:	58021c00 	.word	0x58021c00

90000fd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
90000fd4:	b580      	push	{r7, lr}
90000fd6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
90000fd8:	4b1b      	ldr	r3, [pc, #108]	; (90001048 <MX_I2C1_Init+0x74>)
90000fda:	4a1c      	ldr	r2, [pc, #112]	; (9000104c <MX_I2C1_Init+0x78>)
90000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
90000fde:	4b1a      	ldr	r3, [pc, #104]	; (90001048 <MX_I2C1_Init+0x74>)
90000fe0:	4a1b      	ldr	r2, [pc, #108]	; (90001050 <MX_I2C1_Init+0x7c>)
90000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
90000fe4:	4b18      	ldr	r3, [pc, #96]	; (90001048 <MX_I2C1_Init+0x74>)
90000fe6:	2200      	movs	r2, #0
90000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90000fea:	4b17      	ldr	r3, [pc, #92]	; (90001048 <MX_I2C1_Init+0x74>)
90000fec:	2201      	movs	r2, #1
90000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
90000ff0:	4b15      	ldr	r3, [pc, #84]	; (90001048 <MX_I2C1_Init+0x74>)
90000ff2:	2200      	movs	r2, #0
90000ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
90000ff6:	4b14      	ldr	r3, [pc, #80]	; (90001048 <MX_I2C1_Init+0x74>)
90000ff8:	2200      	movs	r2, #0
90000ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90000ffc:	4b12      	ldr	r3, [pc, #72]	; (90001048 <MX_I2C1_Init+0x74>)
90000ffe:	2200      	movs	r2, #0
90001000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90001002:	4b11      	ldr	r3, [pc, #68]	; (90001048 <MX_I2C1_Init+0x74>)
90001004:	2200      	movs	r2, #0
90001006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
90001008:	4b0f      	ldr	r3, [pc, #60]	; (90001048 <MX_I2C1_Init+0x74>)
9000100a:	2200      	movs	r2, #0
9000100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
9000100e:	480e      	ldr	r0, [pc, #56]	; (90001048 <MX_I2C1_Init+0x74>)
90001010:	f002 fa02 	bl	90003418 <HAL_I2C_Init>
90001014:	4603      	mov	r3, r0
90001016:	2b00      	cmp	r3, #0
90001018:	d001      	beq.n	9000101e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
9000101a:	f000 fb33 	bl	90001684 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
9000101e:	2100      	movs	r1, #0
90001020:	4809      	ldr	r0, [pc, #36]	; (90001048 <MX_I2C1_Init+0x74>)
90001022:	f002 fa89 	bl	90003538 <HAL_I2CEx_ConfigAnalogFilter>
90001026:	4603      	mov	r3, r0
90001028:	2b00      	cmp	r3, #0
9000102a:	d001      	beq.n	90001030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
9000102c:	f000 fb2a 	bl	90001684 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
90001030:	2100      	movs	r1, #0
90001032:	4805      	ldr	r0, [pc, #20]	; (90001048 <MX_I2C1_Init+0x74>)
90001034:	f002 facb 	bl	900035ce <HAL_I2CEx_ConfigDigitalFilter>
90001038:	4603      	mov	r3, r0
9000103a:	2b00      	cmp	r3, #0
9000103c:	d001      	beq.n	90001042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
9000103e:	f000 fb21 	bl	90001684 <Error_Handler>
  }

}
90001042:	bf00      	nop
90001044:	bd80      	pop	{r7, pc}
90001046:	bf00      	nop
90001048:	2401c0bc 	.word	0x2401c0bc
9000104c:	40005400 	.word	0x40005400
90001050:	10707dbc 	.word	0x10707dbc

90001054 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
90001054:	b580      	push	{r7, lr}
90001056:	b08a      	sub	sp, #40	; 0x28
90001058:	af00      	add	r7, sp, #0
9000105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000105c:	f107 0314 	add.w	r3, r7, #20
90001060:	2200      	movs	r2, #0
90001062:	601a      	str	r2, [r3, #0]
90001064:	605a      	str	r2, [r3, #4]
90001066:	609a      	str	r2, [r3, #8]
90001068:	60da      	str	r2, [r3, #12]
9000106a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
9000106c:	687b      	ldr	r3, [r7, #4]
9000106e:	681b      	ldr	r3, [r3, #0]
90001070:	4a1a      	ldr	r2, [pc, #104]	; (900010dc <HAL_I2C_MspInit+0x88>)
90001072:	4293      	cmp	r3, r2
90001074:	d12d      	bne.n	900010d2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
90001076:	4b1a      	ldr	r3, [pc, #104]	; (900010e0 <HAL_I2C_MspInit+0x8c>)
90001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000107c:	4a18      	ldr	r2, [pc, #96]	; (900010e0 <HAL_I2C_MspInit+0x8c>)
9000107e:	f043 0302 	orr.w	r3, r3, #2
90001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001086:	4b16      	ldr	r3, [pc, #88]	; (900010e0 <HAL_I2C_MspInit+0x8c>)
90001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000108c:	f003 0302 	and.w	r3, r3, #2
90001090:	613b      	str	r3, [r7, #16]
90001092:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
90001094:	23c0      	movs	r3, #192	; 0xc0
90001096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90001098:	2312      	movs	r3, #18
9000109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000109c:	2300      	movs	r3, #0
9000109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900010a0:	2300      	movs	r3, #0
900010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
900010a4:	2304      	movs	r3, #4
900010a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900010a8:	f107 0314 	add.w	r3, r7, #20
900010ac:	4619      	mov	r1, r3
900010ae:	480d      	ldr	r0, [pc, #52]	; (900010e4 <HAL_I2C_MspInit+0x90>)
900010b0:	f001 ffe8 	bl	90003084 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
900010b4:	4b0a      	ldr	r3, [pc, #40]	; (900010e0 <HAL_I2C_MspInit+0x8c>)
900010b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900010ba:	4a09      	ldr	r2, [pc, #36]	; (900010e0 <HAL_I2C_MspInit+0x8c>)
900010bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
900010c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
900010c4:	4b06      	ldr	r3, [pc, #24]	; (900010e0 <HAL_I2C_MspInit+0x8c>)
900010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900010ce:	60fb      	str	r3, [r7, #12]
900010d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
900010d2:	bf00      	nop
900010d4:	3728      	adds	r7, #40	; 0x28
900010d6:	46bd      	mov	sp, r7
900010d8:	bd80      	pop	{r7, pc}
900010da:	bf00      	nop
900010dc:	40005400 	.word	0x40005400
900010e0:	58024400 	.word	0x58024400
900010e4:	58020400 	.word	0x58020400

900010e8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
900010e8:	b580      	push	{r7, lr}
900010ea:	b09a      	sub	sp, #104	; 0x68
900010ec:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900010ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
900010f2:	2234      	movs	r2, #52	; 0x34
900010f4:	2100      	movs	r1, #0
900010f6:	4618      	mov	r0, r3
900010f8:	f00c ff50 	bl	9000df9c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
900010fc:	463b      	mov	r3, r7
900010fe:	2234      	movs	r2, #52	; 0x34
90001100:	2100      	movs	r1, #0
90001102:	4618      	mov	r0, r3
90001104:	f00c ff4a 	bl	9000df9c <memset>

  hltdc.Instance = LTDC;
90001108:	4b50      	ldr	r3, [pc, #320]	; (9000124c <MX_LTDC_Init+0x164>)
9000110a:	4a51      	ldr	r2, [pc, #324]	; (90001250 <MX_LTDC_Init+0x168>)
9000110c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
9000110e:	4b4f      	ldr	r3, [pc, #316]	; (9000124c <MX_LTDC_Init+0x164>)
90001110:	2200      	movs	r2, #0
90001112:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001114:	4b4d      	ldr	r3, [pc, #308]	; (9000124c <MX_LTDC_Init+0x164>)
90001116:	2200      	movs	r2, #0
90001118:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
9000111a:	4b4c      	ldr	r3, [pc, #304]	; (9000124c <MX_LTDC_Init+0x164>)
9000111c:	2200      	movs	r2, #0
9000111e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001120:	4b4a      	ldr	r3, [pc, #296]	; (9000124c <MX_LTDC_Init+0x164>)
90001122:	2200      	movs	r2, #0
90001124:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
90001126:	4b49      	ldr	r3, [pc, #292]	; (9000124c <MX_LTDC_Init+0x164>)
90001128:	2200      	movs	r2, #0
9000112a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
9000112c:	4b47      	ldr	r3, [pc, #284]	; (9000124c <MX_LTDC_Init+0x164>)
9000112e:	2200      	movs	r2, #0
90001130:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 88;
90001132:	4b46      	ldr	r3, [pc, #280]	; (9000124c <MX_LTDC_Init+0x164>)
90001134:	2258      	movs	r2, #88	; 0x58
90001136:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 32;
90001138:	4b44      	ldr	r3, [pc, #272]	; (9000124c <MX_LTDC_Init+0x164>)
9000113a:	2220      	movs	r2, #32
9000113c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1112;
9000113e:	4b43      	ldr	r3, [pc, #268]	; (9000124c <MX_LTDC_Init+0x164>)
90001140:	f44f 628b 	mov.w	r2, #1112	; 0x458
90001144:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 632;
90001146:	4b41      	ldr	r3, [pc, #260]	; (9000124c <MX_LTDC_Init+0x164>)
90001148:	f44f 721e 	mov.w	r2, #632	; 0x278
9000114c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1152;
9000114e:	4b3f      	ldr	r3, [pc, #252]	; (9000124c <MX_LTDC_Init+0x164>)
90001150:	f44f 6290 	mov.w	r2, #1152	; 0x480
90001154:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 645;
90001156:	4b3d      	ldr	r3, [pc, #244]	; (9000124c <MX_LTDC_Init+0x164>)
90001158:	f240 2285 	movw	r2, #645	; 0x285
9000115c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
9000115e:	4b3b      	ldr	r3, [pc, #236]	; (9000124c <MX_LTDC_Init+0x164>)
90001160:	2200      	movs	r2, #0
90001162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
90001166:	4b39      	ldr	r3, [pc, #228]	; (9000124c <MX_LTDC_Init+0x164>)
90001168:	2200      	movs	r2, #0
9000116a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
9000116e:	4b37      	ldr	r3, [pc, #220]	; (9000124c <MX_LTDC_Init+0x164>)
90001170:	2200      	movs	r2, #0
90001172:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90001176:	4835      	ldr	r0, [pc, #212]	; (9000124c <MX_LTDC_Init+0x164>)
90001178:	f002 fa76 	bl	90003668 <HAL_LTDC_Init>
9000117c:	4603      	mov	r3, r0
9000117e:	2b00      	cmp	r3, #0
90001180:	d001      	beq.n	90001186 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
90001182:	f000 fa7f 	bl	90001684 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
90001186:	2300      	movs	r3, #0
90001188:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 400;
9000118a:	f44f 73c8 	mov.w	r3, #400	; 0x190
9000118e:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
90001190:	2300      	movs	r3, #0
90001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 200;
90001194:	23c8      	movs	r3, #200	; 0xc8
90001196:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90001198:	2302      	movs	r3, #2
9000119a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0xFF;
9000119c:	23ff      	movs	r3, #255	; 0xff
9000119e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
900011a0:	2300      	movs	r3, #0
900011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
900011a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
900011a8:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900011aa:	2305      	movs	r3, #5
900011ac:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
900011ae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
900011b2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 128;
900011b4:	2380      	movs	r3, #128	; 0x80
900011b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 160;
900011b8:	23a0      	movs	r3, #160	; 0xa0
900011ba:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
900011bc:	2300      	movs	r3, #0
900011be:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
900011c2:	2300      	movs	r3, #0
900011c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
900011c8:	2300      	movs	r3, #0
900011ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900011ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
900011d2:	2200      	movs	r2, #0
900011d4:	4619      	mov	r1, r3
900011d6:	481d      	ldr	r0, [pc, #116]	; (9000124c <MX_LTDC_Init+0x164>)
900011d8:	f002 fbd8 	bl	9000398c <HAL_LTDC_ConfigLayer>
900011dc:	4603      	mov	r3, r0
900011de:	2b00      	cmp	r3, #0
900011e0:	d001      	beq.n	900011e6 <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
900011e2:	f000 fa4f 	bl	90001684 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
900011e6:	2300      	movs	r3, #0
900011e8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 800;
900011ea:	f44f 7348 	mov.w	r3, #800	; 0x320
900011ee:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
900011f0:	2300      	movs	r3, #0
900011f2:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 480;
900011f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
900011f8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
900011fa:	2300      	movs	r3, #0
900011fc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
900011fe:	2300      	movs	r3, #0
90001200:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
90001206:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90001208:	2305      	movs	r3, #5
9000120a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xc0100000;
9000120c:	4b11      	ldr	r3, [pc, #68]	; (90001254 <MX_LTDC_Init+0x16c>)
9000120e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
90001210:	2300      	movs	r3, #0
90001212:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 480;
90001214:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
90001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
9000121a:	2300      	movs	r3, #0
9000121c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
90001220:	2300      	movs	r3, #0
90001222:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
90001226:	2300      	movs	r3, #0
90001228:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
9000122c:	463b      	mov	r3, r7
9000122e:	2201      	movs	r2, #1
90001230:	4619      	mov	r1, r3
90001232:	4806      	ldr	r0, [pc, #24]	; (9000124c <MX_LTDC_Init+0x164>)
90001234:	f002 fbaa 	bl	9000398c <HAL_LTDC_ConfigLayer>
90001238:	4603      	mov	r3, r0
9000123a:	2b00      	cmp	r3, #0
9000123c:	d001      	beq.n	90001242 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
9000123e:	f000 fa21 	bl	90001684 <Error_Handler>
  }

}
90001242:	bf00      	nop
90001244:	3768      	adds	r7, #104	; 0x68
90001246:	46bd      	mov	sp, r7
90001248:	bd80      	pop	{r7, pc}
9000124a:	bf00      	nop
9000124c:	2401c108 	.word	0x2401c108
90001250:	50001000 	.word	0x50001000
90001254:	c0100000 	.word	0xc0100000

90001258 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
90001258:	b580      	push	{r7, lr}
9000125a:	b08c      	sub	sp, #48	; 0x30
9000125c:	af00      	add	r7, sp, #0
9000125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001260:	f107 031c 	add.w	r3, r7, #28
90001264:	2200      	movs	r2, #0
90001266:	601a      	str	r2, [r3, #0]
90001268:	605a      	str	r2, [r3, #4]
9000126a:	609a      	str	r2, [r3, #8]
9000126c:	60da      	str	r2, [r3, #12]
9000126e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
90001270:	687b      	ldr	r3, [r7, #4]
90001272:	681b      	ldr	r3, [r3, #0]
90001274:	4a42      	ldr	r2, [pc, #264]	; (90001380 <HAL_LTDC_MspInit+0x128>)
90001276:	4293      	cmp	r3, r2
90001278:	d17d      	bne.n	90001376 <HAL_LTDC_MspInit+0x11e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
9000127a:	4b42      	ldr	r3, [pc, #264]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
9000127c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
90001280:	4a40      	ldr	r2, [pc, #256]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
90001282:	f043 0308 	orr.w	r3, r3, #8
90001286:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
9000128a:	4b3e      	ldr	r3, [pc, #248]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
9000128c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
90001290:	f003 0308 	and.w	r3, r3, #8
90001294:	61bb      	str	r3, [r7, #24]
90001296:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
90001298:	4b3a      	ldr	r3, [pc, #232]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
9000129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000129e:	4a39      	ldr	r2, [pc, #228]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900012a8:	4b36      	ldr	r3, [pc, #216]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900012ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900012b2:	617b      	str	r3, [r7, #20]
900012b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
900012b6:	4b33      	ldr	r3, [pc, #204]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900012bc:	4a31      	ldr	r2, [pc, #196]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900012c6:	4b2f      	ldr	r3, [pc, #188]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900012cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
900012d0:	613b      	str	r3, [r7, #16]
900012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
900012d4:	4b2b      	ldr	r3, [pc, #172]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900012da:	4a2a      	ldr	r2, [pc, #168]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900012e4:	4b27      	ldr	r3, [pc, #156]	; (90001384 <HAL_LTDC_MspInit+0x12c>)
900012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012ee:	60fb      	str	r3, [r7, #12]
900012f0:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900012f2:	23ff      	movs	r3, #255	; 0xff
900012f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900012f6:	2302      	movs	r3, #2
900012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900012fa:	2300      	movs	r3, #0
900012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900012fe:	2303      	movs	r3, #3
90001300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90001302:	230e      	movs	r3, #14
90001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90001306:	f107 031c 	add.w	r3, r7, #28
9000130a:	4619      	mov	r1, r3
9000130c:	481e      	ldr	r0, [pc, #120]	; (90001388 <HAL_LTDC_MspInit+0x130>)
9000130e:	f001 feb9 	bl	90003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90001312:	f64f 73ff 	movw	r3, #65535	; 0xffff
90001316:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001318:	2302      	movs	r3, #2
9000131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000131c:	2300      	movs	r3, #0
9000131e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001320:	2303      	movs	r3, #3
90001322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90001324:	230e      	movs	r3, #14
90001326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90001328:	f107 031c 	add.w	r3, r7, #28
9000132c:	4619      	mov	r1, r3
9000132e:	4817      	ldr	r0, [pc, #92]	; (9000138c <HAL_LTDC_MspInit+0x134>)
90001330:	f001 fea8 	bl	90003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
90001334:	f44f 4370 	mov.w	r3, #61440	; 0xf000
90001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000133a:	2302      	movs	r3, #2
9000133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000133e:	2300      	movs	r3, #0
90001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001342:	2303      	movs	r3, #3
90001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90001346:	230e      	movs	r3, #14
90001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
9000134a:	f107 031c 	add.w	r3, r7, #28
9000134e:	4619      	mov	r1, r3
90001350:	480f      	ldr	r0, [pc, #60]	; (90001390 <HAL_LTDC_MspInit+0x138>)
90001352:	f001 fe97 	bl	90003084 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
90001356:	2200      	movs	r2, #0
90001358:	2100      	movs	r1, #0
9000135a:	2058      	movs	r0, #88	; 0x58
9000135c:	f001 f842 	bl	900023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90001360:	2058      	movs	r0, #88	; 0x58
90001362:	f001 f859 	bl	90002418 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
90001366:	2200      	movs	r2, #0
90001368:	2100      	movs	r1, #0
9000136a:	2059      	movs	r0, #89	; 0x59
9000136c:	f001 f83a 	bl	900023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
90001370:	2059      	movs	r0, #89	; 0x59
90001372:	f001 f851 	bl	90002418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
90001376:	bf00      	nop
90001378:	3730      	adds	r7, #48	; 0x30
9000137a:	46bd      	mov	sp, r7
9000137c:	bd80      	pop	{r7, pc}
9000137e:	bf00      	nop
90001380:	50001000 	.word	0x50001000
90001384:	58024400 	.word	0x58024400
90001388:	58022800 	.word	0x58022800
9000138c:	58022400 	.word	0x58022400
90001390:	58022000 	.word	0x58022000

90001394 <vtor_config>:
/* USER CODE BEGIN Includes */
#include "drv_sdram.h"
#include "tx_entry_main.h"
#include "stm32h7xx.h"
static int vtor_config(void)
{
90001394:	b480      	push	{r7}
90001396:	af00      	add	r7, sp, #0
    /* Vector Table Relocation in Internal QSPI_FLASH */
    SCB->VTOR = QSPI_BASE;
90001398:	4b04      	ldr	r3, [pc, #16]	; (900013ac <vtor_config+0x18>)
9000139a:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
9000139e:	609a      	str	r2, [r3, #8]
    return 0;
900013a0:	2300      	movs	r3, #0
}
900013a2:	4618      	mov	r0, r3
900013a4:	46bd      	mov	sp, r7
900013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900013aa:	4770      	bx	lr
900013ac:	e000ed00 	.word	0xe000ed00

900013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
900013b0:	b580      	push	{r7, lr}
900013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  vtor_config();
900013b4:	f7ff ffee 	bl	90001394 <vtor_config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
900013b8:	f000 fed2 	bl	90002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
900013bc:	f000 f81a 	bl	900013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
900013c0:	f7ff fce2 	bl	90000d88 <MX_GPIO_Init>
  MX_UART4_Init();
900013c4:	f000 fce6 	bl	90001d94 <MX_UART4_Init>
  MX_I2C1_Init();
900013c8:	f7ff fe04 	bl	90000fd4 <MX_I2C1_Init>
  MX_LTDC_Init();
900013cc:	f7ff fe8c 	bl	900010e8 <MX_LTDC_Init>
  MX_SDMMC1_SD_Init();
900013d0:	f000 f960 	bl	90001694 <MX_SDMMC1_SD_Init>
  MX_FMC_Init();
900013d4:	f7ff fbea 	bl	90000bac <MX_FMC_Init>
  MX_SPI1_Init();
900013d8:	f000 f9f6 	bl	900017c8 <MX_SPI1_Init>
//  MX_QUADSPI_Init();
  MX_DMA2D_Init();
900013dc:	f7ff fb7e 	bl	90000adc <MX_DMA2D_Init>
  MX_USB_OTG_FS_PCD_Init();
900013e0:	f000 fd98 	bl	90001f14 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
900013e4:	f7ff fb36 	bl	90000a54 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  SDRAM_Init();
900013e8:	f000 fea4 	bl	90002134 <SDRAM_Init>
  threadx_entry_main();
900013ec:	f7ff fa70 	bl	900008d0 <threadx_entry_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
900013f0:	e7fe      	b.n	900013f0 <main+0x40>
	...

900013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
900013f4:	b580      	push	{r7, lr}
900013f6:	b0cc      	sub	sp, #304	; 0x130
900013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900013fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
900013fe:	224c      	movs	r2, #76	; 0x4c
90001400:	2100      	movs	r1, #0
90001402:	4618      	mov	r0, r3
90001404:	f00c fdca 	bl	9000df9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90001408:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
9000140c:	2220      	movs	r2, #32
9000140e:	2100      	movs	r1, #0
90001410:	4618      	mov	r0, r3
90001412:	f00c fdc3 	bl	9000df9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90001416:	f107 0308 	add.w	r3, r7, #8
9000141a:	4618      	mov	r0, r3
9000141c:	23bc      	movs	r3, #188	; 0xbc
9000141e:	461a      	mov	r2, r3
90001420:	2100      	movs	r1, #0
90001422:	f00c fdbb 	bl	9000df9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90001426:	2002      	movs	r0, #2
90001428:	f002 fe16 	bl	90004058 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
9000142c:	1d3b      	adds	r3, r7, #4
9000142e:	2200      	movs	r2, #0
90001430:	601a      	str	r2, [r3, #0]
90001432:	4b7e      	ldr	r3, [pc, #504]	; (9000162c <SystemClock_Config+0x238>)
90001434:	699b      	ldr	r3, [r3, #24]
90001436:	4a7d      	ldr	r2, [pc, #500]	; (9000162c <SystemClock_Config+0x238>)
90001438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
9000143c:	6193      	str	r3, [r2, #24]
9000143e:	4b7b      	ldr	r3, [pc, #492]	; (9000162c <SystemClock_Config+0x238>)
90001440:	699b      	ldr	r3, [r3, #24]
90001442:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
90001446:	1d3b      	adds	r3, r7, #4
90001448:	601a      	str	r2, [r3, #0]
9000144a:	4b79      	ldr	r3, [pc, #484]	; (90001630 <SystemClock_Config+0x23c>)
9000144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000144e:	4a78      	ldr	r2, [pc, #480]	; (90001630 <SystemClock_Config+0x23c>)
90001450:	f043 0301 	orr.w	r3, r3, #1
90001454:	62d3      	str	r3, [r2, #44]	; 0x2c
90001456:	4b76      	ldr	r3, [pc, #472]	; (90001630 <SystemClock_Config+0x23c>)
90001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000145a:	f003 0201 	and.w	r2, r3, #1
9000145e:	1d3b      	adds	r3, r7, #4
90001460:	601a      	str	r2, [r3, #0]
90001462:	1d3b      	adds	r3, r7, #4
90001464:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90001466:	bf00      	nop
90001468:	4b70      	ldr	r3, [pc, #448]	; (9000162c <SystemClock_Config+0x238>)
9000146a:	699b      	ldr	r3, [r3, #24]
9000146c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90001474:	d1f8      	bne.n	90001468 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
90001476:	4b6f      	ldr	r3, [pc, #444]	; (90001634 <SystemClock_Config+0x240>)
90001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000147a:	f023 0303 	bic.w	r3, r3, #3
9000147e:	4a6d      	ldr	r2, [pc, #436]	; (90001634 <SystemClock_Config+0x240>)
90001480:	f043 0302 	orr.w	r3, r3, #2
90001484:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
90001486:	2323      	movs	r3, #35	; 0x23
90001488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
9000148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90001490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
90001494:	2301      	movs	r3, #1
90001496:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
9000149a:	2340      	movs	r3, #64	; 0x40
9000149c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
900014a0:	2301      	movs	r3, #1
900014a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900014a6:	2302      	movs	r3, #2
900014a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900014ac:	2302      	movs	r3, #2
900014ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
900014b2:	2305      	movs	r3, #5
900014b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
900014b8:	23c0      	movs	r3, #192	; 0xc0
900014ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
900014be:	2302      	movs	r3, #2
900014c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
900014c4:	2302      	movs	r3, #2
900014c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
900014ca:	2302      	movs	r3, #2
900014cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900014d0:	2308      	movs	r3, #8
900014d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900014d6:	2300      	movs	r3, #0
900014d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900014dc:	2300      	movs	r3, #0
900014de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900014e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
900014e6:	4618      	mov	r0, r3
900014e8:	f002 fe00 	bl	900040ec <HAL_RCC_OscConfig>
900014ec:	4603      	mov	r3, r0
900014ee:	2b00      	cmp	r3, #0
900014f0:	d001      	beq.n	900014f6 <SystemClock_Config+0x102>
  {
    Error_Handler();
900014f2:	f000 f8c7 	bl	90001684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900014f6:	233f      	movs	r3, #63	; 0x3f
900014f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900014fc:	2303      	movs	r3, #3
900014fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90001502:	2300      	movs	r3, #0
90001504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90001508:	2308      	movs	r3, #8
9000150a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
9000150e:	2340      	movs	r3, #64	; 0x40
90001510:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90001514:	2340      	movs	r3, #64	; 0x40
90001516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
9000151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000151e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90001522:	2340      	movs	r3, #64	; 0x40
90001524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
90001528:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
9000152c:	2104      	movs	r1, #4
9000152e:	4618      	mov	r0, r3
90001530:	f003 f9ec 	bl	9000490c <HAL_RCC_ClockConfig>
90001534:	4603      	mov	r3, r0
90001536:	2b00      	cmp	r3, #0
90001538:	d001      	beq.n	9000153e <SystemClock_Config+0x14a>
  {
    Error_Handler();
9000153a:	f000 f8a3 	bl	90001684 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_UART4
9000153e:	f107 0308 	add.w	r3, r7, #8
90001542:	4a3d      	ldr	r2, [pc, #244]	; (90001638 <SystemClock_Config+0x244>)
90001544:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
90001546:	f107 0308 	add.w	r3, r7, #8
9000154a:	2202      	movs	r2, #2
9000154c:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
9000154e:	f107 0308 	add.w	r3, r7, #8
90001552:	2240      	movs	r2, #64	; 0x40
90001554:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
90001556:	f107 0308 	add.w	r3, r7, #8
9000155a:	2202      	movs	r2, #2
9000155c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
9000155e:	f107 0308 	add.w	r3, r7, #8
90001562:	2202      	movs	r2, #2
90001564:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
90001566:	f107 0308 	add.w	r3, r7, #8
9000156a:	2204      	movs	r2, #4
9000156c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
9000156e:	f107 0308 	add.w	r3, r7, #8
90001572:	22c0      	movs	r2, #192	; 0xc0
90001574:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
90001576:	f107 0308 	add.w	r3, r7, #8
9000157a:	2200      	movs	r2, #0
9000157c:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
9000157e:	f107 0308 	add.w	r3, r7, #8
90001582:	2200      	movs	r2, #0
90001584:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
90001586:	f107 0308 	add.w	r3, r7, #8
9000158a:	2205      	movs	r2, #5
9000158c:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 160;
9000158e:	f107 0308 	add.w	r3, r7, #8
90001592:	22a0      	movs	r2, #160	; 0xa0
90001594:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 8;
90001596:	f107 0308 	add.w	r3, r7, #8
9000159a:	2208      	movs	r2, #8
9000159c:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
9000159e:	f107 0308 	add.w	r3, r7, #8
900015a2:	2208      	movs	r2, #8
900015a4:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 24;
900015a6:	f107 0308 	add.w	r3, r7, #8
900015aa:	2218      	movs	r2, #24
900015ac:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
900015ae:	f107 0308 	add.w	r3, r7, #8
900015b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
900015b6:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
900015b8:	f107 0308 	add.w	r3, r7, #8
900015bc:	2200      	movs	r2, #0
900015be:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
900015c0:	f107 0308 	add.w	r3, r7, #8
900015c4:	2200      	movs	r2, #0
900015c6:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
900015c8:	f107 0308 	add.w	r3, r7, #8
900015cc:	2200      	movs	r2, #0
900015ce:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
900015d0:	f107 0308 	add.w	r3, r7, #8
900015d4:	2200      	movs	r2, #0
900015d6:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
900015d8:	f107 0308 	add.w	r3, r7, #8
900015dc:	2200      	movs	r2, #0
900015de:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
900015e0:	f107 0308 	add.w	r3, r7, #8
900015e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
900015e8:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
900015ea:	f107 0308 	add.w	r3, r7, #8
900015ee:	2200      	movs	r2, #0
900015f0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
900015f2:	f107 0308 	add.w	r3, r7, #8
900015f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
900015fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
900015fe:	f107 0308 	add.w	r3, r7, #8
90001602:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
90001606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000160a:	f107 0308 	add.w	r3, r7, #8
9000160e:	4618      	mov	r0, r3
90001610:	f003 fd42 	bl	90005098 <HAL_RCCEx_PeriphCLKConfig>
90001614:	4603      	mov	r3, r0
90001616:	2b00      	cmp	r3, #0
90001618:	d001      	beq.n	9000161e <SystemClock_Config+0x22a>
  {
    Error_Handler();
9000161a:	f000 f833 	bl	90001684 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
9000161e:	f002 fd55 	bl	900040cc <HAL_PWREx_EnableUSBVoltageDetector>
}
90001622:	bf00      	nop
90001624:	f507 7798 	add.w	r7, r7, #304	; 0x130
90001628:	46bd      	mov	sp, r7
9000162a:	bd80      	pop	{r7, pc}
9000162c:	58024800 	.word	0x58024800
90001630:	58000400 	.word	0x58000400
90001634:	58024400 	.word	0x58024400
90001638:	2305100a 	.word	0x2305100a

9000163c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
9000163c:	b580      	push	{r7, lr}
9000163e:	b082      	sub	sp, #8
90001640:	af00      	add	r7, sp, #0
90001642:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
90001644:	1d39      	adds	r1, r7, #4
90001646:	f04f 33ff 	mov.w	r3, #4294967295
9000164a:	2201      	movs	r2, #1
9000164c:	4803      	ldr	r0, [pc, #12]	; (9000165c <__io_putchar+0x20>)
9000164e:	f007 fb7f 	bl	90008d50 <HAL_UART_Transmit>
    return ch;
90001652:	687b      	ldr	r3, [r7, #4]
}
90001654:	4618      	mov	r0, r3
90001656:	3708      	adds	r7, #8
90001658:	46bd      	mov	sp, r7
9000165a:	bd80      	pop	{r7, pc}
9000165c:	2401c304 	.word	0x2401c304

90001660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
90001660:	b580      	push	{r7, lr}
90001662:	b082      	sub	sp, #8
90001664:	af00      	add	r7, sp, #0
90001666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
90001668:	687b      	ldr	r3, [r7, #4]
9000166a:	681b      	ldr	r3, [r3, #0]
9000166c:	4a04      	ldr	r2, [pc, #16]	; (90001680 <HAL_TIM_PeriodElapsedCallback+0x20>)
9000166e:	4293      	cmp	r3, r2
90001670:	d101      	bne.n	90001676 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
90001672:	f000 fdb1 	bl	900021d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90001676:	bf00      	nop
90001678:	3708      	adds	r7, #8
9000167a:	46bd      	mov	sp, r7
9000167c:	bd80      	pop	{r7, pc}
9000167e:	bf00      	nop
90001680:	40001000 	.word	0x40001000

90001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90001684:	b480      	push	{r7}
90001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90001688:	bf00      	nop
9000168a:	46bd      	mov	sp, r7
9000168c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001690:	4770      	bx	lr
	...

90001694 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
90001694:	b580      	push	{r7, lr}
90001696:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
90001698:	4b0f      	ldr	r3, [pc, #60]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
9000169a:	4a10      	ldr	r2, [pc, #64]	; (900016dc <MX_SDMMC1_SD_Init+0x48>)
9000169c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
9000169e:	4b0e      	ldr	r3, [pc, #56]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
900016a0:	2200      	movs	r2, #0
900016a2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
900016a4:	4b0c      	ldr	r3, [pc, #48]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
900016a6:	2200      	movs	r2, #0
900016a8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
900016aa:	4b0b      	ldr	r3, [pc, #44]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
900016ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
900016b0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
900016b2:	4b09      	ldr	r3, [pc, #36]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
900016b4:	2200      	movs	r2, #0
900016b6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
900016b8:	4b07      	ldr	r3, [pc, #28]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
900016ba:	2200      	movs	r2, #0
900016bc:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
900016be:	4b06      	ldr	r3, [pc, #24]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
900016c0:	2201      	movs	r2, #1
900016c2:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
900016c4:	4804      	ldr	r0, [pc, #16]	; (900016d8 <MX_SDMMC1_SD_Init+0x44>)
900016c6:	f005 fbab 	bl	90006e20 <HAL_SD_Init>
900016ca:	4603      	mov	r3, r0
900016cc:	2b00      	cmp	r3, #0
900016ce:	d001      	beq.n	900016d4 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
900016d0:	f7ff ffd8 	bl	90001684 <Error_Handler>
  }

}
900016d4:	bf00      	nop
900016d6:	bd80      	pop	{r7, pc}
900016d8:	2401c1b0 	.word	0x2401c1b0
900016dc:	52007000 	.word	0x52007000

900016e0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
900016e0:	b580      	push	{r7, lr}
900016e2:	b08a      	sub	sp, #40	; 0x28
900016e4:	af00      	add	r7, sp, #0
900016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
900016e8:	f107 0314 	add.w	r3, r7, #20
900016ec:	2200      	movs	r2, #0
900016ee:	601a      	str	r2, [r3, #0]
900016f0:	605a      	str	r2, [r3, #4]
900016f2:	609a      	str	r2, [r3, #8]
900016f4:	60da      	str	r2, [r3, #12]
900016f6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
900016f8:	687b      	ldr	r3, [r7, #4]
900016fa:	681b      	ldr	r3, [r3, #0]
900016fc:	4a2e      	ldr	r2, [pc, #184]	; (900017b8 <HAL_SD_MspInit+0xd8>)
900016fe:	4293      	cmp	r3, r2
90001700:	d155      	bne.n	900017ae <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
90001702:	4b2e      	ldr	r3, [pc, #184]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001704:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90001708:	4a2c      	ldr	r2, [pc, #176]	; (900017bc <HAL_SD_MspInit+0xdc>)
9000170a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000170e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
90001712:	4b2a      	ldr	r3, [pc, #168]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001714:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000171c:	613b      	str	r3, [r7, #16]
9000171e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
90001720:	4b26      	ldr	r3, [pc, #152]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001726:	4a25      	ldr	r2, [pc, #148]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001728:	f043 0304 	orr.w	r3, r3, #4
9000172c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001730:	4b22      	ldr	r3, [pc, #136]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001736:	f003 0304 	and.w	r3, r3, #4
9000173a:	60fb      	str	r3, [r7, #12]
9000173c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000173e:	4b1f      	ldr	r3, [pc, #124]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001744:	4a1d      	ldr	r2, [pc, #116]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001746:	f043 0308 	orr.w	r3, r3, #8
9000174a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000174e:	4b1b      	ldr	r3, [pc, #108]	; (900017bc <HAL_SD_MspInit+0xdc>)
90001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001754:	f003 0308 	and.w	r3, r3, #8
90001758:	60bb      	str	r3, [r7, #8]
9000175a:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
9000175c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
90001760:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001762:	2302      	movs	r3, #2
90001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001766:	2300      	movs	r3, #0
90001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000176a:	2303      	movs	r3, #3
9000176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
9000176e:	230c      	movs	r3, #12
90001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90001772:	f107 0314 	add.w	r3, r7, #20
90001776:	4619      	mov	r1, r3
90001778:	4811      	ldr	r0, [pc, #68]	; (900017c0 <HAL_SD_MspInit+0xe0>)
9000177a:	f001 fc83 	bl	90003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
9000177e:	2304      	movs	r3, #4
90001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001782:	2302      	movs	r3, #2
90001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001786:	2300      	movs	r3, #0
90001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000178a:	2303      	movs	r3, #3
9000178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
9000178e:	230c      	movs	r3, #12
90001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001792:	f107 0314 	add.w	r3, r7, #20
90001796:	4619      	mov	r1, r3
90001798:	480a      	ldr	r0, [pc, #40]	; (900017c4 <HAL_SD_MspInit+0xe4>)
9000179a:	f001 fc73 	bl	90003084 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
9000179e:	2200      	movs	r2, #0
900017a0:	2100      	movs	r1, #0
900017a2:	2031      	movs	r0, #49	; 0x31
900017a4:	f000 fe1e 	bl	900023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
900017a8:	2031      	movs	r0, #49	; 0x31
900017aa:	f000 fe35 	bl	90002418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
900017ae:	bf00      	nop
900017b0:	3728      	adds	r7, #40	; 0x28
900017b2:	46bd      	mov	sp, r7
900017b4:	bd80      	pop	{r7, pc}
900017b6:	bf00      	nop
900017b8:	52007000 	.word	0x52007000
900017bc:	58024400 	.word	0x58024400
900017c0:	58020800 	.word	0x58020800
900017c4:	58020c00 	.word	0x58020c00

900017c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
900017c8:	b580      	push	{r7, lr}
900017ca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
900017cc:	4b27      	ldr	r3, [pc, #156]	; (9000186c <MX_SPI1_Init+0xa4>)
900017ce:	4a28      	ldr	r2, [pc, #160]	; (90001870 <MX_SPI1_Init+0xa8>)
900017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
900017d2:	4b26      	ldr	r3, [pc, #152]	; (9000186c <MX_SPI1_Init+0xa4>)
900017d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
900017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
900017da:	4b24      	ldr	r3, [pc, #144]	; (9000186c <MX_SPI1_Init+0xa4>)
900017dc:	2200      	movs	r2, #0
900017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
900017e0:	4b22      	ldr	r3, [pc, #136]	; (9000186c <MX_SPI1_Init+0xa4>)
900017e2:	2203      	movs	r2, #3
900017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
900017e6:	4b21      	ldr	r3, [pc, #132]	; (9000186c <MX_SPI1_Init+0xa4>)
900017e8:	2200      	movs	r2, #0
900017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
900017ec:	4b1f      	ldr	r3, [pc, #124]	; (9000186c <MX_SPI1_Init+0xa4>)
900017ee:	2200      	movs	r2, #0
900017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
900017f2:	4b1e      	ldr	r3, [pc, #120]	; (9000186c <MX_SPI1_Init+0xa4>)
900017f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
900017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
900017fa:	4b1c      	ldr	r3, [pc, #112]	; (9000186c <MX_SPI1_Init+0xa4>)
900017fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90001800:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
90001802:	4b1a      	ldr	r3, [pc, #104]	; (9000186c <MX_SPI1_Init+0xa4>)
90001804:	2200      	movs	r2, #0
90001806:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
90001808:	4b18      	ldr	r3, [pc, #96]	; (9000186c <MX_SPI1_Init+0xa4>)
9000180a:	2200      	movs	r2, #0
9000180c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
9000180e:	4b17      	ldr	r3, [pc, #92]	; (9000186c <MX_SPI1_Init+0xa4>)
90001810:	2200      	movs	r2, #0
90001812:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
90001814:	4b15      	ldr	r3, [pc, #84]	; (9000186c <MX_SPI1_Init+0xa4>)
90001816:	2200      	movs	r2, #0
90001818:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
9000181a:	4b14      	ldr	r3, [pc, #80]	; (9000186c <MX_SPI1_Init+0xa4>)
9000181c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90001820:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
90001822:	4b12      	ldr	r3, [pc, #72]	; (9000186c <MX_SPI1_Init+0xa4>)
90001824:	2200      	movs	r2, #0
90001826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
90001828:	4b10      	ldr	r3, [pc, #64]	; (9000186c <MX_SPI1_Init+0xa4>)
9000182a:	2200      	movs	r2, #0
9000182c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
9000182e:	4b0f      	ldr	r3, [pc, #60]	; (9000186c <MX_SPI1_Init+0xa4>)
90001830:	2200      	movs	r2, #0
90001832:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
90001834:	4b0d      	ldr	r3, [pc, #52]	; (9000186c <MX_SPI1_Init+0xa4>)
90001836:	2200      	movs	r2, #0
90001838:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
9000183a:	4b0c      	ldr	r3, [pc, #48]	; (9000186c <MX_SPI1_Init+0xa4>)
9000183c:	2200      	movs	r2, #0
9000183e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
90001840:	4b0a      	ldr	r3, [pc, #40]	; (9000186c <MX_SPI1_Init+0xa4>)
90001842:	2200      	movs	r2, #0
90001844:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
90001846:	4b09      	ldr	r3, [pc, #36]	; (9000186c <MX_SPI1_Init+0xa4>)
90001848:	2200      	movs	r2, #0
9000184a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
9000184c:	4b07      	ldr	r3, [pc, #28]	; (9000186c <MX_SPI1_Init+0xa4>)
9000184e:	2200      	movs	r2, #0
90001850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
90001852:	4b06      	ldr	r3, [pc, #24]	; (9000186c <MX_SPI1_Init+0xa4>)
90001854:	2200      	movs	r2, #0
90001856:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
90001858:	4804      	ldr	r0, [pc, #16]	; (9000186c <MX_SPI1_Init+0xa4>)
9000185a:	f006 fe7f 	bl	9000855c <HAL_SPI_Init>
9000185e:	4603      	mov	r3, r0
90001860:	2b00      	cmp	r3, #0
90001862:	d001      	beq.n	90001868 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
90001864:	f7ff ff0e 	bl	90001684 <Error_Handler>
  }

}
90001868:	bf00      	nop
9000186a:	bd80      	pop	{r7, pc}
9000186c:	2401c230 	.word	0x2401c230
90001870:	40013000 	.word	0x40013000

90001874 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
90001874:	b580      	push	{r7, lr}
90001876:	b08c      	sub	sp, #48	; 0x30
90001878:	af00      	add	r7, sp, #0
9000187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000187c:	f107 031c 	add.w	r3, r7, #28
90001880:	2200      	movs	r2, #0
90001882:	601a      	str	r2, [r3, #0]
90001884:	605a      	str	r2, [r3, #4]
90001886:	609a      	str	r2, [r3, #8]
90001888:	60da      	str	r2, [r3, #12]
9000188a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
9000188c:	687b      	ldr	r3, [r7, #4]
9000188e:	681b      	ldr	r3, [r3, #0]
90001890:	4a39      	ldr	r2, [pc, #228]	; (90001978 <HAL_SPI_MspInit+0x104>)
90001892:	4293      	cmp	r3, r2
90001894:	d16c      	bne.n	90001970 <HAL_SPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
90001896:	4b39      	ldr	r3, [pc, #228]	; (9000197c <HAL_SPI_MspInit+0x108>)
90001898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
9000189c:	4a37      	ldr	r2, [pc, #220]	; (9000197c <HAL_SPI_MspInit+0x108>)
9000189e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900018a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
900018a6:	4b35      	ldr	r3, [pc, #212]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900018ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900018b0:	61bb      	str	r3, [r7, #24]
900018b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
900018b4:	4b31      	ldr	r3, [pc, #196]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900018ba:	4a30      	ldr	r2, [pc, #192]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018bc:	f043 0302 	orr.w	r3, r3, #2
900018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900018c4:	4b2d      	ldr	r3, [pc, #180]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900018ca:	f003 0302 	and.w	r3, r3, #2
900018ce:	617b      	str	r3, [r7, #20]
900018d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
900018d2:	4b2a      	ldr	r3, [pc, #168]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900018d8:	4a28      	ldr	r2, [pc, #160]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900018de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900018e2:	4b26      	ldr	r3, [pc, #152]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900018e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
900018ec:	613b      	str	r3, [r7, #16]
900018ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
900018f0:	4b22      	ldr	r3, [pc, #136]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900018f6:	4a21      	ldr	r2, [pc, #132]	; (9000197c <HAL_SPI_MspInit+0x108>)
900018f8:	f043 0301 	orr.w	r3, r3, #1
900018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001900:	4b1e      	ldr	r3, [pc, #120]	; (9000197c <HAL_SPI_MspInit+0x108>)
90001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001906:	f003 0301 	and.w	r3, r3, #1
9000190a:	60fb      	str	r3, [r7, #12]
9000190c:	68fb      	ldr	r3, [r7, #12]
    PB5     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
9000190e:	2320      	movs	r3, #32
90001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001912:	2302      	movs	r3, #2
90001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001916:	2300      	movs	r3, #0
90001918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000191a:	2300      	movs	r3, #0
9000191c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
9000191e:	2305      	movs	r3, #5
90001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001922:	f107 031c 	add.w	r3, r7, #28
90001926:	4619      	mov	r1, r3
90001928:	4815      	ldr	r0, [pc, #84]	; (90001980 <HAL_SPI_MspInit+0x10c>)
9000192a:	f001 fbab 	bl	90003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
9000192e:	f44f 7300 	mov.w	r3, #512	; 0x200
90001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001934:	2302      	movs	r3, #2
90001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001938:	2300      	movs	r3, #0
9000193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000193c:	2300      	movs	r3, #0
9000193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
90001940:	2305      	movs	r3, #5
90001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90001944:	f107 031c 	add.w	r3, r7, #28
90001948:	4619      	mov	r1, r3
9000194a:	480e      	ldr	r0, [pc, #56]	; (90001984 <HAL_SPI_MspInit+0x110>)
9000194c:	f001 fb9a 	bl	90003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
90001950:	2330      	movs	r3, #48	; 0x30
90001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001954:	2302      	movs	r3, #2
90001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001958:	2300      	movs	r3, #0
9000195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000195c:	2300      	movs	r3, #0
9000195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
90001960:	2305      	movs	r3, #5
90001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90001964:	f107 031c 	add.w	r3, r7, #28
90001968:	4619      	mov	r1, r3
9000196a:	4807      	ldr	r0, [pc, #28]	; (90001988 <HAL_SPI_MspInit+0x114>)
9000196c:	f001 fb8a 	bl	90003084 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
90001970:	bf00      	nop
90001972:	3730      	adds	r7, #48	; 0x30
90001974:	46bd      	mov	sp, r7
90001976:	bd80      	pop	{r7, pc}
90001978:	40013000 	.word	0x40013000
9000197c:	58024400 	.word	0x58024400
90001980:	58020400 	.word	0x58020400
90001984:	58021800 	.word	0x58021800
90001988:	58020000 	.word	0x58020000

9000198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
9000198c:	b480      	push	{r7}
9000198e:	b083      	sub	sp, #12
90001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90001992:	4b0a      	ldr	r3, [pc, #40]	; (900019bc <HAL_MspInit+0x30>)
90001994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001998:	4a08      	ldr	r2, [pc, #32]	; (900019bc <HAL_MspInit+0x30>)
9000199a:	f043 0302 	orr.w	r3, r3, #2
9000199e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900019a2:	4b06      	ldr	r3, [pc, #24]	; (900019bc <HAL_MspInit+0x30>)
900019a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900019a8:	f003 0302 	and.w	r3, r3, #2
900019ac:	607b      	str	r3, [r7, #4]
900019ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
900019b0:	bf00      	nop
900019b2:	370c      	adds	r7, #12
900019b4:	46bd      	mov	sp, r7
900019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900019ba:	4770      	bx	lr
900019bc:	58024400 	.word	0x58024400

900019c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900019c0:	b580      	push	{r7, lr}
900019c2:	b08e      	sub	sp, #56	; 0x38
900019c4:	af00      	add	r7, sp, #0
900019c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
900019c8:	2300      	movs	r3, #0
900019ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
900019cc:	2300      	movs	r3, #0
900019ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
900019d0:	2200      	movs	r2, #0
900019d2:	6879      	ldr	r1, [r7, #4]
900019d4:	2036      	movs	r0, #54	; 0x36
900019d6:	f000 fd05 	bl	900023e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
900019da:	2036      	movs	r0, #54	; 0x36
900019dc:	f000 fd1c 	bl	90002418 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
900019e0:	4b21      	ldr	r3, [pc, #132]	; (90001a68 <HAL_InitTick+0xa8>)
900019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900019e6:	4a20      	ldr	r2, [pc, #128]	; (90001a68 <HAL_InitTick+0xa8>)
900019e8:	f043 0310 	orr.w	r3, r3, #16
900019ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
900019f0:	4b1d      	ldr	r3, [pc, #116]	; (90001a68 <HAL_InitTick+0xa8>)
900019f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900019f6:	f003 0310 	and.w	r3, r3, #16
900019fa:	60bb      	str	r3, [r7, #8]
900019fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
900019fe:	f107 020c 	add.w	r2, r7, #12
90001a02:	f107 0310 	add.w	r3, r7, #16
90001a06:	4611      	mov	r1, r2
90001a08:	4618      	mov	r0, r3
90001a0a:	f003 fb03 	bl	90005014 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
90001a0e:	f003 fad5 	bl	90004fbc <HAL_RCC_GetPCLK1Freq>
90001a12:	4603      	mov	r3, r0
90001a14:	005b      	lsls	r3, r3, #1
90001a16:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
90001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001a1a:	4a14      	ldr	r2, [pc, #80]	; (90001a6c <HAL_InitTick+0xac>)
90001a1c:	fba2 2303 	umull	r2, r3, r2, r3
90001a20:	0c9b      	lsrs	r3, r3, #18
90001a22:	3b01      	subs	r3, #1
90001a24:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
90001a26:	4b12      	ldr	r3, [pc, #72]	; (90001a70 <HAL_InitTick+0xb0>)
90001a28:	4a12      	ldr	r2, [pc, #72]	; (90001a74 <HAL_InitTick+0xb4>)
90001a2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
90001a2c:	4b10      	ldr	r3, [pc, #64]	; (90001a70 <HAL_InitTick+0xb0>)
90001a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
90001a32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90001a34:	4a0e      	ldr	r2, [pc, #56]	; (90001a70 <HAL_InitTick+0xb0>)
90001a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001a38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
90001a3a:	4b0d      	ldr	r3, [pc, #52]	; (90001a70 <HAL_InitTick+0xb0>)
90001a3c:	2200      	movs	r2, #0
90001a3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90001a40:	4b0b      	ldr	r3, [pc, #44]	; (90001a70 <HAL_InitTick+0xb0>)
90001a42:	2200      	movs	r2, #0
90001a44:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90001a46:	480a      	ldr	r0, [pc, #40]	; (90001a70 <HAL_InitTick+0xb0>)
90001a48:	f006 fe9b 	bl	90008782 <HAL_TIM_Base_Init>
90001a4c:	4603      	mov	r3, r0
90001a4e:	2b00      	cmp	r3, #0
90001a50:	d104      	bne.n	90001a5c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
90001a52:	4807      	ldr	r0, [pc, #28]	; (90001a70 <HAL_InitTick+0xb0>)
90001a54:	f006 fef6 	bl	90008844 <HAL_TIM_Base_Start_IT>
90001a58:	4603      	mov	r3, r0
90001a5a:	e000      	b.n	90001a5e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
90001a5c:	2301      	movs	r3, #1
}
90001a5e:	4618      	mov	r0, r3
90001a60:	3738      	adds	r7, #56	; 0x38
90001a62:	46bd      	mov	sp, r7
90001a64:	bd80      	pop	{r7, pc}
90001a66:	bf00      	nop
90001a68:	58024400 	.word	0x58024400
90001a6c:	431bde83 	.word	0x431bde83
90001a70:	2401c2b8 	.word	0x2401c2b8
90001a74:	40001000 	.word	0x40001000

90001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90001a78:	b480      	push	{r7}
90001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90001a7c:	bf00      	nop
90001a7e:	46bd      	mov	sp, r7
90001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
90001a84:	4770      	bx	lr

90001a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90001a86:	b480      	push	{r7}
90001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90001a8a:	e7fe      	b.n	90001a8a <HardFault_Handler+0x4>

90001a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90001a8c:	b480      	push	{r7}
90001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90001a90:	e7fe      	b.n	90001a90 <MemManage_Handler+0x4>

90001a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90001a92:	b480      	push	{r7}
90001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90001a96:	e7fe      	b.n	90001a96 <BusFault_Handler+0x4>

90001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90001a98:	b480      	push	{r7}
90001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90001a9c:	e7fe      	b.n	90001a9c <UsageFault_Handler+0x4>

90001a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
90001a9e:	b480      	push	{r7}
90001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
90001aa2:	bf00      	nop
90001aa4:	46bd      	mov	sp, r7
90001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
90001aaa:	4770      	bx	lr

90001aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90001aac:	b480      	push	{r7}
90001aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90001ab0:	bf00      	nop
90001ab2:	46bd      	mov	sp, r7
90001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ab8:	4770      	bx	lr
	...

90001abc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
90001abc:	b580      	push	{r7, lr}
90001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
90001ac0:	4802      	ldr	r0, [pc, #8]	; (90001acc <SDMMC1_IRQHandler+0x10>)
90001ac2:	f005 fad1 	bl	90007068 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
90001ac6:	bf00      	nop
90001ac8:	bd80      	pop	{r7, pc}
90001aca:	bf00      	nop
90001acc:	2401c1b0 	.word	0x2401c1b0

90001ad0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
90001ad0:	b580      	push	{r7, lr}
90001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
90001ad4:	4802      	ldr	r0, [pc, #8]	; (90001ae0 <UART4_IRQHandler+0x10>)
90001ad6:	f007 f9d1 	bl	90008e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
90001ada:	bf00      	nop
90001adc:	bd80      	pop	{r7, pc}
90001ade:	bf00      	nop
90001ae0:	2401c304 	.word	0x2401c304

90001ae4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
90001ae4:	b580      	push	{r7, lr}
90001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90001ae8:	4802      	ldr	r0, [pc, #8]	; (90001af4 <TIM6_DAC_IRQHandler+0x10>)
90001aea:	f006 fee1 	bl	900088b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
90001aee:	bf00      	nop
90001af0:	bd80      	pop	{r7, pc}
90001af2:	bf00      	nop
90001af4:	2401c2b8 	.word	0x2401c2b8

90001af8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
90001af8:	b580      	push	{r7, lr}
90001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90001afc:	4802      	ldr	r0, [pc, #8]	; (90001b08 <LTDC_IRQHandler+0x10>)
90001afe:	f001 fe83 	bl	90003808 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
90001b02:	bf00      	nop
90001b04:	bd80      	pop	{r7, pc}
90001b06:	bf00      	nop
90001b08:	2401c108 	.word	0x2401c108

90001b0c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
90001b0c:	b580      	push	{r7, lr}
90001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90001b10:	4802      	ldr	r0, [pc, #8]	; (90001b1c <LTDC_ER_IRQHandler+0x10>)
90001b12:	f001 fe79 	bl	90003808 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
90001b16:	bf00      	nop
90001b18:	bd80      	pop	{r7, pc}
90001b1a:	bf00      	nop
90001b1c:	2401c108 	.word	0x2401c108

90001b20 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
90001b20:	b580      	push	{r7, lr}
90001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90001b24:	4802      	ldr	r0, [pc, #8]	; (90001b30 <DMA2D_IRQHandler+0x10>)
90001b26:	f001 f842 	bl	90002bae <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
90001b2a:	bf00      	nop
90001b2c:	bd80      	pop	{r7, pc}
90001b2e:	bf00      	nop
90001b30:	2401c020 	.word	0x2401c020

90001b34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001b34:	b580      	push	{r7, lr}
90001b36:	b086      	sub	sp, #24
90001b38:	af00      	add	r7, sp, #0
90001b3a:	60f8      	str	r0, [r7, #12]
90001b3c:	60b9      	str	r1, [r7, #8]
90001b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001b40:	2300      	movs	r3, #0
90001b42:	617b      	str	r3, [r7, #20]
90001b44:	e00a      	b.n	90001b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
90001b46:	f3af 8000 	nop.w
90001b4a:	4601      	mov	r1, r0
90001b4c:	68bb      	ldr	r3, [r7, #8]
90001b4e:	1c5a      	adds	r2, r3, #1
90001b50:	60ba      	str	r2, [r7, #8]
90001b52:	b2ca      	uxtb	r2, r1
90001b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001b56:	697b      	ldr	r3, [r7, #20]
90001b58:	3301      	adds	r3, #1
90001b5a:	617b      	str	r3, [r7, #20]
90001b5c:	697a      	ldr	r2, [r7, #20]
90001b5e:	687b      	ldr	r3, [r7, #4]
90001b60:	429a      	cmp	r2, r3
90001b62:	dbf0      	blt.n	90001b46 <_read+0x12>
	}

return len;
90001b64:	687b      	ldr	r3, [r7, #4]
}
90001b66:	4618      	mov	r0, r3
90001b68:	3718      	adds	r7, #24
90001b6a:	46bd      	mov	sp, r7
90001b6c:	bd80      	pop	{r7, pc}

90001b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90001b6e:	b580      	push	{r7, lr}
90001b70:	b086      	sub	sp, #24
90001b72:	af00      	add	r7, sp, #0
90001b74:	60f8      	str	r0, [r7, #12]
90001b76:	60b9      	str	r1, [r7, #8]
90001b78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001b7a:	2300      	movs	r3, #0
90001b7c:	617b      	str	r3, [r7, #20]
90001b7e:	e009      	b.n	90001b94 <_write+0x26>
	{
		__io_putchar(*ptr++);
90001b80:	68bb      	ldr	r3, [r7, #8]
90001b82:	1c5a      	adds	r2, r3, #1
90001b84:	60ba      	str	r2, [r7, #8]
90001b86:	781b      	ldrb	r3, [r3, #0]
90001b88:	4618      	mov	r0, r3
90001b8a:	f7ff fd57 	bl	9000163c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001b8e:	697b      	ldr	r3, [r7, #20]
90001b90:	3301      	adds	r3, #1
90001b92:	617b      	str	r3, [r7, #20]
90001b94:	697a      	ldr	r2, [r7, #20]
90001b96:	687b      	ldr	r3, [r7, #4]
90001b98:	429a      	cmp	r2, r3
90001b9a:	dbf1      	blt.n	90001b80 <_write+0x12>
	}
	return len;
90001b9c:	687b      	ldr	r3, [r7, #4]
}
90001b9e:	4618      	mov	r0, r3
90001ba0:	3718      	adds	r7, #24
90001ba2:	46bd      	mov	sp, r7
90001ba4:	bd80      	pop	{r7, pc}

90001ba6 <_close>:

int _close(int file)
{
90001ba6:	b480      	push	{r7}
90001ba8:	b083      	sub	sp, #12
90001baa:	af00      	add	r7, sp, #0
90001bac:	6078      	str	r0, [r7, #4]
	return -1;
90001bae:	f04f 33ff 	mov.w	r3, #4294967295
}
90001bb2:	4618      	mov	r0, r3
90001bb4:	370c      	adds	r7, #12
90001bb6:	46bd      	mov	sp, r7
90001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
90001bbc:	4770      	bx	lr

90001bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
90001bbe:	b480      	push	{r7}
90001bc0:	b083      	sub	sp, #12
90001bc2:	af00      	add	r7, sp, #0
90001bc4:	6078      	str	r0, [r7, #4]
90001bc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90001bc8:	683b      	ldr	r3, [r7, #0]
90001bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90001bce:	605a      	str	r2, [r3, #4]
	return 0;
90001bd0:	2300      	movs	r3, #0
}
90001bd2:	4618      	mov	r0, r3
90001bd4:	370c      	adds	r7, #12
90001bd6:	46bd      	mov	sp, r7
90001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
90001bdc:	4770      	bx	lr

90001bde <_isatty>:

int _isatty(int file)
{
90001bde:	b480      	push	{r7}
90001be0:	b083      	sub	sp, #12
90001be2:	af00      	add	r7, sp, #0
90001be4:	6078      	str	r0, [r7, #4]
	return 1;
90001be6:	2301      	movs	r3, #1
}
90001be8:	4618      	mov	r0, r3
90001bea:	370c      	adds	r7, #12
90001bec:	46bd      	mov	sp, r7
90001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
90001bf2:	4770      	bx	lr

90001bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001bf4:	b480      	push	{r7}
90001bf6:	b085      	sub	sp, #20
90001bf8:	af00      	add	r7, sp, #0
90001bfa:	60f8      	str	r0, [r7, #12]
90001bfc:	60b9      	str	r1, [r7, #8]
90001bfe:	607a      	str	r2, [r7, #4]
	return 0;
90001c00:	2300      	movs	r3, #0
}
90001c02:	4618      	mov	r0, r3
90001c04:	3714      	adds	r7, #20
90001c06:	46bd      	mov	sp, r7
90001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
90001c0c:	4770      	bx	lr
	...

90001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001c10:	b580      	push	{r7, lr}
90001c12:	b086      	sub	sp, #24
90001c14:	af00      	add	r7, sp, #0
90001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001c18:	4a14      	ldr	r2, [pc, #80]	; (90001c6c <_sbrk+0x5c>)
90001c1a:	4b15      	ldr	r3, [pc, #84]	; (90001c70 <_sbrk+0x60>)
90001c1c:	1ad3      	subs	r3, r2, r3
90001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001c20:	697b      	ldr	r3, [r7, #20]
90001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001c24:	4b13      	ldr	r3, [pc, #76]	; (90001c74 <_sbrk+0x64>)
90001c26:	681b      	ldr	r3, [r3, #0]
90001c28:	2b00      	cmp	r3, #0
90001c2a:	d102      	bne.n	90001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90001c2c:	4b11      	ldr	r3, [pc, #68]	; (90001c74 <_sbrk+0x64>)
90001c2e:	4a12      	ldr	r2, [pc, #72]	; (90001c78 <_sbrk+0x68>)
90001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001c32:	4b10      	ldr	r3, [pc, #64]	; (90001c74 <_sbrk+0x64>)
90001c34:	681a      	ldr	r2, [r3, #0]
90001c36:	687b      	ldr	r3, [r7, #4]
90001c38:	4413      	add	r3, r2
90001c3a:	693a      	ldr	r2, [r7, #16]
90001c3c:	429a      	cmp	r2, r3
90001c3e:	d207      	bcs.n	90001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
90001c40:	f00c f982 	bl	9000df48 <__errno>
90001c44:	4602      	mov	r2, r0
90001c46:	230c      	movs	r3, #12
90001c48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
90001c4a:	f04f 33ff 	mov.w	r3, #4294967295
90001c4e:	e009      	b.n	90001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001c50:	4b08      	ldr	r3, [pc, #32]	; (90001c74 <_sbrk+0x64>)
90001c52:	681b      	ldr	r3, [r3, #0]
90001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001c56:	4b07      	ldr	r3, [pc, #28]	; (90001c74 <_sbrk+0x64>)
90001c58:	681a      	ldr	r2, [r3, #0]
90001c5a:	687b      	ldr	r3, [r7, #4]
90001c5c:	4413      	add	r3, r2
90001c5e:	4a05      	ldr	r2, [pc, #20]	; (90001c74 <_sbrk+0x64>)
90001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001c62:	68fb      	ldr	r3, [r7, #12]
}
90001c64:	4618      	mov	r0, r3
90001c66:	3718      	adds	r7, #24
90001c68:	46bd      	mov	sp, r7
90001c6a:	bd80      	pop	{r7, pc}
90001c6c:	24080000 	.word	0x24080000
90001c70:	00000400 	.word	0x00000400
90001c74:	2400a098 	.word	0x2400a098
90001c78:	2401ce18 	.word	0x2401ce18

90001c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90001c7c:	b480      	push	{r7}
90001c7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90001c80:	4b39      	ldr	r3, [pc, #228]	; (90001d68 <SystemInit+0xec>)
90001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001c86:	4a38      	ldr	r2, [pc, #224]	; (90001d68 <SystemInit+0xec>)
90001c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90001c90:	4b36      	ldr	r3, [pc, #216]	; (90001d6c <SystemInit+0xf0>)
90001c92:	681b      	ldr	r3, [r3, #0]
90001c94:	f003 030f 	and.w	r3, r3, #15
90001c98:	2b06      	cmp	r3, #6
90001c9a:	d807      	bhi.n	90001cac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90001c9c:	4b33      	ldr	r3, [pc, #204]	; (90001d6c <SystemInit+0xf0>)
90001c9e:	681b      	ldr	r3, [r3, #0]
90001ca0:	f023 030f 	bic.w	r3, r3, #15
90001ca4:	4a31      	ldr	r2, [pc, #196]	; (90001d6c <SystemInit+0xf0>)
90001ca6:	f043 0307 	orr.w	r3, r3, #7
90001caa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90001cac:	4b30      	ldr	r3, [pc, #192]	; (90001d70 <SystemInit+0xf4>)
90001cae:	681b      	ldr	r3, [r3, #0]
90001cb0:	4a2f      	ldr	r2, [pc, #188]	; (90001d70 <SystemInit+0xf4>)
90001cb2:	f043 0301 	orr.w	r3, r3, #1
90001cb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90001cb8:	4b2d      	ldr	r3, [pc, #180]	; (90001d70 <SystemInit+0xf4>)
90001cba:	2200      	movs	r2, #0
90001cbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90001cbe:	4b2c      	ldr	r3, [pc, #176]	; (90001d70 <SystemInit+0xf4>)
90001cc0:	681a      	ldr	r2, [r3, #0]
90001cc2:	492b      	ldr	r1, [pc, #172]	; (90001d70 <SystemInit+0xf4>)
90001cc4:	4b2b      	ldr	r3, [pc, #172]	; (90001d74 <SystemInit+0xf8>)
90001cc6:	4013      	ands	r3, r2
90001cc8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90001cca:	4b28      	ldr	r3, [pc, #160]	; (90001d6c <SystemInit+0xf0>)
90001ccc:	681b      	ldr	r3, [r3, #0]
90001cce:	f003 030f 	and.w	r3, r3, #15
90001cd2:	2b07      	cmp	r3, #7
90001cd4:	d907      	bls.n	90001ce6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90001cd6:	4b25      	ldr	r3, [pc, #148]	; (90001d6c <SystemInit+0xf0>)
90001cd8:	681b      	ldr	r3, [r3, #0]
90001cda:	f023 030f 	bic.w	r3, r3, #15
90001cde:	4a23      	ldr	r2, [pc, #140]	; (90001d6c <SystemInit+0xf0>)
90001ce0:	f043 0307 	orr.w	r3, r3, #7
90001ce4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90001ce6:	4b22      	ldr	r3, [pc, #136]	; (90001d70 <SystemInit+0xf4>)
90001ce8:	2200      	movs	r2, #0
90001cea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90001cec:	4b20      	ldr	r3, [pc, #128]	; (90001d70 <SystemInit+0xf4>)
90001cee:	2200      	movs	r2, #0
90001cf0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90001cf2:	4b1f      	ldr	r3, [pc, #124]	; (90001d70 <SystemInit+0xf4>)
90001cf4:	2200      	movs	r2, #0
90001cf6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
90001cf8:	4b1d      	ldr	r3, [pc, #116]	; (90001d70 <SystemInit+0xf4>)
90001cfa:	4a1f      	ldr	r2, [pc, #124]	; (90001d78 <SystemInit+0xfc>)
90001cfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
90001cfe:	4b1c      	ldr	r3, [pc, #112]	; (90001d70 <SystemInit+0xf4>)
90001d00:	4a1e      	ldr	r2, [pc, #120]	; (90001d7c <SystemInit+0x100>)
90001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
90001d04:	4b1a      	ldr	r3, [pc, #104]	; (90001d70 <SystemInit+0xf4>)
90001d06:	4a1e      	ldr	r2, [pc, #120]	; (90001d80 <SystemInit+0x104>)
90001d08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90001d0a:	4b19      	ldr	r3, [pc, #100]	; (90001d70 <SystemInit+0xf4>)
90001d0c:	2200      	movs	r2, #0
90001d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
90001d10:	4b17      	ldr	r3, [pc, #92]	; (90001d70 <SystemInit+0xf4>)
90001d12:	4a1b      	ldr	r2, [pc, #108]	; (90001d80 <SystemInit+0x104>)
90001d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
90001d16:	4b16      	ldr	r3, [pc, #88]	; (90001d70 <SystemInit+0xf4>)
90001d18:	2200      	movs	r2, #0
90001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
90001d1c:	4b14      	ldr	r3, [pc, #80]	; (90001d70 <SystemInit+0xf4>)
90001d1e:	4a18      	ldr	r2, [pc, #96]	; (90001d80 <SystemInit+0x104>)
90001d20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90001d22:	4b13      	ldr	r3, [pc, #76]	; (90001d70 <SystemInit+0xf4>)
90001d24:	2200      	movs	r2, #0
90001d26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90001d28:	4b11      	ldr	r3, [pc, #68]	; (90001d70 <SystemInit+0xf4>)
90001d2a:	681b      	ldr	r3, [r3, #0]
90001d2c:	4a10      	ldr	r2, [pc, #64]	; (90001d70 <SystemInit+0xf4>)
90001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001d32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90001d34:	4b0e      	ldr	r3, [pc, #56]	; (90001d70 <SystemInit+0xf4>)
90001d36:	2200      	movs	r2, #0
90001d38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90001d3a:	4b12      	ldr	r3, [pc, #72]	; (90001d84 <SystemInit+0x108>)
90001d3c:	681a      	ldr	r2, [r3, #0]
90001d3e:	4b12      	ldr	r3, [pc, #72]	; (90001d88 <SystemInit+0x10c>)
90001d40:	4013      	ands	r3, r2
90001d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90001d46:	d202      	bcs.n	90001d4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90001d48:	4b10      	ldr	r3, [pc, #64]	; (90001d8c <SystemInit+0x110>)
90001d4a:	2201      	movs	r2, #1
90001d4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
90001d4e:	4b10      	ldr	r3, [pc, #64]	; (90001d90 <SystemInit+0x114>)
90001d50:	f243 02d2 	movw	r2, #12498	; 0x30d2
90001d54:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
90001d56:	4b04      	ldr	r3, [pc, #16]	; (90001d68 <SystemInit+0xec>)
90001d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
90001d5c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90001d5e:	bf00      	nop
90001d60:	46bd      	mov	sp, r7
90001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
90001d66:	4770      	bx	lr
90001d68:	e000ed00 	.word	0xe000ed00
90001d6c:	52002000 	.word	0x52002000
90001d70:	58024400 	.word	0x58024400
90001d74:	eaf6ed7f 	.word	0xeaf6ed7f
90001d78:	02020200 	.word	0x02020200
90001d7c:	01ff0000 	.word	0x01ff0000
90001d80:	01010280 	.word	0x01010280
90001d84:	5c001000 	.word	0x5c001000
90001d88:	ffff0000 	.word	0xffff0000
90001d8c:	51008108 	.word	0x51008108
90001d90:	52004000 	.word	0x52004000

90001d94 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
90001d94:	b580      	push	{r7, lr}
90001d96:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
90001d98:	4b22      	ldr	r3, [pc, #136]	; (90001e24 <MX_UART4_Init+0x90>)
90001d9a:	4a23      	ldr	r2, [pc, #140]	; (90001e28 <MX_UART4_Init+0x94>)
90001d9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
90001d9e:	4b21      	ldr	r3, [pc, #132]	; (90001e24 <MX_UART4_Init+0x90>)
90001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
90001da4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
90001da6:	4b1f      	ldr	r3, [pc, #124]	; (90001e24 <MX_UART4_Init+0x90>)
90001da8:	2200      	movs	r2, #0
90001daa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
90001dac:	4b1d      	ldr	r3, [pc, #116]	; (90001e24 <MX_UART4_Init+0x90>)
90001dae:	2200      	movs	r2, #0
90001db0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
90001db2:	4b1c      	ldr	r3, [pc, #112]	; (90001e24 <MX_UART4_Init+0x90>)
90001db4:	2200      	movs	r2, #0
90001db6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
90001db8:	4b1a      	ldr	r3, [pc, #104]	; (90001e24 <MX_UART4_Init+0x90>)
90001dba:	220c      	movs	r2, #12
90001dbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90001dbe:	4b19      	ldr	r3, [pc, #100]	; (90001e24 <MX_UART4_Init+0x90>)
90001dc0:	2200      	movs	r2, #0
90001dc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
90001dc4:	4b17      	ldr	r3, [pc, #92]	; (90001e24 <MX_UART4_Init+0x90>)
90001dc6:	2200      	movs	r2, #0
90001dc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90001dca:	4b16      	ldr	r3, [pc, #88]	; (90001e24 <MX_UART4_Init+0x90>)
90001dcc:	2200      	movs	r2, #0
90001dce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90001dd0:	4b14      	ldr	r3, [pc, #80]	; (90001e24 <MX_UART4_Init+0x90>)
90001dd2:	2200      	movs	r2, #0
90001dd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90001dd6:	4b13      	ldr	r3, [pc, #76]	; (90001e24 <MX_UART4_Init+0x90>)
90001dd8:	2200      	movs	r2, #0
90001dda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
90001ddc:	4811      	ldr	r0, [pc, #68]	; (90001e24 <MX_UART4_Init+0x90>)
90001dde:	f006 ff67 	bl	90008cb0 <HAL_UART_Init>
90001de2:	4603      	mov	r3, r0
90001de4:	2b00      	cmp	r3, #0
90001de6:	d001      	beq.n	90001dec <MX_UART4_Init+0x58>
  {
    Error_Handler();
90001de8:	f7ff fc4c 	bl	90001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90001dec:	2100      	movs	r1, #0
90001dee:	480d      	ldr	r0, [pc, #52]	; (90001e24 <MX_UART4_Init+0x90>)
90001df0:	f008 f99d 	bl	9000a12e <HAL_UARTEx_SetTxFifoThreshold>
90001df4:	4603      	mov	r3, r0
90001df6:	2b00      	cmp	r3, #0
90001df8:	d001      	beq.n	90001dfe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
90001dfa:	f7ff fc43 	bl	90001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90001dfe:	2100      	movs	r1, #0
90001e00:	4808      	ldr	r0, [pc, #32]	; (90001e24 <MX_UART4_Init+0x90>)
90001e02:	f008 f9d2 	bl	9000a1aa <HAL_UARTEx_SetRxFifoThreshold>
90001e06:	4603      	mov	r3, r0
90001e08:	2b00      	cmp	r3, #0
90001e0a:	d001      	beq.n	90001e10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
90001e0c:	f7ff fc3a 	bl	90001684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
90001e10:	4804      	ldr	r0, [pc, #16]	; (90001e24 <MX_UART4_Init+0x90>)
90001e12:	f008 f953 	bl	9000a0bc <HAL_UARTEx_DisableFifoMode>
90001e16:	4603      	mov	r3, r0
90001e18:	2b00      	cmp	r3, #0
90001e1a:	d001      	beq.n	90001e20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
90001e1c:	f7ff fc32 	bl	90001684 <Error_Handler>
  }

}
90001e20:	bf00      	nop
90001e22:	bd80      	pop	{r7, pc}
90001e24:	2401c304 	.word	0x2401c304
90001e28:	40004c00 	.word	0x40004c00

90001e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
90001e2c:	b580      	push	{r7, lr}
90001e2e:	b08a      	sub	sp, #40	; 0x28
90001e30:	af00      	add	r7, sp, #0
90001e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001e34:	f107 0314 	add.w	r3, r7, #20
90001e38:	2200      	movs	r2, #0
90001e3a:	601a      	str	r2, [r3, #0]
90001e3c:	605a      	str	r2, [r3, #4]
90001e3e:	609a      	str	r2, [r3, #8]
90001e40:	60da      	str	r2, [r3, #12]
90001e42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
90001e44:	687b      	ldr	r3, [r7, #4]
90001e46:	681b      	ldr	r3, [r3, #0]
90001e48:	4a2e      	ldr	r2, [pc, #184]	; (90001f04 <HAL_UART_MspInit+0xd8>)
90001e4a:	4293      	cmp	r3, r2
90001e4c:	d155      	bne.n	90001efa <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
90001e4e:	4b2e      	ldr	r3, [pc, #184]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001e54:	4a2c      	ldr	r2, [pc, #176]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90001e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001e5e:	4b2a      	ldr	r3, [pc, #168]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90001e68:	613b      	str	r3, [r7, #16]
90001e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
90001e6c:	4b26      	ldr	r3, [pc, #152]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001e72:	4a25      	ldr	r2, [pc, #148]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001e7c:	4b22      	ldr	r3, [pc, #136]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001e86:	60fb      	str	r3, [r7, #12]
90001e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
90001e8a:	4b1f      	ldr	r3, [pc, #124]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001e90:	4a1d      	ldr	r2, [pc, #116]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e92:	f043 0301 	orr.w	r3, r3, #1
90001e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001e9a:	4b1b      	ldr	r3, [pc, #108]	; (90001f08 <HAL_UART_MspInit+0xdc>)
90001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001ea0:	f003 0301 	and.w	r3, r3, #1
90001ea4:	60bb      	str	r3, [r7, #8]
90001ea6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
90001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001eae:	2302      	movs	r3, #2
90001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001eb2:	2300      	movs	r3, #0
90001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001eb6:	2300      	movs	r3, #0
90001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
90001eba:	2308      	movs	r3, #8
90001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90001ebe:	f107 0314 	add.w	r3, r7, #20
90001ec2:	4619      	mov	r1, r3
90001ec4:	4811      	ldr	r0, [pc, #68]	; (90001f0c <HAL_UART_MspInit+0xe0>)
90001ec6:	f001 f8dd 	bl	90003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
90001eca:	2301      	movs	r3, #1
90001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001ece:	2302      	movs	r3, #2
90001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001ed2:	2300      	movs	r3, #0
90001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001ed6:	2300      	movs	r3, #0
90001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
90001eda:	2308      	movs	r3, #8
90001edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90001ede:	f107 0314 	add.w	r3, r7, #20
90001ee2:	4619      	mov	r1, r3
90001ee4:	480a      	ldr	r0, [pc, #40]	; (90001f10 <HAL_UART_MspInit+0xe4>)
90001ee6:	f001 f8cd 	bl	90003084 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
90001eea:	2200      	movs	r2, #0
90001eec:	2100      	movs	r1, #0
90001eee:	2034      	movs	r0, #52	; 0x34
90001ef0:	f000 fa78 	bl	900023e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
90001ef4:	2034      	movs	r0, #52	; 0x34
90001ef6:	f000 fa8f 	bl	90002418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
90001efa:	bf00      	nop
90001efc:	3728      	adds	r7, #40	; 0x28
90001efe:	46bd      	mov	sp, r7
90001f00:	bd80      	pop	{r7, pc}
90001f02:	bf00      	nop
90001f04:	40004c00 	.word	0x40004c00
90001f08:	58024400 	.word	0x58024400
90001f0c:	58022000 	.word	0x58022000
90001f10:	58020000 	.word	0x58020000

90001f14 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
90001f14:	b580      	push	{r7, lr}
90001f16:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
90001f18:	4b15      	ldr	r3, [pc, #84]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f1a:	4a16      	ldr	r2, [pc, #88]	; (90001f74 <MX_USB_OTG_FS_PCD_Init+0x60>)
90001f1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
90001f1e:	4b14      	ldr	r3, [pc, #80]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f20:	2209      	movs	r2, #9
90001f22:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
90001f24:	4b12      	ldr	r3, [pc, #72]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f26:	2202      	movs	r2, #2
90001f28:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
90001f2a:	4b11      	ldr	r3, [pc, #68]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f2c:	2200      	movs	r2, #0
90001f2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
90001f30:	4b0f      	ldr	r3, [pc, #60]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f32:	2202      	movs	r2, #2
90001f34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
90001f36:	4b0e      	ldr	r3, [pc, #56]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f38:	2200      	movs	r2, #0
90001f3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
90001f3c:	4b0c      	ldr	r3, [pc, #48]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f3e:	2200      	movs	r2, #0
90001f40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
90001f42:	4b0b      	ldr	r3, [pc, #44]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f44:	2200      	movs	r2, #0
90001f46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
90001f48:	4b09      	ldr	r3, [pc, #36]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f4a:	2200      	movs	r2, #0
90001f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
90001f4e:	4b08      	ldr	r3, [pc, #32]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f50:	2200      	movs	r2, #0
90001f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
90001f54:	4b06      	ldr	r3, [pc, #24]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f56:	2200      	movs	r2, #0
90001f58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
90001f5a:	4805      	ldr	r0, [pc, #20]	; (90001f70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
90001f5c:	f001 ff34 	bl	90003dc8 <HAL_PCD_Init>
90001f60:	4603      	mov	r3, r0
90001f62:	2b00      	cmp	r3, #0
90001f64:	d001      	beq.n	90001f6a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
90001f66:	f7ff fb8d 	bl	90001684 <Error_Handler>
  }

}
90001f6a:	bf00      	nop
90001f6c:	bd80      	pop	{r7, pc}
90001f6e:	bf00      	nop
90001f70:	2401c390 	.word	0x2401c390
90001f74:	40080000 	.word	0x40080000

90001f78 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
90001f78:	b580      	push	{r7, lr}
90001f7a:	b08a      	sub	sp, #40	; 0x28
90001f7c:	af00      	add	r7, sp, #0
90001f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001f80:	f107 0314 	add.w	r3, r7, #20
90001f84:	2200      	movs	r2, #0
90001f86:	601a      	str	r2, [r3, #0]
90001f88:	605a      	str	r2, [r3, #4]
90001f8a:	609a      	str	r2, [r3, #8]
90001f8c:	60da      	str	r2, [r3, #12]
90001f8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
90001f90:	687b      	ldr	r3, [r7, #4]
90001f92:	681b      	ldr	r3, [r3, #0]
90001f94:	4a1a      	ldr	r2, [pc, #104]	; (90002000 <HAL_PCD_MspInit+0x88>)
90001f96:	4293      	cmp	r3, r2
90001f98:	d12e      	bne.n	90001ff8 <HAL_PCD_MspInit+0x80>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
90001f9a:	4b1a      	ldr	r3, [pc, #104]	; (90002004 <HAL_PCD_MspInit+0x8c>)
90001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001fa0:	4a18      	ldr	r2, [pc, #96]	; (90002004 <HAL_PCD_MspInit+0x8c>)
90001fa2:	f043 0301 	orr.w	r3, r3, #1
90001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001faa:	4b16      	ldr	r3, [pc, #88]	; (90002004 <HAL_PCD_MspInit+0x8c>)
90001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001fb0:	f003 0301 	and.w	r3, r3, #1
90001fb4:	613b      	str	r3, [r7, #16]
90001fb6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
90001fb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
90001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001fbe:	2302      	movs	r3, #2
90001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001fc2:	2300      	movs	r3, #0
90001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001fc6:	2300      	movs	r3, #0
90001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
90001fca:	230a      	movs	r3, #10
90001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90001fce:	f107 0314 	add.w	r3, r7, #20
90001fd2:	4619      	mov	r1, r3
90001fd4:	480c      	ldr	r0, [pc, #48]	; (90002008 <HAL_PCD_MspInit+0x90>)
90001fd6:	f001 f855 	bl	90003084 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
90001fda:	4b0a      	ldr	r3, [pc, #40]	; (90002004 <HAL_PCD_MspInit+0x8c>)
90001fdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
90001fe0:	4a08      	ldr	r2, [pc, #32]	; (90002004 <HAL_PCD_MspInit+0x8c>)
90001fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
90001fe6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
90001fea:	4b06      	ldr	r3, [pc, #24]	; (90002004 <HAL_PCD_MspInit+0x8c>)
90001fec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
90001ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90001ff4:	60fb      	str	r3, [r7, #12]
90001ff6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
90001ff8:	bf00      	nop
90001ffa:	3728      	adds	r7, #40	; 0x28
90001ffc:	46bd      	mov	sp, r7
90001ffe:	bd80      	pop	{r7, pc}
90002000:	40080000 	.word	0x40080000
90002004:	58024400 	.word	0x58024400
90002008:	58020000 	.word	0x58020000

9000200c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
9000200c:	f8df d034 	ldr.w	sp, [pc, #52]	; 90002044 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
90002010:	f7ff fe34 	bl	90001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90002014:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90002016:	e003      	b.n	90002020 <LoopCopyDataInit>

90002018 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90002018:	4b0b      	ldr	r3, [pc, #44]	; (90002048 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
9000201a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000201c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000201e:	3104      	adds	r1, #4

90002020 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90002020:	480a      	ldr	r0, [pc, #40]	; (9000204c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
90002022:	4b0b      	ldr	r3, [pc, #44]	; (90002050 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
90002024:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90002026:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90002028:	d3f6      	bcc.n	90002018 <CopyDataInit>
  ldr  r2, =_sbss
9000202a:	4a0a      	ldr	r2, [pc, #40]	; (90002054 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
9000202c:	e002      	b.n	90002034 <LoopFillZerobss>

9000202e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000202e:	2300      	movs	r3, #0
  str  r3, [r2], #4
90002030:	f842 3b04 	str.w	r3, [r2], #4

90002034 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
90002034:	4b08      	ldr	r3, [pc, #32]	; (90002058 <LoopFillZerobss+0x24>)
  cmp  r2, r3
90002036:	429a      	cmp	r2, r3
  bcc  FillZerobss
90002038:	d3f9      	bcc.n	9000202e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
9000203a:	f00b ff8b 	bl	9000df54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000203e:	f7ff f9b7 	bl	900013b0 <main>
  bx  lr    
90002042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90002044:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
90002048:	9000f0d4 	.word	0x9000f0d4
  ldr  r0, =_sdata
9000204c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
90002050:	2400a078 	.word	0x2400a078
  ldr  r2, =_sbss
90002054:	2400a078 	.word	0x2400a078
  ldr  r3, = _ebss
90002058:	2401ce18 	.word	0x2401ce18

9000205c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
9000205c:	e7fe      	b.n	9000205c <ADC3_IRQHandler>

9000205e <SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
9000205e:	b580      	push	{r7, lr}
90002060:	b084      	sub	sp, #16
90002062:	af00      	add	r7, sp, #0
90002064:	6078      	str	r0, [r7, #4]
90002066:	6039      	str	r1, [r7, #0]
    __IO uint32_t tmpmrd = 0;
90002068:	2300      	movs	r3, #0
9000206a:	60bb      	str	r3, [r7, #8]
    uint32_t target_bank = 0;
9000206c:	2300      	movs	r3, #0
9000206e:	60fb      	str	r3, [r7, #12]

#if SDRAM_TARGET_BANK == 1
    target_bank = FMC_SDRAM_CMD_TARGET_BANK1;
90002070:	2310      	movs	r3, #16
90002072:	60fb      	str	r3, [r7, #12]
#else
    target_bank = FMC_SDRAM_CMD_TARGET_BANK2;
#endif

    /* Configure a clock configuration enable command */
    Command->CommandMode           = FMC_SDRAM_CMD_CLK_ENABLE;
90002074:	683b      	ldr	r3, [r7, #0]
90002076:	2201      	movs	r2, #1
90002078:	601a      	str	r2, [r3, #0]
    Command->CommandTarget         = target_bank;
9000207a:	683b      	ldr	r3, [r7, #0]
9000207c:	68fa      	ldr	r2, [r7, #12]
9000207e:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber     = 1;
90002080:	683b      	ldr	r3, [r7, #0]
90002082:	2201      	movs	r2, #1
90002084:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
90002086:	683b      	ldr	r3, [r7, #0]
90002088:	2200      	movs	r2, #0
9000208a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
9000208c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90002090:	6839      	ldr	r1, [r7, #0]
90002092:	6878      	ldr	r0, [r7, #4]
90002094:	f006 fa04 	bl	900084a0 <HAL_SDRAM_SendCommand>

    /* Insert 100 ms delay */
    /* interrupt is not enable, just to delay some time. */
    for (tmpmrd = 0; tmpmrd < 0xffff; tmpmrd ++)
90002098:	2300      	movs	r3, #0
9000209a:	60bb      	str	r3, [r7, #8]
9000209c:	e002      	b.n	900020a4 <SDRAM_Initialization_Sequence+0x46>
9000209e:	68bb      	ldr	r3, [r7, #8]
900020a0:	3301      	adds	r3, #1
900020a2:	60bb      	str	r3, [r7, #8]
900020a4:	68bb      	ldr	r3, [r7, #8]
900020a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
900020aa:	4293      	cmp	r3, r2
900020ac:	d9f7      	bls.n	9000209e <SDRAM_Initialization_Sequence+0x40>
        ;

    /* Configure a PALL (precharge all) command */
    Command->CommandMode            = FMC_SDRAM_CMD_PALL;
900020ae:	683b      	ldr	r3, [r7, #0]
900020b0:	2202      	movs	r2, #2
900020b2:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = target_bank;
900020b4:	683b      	ldr	r3, [r7, #0]
900020b6:	68fa      	ldr	r2, [r7, #12]
900020b8:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
900020ba:	683b      	ldr	r3, [r7, #0]
900020bc:	2201      	movs	r2, #1
900020be:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
900020c0:	683b      	ldr	r3, [r7, #0]
900020c2:	2200      	movs	r2, #0
900020c4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
900020c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
900020ca:	6839      	ldr	r1, [r7, #0]
900020cc:	6878      	ldr	r0, [r7, #4]
900020ce:	f006 f9e7 	bl	900084a0 <HAL_SDRAM_SendCommand>

    /* Configure a Auto-Refresh command */
    Command->CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
900020d2:	683b      	ldr	r3, [r7, #0]
900020d4:	2203      	movs	r2, #3
900020d6:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = target_bank;
900020d8:	683b      	ldr	r3, [r7, #0]
900020da:	68fa      	ldr	r2, [r7, #12]
900020dc:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 8;
900020de:	683b      	ldr	r3, [r7, #0]
900020e0:	2208      	movs	r2, #8
900020e2:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
900020e4:	683b      	ldr	r3, [r7, #0]
900020e6:	2200      	movs	r2, #0
900020e8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
900020ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
900020ee:	6839      	ldr	r1, [r7, #0]
900020f0:	6878      	ldr	r0, [r7, #4]
900020f2:	f006 f9d5 	bl	900084a0 <HAL_SDRAM_SendCommand>

    /* Program the external memory mode register */
#if SDRAM_DATA_WIDTH == 8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1     |
#elif SDRAM_DATA_WIDTH == 16
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2     |
900020f6:	f240 2321 	movw	r3, #545	; 0x221
900020fa:	60bb      	str	r3, [r7, #8]
             SDRAM_MODEREG_CAS_LATENCY_2                |
#endif
             SDRAM_MODEREG_OPERATING_MODE_STANDARD      |
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command->CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
900020fc:	683b      	ldr	r3, [r7, #0]
900020fe:	2204      	movs	r2, #4
90002100:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = target_bank;
90002102:	683b      	ldr	r3, [r7, #0]
90002104:	68fa      	ldr	r2, [r7, #12]
90002106:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
90002108:	683b      	ldr	r3, [r7, #0]
9000210a:	2201      	movs	r2, #1
9000210c:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = tmpmrd;
9000210e:	68ba      	ldr	r2, [r7, #8]
90002110:	683b      	ldr	r3, [r7, #0]
90002112:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
90002114:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90002118:	6839      	ldr	r1, [r7, #0]
9000211a:	6878      	ldr	r0, [r7, #4]
9000211c:	f006 f9c0 	bl	900084a0 <HAL_SDRAM_SendCommand>

    /* Set the device refresh counter */
    HAL_SDRAM_ProgramRefreshRate(hsdram, SDRAM_REFRESH_COUNT);
90002120:	f240 21a5 	movw	r1, #677	; 0x2a5
90002124:	6878      	ldr	r0, [r7, #4]
90002126:	f006 f9f0 	bl	9000850a <HAL_SDRAM_ProgramRefreshRate>
}
9000212a:	bf00      	nop
9000212c:	3710      	adds	r7, #16
9000212e:	46bd      	mov	sp, r7
90002130:	bd80      	pop	{r7, pc}
	...

90002134 <SDRAM_Init>:

void SDRAM_Init(void)
{
90002134:	b580      	push	{r7, lr}
90002136:	af00      	add	r7, sp, #0
	/* Program the SDRAM external device */
	SDRAM_Initialization_Sequence(&hsdram1, &command);
90002138:	4906      	ldr	r1, [pc, #24]	; (90002154 <SDRAM_Init+0x20>)
9000213a:	4807      	ldr	r0, [pc, #28]	; (90002158 <SDRAM_Init+0x24>)
9000213c:	f7ff ff8f 	bl	9000205e <SDRAM_Initialization_Sequence>
	LOG_D("sdram init success, mapped at 0x%lX, size is %ld bytes, data width is %d\r\n", SDRAM_BANK_ADDR, SDRAM_SIZE, SDRAM_DATA_WIDTH);
90002140:	2310      	movs	r3, #16
90002142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90002146:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
9000214a:	4804      	ldr	r0, [pc, #16]	; (9000215c <SDRAM_Init+0x28>)
9000214c:	f00b ff2e 	bl	9000dfac <iprintf>
}
90002150:	bf00      	nop
90002152:	bd80      	pop	{r7, pc}
90002154:	2400a09c 	.word	0x2400a09c
90002158:	2401c088 	.word	0x2401c088
9000215c:	9000eeac 	.word	0x9000eeac

90002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90002160:	b580      	push	{r7, lr}
90002162:	b082      	sub	sp, #8
90002164:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002166:	2003      	movs	r0, #3
90002168:	f000 f931 	bl	900023ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000216c:	f002 fd84 	bl	90004c78 <HAL_RCC_GetSysClockFreq>
90002170:	4601      	mov	r1, r0
90002172:	4b15      	ldr	r3, [pc, #84]	; (900021c8 <HAL_Init+0x68>)
90002174:	699b      	ldr	r3, [r3, #24]
90002176:	0a1b      	lsrs	r3, r3, #8
90002178:	f003 030f 	and.w	r3, r3, #15
9000217c:	4a13      	ldr	r2, [pc, #76]	; (900021cc <HAL_Init+0x6c>)
9000217e:	5cd3      	ldrb	r3, [r2, r3]
90002180:	f003 031f 	and.w	r3, r3, #31
90002184:	fa21 f303 	lsr.w	r3, r1, r3
90002188:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000218a:	4b0f      	ldr	r3, [pc, #60]	; (900021c8 <HAL_Init+0x68>)
9000218c:	699b      	ldr	r3, [r3, #24]
9000218e:	f003 030f 	and.w	r3, r3, #15
90002192:	4a0e      	ldr	r2, [pc, #56]	; (900021cc <HAL_Init+0x6c>)
90002194:	5cd3      	ldrb	r3, [r2, r3]
90002196:	f003 031f 	and.w	r3, r3, #31
9000219a:	687a      	ldr	r2, [r7, #4]
9000219c:	fa22 f303 	lsr.w	r3, r2, r3
900021a0:	4a0b      	ldr	r2, [pc, #44]	; (900021d0 <HAL_Init+0x70>)
900021a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900021a4:	4a0b      	ldr	r2, [pc, #44]	; (900021d4 <HAL_Init+0x74>)
900021a6:	687b      	ldr	r3, [r7, #4]
900021a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
900021aa:	2000      	movs	r0, #0
900021ac:	f7ff fc08 	bl	900019c0 <HAL_InitTick>
900021b0:	4603      	mov	r3, r0
900021b2:	2b00      	cmp	r3, #0
900021b4:	d001      	beq.n	900021ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
900021b6:	2301      	movs	r3, #1
900021b8:	e002      	b.n	900021c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
900021ba:	f7ff fbe7 	bl	9000198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
900021be:	2300      	movs	r3, #0
}
900021c0:	4618      	mov	r0, r3
900021c2:	3708      	adds	r7, #8
900021c4:	46bd      	mov	sp, r7
900021c6:	bd80      	pop	{r7, pc}
900021c8:	58024400 	.word	0x58024400
900021cc:	9000f004 	.word	0x9000f004
900021d0:	2400a004 	.word	0x2400a004
900021d4:	2400a000 	.word	0x2400a000

900021d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
900021d8:	b480      	push	{r7}
900021da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
900021dc:	4b06      	ldr	r3, [pc, #24]	; (900021f8 <HAL_IncTick+0x20>)
900021de:	781b      	ldrb	r3, [r3, #0]
900021e0:	461a      	mov	r2, r3
900021e2:	4b06      	ldr	r3, [pc, #24]	; (900021fc <HAL_IncTick+0x24>)
900021e4:	681b      	ldr	r3, [r3, #0]
900021e6:	4413      	add	r3, r2
900021e8:	4a04      	ldr	r2, [pc, #16]	; (900021fc <HAL_IncTick+0x24>)
900021ea:	6013      	str	r3, [r2, #0]
}
900021ec:	bf00      	nop
900021ee:	46bd      	mov	sp, r7
900021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900021f4:	4770      	bx	lr
900021f6:	bf00      	nop
900021f8:	2400a00c 	.word	0x2400a00c
900021fc:	2401c798 	.word	0x2401c798

90002200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90002200:	b480      	push	{r7}
90002202:	af00      	add	r7, sp, #0
  return uwTick;
90002204:	4b03      	ldr	r3, [pc, #12]	; (90002214 <HAL_GetTick+0x14>)
90002206:	681b      	ldr	r3, [r3, #0]
}
90002208:	4618      	mov	r0, r3
9000220a:	46bd      	mov	sp, r7
9000220c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002210:	4770      	bx	lr
90002212:	bf00      	nop
90002214:	2401c798 	.word	0x2401c798

90002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90002218:	b580      	push	{r7, lr}
9000221a:	b084      	sub	sp, #16
9000221c:	af00      	add	r7, sp, #0
9000221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90002220:	f7ff ffee 	bl	90002200 <HAL_GetTick>
90002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90002226:	687b      	ldr	r3, [r7, #4]
90002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
9000222a:	68fb      	ldr	r3, [r7, #12]
9000222c:	f1b3 3fff 	cmp.w	r3, #4294967295
90002230:	d005      	beq.n	9000223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90002232:	4b09      	ldr	r3, [pc, #36]	; (90002258 <HAL_Delay+0x40>)
90002234:	781b      	ldrb	r3, [r3, #0]
90002236:	461a      	mov	r2, r3
90002238:	68fb      	ldr	r3, [r7, #12]
9000223a:	4413      	add	r3, r2
9000223c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000223e:	bf00      	nop
90002240:	f7ff ffde 	bl	90002200 <HAL_GetTick>
90002244:	4602      	mov	r2, r0
90002246:	68bb      	ldr	r3, [r7, #8]
90002248:	1ad3      	subs	r3, r2, r3
9000224a:	68fa      	ldr	r2, [r7, #12]
9000224c:	429a      	cmp	r2, r3
9000224e:	d8f7      	bhi.n	90002240 <HAL_Delay+0x28>
  {
  }
}
90002250:	bf00      	nop
90002252:	3710      	adds	r7, #16
90002254:	46bd      	mov	sp, r7
90002256:	bd80      	pop	{r7, pc}
90002258:	2400a00c 	.word	0x2400a00c

9000225c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
9000225c:	b480      	push	{r7}
9000225e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90002260:	4b03      	ldr	r3, [pc, #12]	; (90002270 <HAL_GetREVID+0x14>)
90002262:	681b      	ldr	r3, [r3, #0]
90002264:	0c1b      	lsrs	r3, r3, #16
}
90002266:	4618      	mov	r0, r3
90002268:	46bd      	mov	sp, r7
9000226a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000226e:	4770      	bx	lr
90002270:	5c001000 	.word	0x5c001000

90002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90002274:	b480      	push	{r7}
90002276:	b085      	sub	sp, #20
90002278:	af00      	add	r7, sp, #0
9000227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
9000227c:	687b      	ldr	r3, [r7, #4]
9000227e:	f003 0307 	and.w	r3, r3, #7
90002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002284:	4b0b      	ldr	r3, [pc, #44]	; (900022b4 <__NVIC_SetPriorityGrouping+0x40>)
90002286:	68db      	ldr	r3, [r3, #12]
90002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000228a:	68ba      	ldr	r2, [r7, #8]
9000228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90002290:	4013      	ands	r3, r2
90002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002294:	68fb      	ldr	r3, [r7, #12]
90002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90002298:	68bb      	ldr	r3, [r7, #8]
9000229a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
9000229c:	4b06      	ldr	r3, [pc, #24]	; (900022b8 <__NVIC_SetPriorityGrouping+0x44>)
9000229e:	4313      	orrs	r3, r2
900022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900022a2:	4a04      	ldr	r2, [pc, #16]	; (900022b4 <__NVIC_SetPriorityGrouping+0x40>)
900022a4:	68bb      	ldr	r3, [r7, #8]
900022a6:	60d3      	str	r3, [r2, #12]
}
900022a8:	bf00      	nop
900022aa:	3714      	adds	r7, #20
900022ac:	46bd      	mov	sp, r7
900022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900022b2:	4770      	bx	lr
900022b4:	e000ed00 	.word	0xe000ed00
900022b8:	05fa0000 	.word	0x05fa0000

900022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
900022bc:	b480      	push	{r7}
900022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900022c0:	4b04      	ldr	r3, [pc, #16]	; (900022d4 <__NVIC_GetPriorityGrouping+0x18>)
900022c2:	68db      	ldr	r3, [r3, #12]
900022c4:	0a1b      	lsrs	r3, r3, #8
900022c6:	f003 0307 	and.w	r3, r3, #7
}
900022ca:	4618      	mov	r0, r3
900022cc:	46bd      	mov	sp, r7
900022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
900022d2:	4770      	bx	lr
900022d4:	e000ed00 	.word	0xe000ed00

900022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
900022d8:	b480      	push	{r7}
900022da:	b083      	sub	sp, #12
900022dc:	af00      	add	r7, sp, #0
900022de:	4603      	mov	r3, r0
900022e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900022e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900022e6:	2b00      	cmp	r3, #0
900022e8:	db0b      	blt.n	90002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900022ea:	88fb      	ldrh	r3, [r7, #6]
900022ec:	f003 021f 	and.w	r2, r3, #31
900022f0:	4907      	ldr	r1, [pc, #28]	; (90002310 <__NVIC_EnableIRQ+0x38>)
900022f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900022f6:	095b      	lsrs	r3, r3, #5
900022f8:	2001      	movs	r0, #1
900022fa:	fa00 f202 	lsl.w	r2, r0, r2
900022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
90002302:	bf00      	nop
90002304:	370c      	adds	r7, #12
90002306:	46bd      	mov	sp, r7
90002308:	f85d 7b04 	ldr.w	r7, [sp], #4
9000230c:	4770      	bx	lr
9000230e:	bf00      	nop
90002310:	e000e100 	.word	0xe000e100

90002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
90002314:	b480      	push	{r7}
90002316:	b083      	sub	sp, #12
90002318:	af00      	add	r7, sp, #0
9000231a:	4603      	mov	r3, r0
9000231c:	6039      	str	r1, [r7, #0]
9000231e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90002320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90002324:	2b00      	cmp	r3, #0
90002326:	db0a      	blt.n	9000233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002328:	683b      	ldr	r3, [r7, #0]
9000232a:	b2da      	uxtb	r2, r3
9000232c:	490c      	ldr	r1, [pc, #48]	; (90002360 <__NVIC_SetPriority+0x4c>)
9000232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90002332:	0112      	lsls	r2, r2, #4
90002334:	b2d2      	uxtb	r2, r2
90002336:	440b      	add	r3, r1
90002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
9000233c:	e00a      	b.n	90002354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000233e:	683b      	ldr	r3, [r7, #0]
90002340:	b2da      	uxtb	r2, r3
90002342:	4908      	ldr	r1, [pc, #32]	; (90002364 <__NVIC_SetPriority+0x50>)
90002344:	88fb      	ldrh	r3, [r7, #6]
90002346:	f003 030f 	and.w	r3, r3, #15
9000234a:	3b04      	subs	r3, #4
9000234c:	0112      	lsls	r2, r2, #4
9000234e:	b2d2      	uxtb	r2, r2
90002350:	440b      	add	r3, r1
90002352:	761a      	strb	r2, [r3, #24]
}
90002354:	bf00      	nop
90002356:	370c      	adds	r7, #12
90002358:	46bd      	mov	sp, r7
9000235a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000235e:	4770      	bx	lr
90002360:	e000e100 	.word	0xe000e100
90002364:	e000ed00 	.word	0xe000ed00

90002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
90002368:	b480      	push	{r7}
9000236a:	b089      	sub	sp, #36	; 0x24
9000236c:	af00      	add	r7, sp, #0
9000236e:	60f8      	str	r0, [r7, #12]
90002370:	60b9      	str	r1, [r7, #8]
90002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90002374:	68fb      	ldr	r3, [r7, #12]
90002376:	f003 0307 	and.w	r3, r3, #7
9000237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000237c:	69fb      	ldr	r3, [r7, #28]
9000237e:	f1c3 0307 	rsb	r3, r3, #7
90002382:	2b04      	cmp	r3, #4
90002384:	bf28      	it	cs
90002386:	2304      	movcs	r3, #4
90002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000238a:	69fb      	ldr	r3, [r7, #28]
9000238c:	3304      	adds	r3, #4
9000238e:	2b06      	cmp	r3, #6
90002390:	d902      	bls.n	90002398 <NVIC_EncodePriority+0x30>
90002392:	69fb      	ldr	r3, [r7, #28]
90002394:	3b03      	subs	r3, #3
90002396:	e000      	b.n	9000239a <NVIC_EncodePriority+0x32>
90002398:	2300      	movs	r3, #0
9000239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000239c:	f04f 32ff 	mov.w	r2, #4294967295
900023a0:	69bb      	ldr	r3, [r7, #24]
900023a2:	fa02 f303 	lsl.w	r3, r2, r3
900023a6:	43da      	mvns	r2, r3
900023a8:	68bb      	ldr	r3, [r7, #8]
900023aa:	401a      	ands	r2, r3
900023ac:	697b      	ldr	r3, [r7, #20]
900023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900023b0:	f04f 31ff 	mov.w	r1, #4294967295
900023b4:	697b      	ldr	r3, [r7, #20]
900023b6:	fa01 f303 	lsl.w	r3, r1, r3
900023ba:	43d9      	mvns	r1, r3
900023bc:	687b      	ldr	r3, [r7, #4]
900023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900023c0:	4313      	orrs	r3, r2
         );
}
900023c2:	4618      	mov	r0, r3
900023c4:	3724      	adds	r7, #36	; 0x24
900023c6:	46bd      	mov	sp, r7
900023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900023cc:	4770      	bx	lr

900023ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900023ce:	b580      	push	{r7, lr}
900023d0:	b082      	sub	sp, #8
900023d2:	af00      	add	r7, sp, #0
900023d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
900023d6:	6878      	ldr	r0, [r7, #4]
900023d8:	f7ff ff4c 	bl	90002274 <__NVIC_SetPriorityGrouping>
}
900023dc:	bf00      	nop
900023de:	3708      	adds	r7, #8
900023e0:	46bd      	mov	sp, r7
900023e2:	bd80      	pop	{r7, pc}

900023e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
900023e4:	b580      	push	{r7, lr}
900023e6:	b086      	sub	sp, #24
900023e8:	af00      	add	r7, sp, #0
900023ea:	4603      	mov	r3, r0
900023ec:	60b9      	str	r1, [r7, #8]
900023ee:	607a      	str	r2, [r7, #4]
900023f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
900023f2:	f7ff ff63 	bl	900022bc <__NVIC_GetPriorityGrouping>
900023f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
900023f8:	687a      	ldr	r2, [r7, #4]
900023fa:	68b9      	ldr	r1, [r7, #8]
900023fc:	6978      	ldr	r0, [r7, #20]
900023fe:	f7ff ffb3 	bl	90002368 <NVIC_EncodePriority>
90002402:	4602      	mov	r2, r0
90002404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90002408:	4611      	mov	r1, r2
9000240a:	4618      	mov	r0, r3
9000240c:	f7ff ff82 	bl	90002314 <__NVIC_SetPriority>
}
90002410:	bf00      	nop
90002412:	3718      	adds	r7, #24
90002414:	46bd      	mov	sp, r7
90002416:	bd80      	pop	{r7, pc}

90002418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90002418:	b580      	push	{r7, lr}
9000241a:	b082      	sub	sp, #8
9000241c:	af00      	add	r7, sp, #0
9000241e:	4603      	mov	r3, r0
90002420:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90002422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90002426:	4618      	mov	r0, r3
90002428:	f7ff ff56 	bl	900022d8 <__NVIC_EnableIRQ>
}
9000242c:	bf00      	nop
9000242e:	3708      	adds	r7, #8
90002430:	46bd      	mov	sp, r7
90002432:	bd80      	pop	{r7, pc}

90002434 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
90002434:	b580      	push	{r7, lr}
90002436:	b082      	sub	sp, #8
90002438:	af00      	add	r7, sp, #0
9000243a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
9000243c:	687b      	ldr	r3, [r7, #4]
9000243e:	2b00      	cmp	r3, #0
90002440:	d101      	bne.n	90002446 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
90002442:	2301      	movs	r3, #1
90002444:	e054      	b.n	900024f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90002446:	687b      	ldr	r3, [r7, #4]
90002448:	7f5b      	ldrb	r3, [r3, #29]
9000244a:	b2db      	uxtb	r3, r3
9000244c:	2b00      	cmp	r3, #0
9000244e:	d105      	bne.n	9000245c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
90002450:	687b      	ldr	r3, [r7, #4]
90002452:	2200      	movs	r2, #0
90002454:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
90002456:	6878      	ldr	r0, [r7, #4]
90002458:	f7fe fb1e 	bl	90000a98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
9000245c:	687b      	ldr	r3, [r7, #4]
9000245e:	2202      	movs	r2, #2
90002460:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90002462:	687b      	ldr	r3, [r7, #4]
90002464:	791b      	ldrb	r3, [r3, #4]
90002466:	2b00      	cmp	r3, #0
90002468:	d10c      	bne.n	90002484 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
9000246a:	687b      	ldr	r3, [r7, #4]
9000246c:	681b      	ldr	r3, [r3, #0]
9000246e:	4a22      	ldr	r2, [pc, #136]	; (900024f8 <HAL_CRC_Init+0xc4>)
90002470:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90002472:	687b      	ldr	r3, [r7, #4]
90002474:	681b      	ldr	r3, [r3, #0]
90002476:	689a      	ldr	r2, [r3, #8]
90002478:	687b      	ldr	r3, [r7, #4]
9000247a:	681b      	ldr	r3, [r3, #0]
9000247c:	f022 0218 	bic.w	r2, r2, #24
90002480:	609a      	str	r2, [r3, #8]
90002482:	e00c      	b.n	9000249e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90002484:	687b      	ldr	r3, [r7, #4]
90002486:	6899      	ldr	r1, [r3, #8]
90002488:	687b      	ldr	r3, [r7, #4]
9000248a:	68db      	ldr	r3, [r3, #12]
9000248c:	461a      	mov	r2, r3
9000248e:	6878      	ldr	r0, [r7, #4]
90002490:	f000 f834 	bl	900024fc <HAL_CRCEx_Polynomial_Set>
90002494:	4603      	mov	r3, r0
90002496:	2b00      	cmp	r3, #0
90002498:	d001      	beq.n	9000249e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
9000249a:	2301      	movs	r3, #1
9000249c:	e028      	b.n	900024f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
9000249e:	687b      	ldr	r3, [r7, #4]
900024a0:	795b      	ldrb	r3, [r3, #5]
900024a2:	2b00      	cmp	r3, #0
900024a4:	d105      	bne.n	900024b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
900024a6:	687b      	ldr	r3, [r7, #4]
900024a8:	681b      	ldr	r3, [r3, #0]
900024aa:	f04f 32ff 	mov.w	r2, #4294967295
900024ae:	611a      	str	r2, [r3, #16]
900024b0:	e004      	b.n	900024bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
900024b2:	687b      	ldr	r3, [r7, #4]
900024b4:	681b      	ldr	r3, [r3, #0]
900024b6:	687a      	ldr	r2, [r7, #4]
900024b8:	6912      	ldr	r2, [r2, #16]
900024ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
900024bc:	687b      	ldr	r3, [r7, #4]
900024be:	681b      	ldr	r3, [r3, #0]
900024c0:	689b      	ldr	r3, [r3, #8]
900024c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
900024c6:	687b      	ldr	r3, [r7, #4]
900024c8:	695a      	ldr	r2, [r3, #20]
900024ca:	687b      	ldr	r3, [r7, #4]
900024cc:	681b      	ldr	r3, [r3, #0]
900024ce:	430a      	orrs	r2, r1
900024d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
900024d2:	687b      	ldr	r3, [r7, #4]
900024d4:	681b      	ldr	r3, [r3, #0]
900024d6:	689b      	ldr	r3, [r3, #8]
900024d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
900024dc:	687b      	ldr	r3, [r7, #4]
900024de:	699a      	ldr	r2, [r3, #24]
900024e0:	687b      	ldr	r3, [r7, #4]
900024e2:	681b      	ldr	r3, [r3, #0]
900024e4:	430a      	orrs	r2, r1
900024e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
900024e8:	687b      	ldr	r3, [r7, #4]
900024ea:	2201      	movs	r2, #1
900024ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
900024ee:	2300      	movs	r3, #0
}
900024f0:	4618      	mov	r0, r3
900024f2:	3708      	adds	r7, #8
900024f4:	46bd      	mov	sp, r7
900024f6:	bd80      	pop	{r7, pc}
900024f8:	04c11db7 	.word	0x04c11db7

900024fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
900024fc:	b480      	push	{r7}
900024fe:	b087      	sub	sp, #28
90002500:	af00      	add	r7, sp, #0
90002502:	60f8      	str	r0, [r7, #12]
90002504:	60b9      	str	r1, [r7, #8]
90002506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90002508:	2300      	movs	r3, #0
9000250a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
9000250c:	231f      	movs	r3, #31
9000250e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90002510:	bf00      	nop
90002512:	693b      	ldr	r3, [r7, #16]
90002514:	1e5a      	subs	r2, r3, #1
90002516:	613a      	str	r2, [r7, #16]
90002518:	2b00      	cmp	r3, #0
9000251a:	d009      	beq.n	90002530 <HAL_CRCEx_Polynomial_Set+0x34>
9000251c:	693b      	ldr	r3, [r7, #16]
9000251e:	f003 031f 	and.w	r3, r3, #31
90002522:	68ba      	ldr	r2, [r7, #8]
90002524:	fa22 f303 	lsr.w	r3, r2, r3
90002528:	f003 0301 	and.w	r3, r3, #1
9000252c:	2b00      	cmp	r3, #0
9000252e:	d0f0      	beq.n	90002512 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
90002530:	687b      	ldr	r3, [r7, #4]
90002532:	2b18      	cmp	r3, #24
90002534:	d846      	bhi.n	900025c4 <HAL_CRCEx_Polynomial_Set+0xc8>
90002536:	a201      	add	r2, pc, #4	; (adr r2, 9000253c <HAL_CRCEx_Polynomial_Set+0x40>)
90002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000253c:	900025cb 	.word	0x900025cb
90002540:	900025c5 	.word	0x900025c5
90002544:	900025c5 	.word	0x900025c5
90002548:	900025c5 	.word	0x900025c5
9000254c:	900025c5 	.word	0x900025c5
90002550:	900025c5 	.word	0x900025c5
90002554:	900025c5 	.word	0x900025c5
90002558:	900025c5 	.word	0x900025c5
9000255c:	900025b9 	.word	0x900025b9
90002560:	900025c5 	.word	0x900025c5
90002564:	900025c5 	.word	0x900025c5
90002568:	900025c5 	.word	0x900025c5
9000256c:	900025c5 	.word	0x900025c5
90002570:	900025c5 	.word	0x900025c5
90002574:	900025c5 	.word	0x900025c5
90002578:	900025c5 	.word	0x900025c5
9000257c:	900025ad 	.word	0x900025ad
90002580:	900025c5 	.word	0x900025c5
90002584:	900025c5 	.word	0x900025c5
90002588:	900025c5 	.word	0x900025c5
9000258c:	900025c5 	.word	0x900025c5
90002590:	900025c5 	.word	0x900025c5
90002594:	900025c5 	.word	0x900025c5
90002598:	900025c5 	.word	0x900025c5
9000259c:	900025a1 	.word	0x900025a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
900025a0:	693b      	ldr	r3, [r7, #16]
900025a2:	2b06      	cmp	r3, #6
900025a4:	d913      	bls.n	900025ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
900025a6:	2301      	movs	r3, #1
900025a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
900025aa:	e010      	b.n	900025ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
900025ac:	693b      	ldr	r3, [r7, #16]
900025ae:	2b07      	cmp	r3, #7
900025b0:	d90f      	bls.n	900025d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
900025b2:	2301      	movs	r3, #1
900025b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
900025b6:	e00c      	b.n	900025d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
900025b8:	693b      	ldr	r3, [r7, #16]
900025ba:	2b0f      	cmp	r3, #15
900025bc:	d90b      	bls.n	900025d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
900025be:	2301      	movs	r3, #1
900025c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
900025c2:	e008      	b.n	900025d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
900025c4:	2301      	movs	r3, #1
900025c6:	75fb      	strb	r3, [r7, #23]
      break;
900025c8:	e006      	b.n	900025d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
900025ca:	bf00      	nop
900025cc:	e004      	b.n	900025d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
900025ce:	bf00      	nop
900025d0:	e002      	b.n	900025d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
900025d2:	bf00      	nop
900025d4:	e000      	b.n	900025d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
900025d6:	bf00      	nop
  }
  if (status == HAL_OK)
900025d8:	7dfb      	ldrb	r3, [r7, #23]
900025da:	2b00      	cmp	r3, #0
900025dc:	d10d      	bne.n	900025fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
900025de:	68fb      	ldr	r3, [r7, #12]
900025e0:	681b      	ldr	r3, [r3, #0]
900025e2:	68ba      	ldr	r2, [r7, #8]
900025e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
900025e6:	68fb      	ldr	r3, [r7, #12]
900025e8:	681b      	ldr	r3, [r3, #0]
900025ea:	689b      	ldr	r3, [r3, #8]
900025ec:	f023 0118 	bic.w	r1, r3, #24
900025f0:	68fb      	ldr	r3, [r7, #12]
900025f2:	681b      	ldr	r3, [r3, #0]
900025f4:	687a      	ldr	r2, [r7, #4]
900025f6:	430a      	orrs	r2, r1
900025f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
900025fa:	7dfb      	ldrb	r3, [r7, #23]
}
900025fc:	4618      	mov	r0, r3
900025fe:	371c      	adds	r7, #28
90002600:	46bd      	mov	sp, r7
90002602:	f85d 7b04 	ldr.w	r7, [sp], #4
90002606:	4770      	bx	lr

90002608 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
90002608:	b580      	push	{r7, lr}
9000260a:	b084      	sub	sp, #16
9000260c:	af00      	add	r7, sp, #0
9000260e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
90002610:	687b      	ldr	r3, [r7, #4]
90002612:	2b00      	cmp	r3, #0
90002614:	d101      	bne.n	9000261a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
90002616:	2301      	movs	r3, #1
90002618:	e205      	b.n	90002a26 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
9000261a:	687b      	ldr	r3, [r7, #4]
9000261c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90002620:	b2db      	uxtb	r3, r3
90002622:	2b02      	cmp	r3, #2
90002624:	d004      	beq.n	90002630 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90002626:	687b      	ldr	r3, [r7, #4]
90002628:	2280      	movs	r2, #128	; 0x80
9000262a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
9000262c:	2301      	movs	r3, #1
9000262e:	e1fa      	b.n	90002a26 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90002630:	687b      	ldr	r3, [r7, #4]
90002632:	681b      	ldr	r3, [r3, #0]
90002634:	4a8c      	ldr	r2, [pc, #560]	; (90002868 <HAL_DMA_Abort_IT+0x260>)
90002636:	4293      	cmp	r3, r2
90002638:	d04a      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
9000263a:	687b      	ldr	r3, [r7, #4]
9000263c:	681b      	ldr	r3, [r3, #0]
9000263e:	4a8b      	ldr	r2, [pc, #556]	; (9000286c <HAL_DMA_Abort_IT+0x264>)
90002640:	4293      	cmp	r3, r2
90002642:	d045      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
90002644:	687b      	ldr	r3, [r7, #4]
90002646:	681b      	ldr	r3, [r3, #0]
90002648:	4a89      	ldr	r2, [pc, #548]	; (90002870 <HAL_DMA_Abort_IT+0x268>)
9000264a:	4293      	cmp	r3, r2
9000264c:	d040      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
9000264e:	687b      	ldr	r3, [r7, #4]
90002650:	681b      	ldr	r3, [r3, #0]
90002652:	4a88      	ldr	r2, [pc, #544]	; (90002874 <HAL_DMA_Abort_IT+0x26c>)
90002654:	4293      	cmp	r3, r2
90002656:	d03b      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
90002658:	687b      	ldr	r3, [r7, #4]
9000265a:	681b      	ldr	r3, [r3, #0]
9000265c:	4a86      	ldr	r2, [pc, #536]	; (90002878 <HAL_DMA_Abort_IT+0x270>)
9000265e:	4293      	cmp	r3, r2
90002660:	d036      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
90002662:	687b      	ldr	r3, [r7, #4]
90002664:	681b      	ldr	r3, [r3, #0]
90002666:	4a85      	ldr	r2, [pc, #532]	; (9000287c <HAL_DMA_Abort_IT+0x274>)
90002668:	4293      	cmp	r3, r2
9000266a:	d031      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
9000266c:	687b      	ldr	r3, [r7, #4]
9000266e:	681b      	ldr	r3, [r3, #0]
90002670:	4a83      	ldr	r2, [pc, #524]	; (90002880 <HAL_DMA_Abort_IT+0x278>)
90002672:	4293      	cmp	r3, r2
90002674:	d02c      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
90002676:	687b      	ldr	r3, [r7, #4]
90002678:	681b      	ldr	r3, [r3, #0]
9000267a:	4a82      	ldr	r2, [pc, #520]	; (90002884 <HAL_DMA_Abort_IT+0x27c>)
9000267c:	4293      	cmp	r3, r2
9000267e:	d027      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
90002680:	687b      	ldr	r3, [r7, #4]
90002682:	681b      	ldr	r3, [r3, #0]
90002684:	4a80      	ldr	r2, [pc, #512]	; (90002888 <HAL_DMA_Abort_IT+0x280>)
90002686:	4293      	cmp	r3, r2
90002688:	d022      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
9000268a:	687b      	ldr	r3, [r7, #4]
9000268c:	681b      	ldr	r3, [r3, #0]
9000268e:	4a7f      	ldr	r2, [pc, #508]	; (9000288c <HAL_DMA_Abort_IT+0x284>)
90002690:	4293      	cmp	r3, r2
90002692:	d01d      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
90002694:	687b      	ldr	r3, [r7, #4]
90002696:	681b      	ldr	r3, [r3, #0]
90002698:	4a7d      	ldr	r2, [pc, #500]	; (90002890 <HAL_DMA_Abort_IT+0x288>)
9000269a:	4293      	cmp	r3, r2
9000269c:	d018      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
9000269e:	687b      	ldr	r3, [r7, #4]
900026a0:	681b      	ldr	r3, [r3, #0]
900026a2:	4a7c      	ldr	r2, [pc, #496]	; (90002894 <HAL_DMA_Abort_IT+0x28c>)
900026a4:	4293      	cmp	r3, r2
900026a6:	d013      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
900026a8:	687b      	ldr	r3, [r7, #4]
900026aa:	681b      	ldr	r3, [r3, #0]
900026ac:	4a7a      	ldr	r2, [pc, #488]	; (90002898 <HAL_DMA_Abort_IT+0x290>)
900026ae:	4293      	cmp	r3, r2
900026b0:	d00e      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
900026b2:	687b      	ldr	r3, [r7, #4]
900026b4:	681b      	ldr	r3, [r3, #0]
900026b6:	4a79      	ldr	r2, [pc, #484]	; (9000289c <HAL_DMA_Abort_IT+0x294>)
900026b8:	4293      	cmp	r3, r2
900026ba:	d009      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
900026bc:	687b      	ldr	r3, [r7, #4]
900026be:	681b      	ldr	r3, [r3, #0]
900026c0:	4a77      	ldr	r2, [pc, #476]	; (900028a0 <HAL_DMA_Abort_IT+0x298>)
900026c2:	4293      	cmp	r3, r2
900026c4:	d004      	beq.n	900026d0 <HAL_DMA_Abort_IT+0xc8>
900026c6:	687b      	ldr	r3, [r7, #4]
900026c8:	681b      	ldr	r3, [r3, #0]
900026ca:	4a76      	ldr	r2, [pc, #472]	; (900028a4 <HAL_DMA_Abort_IT+0x29c>)
900026cc:	4293      	cmp	r3, r2
900026ce:	d101      	bne.n	900026d4 <HAL_DMA_Abort_IT+0xcc>
900026d0:	2301      	movs	r3, #1
900026d2:	e000      	b.n	900026d6 <HAL_DMA_Abort_IT+0xce>
900026d4:	2300      	movs	r3, #0
900026d6:	2b00      	cmp	r3, #0
900026d8:	d065      	beq.n	900027a6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
900026da:	687b      	ldr	r3, [r7, #4]
900026dc:	2204      	movs	r2, #4
900026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
900026e2:	687b      	ldr	r3, [r7, #4]
900026e4:	681b      	ldr	r3, [r3, #0]
900026e6:	4a60      	ldr	r2, [pc, #384]	; (90002868 <HAL_DMA_Abort_IT+0x260>)
900026e8:	4293      	cmp	r3, r2
900026ea:	d04a      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
900026ec:	687b      	ldr	r3, [r7, #4]
900026ee:	681b      	ldr	r3, [r3, #0]
900026f0:	4a5e      	ldr	r2, [pc, #376]	; (9000286c <HAL_DMA_Abort_IT+0x264>)
900026f2:	4293      	cmp	r3, r2
900026f4:	d045      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
900026f6:	687b      	ldr	r3, [r7, #4]
900026f8:	681b      	ldr	r3, [r3, #0]
900026fa:	4a5d      	ldr	r2, [pc, #372]	; (90002870 <HAL_DMA_Abort_IT+0x268>)
900026fc:	4293      	cmp	r3, r2
900026fe:	d040      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002700:	687b      	ldr	r3, [r7, #4]
90002702:	681b      	ldr	r3, [r3, #0]
90002704:	4a5b      	ldr	r2, [pc, #364]	; (90002874 <HAL_DMA_Abort_IT+0x26c>)
90002706:	4293      	cmp	r3, r2
90002708:	d03b      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
9000270a:	687b      	ldr	r3, [r7, #4]
9000270c:	681b      	ldr	r3, [r3, #0]
9000270e:	4a5a      	ldr	r2, [pc, #360]	; (90002878 <HAL_DMA_Abort_IT+0x270>)
90002710:	4293      	cmp	r3, r2
90002712:	d036      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002714:	687b      	ldr	r3, [r7, #4]
90002716:	681b      	ldr	r3, [r3, #0]
90002718:	4a58      	ldr	r2, [pc, #352]	; (9000287c <HAL_DMA_Abort_IT+0x274>)
9000271a:	4293      	cmp	r3, r2
9000271c:	d031      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
9000271e:	687b      	ldr	r3, [r7, #4]
90002720:	681b      	ldr	r3, [r3, #0]
90002722:	4a57      	ldr	r2, [pc, #348]	; (90002880 <HAL_DMA_Abort_IT+0x278>)
90002724:	4293      	cmp	r3, r2
90002726:	d02c      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002728:	687b      	ldr	r3, [r7, #4]
9000272a:	681b      	ldr	r3, [r3, #0]
9000272c:	4a55      	ldr	r2, [pc, #340]	; (90002884 <HAL_DMA_Abort_IT+0x27c>)
9000272e:	4293      	cmp	r3, r2
90002730:	d027      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002732:	687b      	ldr	r3, [r7, #4]
90002734:	681b      	ldr	r3, [r3, #0]
90002736:	4a54      	ldr	r2, [pc, #336]	; (90002888 <HAL_DMA_Abort_IT+0x280>)
90002738:	4293      	cmp	r3, r2
9000273a:	d022      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
9000273c:	687b      	ldr	r3, [r7, #4]
9000273e:	681b      	ldr	r3, [r3, #0]
90002740:	4a52      	ldr	r2, [pc, #328]	; (9000288c <HAL_DMA_Abort_IT+0x284>)
90002742:	4293      	cmp	r3, r2
90002744:	d01d      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002746:	687b      	ldr	r3, [r7, #4]
90002748:	681b      	ldr	r3, [r3, #0]
9000274a:	4a51      	ldr	r2, [pc, #324]	; (90002890 <HAL_DMA_Abort_IT+0x288>)
9000274c:	4293      	cmp	r3, r2
9000274e:	d018      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002750:	687b      	ldr	r3, [r7, #4]
90002752:	681b      	ldr	r3, [r3, #0]
90002754:	4a4f      	ldr	r2, [pc, #316]	; (90002894 <HAL_DMA_Abort_IT+0x28c>)
90002756:	4293      	cmp	r3, r2
90002758:	d013      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
9000275a:	687b      	ldr	r3, [r7, #4]
9000275c:	681b      	ldr	r3, [r3, #0]
9000275e:	4a4e      	ldr	r2, [pc, #312]	; (90002898 <HAL_DMA_Abort_IT+0x290>)
90002760:	4293      	cmp	r3, r2
90002762:	d00e      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002764:	687b      	ldr	r3, [r7, #4]
90002766:	681b      	ldr	r3, [r3, #0]
90002768:	4a4c      	ldr	r2, [pc, #304]	; (9000289c <HAL_DMA_Abort_IT+0x294>)
9000276a:	4293      	cmp	r3, r2
9000276c:	d009      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
9000276e:	687b      	ldr	r3, [r7, #4]
90002770:	681b      	ldr	r3, [r3, #0]
90002772:	4a4b      	ldr	r2, [pc, #300]	; (900028a0 <HAL_DMA_Abort_IT+0x298>)
90002774:	4293      	cmp	r3, r2
90002776:	d004      	beq.n	90002782 <HAL_DMA_Abort_IT+0x17a>
90002778:	687b      	ldr	r3, [r7, #4]
9000277a:	681b      	ldr	r3, [r3, #0]
9000277c:	4a49      	ldr	r2, [pc, #292]	; (900028a4 <HAL_DMA_Abort_IT+0x29c>)
9000277e:	4293      	cmp	r3, r2
90002780:	d108      	bne.n	90002794 <HAL_DMA_Abort_IT+0x18c>
90002782:	687b      	ldr	r3, [r7, #4]
90002784:	681b      	ldr	r3, [r3, #0]
90002786:	681a      	ldr	r2, [r3, #0]
90002788:	687b      	ldr	r3, [r7, #4]
9000278a:	681b      	ldr	r3, [r3, #0]
9000278c:	f022 0201 	bic.w	r2, r2, #1
90002790:	601a      	str	r2, [r3, #0]
90002792:	e147      	b.n	90002a24 <HAL_DMA_Abort_IT+0x41c>
90002794:	687b      	ldr	r3, [r7, #4]
90002796:	681b      	ldr	r3, [r3, #0]
90002798:	681a      	ldr	r2, [r3, #0]
9000279a:	687b      	ldr	r3, [r7, #4]
9000279c:	681b      	ldr	r3, [r3, #0]
9000279e:	f022 0201 	bic.w	r2, r2, #1
900027a2:	601a      	str	r2, [r3, #0]
900027a4:	e13e      	b.n	90002a24 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
900027a6:	687b      	ldr	r3, [r7, #4]
900027a8:	681b      	ldr	r3, [r3, #0]
900027aa:	681a      	ldr	r2, [r3, #0]
900027ac:	687b      	ldr	r3, [r7, #4]
900027ae:	681b      	ldr	r3, [r3, #0]
900027b0:	f022 020e 	bic.w	r2, r2, #14
900027b4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
900027b6:	687b      	ldr	r3, [r7, #4]
900027b8:	681b      	ldr	r3, [r3, #0]
900027ba:	4a2b      	ldr	r2, [pc, #172]	; (90002868 <HAL_DMA_Abort_IT+0x260>)
900027bc:	4293      	cmp	r3, r2
900027be:	d04a      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
900027c0:	687b      	ldr	r3, [r7, #4]
900027c2:	681b      	ldr	r3, [r3, #0]
900027c4:	4a29      	ldr	r2, [pc, #164]	; (9000286c <HAL_DMA_Abort_IT+0x264>)
900027c6:	4293      	cmp	r3, r2
900027c8:	d045      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
900027ca:	687b      	ldr	r3, [r7, #4]
900027cc:	681b      	ldr	r3, [r3, #0]
900027ce:	4a28      	ldr	r2, [pc, #160]	; (90002870 <HAL_DMA_Abort_IT+0x268>)
900027d0:	4293      	cmp	r3, r2
900027d2:	d040      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
900027d4:	687b      	ldr	r3, [r7, #4]
900027d6:	681b      	ldr	r3, [r3, #0]
900027d8:	4a26      	ldr	r2, [pc, #152]	; (90002874 <HAL_DMA_Abort_IT+0x26c>)
900027da:	4293      	cmp	r3, r2
900027dc:	d03b      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
900027de:	687b      	ldr	r3, [r7, #4]
900027e0:	681b      	ldr	r3, [r3, #0]
900027e2:	4a25      	ldr	r2, [pc, #148]	; (90002878 <HAL_DMA_Abort_IT+0x270>)
900027e4:	4293      	cmp	r3, r2
900027e6:	d036      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
900027e8:	687b      	ldr	r3, [r7, #4]
900027ea:	681b      	ldr	r3, [r3, #0]
900027ec:	4a23      	ldr	r2, [pc, #140]	; (9000287c <HAL_DMA_Abort_IT+0x274>)
900027ee:	4293      	cmp	r3, r2
900027f0:	d031      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
900027f2:	687b      	ldr	r3, [r7, #4]
900027f4:	681b      	ldr	r3, [r3, #0]
900027f6:	4a22      	ldr	r2, [pc, #136]	; (90002880 <HAL_DMA_Abort_IT+0x278>)
900027f8:	4293      	cmp	r3, r2
900027fa:	d02c      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
900027fc:	687b      	ldr	r3, [r7, #4]
900027fe:	681b      	ldr	r3, [r3, #0]
90002800:	4a20      	ldr	r2, [pc, #128]	; (90002884 <HAL_DMA_Abort_IT+0x27c>)
90002802:	4293      	cmp	r3, r2
90002804:	d027      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
90002806:	687b      	ldr	r3, [r7, #4]
90002808:	681b      	ldr	r3, [r3, #0]
9000280a:	4a1f      	ldr	r2, [pc, #124]	; (90002888 <HAL_DMA_Abort_IT+0x280>)
9000280c:	4293      	cmp	r3, r2
9000280e:	d022      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
90002810:	687b      	ldr	r3, [r7, #4]
90002812:	681b      	ldr	r3, [r3, #0]
90002814:	4a1d      	ldr	r2, [pc, #116]	; (9000288c <HAL_DMA_Abort_IT+0x284>)
90002816:	4293      	cmp	r3, r2
90002818:	d01d      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
9000281a:	687b      	ldr	r3, [r7, #4]
9000281c:	681b      	ldr	r3, [r3, #0]
9000281e:	4a1c      	ldr	r2, [pc, #112]	; (90002890 <HAL_DMA_Abort_IT+0x288>)
90002820:	4293      	cmp	r3, r2
90002822:	d018      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
90002824:	687b      	ldr	r3, [r7, #4]
90002826:	681b      	ldr	r3, [r3, #0]
90002828:	4a1a      	ldr	r2, [pc, #104]	; (90002894 <HAL_DMA_Abort_IT+0x28c>)
9000282a:	4293      	cmp	r3, r2
9000282c:	d013      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
9000282e:	687b      	ldr	r3, [r7, #4]
90002830:	681b      	ldr	r3, [r3, #0]
90002832:	4a19      	ldr	r2, [pc, #100]	; (90002898 <HAL_DMA_Abort_IT+0x290>)
90002834:	4293      	cmp	r3, r2
90002836:	d00e      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
90002838:	687b      	ldr	r3, [r7, #4]
9000283a:	681b      	ldr	r3, [r3, #0]
9000283c:	4a17      	ldr	r2, [pc, #92]	; (9000289c <HAL_DMA_Abort_IT+0x294>)
9000283e:	4293      	cmp	r3, r2
90002840:	d009      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
90002842:	687b      	ldr	r3, [r7, #4]
90002844:	681b      	ldr	r3, [r3, #0]
90002846:	4a16      	ldr	r2, [pc, #88]	; (900028a0 <HAL_DMA_Abort_IT+0x298>)
90002848:	4293      	cmp	r3, r2
9000284a:	d004      	beq.n	90002856 <HAL_DMA_Abort_IT+0x24e>
9000284c:	687b      	ldr	r3, [r7, #4]
9000284e:	681b      	ldr	r3, [r3, #0]
90002850:	4a14      	ldr	r2, [pc, #80]	; (900028a4 <HAL_DMA_Abort_IT+0x29c>)
90002852:	4293      	cmp	r3, r2
90002854:	d128      	bne.n	900028a8 <HAL_DMA_Abort_IT+0x2a0>
90002856:	687b      	ldr	r3, [r7, #4]
90002858:	681b      	ldr	r3, [r3, #0]
9000285a:	681a      	ldr	r2, [r3, #0]
9000285c:	687b      	ldr	r3, [r7, #4]
9000285e:	681b      	ldr	r3, [r3, #0]
90002860:	f022 0201 	bic.w	r2, r2, #1
90002864:	601a      	str	r2, [r3, #0]
90002866:	e027      	b.n	900028b8 <HAL_DMA_Abort_IT+0x2b0>
90002868:	40020010 	.word	0x40020010
9000286c:	40020028 	.word	0x40020028
90002870:	40020040 	.word	0x40020040
90002874:	40020058 	.word	0x40020058
90002878:	40020070 	.word	0x40020070
9000287c:	40020088 	.word	0x40020088
90002880:	400200a0 	.word	0x400200a0
90002884:	400200b8 	.word	0x400200b8
90002888:	40020410 	.word	0x40020410
9000288c:	40020428 	.word	0x40020428
90002890:	40020440 	.word	0x40020440
90002894:	40020458 	.word	0x40020458
90002898:	40020470 	.word	0x40020470
9000289c:	40020488 	.word	0x40020488
900028a0:	400204a0 	.word	0x400204a0
900028a4:	400204b8 	.word	0x400204b8
900028a8:	687b      	ldr	r3, [r7, #4]
900028aa:	681b      	ldr	r3, [r3, #0]
900028ac:	681a      	ldr	r2, [r3, #0]
900028ae:	687b      	ldr	r3, [r7, #4]
900028b0:	681b      	ldr	r3, [r3, #0]
900028b2:	f022 0201 	bic.w	r2, r2, #1
900028b6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
900028b8:	687b      	ldr	r3, [r7, #4]
900028ba:	681b      	ldr	r3, [r3, #0]
900028bc:	4a5c      	ldr	r2, [pc, #368]	; (90002a30 <HAL_DMA_Abort_IT+0x428>)
900028be:	4293      	cmp	r3, r2
900028c0:	d072      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
900028c2:	687b      	ldr	r3, [r7, #4]
900028c4:	681b      	ldr	r3, [r3, #0]
900028c6:	4a5b      	ldr	r2, [pc, #364]	; (90002a34 <HAL_DMA_Abort_IT+0x42c>)
900028c8:	4293      	cmp	r3, r2
900028ca:	d06d      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
900028cc:	687b      	ldr	r3, [r7, #4]
900028ce:	681b      	ldr	r3, [r3, #0]
900028d0:	4a59      	ldr	r2, [pc, #356]	; (90002a38 <HAL_DMA_Abort_IT+0x430>)
900028d2:	4293      	cmp	r3, r2
900028d4:	d068      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
900028d6:	687b      	ldr	r3, [r7, #4]
900028d8:	681b      	ldr	r3, [r3, #0]
900028da:	4a58      	ldr	r2, [pc, #352]	; (90002a3c <HAL_DMA_Abort_IT+0x434>)
900028dc:	4293      	cmp	r3, r2
900028de:	d063      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
900028e0:	687b      	ldr	r3, [r7, #4]
900028e2:	681b      	ldr	r3, [r3, #0]
900028e4:	4a56      	ldr	r2, [pc, #344]	; (90002a40 <HAL_DMA_Abort_IT+0x438>)
900028e6:	4293      	cmp	r3, r2
900028e8:	d05e      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
900028ea:	687b      	ldr	r3, [r7, #4]
900028ec:	681b      	ldr	r3, [r3, #0]
900028ee:	4a55      	ldr	r2, [pc, #340]	; (90002a44 <HAL_DMA_Abort_IT+0x43c>)
900028f0:	4293      	cmp	r3, r2
900028f2:	d059      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
900028f4:	687b      	ldr	r3, [r7, #4]
900028f6:	681b      	ldr	r3, [r3, #0]
900028f8:	4a53      	ldr	r2, [pc, #332]	; (90002a48 <HAL_DMA_Abort_IT+0x440>)
900028fa:	4293      	cmp	r3, r2
900028fc:	d054      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
900028fe:	687b      	ldr	r3, [r7, #4]
90002900:	681b      	ldr	r3, [r3, #0]
90002902:	4a52      	ldr	r2, [pc, #328]	; (90002a4c <HAL_DMA_Abort_IT+0x444>)
90002904:	4293      	cmp	r3, r2
90002906:	d04f      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002908:	687b      	ldr	r3, [r7, #4]
9000290a:	681b      	ldr	r3, [r3, #0]
9000290c:	4a50      	ldr	r2, [pc, #320]	; (90002a50 <HAL_DMA_Abort_IT+0x448>)
9000290e:	4293      	cmp	r3, r2
90002910:	d04a      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002912:	687b      	ldr	r3, [r7, #4]
90002914:	681b      	ldr	r3, [r3, #0]
90002916:	4a4f      	ldr	r2, [pc, #316]	; (90002a54 <HAL_DMA_Abort_IT+0x44c>)
90002918:	4293      	cmp	r3, r2
9000291a:	d045      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
9000291c:	687b      	ldr	r3, [r7, #4]
9000291e:	681b      	ldr	r3, [r3, #0]
90002920:	4a4d      	ldr	r2, [pc, #308]	; (90002a58 <HAL_DMA_Abort_IT+0x450>)
90002922:	4293      	cmp	r3, r2
90002924:	d040      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002926:	687b      	ldr	r3, [r7, #4]
90002928:	681b      	ldr	r3, [r3, #0]
9000292a:	4a4c      	ldr	r2, [pc, #304]	; (90002a5c <HAL_DMA_Abort_IT+0x454>)
9000292c:	4293      	cmp	r3, r2
9000292e:	d03b      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002930:	687b      	ldr	r3, [r7, #4]
90002932:	681b      	ldr	r3, [r3, #0]
90002934:	4a4a      	ldr	r2, [pc, #296]	; (90002a60 <HAL_DMA_Abort_IT+0x458>)
90002936:	4293      	cmp	r3, r2
90002938:	d036      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
9000293a:	687b      	ldr	r3, [r7, #4]
9000293c:	681b      	ldr	r3, [r3, #0]
9000293e:	4a49      	ldr	r2, [pc, #292]	; (90002a64 <HAL_DMA_Abort_IT+0x45c>)
90002940:	4293      	cmp	r3, r2
90002942:	d031      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002944:	687b      	ldr	r3, [r7, #4]
90002946:	681b      	ldr	r3, [r3, #0]
90002948:	4a47      	ldr	r2, [pc, #284]	; (90002a68 <HAL_DMA_Abort_IT+0x460>)
9000294a:	4293      	cmp	r3, r2
9000294c:	d02c      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
9000294e:	687b      	ldr	r3, [r7, #4]
90002950:	681b      	ldr	r3, [r3, #0]
90002952:	4a46      	ldr	r2, [pc, #280]	; (90002a6c <HAL_DMA_Abort_IT+0x464>)
90002954:	4293      	cmp	r3, r2
90002956:	d027      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002958:	687b      	ldr	r3, [r7, #4]
9000295a:	681b      	ldr	r3, [r3, #0]
9000295c:	4a44      	ldr	r2, [pc, #272]	; (90002a70 <HAL_DMA_Abort_IT+0x468>)
9000295e:	4293      	cmp	r3, r2
90002960:	d022      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002962:	687b      	ldr	r3, [r7, #4]
90002964:	681b      	ldr	r3, [r3, #0]
90002966:	4a43      	ldr	r2, [pc, #268]	; (90002a74 <HAL_DMA_Abort_IT+0x46c>)
90002968:	4293      	cmp	r3, r2
9000296a:	d01d      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
9000296c:	687b      	ldr	r3, [r7, #4]
9000296e:	681b      	ldr	r3, [r3, #0]
90002970:	4a41      	ldr	r2, [pc, #260]	; (90002a78 <HAL_DMA_Abort_IT+0x470>)
90002972:	4293      	cmp	r3, r2
90002974:	d018      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002976:	687b      	ldr	r3, [r7, #4]
90002978:	681b      	ldr	r3, [r3, #0]
9000297a:	4a40      	ldr	r2, [pc, #256]	; (90002a7c <HAL_DMA_Abort_IT+0x474>)
9000297c:	4293      	cmp	r3, r2
9000297e:	d013      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002980:	687b      	ldr	r3, [r7, #4]
90002982:	681b      	ldr	r3, [r3, #0]
90002984:	4a3e      	ldr	r2, [pc, #248]	; (90002a80 <HAL_DMA_Abort_IT+0x478>)
90002986:	4293      	cmp	r3, r2
90002988:	d00e      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
9000298a:	687b      	ldr	r3, [r7, #4]
9000298c:	681b      	ldr	r3, [r3, #0]
9000298e:	4a3d      	ldr	r2, [pc, #244]	; (90002a84 <HAL_DMA_Abort_IT+0x47c>)
90002990:	4293      	cmp	r3, r2
90002992:	d009      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
90002994:	687b      	ldr	r3, [r7, #4]
90002996:	681b      	ldr	r3, [r3, #0]
90002998:	4a3b      	ldr	r2, [pc, #236]	; (90002a88 <HAL_DMA_Abort_IT+0x480>)
9000299a:	4293      	cmp	r3, r2
9000299c:	d004      	beq.n	900029a8 <HAL_DMA_Abort_IT+0x3a0>
9000299e:	687b      	ldr	r3, [r7, #4]
900029a0:	681b      	ldr	r3, [r3, #0]
900029a2:	4a3a      	ldr	r2, [pc, #232]	; (90002a8c <HAL_DMA_Abort_IT+0x484>)
900029a4:	4293      	cmp	r3, r2
900029a6:	d101      	bne.n	900029ac <HAL_DMA_Abort_IT+0x3a4>
900029a8:	2301      	movs	r3, #1
900029aa:	e000      	b.n	900029ae <HAL_DMA_Abort_IT+0x3a6>
900029ac:	2300      	movs	r3, #0
900029ae:	2b00      	cmp	r3, #0
900029b0:	d028      	beq.n	90002a04 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
900029b2:	687b      	ldr	r3, [r7, #4]
900029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900029b6:	681a      	ldr	r2, [r3, #0]
900029b8:	687b      	ldr	r3, [r7, #4]
900029ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900029bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
900029c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
900029c2:	687b      	ldr	r3, [r7, #4]
900029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900029c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
900029c8:	687b      	ldr	r3, [r7, #4]
900029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900029cc:	f003 031f 	and.w	r3, r3, #31
900029d0:	2201      	movs	r2, #1
900029d2:	409a      	lsls	r2, r3
900029d4:	68fb      	ldr	r3, [r7, #12]
900029d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
900029d8:	687b      	ldr	r3, [r7, #4]
900029da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900029dc:	687a      	ldr	r2, [r7, #4]
900029de:	6e92      	ldr	r2, [r2, #104]	; 0x68
900029e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
900029e2:	687b      	ldr	r3, [r7, #4]
900029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900029e6:	2b00      	cmp	r3, #0
900029e8:	d00c      	beq.n	90002a04 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
900029ea:	687b      	ldr	r3, [r7, #4]
900029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900029ee:	681a      	ldr	r2, [r3, #0]
900029f0:	687b      	ldr	r3, [r7, #4]
900029f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900029f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
900029f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
900029fa:	687b      	ldr	r3, [r7, #4]
900029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900029fe:	687a      	ldr	r2, [r7, #4]
90002a00:	6f52      	ldr	r2, [r2, #116]	; 0x74
90002a02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
90002a04:	687b      	ldr	r3, [r7, #4]
90002a06:	2200      	movs	r2, #0
90002a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
90002a0c:	687b      	ldr	r3, [r7, #4]
90002a0e:	2201      	movs	r2, #1
90002a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
90002a14:	687b      	ldr	r3, [r7, #4]
90002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002a18:	2b00      	cmp	r3, #0
90002a1a:	d003      	beq.n	90002a24 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
90002a1c:	687b      	ldr	r3, [r7, #4]
90002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002a20:	6878      	ldr	r0, [r7, #4]
90002a22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
90002a24:	2300      	movs	r3, #0
}
90002a26:	4618      	mov	r0, r3
90002a28:	3710      	adds	r7, #16
90002a2a:	46bd      	mov	sp, r7
90002a2c:	bd80      	pop	{r7, pc}
90002a2e:	bf00      	nop
90002a30:	40020010 	.word	0x40020010
90002a34:	40020028 	.word	0x40020028
90002a38:	40020040 	.word	0x40020040
90002a3c:	40020058 	.word	0x40020058
90002a40:	40020070 	.word	0x40020070
90002a44:	40020088 	.word	0x40020088
90002a48:	400200a0 	.word	0x400200a0
90002a4c:	400200b8 	.word	0x400200b8
90002a50:	40020410 	.word	0x40020410
90002a54:	40020428 	.word	0x40020428
90002a58:	40020440 	.word	0x40020440
90002a5c:	40020458 	.word	0x40020458
90002a60:	40020470 	.word	0x40020470
90002a64:	40020488 	.word	0x40020488
90002a68:	400204a0 	.word	0x400204a0
90002a6c:	400204b8 	.word	0x400204b8
90002a70:	58025408 	.word	0x58025408
90002a74:	5802541c 	.word	0x5802541c
90002a78:	58025430 	.word	0x58025430
90002a7c:	58025444 	.word	0x58025444
90002a80:	58025458 	.word	0x58025458
90002a84:	5802546c 	.word	0x5802546c
90002a88:	58025480 	.word	0x58025480
90002a8c:	58025494 	.word	0x58025494

90002a90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90002a90:	b580      	push	{r7, lr}
90002a92:	b082      	sub	sp, #8
90002a94:	af00      	add	r7, sp, #0
90002a96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
90002a98:	687b      	ldr	r3, [r7, #4]
90002a9a:	2b00      	cmp	r3, #0
90002a9c:	d101      	bne.n	90002aa2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
90002a9e:	2301      	movs	r3, #1
90002aa0:	e04f      	b.n	90002b42 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
90002aa2:	687b      	ldr	r3, [r7, #4]
90002aa4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
90002aa8:	b2db      	uxtb	r3, r3
90002aaa:	2b00      	cmp	r3, #0
90002aac:	d106      	bne.n	90002abc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90002aae:	687b      	ldr	r3, [r7, #4]
90002ab0:	2200      	movs	r2, #0
90002ab2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90002ab6:	6878      	ldr	r0, [r7, #4]
90002ab8:	f7fe f850 	bl	90000b5c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002abc:	687b      	ldr	r3, [r7, #4]
90002abe:	2202      	movs	r2, #2
90002ac0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90002ac4:	687b      	ldr	r3, [r7, #4]
90002ac6:	681b      	ldr	r3, [r3, #0]
90002ac8:	681a      	ldr	r2, [r3, #0]
90002aca:	4b20      	ldr	r3, [pc, #128]	; (90002b4c <HAL_DMA2D_Init+0xbc>)
90002acc:	4013      	ands	r3, r2
90002ace:	687a      	ldr	r2, [r7, #4]
90002ad0:	6851      	ldr	r1, [r2, #4]
90002ad2:	687a      	ldr	r2, [r7, #4]
90002ad4:	69d2      	ldr	r2, [r2, #28]
90002ad6:	4311      	orrs	r1, r2
90002ad8:	687a      	ldr	r2, [r7, #4]
90002ada:	6812      	ldr	r2, [r2, #0]
90002adc:	430b      	orrs	r3, r1
90002ade:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
90002ae0:	687b      	ldr	r3, [r7, #4]
90002ae2:	681b      	ldr	r3, [r3, #0]
90002ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002ae6:	4b1a      	ldr	r3, [pc, #104]	; (90002b50 <HAL_DMA2D_Init+0xc0>)
90002ae8:	4013      	ands	r3, r2
90002aea:	687a      	ldr	r2, [r7, #4]
90002aec:	6891      	ldr	r1, [r2, #8]
90002aee:	687a      	ldr	r2, [r7, #4]
90002af0:	6992      	ldr	r2, [r2, #24]
90002af2:	4311      	orrs	r1, r2
90002af4:	687a      	ldr	r2, [r7, #4]
90002af6:	6812      	ldr	r2, [r2, #0]
90002af8:	430b      	orrs	r3, r1
90002afa:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002afc:	687b      	ldr	r3, [r7, #4]
90002afe:	681b      	ldr	r3, [r3, #0]
90002b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90002b02:	4b14      	ldr	r3, [pc, #80]	; (90002b54 <HAL_DMA2D_Init+0xc4>)
90002b04:	4013      	ands	r3, r2
90002b06:	687a      	ldr	r2, [r7, #4]
90002b08:	68d1      	ldr	r1, [r2, #12]
90002b0a:	687a      	ldr	r2, [r7, #4]
90002b0c:	6812      	ldr	r2, [r2, #0]
90002b0e:	430b      	orrs	r3, r1
90002b10:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
90002b12:	687b      	ldr	r3, [r7, #4]
90002b14:	681b      	ldr	r3, [r3, #0]
90002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90002b18:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
90002b1c:	687b      	ldr	r3, [r7, #4]
90002b1e:	691b      	ldr	r3, [r3, #16]
90002b20:	051a      	lsls	r2, r3, #20
90002b22:	687b      	ldr	r3, [r7, #4]
90002b24:	695b      	ldr	r3, [r3, #20]
90002b26:	055b      	lsls	r3, r3, #21
90002b28:	431a      	orrs	r2, r3
90002b2a:	687b      	ldr	r3, [r7, #4]
90002b2c:	681b      	ldr	r3, [r3, #0]
90002b2e:	430a      	orrs	r2, r1
90002b30:	635a      	str	r2, [r3, #52]	; 0x34


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90002b32:	687b      	ldr	r3, [r7, #4]
90002b34:	2200      	movs	r2, #0
90002b36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90002b38:	687b      	ldr	r3, [r7, #4]
90002b3a:	2201      	movs	r2, #1
90002b3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
90002b40:	2300      	movs	r3, #0
}
90002b42:	4618      	mov	r0, r3
90002b44:	3708      	adds	r7, #8
90002b46:	46bd      	mov	sp, r7
90002b48:	bd80      	pop	{r7, pc}
90002b4a:	bf00      	nop
90002b4c:	fff8ffbf 	.word	0xfff8ffbf
90002b50:	fffffef8 	.word	0xfffffef8
90002b54:	ffff0000 	.word	0xffff0000

90002b58 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
90002b58:	b580      	push	{r7, lr}
90002b5a:	b086      	sub	sp, #24
90002b5c:	af02      	add	r7, sp, #8
90002b5e:	60f8      	str	r0, [r7, #12]
90002b60:	60b9      	str	r1, [r7, #8]
90002b62:	607a      	str	r2, [r7, #4]
90002b64:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90002b66:	68fb      	ldr	r3, [r7, #12]
90002b68:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
90002b6c:	2b01      	cmp	r3, #1
90002b6e:	d101      	bne.n	90002b74 <HAL_DMA2D_Start+0x1c>
90002b70:	2302      	movs	r3, #2
90002b72:	e018      	b.n	90002ba6 <HAL_DMA2D_Start+0x4e>
90002b74:	68fb      	ldr	r3, [r7, #12]
90002b76:	2201      	movs	r2, #1
90002b78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002b7c:	68fb      	ldr	r3, [r7, #12]
90002b7e:	2202      	movs	r2, #2
90002b80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90002b84:	69bb      	ldr	r3, [r7, #24]
90002b86:	9300      	str	r3, [sp, #0]
90002b88:	683b      	ldr	r3, [r7, #0]
90002b8a:	687a      	ldr	r2, [r7, #4]
90002b8c:	68b9      	ldr	r1, [r7, #8]
90002b8e:	68f8      	ldr	r0, [r7, #12]
90002b90:	f000 f9d2 	bl	90002f38 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90002b94:	68fb      	ldr	r3, [r7, #12]
90002b96:	681b      	ldr	r3, [r3, #0]
90002b98:	681a      	ldr	r2, [r3, #0]
90002b9a:	68fb      	ldr	r3, [r7, #12]
90002b9c:	681b      	ldr	r3, [r3, #0]
90002b9e:	f042 0201 	orr.w	r2, r2, #1
90002ba2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90002ba4:	2300      	movs	r3, #0
}
90002ba6:	4618      	mov	r0, r3
90002ba8:	3710      	adds	r7, #16
90002baa:	46bd      	mov	sp, r7
90002bac:	bd80      	pop	{r7, pc}

90002bae <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
90002bae:	b580      	push	{r7, lr}
90002bb0:	b084      	sub	sp, #16
90002bb2:	af00      	add	r7, sp, #0
90002bb4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90002bb6:	687b      	ldr	r3, [r7, #4]
90002bb8:	681b      	ldr	r3, [r3, #0]
90002bba:	685b      	ldr	r3, [r3, #4]
90002bbc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90002bbe:	687b      	ldr	r3, [r7, #4]
90002bc0:	681b      	ldr	r3, [r3, #0]
90002bc2:	681b      	ldr	r3, [r3, #0]
90002bc4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90002bc6:	68fb      	ldr	r3, [r7, #12]
90002bc8:	f003 0301 	and.w	r3, r3, #1
90002bcc:	2b00      	cmp	r3, #0
90002bce:	d026      	beq.n	90002c1e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90002bd0:	68bb      	ldr	r3, [r7, #8]
90002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002bd6:	2b00      	cmp	r3, #0
90002bd8:	d021      	beq.n	90002c1e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90002bda:	687b      	ldr	r3, [r7, #4]
90002bdc:	681b      	ldr	r3, [r3, #0]
90002bde:	681a      	ldr	r2, [r3, #0]
90002be0:	687b      	ldr	r3, [r7, #4]
90002be2:	681b      	ldr	r3, [r3, #0]
90002be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90002be8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90002bea:	687b      	ldr	r3, [r7, #4]
90002bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90002bee:	f043 0201 	orr.w	r2, r3, #1
90002bf2:	687b      	ldr	r3, [r7, #4]
90002bf4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90002bf6:	687b      	ldr	r3, [r7, #4]
90002bf8:	681b      	ldr	r3, [r3, #0]
90002bfa:	2201      	movs	r2, #1
90002bfc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90002bfe:	687b      	ldr	r3, [r7, #4]
90002c00:	2204      	movs	r2, #4
90002c02:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
90002c06:	687b      	ldr	r3, [r7, #4]
90002c08:	2200      	movs	r2, #0
90002c0a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferErrorCallback != NULL)
90002c0e:	687b      	ldr	r3, [r7, #4]
90002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002c12:	2b00      	cmp	r3, #0
90002c14:	d003      	beq.n	90002c1e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
90002c16:	687b      	ldr	r3, [r7, #4]
90002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002c1a:	6878      	ldr	r0, [r7, #4]
90002c1c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90002c1e:	68fb      	ldr	r3, [r7, #12]
90002c20:	f003 0320 	and.w	r3, r3, #32
90002c24:	2b00      	cmp	r3, #0
90002c26:	d026      	beq.n	90002c76 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90002c28:	68bb      	ldr	r3, [r7, #8]
90002c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90002c2e:	2b00      	cmp	r3, #0
90002c30:	d021      	beq.n	90002c76 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90002c32:	687b      	ldr	r3, [r7, #4]
90002c34:	681b      	ldr	r3, [r3, #0]
90002c36:	681a      	ldr	r2, [r3, #0]
90002c38:	687b      	ldr	r3, [r7, #4]
90002c3a:	681b      	ldr	r3, [r3, #0]
90002c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90002c40:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90002c42:	687b      	ldr	r3, [r7, #4]
90002c44:	681b      	ldr	r3, [r3, #0]
90002c46:	2220      	movs	r2, #32
90002c48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90002c4a:	687b      	ldr	r3, [r7, #4]
90002c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90002c4e:	f043 0202 	orr.w	r2, r3, #2
90002c52:	687b      	ldr	r3, [r7, #4]
90002c54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90002c56:	687b      	ldr	r3, [r7, #4]
90002c58:	2204      	movs	r2, #4
90002c5a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
90002c5e:	687b      	ldr	r3, [r7, #4]
90002c60:	2200      	movs	r2, #0
90002c62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferErrorCallback != NULL)
90002c66:	687b      	ldr	r3, [r7, #4]
90002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002c6a:	2b00      	cmp	r3, #0
90002c6c:	d003      	beq.n	90002c76 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
90002c6e:	687b      	ldr	r3, [r7, #4]
90002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002c72:	6878      	ldr	r0, [r7, #4]
90002c74:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90002c76:	68fb      	ldr	r3, [r7, #12]
90002c78:	f003 0308 	and.w	r3, r3, #8
90002c7c:	2b00      	cmp	r3, #0
90002c7e:	d026      	beq.n	90002cce <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90002c80:	68bb      	ldr	r3, [r7, #8]
90002c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90002c86:	2b00      	cmp	r3, #0
90002c88:	d021      	beq.n	90002cce <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90002c8a:	687b      	ldr	r3, [r7, #4]
90002c8c:	681b      	ldr	r3, [r3, #0]
90002c8e:	681a      	ldr	r2, [r3, #0]
90002c90:	687b      	ldr	r3, [r7, #4]
90002c92:	681b      	ldr	r3, [r3, #0]
90002c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90002c98:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90002c9a:	687b      	ldr	r3, [r7, #4]
90002c9c:	681b      	ldr	r3, [r3, #0]
90002c9e:	2208      	movs	r2, #8
90002ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90002ca2:	687b      	ldr	r3, [r7, #4]
90002ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90002ca6:	f043 0204 	orr.w	r2, r3, #4
90002caa:	687b      	ldr	r3, [r7, #4]
90002cac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90002cae:	687b      	ldr	r3, [r7, #4]
90002cb0:	2204      	movs	r2, #4
90002cb2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
90002cb6:	687b      	ldr	r3, [r7, #4]
90002cb8:	2200      	movs	r2, #0
90002cba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferErrorCallback != NULL)
90002cbe:	687b      	ldr	r3, [r7, #4]
90002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002cc2:	2b00      	cmp	r3, #0
90002cc4:	d003      	beq.n	90002cce <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
90002cc6:	687b      	ldr	r3, [r7, #4]
90002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002cca:	6878      	ldr	r0, [r7, #4]
90002ccc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90002cce:	68fb      	ldr	r3, [r7, #12]
90002cd0:	f003 0304 	and.w	r3, r3, #4
90002cd4:	2b00      	cmp	r3, #0
90002cd6:	d013      	beq.n	90002d00 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90002cd8:	68bb      	ldr	r3, [r7, #8]
90002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90002cde:	2b00      	cmp	r3, #0
90002ce0:	d00e      	beq.n	90002d00 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90002ce2:	687b      	ldr	r3, [r7, #4]
90002ce4:	681b      	ldr	r3, [r3, #0]
90002ce6:	681a      	ldr	r2, [r3, #0]
90002ce8:	687b      	ldr	r3, [r7, #4]
90002cea:	681b      	ldr	r3, [r3, #0]
90002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90002cf0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90002cf2:	687b      	ldr	r3, [r7, #4]
90002cf4:	681b      	ldr	r3, [r3, #0]
90002cf6:	2204      	movs	r2, #4
90002cf8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
90002cfa:	6878      	ldr	r0, [r7, #4]
90002cfc:	f000 f853 	bl	90002da6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
90002d00:	68fb      	ldr	r3, [r7, #12]
90002d02:	f003 0302 	and.w	r3, r3, #2
90002d06:	2b00      	cmp	r3, #0
90002d08:	d024      	beq.n	90002d54 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90002d0a:	68bb      	ldr	r3, [r7, #8]
90002d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
90002d10:	2b00      	cmp	r3, #0
90002d12:	d01f      	beq.n	90002d54 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90002d14:	687b      	ldr	r3, [r7, #4]
90002d16:	681b      	ldr	r3, [r3, #0]
90002d18:	681a      	ldr	r2, [r3, #0]
90002d1a:	687b      	ldr	r3, [r7, #4]
90002d1c:	681b      	ldr	r3, [r3, #0]
90002d1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90002d22:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90002d24:	687b      	ldr	r3, [r7, #4]
90002d26:	681b      	ldr	r3, [r3, #0]
90002d28:	2202      	movs	r2, #2
90002d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90002d2c:	687b      	ldr	r3, [r7, #4]
90002d2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
90002d30:	687b      	ldr	r3, [r7, #4]
90002d32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
90002d34:	687b      	ldr	r3, [r7, #4]
90002d36:	2201      	movs	r2, #1
90002d38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
90002d3c:	687b      	ldr	r3, [r7, #4]
90002d3e:	2200      	movs	r2, #0
90002d40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferCpltCallback != NULL)
90002d44:	687b      	ldr	r3, [r7, #4]
90002d46:	6a1b      	ldr	r3, [r3, #32]
90002d48:	2b00      	cmp	r3, #0
90002d4a:	d003      	beq.n	90002d54 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
90002d4c:	687b      	ldr	r3, [r7, #4]
90002d4e:	6a1b      	ldr	r3, [r3, #32]
90002d50:	6878      	ldr	r0, [r7, #4]
90002d52:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90002d54:	68fb      	ldr	r3, [r7, #12]
90002d56:	f003 0310 	and.w	r3, r3, #16
90002d5a:	2b00      	cmp	r3, #0
90002d5c:	d01f      	beq.n	90002d9e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90002d5e:	68bb      	ldr	r3, [r7, #8]
90002d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90002d64:	2b00      	cmp	r3, #0
90002d66:	d01a      	beq.n	90002d9e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90002d68:	687b      	ldr	r3, [r7, #4]
90002d6a:	681b      	ldr	r3, [r3, #0]
90002d6c:	681a      	ldr	r2, [r3, #0]
90002d6e:	687b      	ldr	r3, [r7, #4]
90002d70:	681b      	ldr	r3, [r3, #0]
90002d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90002d76:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90002d78:	687b      	ldr	r3, [r7, #4]
90002d7a:	681b      	ldr	r3, [r3, #0]
90002d7c:	2210      	movs	r2, #16
90002d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90002d80:	687b      	ldr	r3, [r7, #4]
90002d82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
90002d84:	687b      	ldr	r3, [r7, #4]
90002d86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
90002d88:	687b      	ldr	r3, [r7, #4]
90002d8a:	2201      	movs	r2, #1
90002d8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
90002d90:	687b      	ldr	r3, [r7, #4]
90002d92:	2200      	movs	r2, #0
90002d94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90002d98:	6878      	ldr	r0, [r7, #4]
90002d9a:	f000 f80e 	bl	90002dba <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90002d9e:	bf00      	nop
90002da0:	3710      	adds	r7, #16
90002da2:	46bd      	mov	sp, r7
90002da4:	bd80      	pop	{r7, pc}

90002da6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
90002da6:	b480      	push	{r7}
90002da8:	b083      	sub	sp, #12
90002daa:	af00      	add	r7, sp, #0
90002dac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
90002dae:	bf00      	nop
90002db0:	370c      	adds	r7, #12
90002db2:	46bd      	mov	sp, r7
90002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
90002db8:	4770      	bx	lr

90002dba <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
90002dba:	b480      	push	{r7}
90002dbc:	b083      	sub	sp, #12
90002dbe:	af00      	add	r7, sp, #0
90002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
90002dc2:	bf00      	nop
90002dc4:	370c      	adds	r7, #12
90002dc6:	46bd      	mov	sp, r7
90002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
90002dcc:	4770      	bx	lr
	...

90002dd0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90002dd0:	b480      	push	{r7}
90002dd2:	b087      	sub	sp, #28
90002dd4:	af00      	add	r7, sp, #0
90002dd6:	6078      	str	r0, [r7, #4]
90002dd8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
90002dda:	687b      	ldr	r3, [r7, #4]
90002ddc:	685b      	ldr	r3, [r3, #4]
90002dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90002de2:	683b      	ldr	r3, [r7, #0]
90002de4:	2b01      	cmp	r3, #1
90002de6:	d104      	bne.n	90002df2 <HAL_DMA2D_ConfigLayer+0x22>
90002de8:	683a      	ldr	r2, [r7, #0]
90002dea:	4613      	mov	r3, r2
90002dec:	00db      	lsls	r3, r3, #3
90002dee:	1a9b      	subs	r3, r3, r2
90002df0:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90002df2:	687b      	ldr	r3, [r7, #4]
90002df4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
90002df8:	2b01      	cmp	r3, #1
90002dfa:	d101      	bne.n	90002e00 <HAL_DMA2D_ConfigLayer+0x30>
90002dfc:	2302      	movs	r3, #2
90002dfe:	e092      	b.n	90002f26 <HAL_DMA2D_ConfigLayer+0x156>
90002e00:	687b      	ldr	r3, [r7, #4]
90002e02:	2201      	movs	r2, #1
90002e04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002e08:	687b      	ldr	r3, [r7, #4]
90002e0a:	2202      	movs	r2, #2
90002e0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90002e10:	683a      	ldr	r2, [r7, #0]
90002e12:	4613      	mov	r3, r2
90002e14:	00db      	lsls	r3, r3, #3
90002e16:	1a9b      	subs	r3, r3, r2
90002e18:	009b      	lsls	r3, r3, #2
90002e1a:	3328      	adds	r3, #40	; 0x28
90002e1c:	687a      	ldr	r2, [r7, #4]
90002e1e:	4413      	add	r3, r2
90002e20:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
90002e22:	68fb      	ldr	r3, [r7, #12]
90002e24:	685a      	ldr	r2, [r3, #4]
90002e26:	68fb      	ldr	r3, [r7, #12]
90002e28:	689b      	ldr	r3, [r3, #8]
90002e2a:	041b      	lsls	r3, r3, #16
90002e2c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90002e2e:	68fb      	ldr	r3, [r7, #12]
90002e30:	691b      	ldr	r3, [r3, #16]
90002e32:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
90002e34:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90002e36:	68fb      	ldr	r3, [r7, #12]
90002e38:	695b      	ldr	r3, [r3, #20]
90002e3a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
90002e3c:	4313      	orrs	r3, r2
90002e3e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90002e40:	4b3c      	ldr	r3, [pc, #240]	; (90002f34 <HAL_DMA2D_ConfigLayer+0x164>)
90002e42:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002e44:	68fb      	ldr	r3, [r7, #12]
90002e46:	685b      	ldr	r3, [r3, #4]
90002e48:	2b0a      	cmp	r3, #10
90002e4a:	d003      	beq.n	90002e54 <HAL_DMA2D_ConfigLayer+0x84>
90002e4c:	68fb      	ldr	r3, [r7, #12]
90002e4e:	685b      	ldr	r3, [r3, #4]
90002e50:	2b09      	cmp	r3, #9
90002e52:	d107      	bne.n	90002e64 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90002e54:	68fb      	ldr	r3, [r7, #12]
90002e56:	68db      	ldr	r3, [r3, #12]
90002e58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
90002e5c:	693a      	ldr	r2, [r7, #16]
90002e5e:	4313      	orrs	r3, r2
90002e60:	613b      	str	r3, [r7, #16]
90002e62:	e005      	b.n	90002e70 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90002e64:	68fb      	ldr	r3, [r7, #12]
90002e66:	68db      	ldr	r3, [r3, #12]
90002e68:	061b      	lsls	r3, r3, #24
90002e6a:	693a      	ldr	r2, [r7, #16]
90002e6c:	4313      	orrs	r3, r2
90002e6e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
90002e70:	683b      	ldr	r3, [r7, #0]
90002e72:	2b00      	cmp	r3, #0
90002e74:	d120      	bne.n	90002eb8 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002e76:	687b      	ldr	r3, [r7, #4]
90002e78:	681b      	ldr	r3, [r3, #0]
90002e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002e7c:	697b      	ldr	r3, [r7, #20]
90002e7e:	43db      	mvns	r3, r3
90002e80:	ea02 0103 	and.w	r1, r2, r3
90002e84:	687b      	ldr	r3, [r7, #4]
90002e86:	681b      	ldr	r3, [r3, #0]
90002e88:	693a      	ldr	r2, [r7, #16]
90002e8a:	430a      	orrs	r2, r1
90002e8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90002e8e:	687b      	ldr	r3, [r7, #4]
90002e90:	681b      	ldr	r3, [r3, #0]
90002e92:	68fa      	ldr	r2, [r7, #12]
90002e94:	6812      	ldr	r2, [r2, #0]
90002e96:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002e98:	68fb      	ldr	r3, [r7, #12]
90002e9a:	685b      	ldr	r3, [r3, #4]
90002e9c:	2b0a      	cmp	r3, #10
90002e9e:	d003      	beq.n	90002ea8 <HAL_DMA2D_ConfigLayer+0xd8>
90002ea0:	68fb      	ldr	r3, [r7, #12]
90002ea2:	685b      	ldr	r3, [r3, #4]
90002ea4:	2b09      	cmp	r3, #9
90002ea6:	d135      	bne.n	90002f14 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
90002ea8:	68fb      	ldr	r3, [r7, #12]
90002eaa:	68da      	ldr	r2, [r3, #12]
90002eac:	687b      	ldr	r3, [r7, #4]
90002eae:	681b      	ldr	r3, [r3, #0]
90002eb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90002eb4:	629a      	str	r2, [r3, #40]	; 0x28
90002eb6:	e02d      	b.n	90002f14 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90002eb8:	68fb      	ldr	r3, [r7, #12]
90002eba:	685b      	ldr	r3, [r3, #4]
90002ebc:	2b0b      	cmp	r3, #11
90002ebe:	d109      	bne.n	90002ed4 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90002ec0:	68fb      	ldr	r3, [r7, #12]
90002ec2:	699b      	ldr	r3, [r3, #24]
90002ec4:	049b      	lsls	r3, r3, #18
90002ec6:	693a      	ldr	r2, [r7, #16]
90002ec8:	4313      	orrs	r3, r2
90002eca:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90002ecc:	697b      	ldr	r3, [r7, #20]
90002ece:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
90002ed2:	617b      	str	r3, [r7, #20]
    }

     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90002ed4:	687b      	ldr	r3, [r7, #4]
90002ed6:	681b      	ldr	r3, [r3, #0]
90002ed8:	69da      	ldr	r2, [r3, #28]
90002eda:	697b      	ldr	r3, [r7, #20]
90002edc:	43db      	mvns	r3, r3
90002ede:	ea02 0103 	and.w	r1, r2, r3
90002ee2:	687b      	ldr	r3, [r7, #4]
90002ee4:	681b      	ldr	r3, [r3, #0]
90002ee6:	693a      	ldr	r2, [r7, #16]
90002ee8:	430a      	orrs	r2, r1
90002eea:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90002eec:	687b      	ldr	r3, [r7, #4]
90002eee:	681b      	ldr	r3, [r3, #0]
90002ef0:	68fa      	ldr	r2, [r7, #12]
90002ef2:	6812      	ldr	r2, [r2, #0]
90002ef4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002ef6:	68fb      	ldr	r3, [r7, #12]
90002ef8:	685b      	ldr	r3, [r3, #4]
90002efa:	2b0a      	cmp	r3, #10
90002efc:	d003      	beq.n	90002f06 <HAL_DMA2D_ConfigLayer+0x136>
90002efe:	68fb      	ldr	r3, [r7, #12]
90002f00:	685b      	ldr	r3, [r3, #4]
90002f02:	2b09      	cmp	r3, #9
90002f04:	d106      	bne.n	90002f14 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
90002f06:	68fb      	ldr	r3, [r7, #12]
90002f08:	68da      	ldr	r2, [r3, #12]
90002f0a:	687b      	ldr	r3, [r7, #4]
90002f0c:	681b      	ldr	r3, [r3, #0]
90002f0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90002f12:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90002f14:	687b      	ldr	r3, [r7, #4]
90002f16:	2201      	movs	r2, #1
90002f18:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90002f1c:	687b      	ldr	r3, [r7, #4]
90002f1e:	2200      	movs	r2, #0
90002f20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
90002f24:	2300      	movs	r3, #0
}
90002f26:	4618      	mov	r0, r3
90002f28:	371c      	adds	r7, #28
90002f2a:	46bd      	mov	sp, r7
90002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f30:	4770      	bx	lr
90002f32:	bf00      	nop
90002f34:	ff33000f 	.word	0xff33000f

90002f38 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
90002f38:	b480      	push	{r7}
90002f3a:	b08b      	sub	sp, #44	; 0x2c
90002f3c:	af00      	add	r7, sp, #0
90002f3e:	60f8      	str	r0, [r7, #12]
90002f40:	60b9      	str	r1, [r7, #8]
90002f42:	607a      	str	r2, [r7, #4]
90002f44:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
90002f46:	68fb      	ldr	r3, [r7, #12]
90002f48:	681b      	ldr	r3, [r3, #0]
90002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002f4c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
90002f50:	683b      	ldr	r3, [r7, #0]
90002f52:	041a      	lsls	r2, r3, #16
90002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90002f56:	431a      	orrs	r2, r3
90002f58:	68fb      	ldr	r3, [r7, #12]
90002f5a:	681b      	ldr	r3, [r3, #0]
90002f5c:	430a      	orrs	r2, r1
90002f5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90002f60:	68fb      	ldr	r3, [r7, #12]
90002f62:	681b      	ldr	r3, [r3, #0]
90002f64:	687a      	ldr	r2, [r7, #4]
90002f66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002f68:	68fb      	ldr	r3, [r7, #12]
90002f6a:	685b      	ldr	r3, [r3, #4]
90002f6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002f70:	d174      	bne.n	9000305c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90002f72:	68bb      	ldr	r3, [r7, #8]
90002f74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
90002f78:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90002f7a:	68bb      	ldr	r3, [r7, #8]
90002f7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90002f80:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90002f82:	68bb      	ldr	r3, [r7, #8]
90002f84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90002f88:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90002f8a:	68bb      	ldr	r3, [r7, #8]
90002f8c:	b2db      	uxtb	r3, r3
90002f8e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90002f90:	68fb      	ldr	r3, [r7, #12]
90002f92:	689b      	ldr	r3, [r3, #8]
90002f94:	2b00      	cmp	r3, #0
90002f96:	d108      	bne.n	90002faa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
90002f98:	69ba      	ldr	r2, [r7, #24]
90002f9a:	69fb      	ldr	r3, [r7, #28]
90002f9c:	431a      	orrs	r2, r3
90002f9e:	6a3b      	ldr	r3, [r7, #32]
90002fa0:	4313      	orrs	r3, r2
90002fa2:	697a      	ldr	r2, [r7, #20]
90002fa4:	4313      	orrs	r3, r2
90002fa6:	627b      	str	r3, [r7, #36]	; 0x24
90002fa8:	e053      	b.n	90003052 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90002faa:	68fb      	ldr	r3, [r7, #12]
90002fac:	689b      	ldr	r3, [r3, #8]
90002fae:	2b01      	cmp	r3, #1
90002fb0:	d106      	bne.n	90002fc0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90002fb2:	69ba      	ldr	r2, [r7, #24]
90002fb4:	69fb      	ldr	r3, [r7, #28]
90002fb6:	4313      	orrs	r3, r2
90002fb8:	697a      	ldr	r2, [r7, #20]
90002fba:	4313      	orrs	r3, r2
90002fbc:	627b      	str	r3, [r7, #36]	; 0x24
90002fbe:	e048      	b.n	90003052 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002fc0:	68fb      	ldr	r3, [r7, #12]
90002fc2:	689b      	ldr	r3, [r3, #8]
90002fc4:	2b02      	cmp	r3, #2
90002fc6:	d111      	bne.n	90002fec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90002fc8:	69fb      	ldr	r3, [r7, #28]
90002fca:	0cdb      	lsrs	r3, r3, #19
90002fcc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90002fce:	69bb      	ldr	r3, [r7, #24]
90002fd0:	0a9b      	lsrs	r3, r3, #10
90002fd2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
90002fd4:	697b      	ldr	r3, [r7, #20]
90002fd6:	08db      	lsrs	r3, r3, #3
90002fd8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90002fda:	69bb      	ldr	r3, [r7, #24]
90002fdc:	015a      	lsls	r2, r3, #5
90002fde:	69fb      	ldr	r3, [r7, #28]
90002fe0:	02db      	lsls	r3, r3, #11
90002fe2:	4313      	orrs	r3, r2
90002fe4:	697a      	ldr	r2, [r7, #20]
90002fe6:	4313      	orrs	r3, r2
90002fe8:	627b      	str	r3, [r7, #36]	; 0x24
90002fea:	e032      	b.n	90003052 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90002fec:	68fb      	ldr	r3, [r7, #12]
90002fee:	689b      	ldr	r3, [r3, #8]
90002ff0:	2b03      	cmp	r3, #3
90002ff2:	d117      	bne.n	90003024 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90002ff4:	6a3b      	ldr	r3, [r7, #32]
90002ff6:	0fdb      	lsrs	r3, r3, #31
90002ff8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90002ffa:	69fb      	ldr	r3, [r7, #28]
90002ffc:	0cdb      	lsrs	r3, r3, #19
90002ffe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003000:	69bb      	ldr	r3, [r7, #24]
90003002:	0adb      	lsrs	r3, r3, #11
90003004:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
90003006:	697b      	ldr	r3, [r7, #20]
90003008:	08db      	lsrs	r3, r3, #3
9000300a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
9000300c:	69bb      	ldr	r3, [r7, #24]
9000300e:	015a      	lsls	r2, r3, #5
90003010:	69fb      	ldr	r3, [r7, #28]
90003012:	029b      	lsls	r3, r3, #10
90003014:	431a      	orrs	r2, r3
90003016:	6a3b      	ldr	r3, [r7, #32]
90003018:	03db      	lsls	r3, r3, #15
9000301a:	4313      	orrs	r3, r2
9000301c:	697a      	ldr	r2, [r7, #20]
9000301e:	4313      	orrs	r3, r2
90003020:	627b      	str	r3, [r7, #36]	; 0x24
90003022:	e016      	b.n	90003052 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003024:	6a3b      	ldr	r3, [r7, #32]
90003026:	0f1b      	lsrs	r3, r3, #28
90003028:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
9000302a:	69fb      	ldr	r3, [r7, #28]
9000302c:	0d1b      	lsrs	r3, r3, #20
9000302e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003030:	69bb      	ldr	r3, [r7, #24]
90003032:	0b1b      	lsrs	r3, r3, #12
90003034:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
90003036:	697b      	ldr	r3, [r7, #20]
90003038:	091b      	lsrs	r3, r3, #4
9000303a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
9000303c:	69bb      	ldr	r3, [r7, #24]
9000303e:	011a      	lsls	r2, r3, #4
90003040:	69fb      	ldr	r3, [r7, #28]
90003042:	021b      	lsls	r3, r3, #8
90003044:	431a      	orrs	r2, r3
90003046:	6a3b      	ldr	r3, [r7, #32]
90003048:	031b      	lsls	r3, r3, #12
9000304a:	4313      	orrs	r3, r2
9000304c:	697a      	ldr	r2, [r7, #20]
9000304e:	4313      	orrs	r3, r2
90003050:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003052:	68fb      	ldr	r3, [r7, #12]
90003054:	681b      	ldr	r3, [r3, #0]
90003056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90003058:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
9000305a:	e00d      	b.n	90003078 <DMA2D_SetConfig+0x140>
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
9000305c:	68fb      	ldr	r3, [r7, #12]
9000305e:	685b      	ldr	r3, [r3, #4]
90003060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90003064:	d104      	bne.n	90003070 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
90003066:	68fb      	ldr	r3, [r7, #12]
90003068:	681b      	ldr	r3, [r3, #0]
9000306a:	68ba      	ldr	r2, [r7, #8]
9000306c:	615a      	str	r2, [r3, #20]
}
9000306e:	e003      	b.n	90003078 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003070:	68fb      	ldr	r3, [r7, #12]
90003072:	681b      	ldr	r3, [r3, #0]
90003074:	68ba      	ldr	r2, [r7, #8]
90003076:	60da      	str	r2, [r3, #12]
}
90003078:	bf00      	nop
9000307a:	372c      	adds	r7, #44	; 0x2c
9000307c:	46bd      	mov	sp, r7
9000307e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003082:	4770      	bx	lr

90003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90003084:	b480      	push	{r7}
90003086:	b089      	sub	sp, #36	; 0x24
90003088:	af00      	add	r7, sp, #0
9000308a:	6078      	str	r0, [r7, #4]
9000308c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
9000308e:	2300      	movs	r3, #0
90003090:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003092:	4b89      	ldr	r3, [pc, #548]	; (900032b8 <HAL_GPIO_Init+0x234>)
90003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003096:	e194      	b.n	900033c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003098:	683b      	ldr	r3, [r7, #0]
9000309a:	681a      	ldr	r2, [r3, #0]
9000309c:	2101      	movs	r1, #1
9000309e:	69fb      	ldr	r3, [r7, #28]
900030a0:	fa01 f303 	lsl.w	r3, r1, r3
900030a4:	4013      	ands	r3, r2
900030a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
900030a8:	693b      	ldr	r3, [r7, #16]
900030aa:	2b00      	cmp	r3, #0
900030ac:	f000 8186 	beq.w	900033bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
900030b0:	683b      	ldr	r3, [r7, #0]
900030b2:	685b      	ldr	r3, [r3, #4]
900030b4:	2b01      	cmp	r3, #1
900030b6:	d00b      	beq.n	900030d0 <HAL_GPIO_Init+0x4c>
900030b8:	683b      	ldr	r3, [r7, #0]
900030ba:	685b      	ldr	r3, [r3, #4]
900030bc:	2b02      	cmp	r3, #2
900030be:	d007      	beq.n	900030d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900030c0:	683b      	ldr	r3, [r7, #0]
900030c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
900030c4:	2b11      	cmp	r3, #17
900030c6:	d003      	beq.n	900030d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900030c8:	683b      	ldr	r3, [r7, #0]
900030ca:	685b      	ldr	r3, [r3, #4]
900030cc:	2b12      	cmp	r3, #18
900030ce:	d130      	bne.n	90003132 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
900030d0:	687b      	ldr	r3, [r7, #4]
900030d2:	689b      	ldr	r3, [r3, #8]
900030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900030d6:	69fb      	ldr	r3, [r7, #28]
900030d8:	005b      	lsls	r3, r3, #1
900030da:	2203      	movs	r2, #3
900030dc:	fa02 f303 	lsl.w	r3, r2, r3
900030e0:	43db      	mvns	r3, r3
900030e2:	69ba      	ldr	r2, [r7, #24]
900030e4:	4013      	ands	r3, r2
900030e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
900030e8:	683b      	ldr	r3, [r7, #0]
900030ea:	68da      	ldr	r2, [r3, #12]
900030ec:	69fb      	ldr	r3, [r7, #28]
900030ee:	005b      	lsls	r3, r3, #1
900030f0:	fa02 f303 	lsl.w	r3, r2, r3
900030f4:	69ba      	ldr	r2, [r7, #24]
900030f6:	4313      	orrs	r3, r2
900030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900030fa:	687b      	ldr	r3, [r7, #4]
900030fc:	69ba      	ldr	r2, [r7, #24]
900030fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003100:	687b      	ldr	r3, [r7, #4]
90003102:	685b      	ldr	r3, [r3, #4]
90003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003106:	2201      	movs	r2, #1
90003108:	69fb      	ldr	r3, [r7, #28]
9000310a:	fa02 f303 	lsl.w	r3, r2, r3
9000310e:	43db      	mvns	r3, r3
90003110:	69ba      	ldr	r2, [r7, #24]
90003112:	4013      	ands	r3, r2
90003114:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
90003116:	683b      	ldr	r3, [r7, #0]
90003118:	685b      	ldr	r3, [r3, #4]
9000311a:	091b      	lsrs	r3, r3, #4
9000311c:	f003 0201 	and.w	r2, r3, #1
90003120:	69fb      	ldr	r3, [r7, #28]
90003122:	fa02 f303 	lsl.w	r3, r2, r3
90003126:	69ba      	ldr	r2, [r7, #24]
90003128:	4313      	orrs	r3, r2
9000312a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
9000312c:	687b      	ldr	r3, [r7, #4]
9000312e:	69ba      	ldr	r2, [r7, #24]
90003130:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003132:	687b      	ldr	r3, [r7, #4]
90003134:	68db      	ldr	r3, [r3, #12]
90003136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003138:	69fb      	ldr	r3, [r7, #28]
9000313a:	005b      	lsls	r3, r3, #1
9000313c:	2203      	movs	r2, #3
9000313e:	fa02 f303 	lsl.w	r3, r2, r3
90003142:	43db      	mvns	r3, r3
90003144:	69ba      	ldr	r2, [r7, #24]
90003146:	4013      	ands	r3, r2
90003148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000314a:	683b      	ldr	r3, [r7, #0]
9000314c:	689a      	ldr	r2, [r3, #8]
9000314e:	69fb      	ldr	r3, [r7, #28]
90003150:	005b      	lsls	r3, r3, #1
90003152:	fa02 f303 	lsl.w	r3, r2, r3
90003156:	69ba      	ldr	r2, [r7, #24]
90003158:	4313      	orrs	r3, r2
9000315a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
9000315c:	687b      	ldr	r3, [r7, #4]
9000315e:	69ba      	ldr	r2, [r7, #24]
90003160:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90003162:	683b      	ldr	r3, [r7, #0]
90003164:	685b      	ldr	r3, [r3, #4]
90003166:	2b02      	cmp	r3, #2
90003168:	d003      	beq.n	90003172 <HAL_GPIO_Init+0xee>
9000316a:	683b      	ldr	r3, [r7, #0]
9000316c:	685b      	ldr	r3, [r3, #4]
9000316e:	2b12      	cmp	r3, #18
90003170:	d123      	bne.n	900031ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003172:	69fb      	ldr	r3, [r7, #28]
90003174:	08da      	lsrs	r2, r3, #3
90003176:	687b      	ldr	r3, [r7, #4]
90003178:	3208      	adds	r2, #8
9000317a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003180:	69fb      	ldr	r3, [r7, #28]
90003182:	f003 0307 	and.w	r3, r3, #7
90003186:	009b      	lsls	r3, r3, #2
90003188:	220f      	movs	r2, #15
9000318a:	fa02 f303 	lsl.w	r3, r2, r3
9000318e:	43db      	mvns	r3, r3
90003190:	69ba      	ldr	r2, [r7, #24]
90003192:	4013      	ands	r3, r2
90003194:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003196:	683b      	ldr	r3, [r7, #0]
90003198:	691a      	ldr	r2, [r3, #16]
9000319a:	69fb      	ldr	r3, [r7, #28]
9000319c:	f003 0307 	and.w	r3, r3, #7
900031a0:	009b      	lsls	r3, r3, #2
900031a2:	fa02 f303 	lsl.w	r3, r2, r3
900031a6:	69ba      	ldr	r2, [r7, #24]
900031a8:	4313      	orrs	r3, r2
900031aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
900031ac:	69fb      	ldr	r3, [r7, #28]
900031ae:	08da      	lsrs	r2, r3, #3
900031b0:	687b      	ldr	r3, [r7, #4]
900031b2:	3208      	adds	r2, #8
900031b4:	69b9      	ldr	r1, [r7, #24]
900031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
900031ba:	687b      	ldr	r3, [r7, #4]
900031bc:	681b      	ldr	r3, [r3, #0]
900031be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900031c0:	69fb      	ldr	r3, [r7, #28]
900031c2:	005b      	lsls	r3, r3, #1
900031c4:	2203      	movs	r2, #3
900031c6:	fa02 f303 	lsl.w	r3, r2, r3
900031ca:	43db      	mvns	r3, r3
900031cc:	69ba      	ldr	r2, [r7, #24]
900031ce:	4013      	ands	r3, r2
900031d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900031d2:	683b      	ldr	r3, [r7, #0]
900031d4:	685b      	ldr	r3, [r3, #4]
900031d6:	f003 0203 	and.w	r2, r3, #3
900031da:	69fb      	ldr	r3, [r7, #28]
900031dc:	005b      	lsls	r3, r3, #1
900031de:	fa02 f303 	lsl.w	r3, r2, r3
900031e2:	69ba      	ldr	r2, [r7, #24]
900031e4:	4313      	orrs	r3, r2
900031e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900031e8:	687b      	ldr	r3, [r7, #4]
900031ea:	69ba      	ldr	r2, [r7, #24]
900031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
900031ee:	683b      	ldr	r3, [r7, #0]
900031f0:	685b      	ldr	r3, [r3, #4]
900031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900031f6:	2b00      	cmp	r3, #0
900031f8:	f000 80e0 	beq.w	900033bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900031fc:	4b2f      	ldr	r3, [pc, #188]	; (900032bc <HAL_GPIO_Init+0x238>)
900031fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90003202:	4a2e      	ldr	r2, [pc, #184]	; (900032bc <HAL_GPIO_Init+0x238>)
90003204:	f043 0302 	orr.w	r3, r3, #2
90003208:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
9000320c:	4b2b      	ldr	r3, [pc, #172]	; (900032bc <HAL_GPIO_Init+0x238>)
9000320e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90003212:	f003 0302 	and.w	r3, r3, #2
90003216:	60fb      	str	r3, [r7, #12]
90003218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
9000321a:	4a29      	ldr	r2, [pc, #164]	; (900032c0 <HAL_GPIO_Init+0x23c>)
9000321c:	69fb      	ldr	r3, [r7, #28]
9000321e:	089b      	lsrs	r3, r3, #2
90003220:	3302      	adds	r3, #2
90003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003228:	69fb      	ldr	r3, [r7, #28]
9000322a:	f003 0303 	and.w	r3, r3, #3
9000322e:	009b      	lsls	r3, r3, #2
90003230:	220f      	movs	r2, #15
90003232:	fa02 f303 	lsl.w	r3, r2, r3
90003236:	43db      	mvns	r3, r3
90003238:	69ba      	ldr	r2, [r7, #24]
9000323a:	4013      	ands	r3, r2
9000323c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000323e:	687b      	ldr	r3, [r7, #4]
90003240:	4a20      	ldr	r2, [pc, #128]	; (900032c4 <HAL_GPIO_Init+0x240>)
90003242:	4293      	cmp	r3, r2
90003244:	d052      	beq.n	900032ec <HAL_GPIO_Init+0x268>
90003246:	687b      	ldr	r3, [r7, #4]
90003248:	4a1f      	ldr	r2, [pc, #124]	; (900032c8 <HAL_GPIO_Init+0x244>)
9000324a:	4293      	cmp	r3, r2
9000324c:	d031      	beq.n	900032b2 <HAL_GPIO_Init+0x22e>
9000324e:	687b      	ldr	r3, [r7, #4]
90003250:	4a1e      	ldr	r2, [pc, #120]	; (900032cc <HAL_GPIO_Init+0x248>)
90003252:	4293      	cmp	r3, r2
90003254:	d02b      	beq.n	900032ae <HAL_GPIO_Init+0x22a>
90003256:	687b      	ldr	r3, [r7, #4]
90003258:	4a1d      	ldr	r2, [pc, #116]	; (900032d0 <HAL_GPIO_Init+0x24c>)
9000325a:	4293      	cmp	r3, r2
9000325c:	d025      	beq.n	900032aa <HAL_GPIO_Init+0x226>
9000325e:	687b      	ldr	r3, [r7, #4]
90003260:	4a1c      	ldr	r2, [pc, #112]	; (900032d4 <HAL_GPIO_Init+0x250>)
90003262:	4293      	cmp	r3, r2
90003264:	d01f      	beq.n	900032a6 <HAL_GPIO_Init+0x222>
90003266:	687b      	ldr	r3, [r7, #4]
90003268:	4a1b      	ldr	r2, [pc, #108]	; (900032d8 <HAL_GPIO_Init+0x254>)
9000326a:	4293      	cmp	r3, r2
9000326c:	d019      	beq.n	900032a2 <HAL_GPIO_Init+0x21e>
9000326e:	687b      	ldr	r3, [r7, #4]
90003270:	4a1a      	ldr	r2, [pc, #104]	; (900032dc <HAL_GPIO_Init+0x258>)
90003272:	4293      	cmp	r3, r2
90003274:	d013      	beq.n	9000329e <HAL_GPIO_Init+0x21a>
90003276:	687b      	ldr	r3, [r7, #4]
90003278:	4a19      	ldr	r2, [pc, #100]	; (900032e0 <HAL_GPIO_Init+0x25c>)
9000327a:	4293      	cmp	r3, r2
9000327c:	d00d      	beq.n	9000329a <HAL_GPIO_Init+0x216>
9000327e:	687b      	ldr	r3, [r7, #4]
90003280:	4a18      	ldr	r2, [pc, #96]	; (900032e4 <HAL_GPIO_Init+0x260>)
90003282:	4293      	cmp	r3, r2
90003284:	d007      	beq.n	90003296 <HAL_GPIO_Init+0x212>
90003286:	687b      	ldr	r3, [r7, #4]
90003288:	4a17      	ldr	r2, [pc, #92]	; (900032e8 <HAL_GPIO_Init+0x264>)
9000328a:	4293      	cmp	r3, r2
9000328c:	d101      	bne.n	90003292 <HAL_GPIO_Init+0x20e>
9000328e:	2309      	movs	r3, #9
90003290:	e02d      	b.n	900032ee <HAL_GPIO_Init+0x26a>
90003292:	230a      	movs	r3, #10
90003294:	e02b      	b.n	900032ee <HAL_GPIO_Init+0x26a>
90003296:	2308      	movs	r3, #8
90003298:	e029      	b.n	900032ee <HAL_GPIO_Init+0x26a>
9000329a:	2307      	movs	r3, #7
9000329c:	e027      	b.n	900032ee <HAL_GPIO_Init+0x26a>
9000329e:	2306      	movs	r3, #6
900032a0:	e025      	b.n	900032ee <HAL_GPIO_Init+0x26a>
900032a2:	2305      	movs	r3, #5
900032a4:	e023      	b.n	900032ee <HAL_GPIO_Init+0x26a>
900032a6:	2304      	movs	r3, #4
900032a8:	e021      	b.n	900032ee <HAL_GPIO_Init+0x26a>
900032aa:	2303      	movs	r3, #3
900032ac:	e01f      	b.n	900032ee <HAL_GPIO_Init+0x26a>
900032ae:	2302      	movs	r3, #2
900032b0:	e01d      	b.n	900032ee <HAL_GPIO_Init+0x26a>
900032b2:	2301      	movs	r3, #1
900032b4:	e01b      	b.n	900032ee <HAL_GPIO_Init+0x26a>
900032b6:	bf00      	nop
900032b8:	58000080 	.word	0x58000080
900032bc:	58024400 	.word	0x58024400
900032c0:	58000400 	.word	0x58000400
900032c4:	58020000 	.word	0x58020000
900032c8:	58020400 	.word	0x58020400
900032cc:	58020800 	.word	0x58020800
900032d0:	58020c00 	.word	0x58020c00
900032d4:	58021000 	.word	0x58021000
900032d8:	58021400 	.word	0x58021400
900032dc:	58021800 	.word	0x58021800
900032e0:	58021c00 	.word	0x58021c00
900032e4:	58022000 	.word	0x58022000
900032e8:	58022400 	.word	0x58022400
900032ec:	2300      	movs	r3, #0
900032ee:	69fa      	ldr	r2, [r7, #28]
900032f0:	f002 0203 	and.w	r2, r2, #3
900032f4:	0092      	lsls	r2, r2, #2
900032f6:	4093      	lsls	r3, r2
900032f8:	69ba      	ldr	r2, [r7, #24]
900032fa:	4313      	orrs	r3, r2
900032fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
900032fe:	4938      	ldr	r1, [pc, #224]	; (900033e0 <HAL_GPIO_Init+0x35c>)
90003300:	69fb      	ldr	r3, [r7, #28]
90003302:	089b      	lsrs	r3, r3, #2
90003304:	3302      	adds	r3, #2
90003306:	69ba      	ldr	r2, [r7, #24]
90003308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
9000330c:	697b      	ldr	r3, [r7, #20]
9000330e:	681b      	ldr	r3, [r3, #0]
90003310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003312:	693b      	ldr	r3, [r7, #16]
90003314:	43db      	mvns	r3, r3
90003316:	69ba      	ldr	r2, [r7, #24]
90003318:	4013      	ands	r3, r2
9000331a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
9000331c:	683b      	ldr	r3, [r7, #0]
9000331e:	685b      	ldr	r3, [r3, #4]
90003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003324:	2b00      	cmp	r3, #0
90003326:	d003      	beq.n	90003330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
90003328:	69ba      	ldr	r2, [r7, #24]
9000332a:	693b      	ldr	r3, [r7, #16]
9000332c:	4313      	orrs	r3, r2
9000332e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003330:	697b      	ldr	r3, [r7, #20]
90003332:	69ba      	ldr	r2, [r7, #24]
90003334:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
90003336:	697b      	ldr	r3, [r7, #20]
90003338:	685b      	ldr	r3, [r3, #4]
9000333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000333c:	693b      	ldr	r3, [r7, #16]
9000333e:	43db      	mvns	r3, r3
90003340:	69ba      	ldr	r2, [r7, #24]
90003342:	4013      	ands	r3, r2
90003344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90003346:	683b      	ldr	r3, [r7, #0]
90003348:	685b      	ldr	r3, [r3, #4]
9000334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000334e:	2b00      	cmp	r3, #0
90003350:	d003      	beq.n	9000335a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
90003352:	69ba      	ldr	r2, [r7, #24]
90003354:	693b      	ldr	r3, [r7, #16]
90003356:	4313      	orrs	r3, r2
90003358:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
9000335a:	697b      	ldr	r3, [r7, #20]
9000335c:	69ba      	ldr	r2, [r7, #24]
9000335e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003364:	681b      	ldr	r3, [r3, #0]
90003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003368:	693b      	ldr	r3, [r7, #16]
9000336a:	43db      	mvns	r3, r3
9000336c:	69ba      	ldr	r2, [r7, #24]
9000336e:	4013      	ands	r3, r2
90003370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
90003372:	683b      	ldr	r3, [r7, #0]
90003374:	685b      	ldr	r3, [r3, #4]
90003376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
9000337a:	2b00      	cmp	r3, #0
9000337c:	d003      	beq.n	90003386 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
9000337e:	69ba      	ldr	r2, [r7, #24]
90003380:	693b      	ldr	r3, [r7, #16]
90003382:	4313      	orrs	r3, r2
90003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
9000338a:	69bb      	ldr	r3, [r7, #24]
9000338c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
9000338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003392:	685b      	ldr	r3, [r3, #4]
90003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003396:	693b      	ldr	r3, [r7, #16]
90003398:	43db      	mvns	r3, r3
9000339a:	69ba      	ldr	r2, [r7, #24]
9000339c:	4013      	ands	r3, r2
9000339e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
900033a0:	683b      	ldr	r3, [r7, #0]
900033a2:	685b      	ldr	r3, [r3, #4]
900033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900033a8:	2b00      	cmp	r3, #0
900033aa:	d003      	beq.n	900033b4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
900033ac:	69ba      	ldr	r2, [r7, #24]
900033ae:	693b      	ldr	r3, [r7, #16]
900033b0:	4313      	orrs	r3, r2
900033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
900033b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
900033b8:	69bb      	ldr	r3, [r7, #24]
900033ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
900033bc:	69fb      	ldr	r3, [r7, #28]
900033be:	3301      	adds	r3, #1
900033c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900033c2:	683b      	ldr	r3, [r7, #0]
900033c4:	681a      	ldr	r2, [r3, #0]
900033c6:	69fb      	ldr	r3, [r7, #28]
900033c8:	fa22 f303 	lsr.w	r3, r2, r3
900033cc:	2b00      	cmp	r3, #0
900033ce:	f47f ae63 	bne.w	90003098 <HAL_GPIO_Init+0x14>
  }
}
900033d2:	bf00      	nop
900033d4:	3724      	adds	r7, #36	; 0x24
900033d6:	46bd      	mov	sp, r7
900033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900033dc:	4770      	bx	lr
900033de:	bf00      	nop
900033e0:	58000400 	.word	0x58000400

900033e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
900033e4:	b480      	push	{r7}
900033e6:	b083      	sub	sp, #12
900033e8:	af00      	add	r7, sp, #0
900033ea:	6078      	str	r0, [r7, #4]
900033ec:	460b      	mov	r3, r1
900033ee:	807b      	strh	r3, [r7, #2]
900033f0:	4613      	mov	r3, r2
900033f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
900033f4:	787b      	ldrb	r3, [r7, #1]
900033f6:	2b00      	cmp	r3, #0
900033f8:	d003      	beq.n	90003402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
900033fa:	887a      	ldrh	r2, [r7, #2]
900033fc:	687b      	ldr	r3, [r7, #4]
900033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003400:	e003      	b.n	9000340a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003402:	887b      	ldrh	r3, [r7, #2]
90003404:	041a      	lsls	r2, r3, #16
90003406:	687b      	ldr	r3, [r7, #4]
90003408:	619a      	str	r2, [r3, #24]
}
9000340a:	bf00      	nop
9000340c:	370c      	adds	r7, #12
9000340e:	46bd      	mov	sp, r7
90003410:	f85d 7b04 	ldr.w	r7, [sp], #4
90003414:	4770      	bx	lr
	...

90003418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90003418:	b580      	push	{r7, lr}
9000341a:	b082      	sub	sp, #8
9000341c:	af00      	add	r7, sp, #0
9000341e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90003420:	687b      	ldr	r3, [r7, #4]
90003422:	2b00      	cmp	r3, #0
90003424:	d101      	bne.n	9000342a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90003426:	2301      	movs	r3, #1
90003428:	e07f      	b.n	9000352a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
9000342a:	687b      	ldr	r3, [r7, #4]
9000342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003430:	b2db      	uxtb	r3, r3
90003432:	2b00      	cmp	r3, #0
90003434:	d106      	bne.n	90003444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90003436:	687b      	ldr	r3, [r7, #4]
90003438:	2200      	movs	r2, #0
9000343a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
9000343e:	6878      	ldr	r0, [r7, #4]
90003440:	f7fd fe08 	bl	90001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90003444:	687b      	ldr	r3, [r7, #4]
90003446:	2224      	movs	r2, #36	; 0x24
90003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
9000344c:	687b      	ldr	r3, [r7, #4]
9000344e:	681b      	ldr	r3, [r3, #0]
90003450:	681a      	ldr	r2, [r3, #0]
90003452:	687b      	ldr	r3, [r7, #4]
90003454:	681b      	ldr	r3, [r3, #0]
90003456:	f022 0201 	bic.w	r2, r2, #1
9000345a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000345c:	687b      	ldr	r3, [r7, #4]
9000345e:	685a      	ldr	r2, [r3, #4]
90003460:	687b      	ldr	r3, [r7, #4]
90003462:	681b      	ldr	r3, [r3, #0]
90003464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
90003468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000346a:	687b      	ldr	r3, [r7, #4]
9000346c:	681b      	ldr	r3, [r3, #0]
9000346e:	689a      	ldr	r2, [r3, #8]
90003470:	687b      	ldr	r3, [r7, #4]
90003472:	681b      	ldr	r3, [r3, #0]
90003474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000347a:	687b      	ldr	r3, [r7, #4]
9000347c:	68db      	ldr	r3, [r3, #12]
9000347e:	2b01      	cmp	r3, #1
90003480:	d107      	bne.n	90003492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003482:	687b      	ldr	r3, [r7, #4]
90003484:	689a      	ldr	r2, [r3, #8]
90003486:	687b      	ldr	r3, [r7, #4]
90003488:	681b      	ldr	r3, [r3, #0]
9000348a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000348e:	609a      	str	r2, [r3, #8]
90003490:	e006      	b.n	900034a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003492:	687b      	ldr	r3, [r7, #4]
90003494:	689a      	ldr	r2, [r3, #8]
90003496:	687b      	ldr	r3, [r7, #4]
90003498:	681b      	ldr	r3, [r3, #0]
9000349a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
9000349e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900034a0:	687b      	ldr	r3, [r7, #4]
900034a2:	68db      	ldr	r3, [r3, #12]
900034a4:	2b02      	cmp	r3, #2
900034a6:	d104      	bne.n	900034b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
900034a8:	687b      	ldr	r3, [r7, #4]
900034aa:	681b      	ldr	r3, [r3, #0]
900034ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
900034b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900034b2:	687b      	ldr	r3, [r7, #4]
900034b4:	681b      	ldr	r3, [r3, #0]
900034b6:	6859      	ldr	r1, [r3, #4]
900034b8:	687b      	ldr	r3, [r7, #4]
900034ba:	681a      	ldr	r2, [r3, #0]
900034bc:	4b1d      	ldr	r3, [pc, #116]	; (90003534 <HAL_I2C_Init+0x11c>)
900034be:	430b      	orrs	r3, r1
900034c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
900034c2:	687b      	ldr	r3, [r7, #4]
900034c4:	681b      	ldr	r3, [r3, #0]
900034c6:	68da      	ldr	r2, [r3, #12]
900034c8:	687b      	ldr	r3, [r7, #4]
900034ca:	681b      	ldr	r3, [r3, #0]
900034cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900034d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
900034d2:	687b      	ldr	r3, [r7, #4]
900034d4:	691a      	ldr	r2, [r3, #16]
900034d6:	687b      	ldr	r3, [r7, #4]
900034d8:	695b      	ldr	r3, [r3, #20]
900034da:	ea42 0103 	orr.w	r1, r2, r3
900034de:	687b      	ldr	r3, [r7, #4]
900034e0:	699b      	ldr	r3, [r3, #24]
900034e2:	021a      	lsls	r2, r3, #8
900034e4:	687b      	ldr	r3, [r7, #4]
900034e6:	681b      	ldr	r3, [r3, #0]
900034e8:	430a      	orrs	r2, r1
900034ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900034ec:	687b      	ldr	r3, [r7, #4]
900034ee:	69d9      	ldr	r1, [r3, #28]
900034f0:	687b      	ldr	r3, [r7, #4]
900034f2:	6a1a      	ldr	r2, [r3, #32]
900034f4:	687b      	ldr	r3, [r7, #4]
900034f6:	681b      	ldr	r3, [r3, #0]
900034f8:	430a      	orrs	r2, r1
900034fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
900034fc:	687b      	ldr	r3, [r7, #4]
900034fe:	681b      	ldr	r3, [r3, #0]
90003500:	681a      	ldr	r2, [r3, #0]
90003502:	687b      	ldr	r3, [r7, #4]
90003504:	681b      	ldr	r3, [r3, #0]
90003506:	f042 0201 	orr.w	r2, r2, #1
9000350a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000350c:	687b      	ldr	r3, [r7, #4]
9000350e:	2200      	movs	r2, #0
90003510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90003512:	687b      	ldr	r3, [r7, #4]
90003514:	2220      	movs	r2, #32
90003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000351a:	687b      	ldr	r3, [r7, #4]
9000351c:	2200      	movs	r2, #0
9000351e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003520:	687b      	ldr	r3, [r7, #4]
90003522:	2200      	movs	r2, #0
90003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
90003528:	2300      	movs	r3, #0
}
9000352a:	4618      	mov	r0, r3
9000352c:	3708      	adds	r7, #8
9000352e:	46bd      	mov	sp, r7
90003530:	bd80      	pop	{r7, pc}
90003532:	bf00      	nop
90003534:	02008000 	.word	0x02008000

90003538 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90003538:	b480      	push	{r7}
9000353a:	b083      	sub	sp, #12
9000353c:	af00      	add	r7, sp, #0
9000353e:	6078      	str	r0, [r7, #4]
90003540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90003542:	687b      	ldr	r3, [r7, #4]
90003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003548:	b2db      	uxtb	r3, r3
9000354a:	2b20      	cmp	r3, #32
9000354c:	d138      	bne.n	900035c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000354e:	687b      	ldr	r3, [r7, #4]
90003550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90003554:	2b01      	cmp	r3, #1
90003556:	d101      	bne.n	9000355c <HAL_I2CEx_ConfigAnalogFilter+0x24>
90003558:	2302      	movs	r3, #2
9000355a:	e032      	b.n	900035c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
9000355c:	687b      	ldr	r3, [r7, #4]
9000355e:	2201      	movs	r2, #1
90003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90003564:	687b      	ldr	r3, [r7, #4]
90003566:	2224      	movs	r2, #36	; 0x24
90003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000356c:	687b      	ldr	r3, [r7, #4]
9000356e:	681b      	ldr	r3, [r3, #0]
90003570:	681a      	ldr	r2, [r3, #0]
90003572:	687b      	ldr	r3, [r7, #4]
90003574:	681b      	ldr	r3, [r3, #0]
90003576:	f022 0201 	bic.w	r2, r2, #1
9000357a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
9000357c:	687b      	ldr	r3, [r7, #4]
9000357e:	681b      	ldr	r3, [r3, #0]
90003580:	681a      	ldr	r2, [r3, #0]
90003582:	687b      	ldr	r3, [r7, #4]
90003584:	681b      	ldr	r3, [r3, #0]
90003586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
9000358a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
9000358c:	687b      	ldr	r3, [r7, #4]
9000358e:	681b      	ldr	r3, [r3, #0]
90003590:	6819      	ldr	r1, [r3, #0]
90003592:	687b      	ldr	r3, [r7, #4]
90003594:	681b      	ldr	r3, [r3, #0]
90003596:	683a      	ldr	r2, [r7, #0]
90003598:	430a      	orrs	r2, r1
9000359a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
9000359c:	687b      	ldr	r3, [r7, #4]
9000359e:	681b      	ldr	r3, [r3, #0]
900035a0:	681a      	ldr	r2, [r3, #0]
900035a2:	687b      	ldr	r3, [r7, #4]
900035a4:	681b      	ldr	r3, [r3, #0]
900035a6:	f042 0201 	orr.w	r2, r2, #1
900035aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900035ac:	687b      	ldr	r3, [r7, #4]
900035ae:	2220      	movs	r2, #32
900035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900035b4:	687b      	ldr	r3, [r7, #4]
900035b6:	2200      	movs	r2, #0
900035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
900035bc:	2300      	movs	r3, #0
900035be:	e000      	b.n	900035c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
900035c0:	2302      	movs	r3, #2
  }
}
900035c2:	4618      	mov	r0, r3
900035c4:	370c      	adds	r7, #12
900035c6:	46bd      	mov	sp, r7
900035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900035cc:	4770      	bx	lr

900035ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
900035ce:	b480      	push	{r7}
900035d0:	b085      	sub	sp, #20
900035d2:	af00      	add	r7, sp, #0
900035d4:	6078      	str	r0, [r7, #4]
900035d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900035d8:	687b      	ldr	r3, [r7, #4]
900035da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900035de:	b2db      	uxtb	r3, r3
900035e0:	2b20      	cmp	r3, #32
900035e2:	d139      	bne.n	90003658 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900035e4:	687b      	ldr	r3, [r7, #4]
900035e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
900035ea:	2b01      	cmp	r3, #1
900035ec:	d101      	bne.n	900035f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
900035ee:	2302      	movs	r3, #2
900035f0:	e033      	b.n	9000365a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
900035f2:	687b      	ldr	r3, [r7, #4]
900035f4:	2201      	movs	r2, #1
900035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900035fa:	687b      	ldr	r3, [r7, #4]
900035fc:	2224      	movs	r2, #36	; 0x24
900035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90003602:	687b      	ldr	r3, [r7, #4]
90003604:	681b      	ldr	r3, [r3, #0]
90003606:	681a      	ldr	r2, [r3, #0]
90003608:	687b      	ldr	r3, [r7, #4]
9000360a:	681b      	ldr	r3, [r3, #0]
9000360c:	f022 0201 	bic.w	r2, r2, #1
90003610:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
90003612:	687b      	ldr	r3, [r7, #4]
90003614:	681b      	ldr	r3, [r3, #0]
90003616:	681b      	ldr	r3, [r3, #0]
90003618:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
9000361a:	68fb      	ldr	r3, [r7, #12]
9000361c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
90003620:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
90003622:	683b      	ldr	r3, [r7, #0]
90003624:	021b      	lsls	r3, r3, #8
90003626:	68fa      	ldr	r2, [r7, #12]
90003628:	4313      	orrs	r3, r2
9000362a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
9000362c:	687b      	ldr	r3, [r7, #4]
9000362e:	681b      	ldr	r3, [r3, #0]
90003630:	68fa      	ldr	r2, [r7, #12]
90003632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90003634:	687b      	ldr	r3, [r7, #4]
90003636:	681b      	ldr	r3, [r3, #0]
90003638:	681a      	ldr	r2, [r3, #0]
9000363a:	687b      	ldr	r3, [r7, #4]
9000363c:	681b      	ldr	r3, [r3, #0]
9000363e:	f042 0201 	orr.w	r2, r2, #1
90003642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90003644:	687b      	ldr	r3, [r7, #4]
90003646:	2220      	movs	r2, #32
90003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000364c:	687b      	ldr	r3, [r7, #4]
9000364e:	2200      	movs	r2, #0
90003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90003654:	2300      	movs	r3, #0
90003656:	e000      	b.n	9000365a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90003658:	2302      	movs	r3, #2
  }
}
9000365a:	4618      	mov	r0, r3
9000365c:	3714      	adds	r7, #20
9000365e:	46bd      	mov	sp, r7
90003660:	f85d 7b04 	ldr.w	r7, [sp], #4
90003664:	4770      	bx	lr
	...

90003668 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90003668:	b580      	push	{r7, lr}
9000366a:	b084      	sub	sp, #16
9000366c:	af00      	add	r7, sp, #0
9000366e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90003670:	687b      	ldr	r3, [r7, #4]
90003672:	2b00      	cmp	r3, #0
90003674:	d101      	bne.n	9000367a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90003676:	2301      	movs	r3, #1
90003678:	e0bf      	b.n	900037fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000367a:	687b      	ldr	r3, [r7, #4]
9000367c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
90003680:	b2db      	uxtb	r3, r3
90003682:	2b00      	cmp	r3, #0
90003684:	d106      	bne.n	90003694 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90003686:	687b      	ldr	r3, [r7, #4]
90003688:	2200      	movs	r2, #0
9000368a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
9000368e:	6878      	ldr	r0, [r7, #4]
90003690:	f7fd fde2 	bl	90001258 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003694:	687b      	ldr	r3, [r7, #4]
90003696:	2202      	movs	r2, #2
90003698:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000369c:	687b      	ldr	r3, [r7, #4]
9000369e:	681b      	ldr	r3, [r3, #0]
900036a0:	699a      	ldr	r2, [r3, #24]
900036a2:	687b      	ldr	r3, [r7, #4]
900036a4:	681b      	ldr	r3, [r3, #0]
900036a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
900036aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900036ac:	687b      	ldr	r3, [r7, #4]
900036ae:	681b      	ldr	r3, [r3, #0]
900036b0:	6999      	ldr	r1, [r3, #24]
900036b2:	687b      	ldr	r3, [r7, #4]
900036b4:	685a      	ldr	r2, [r3, #4]
900036b6:	687b      	ldr	r3, [r7, #4]
900036b8:	689b      	ldr	r3, [r3, #8]
900036ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900036bc:	687b      	ldr	r3, [r7, #4]
900036be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900036c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900036c2:	687b      	ldr	r3, [r7, #4]
900036c4:	691b      	ldr	r3, [r3, #16]
900036c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900036c8:	687b      	ldr	r3, [r7, #4]
900036ca:	681b      	ldr	r3, [r3, #0]
900036cc:	430a      	orrs	r2, r1
900036ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
900036d0:	687b      	ldr	r3, [r7, #4]
900036d2:	681b      	ldr	r3, [r3, #0]
900036d4:	6899      	ldr	r1, [r3, #8]
900036d6:	687b      	ldr	r3, [r7, #4]
900036d8:	681a      	ldr	r2, [r3, #0]
900036da:	4b4a      	ldr	r3, [pc, #296]	; (90003804 <HAL_LTDC_Init+0x19c>)
900036dc:	400b      	ands	r3, r1
900036de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
900036e0:	687b      	ldr	r3, [r7, #4]
900036e2:	695b      	ldr	r3, [r3, #20]
900036e4:	041b      	lsls	r3, r3, #16
900036e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
900036e8:	687b      	ldr	r3, [r7, #4]
900036ea:	681b      	ldr	r3, [r3, #0]
900036ec:	6899      	ldr	r1, [r3, #8]
900036ee:	687b      	ldr	r3, [r7, #4]
900036f0:	699a      	ldr	r2, [r3, #24]
900036f2:	68fb      	ldr	r3, [r7, #12]
900036f4:	431a      	orrs	r2, r3
900036f6:	687b      	ldr	r3, [r7, #4]
900036f8:	681b      	ldr	r3, [r3, #0]
900036fa:	430a      	orrs	r2, r1
900036fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
900036fe:	687b      	ldr	r3, [r7, #4]
90003700:	681b      	ldr	r3, [r3, #0]
90003702:	68d9      	ldr	r1, [r3, #12]
90003704:	687b      	ldr	r3, [r7, #4]
90003706:	681a      	ldr	r2, [r3, #0]
90003708:	4b3e      	ldr	r3, [pc, #248]	; (90003804 <HAL_LTDC_Init+0x19c>)
9000370a:	400b      	ands	r3, r1
9000370c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000370e:	687b      	ldr	r3, [r7, #4]
90003710:	69db      	ldr	r3, [r3, #28]
90003712:	041b      	lsls	r3, r3, #16
90003714:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90003716:	687b      	ldr	r3, [r7, #4]
90003718:	681b      	ldr	r3, [r3, #0]
9000371a:	68d9      	ldr	r1, [r3, #12]
9000371c:	687b      	ldr	r3, [r7, #4]
9000371e:	6a1a      	ldr	r2, [r3, #32]
90003720:	68fb      	ldr	r3, [r7, #12]
90003722:	431a      	orrs	r2, r3
90003724:	687b      	ldr	r3, [r7, #4]
90003726:	681b      	ldr	r3, [r3, #0]
90003728:	430a      	orrs	r2, r1
9000372a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000372c:	687b      	ldr	r3, [r7, #4]
9000372e:	681b      	ldr	r3, [r3, #0]
90003730:	6919      	ldr	r1, [r3, #16]
90003732:	687b      	ldr	r3, [r7, #4]
90003734:	681a      	ldr	r2, [r3, #0]
90003736:	4b33      	ldr	r3, [pc, #204]	; (90003804 <HAL_LTDC_Init+0x19c>)
90003738:	400b      	ands	r3, r1
9000373a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000373c:	687b      	ldr	r3, [r7, #4]
9000373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003740:	041b      	lsls	r3, r3, #16
90003742:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90003744:	687b      	ldr	r3, [r7, #4]
90003746:	681b      	ldr	r3, [r3, #0]
90003748:	6919      	ldr	r1, [r3, #16]
9000374a:	687b      	ldr	r3, [r7, #4]
9000374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000374e:	68fb      	ldr	r3, [r7, #12]
90003750:	431a      	orrs	r2, r3
90003752:	687b      	ldr	r3, [r7, #4]
90003754:	681b      	ldr	r3, [r3, #0]
90003756:	430a      	orrs	r2, r1
90003758:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000375a:	687b      	ldr	r3, [r7, #4]
9000375c:	681b      	ldr	r3, [r3, #0]
9000375e:	6959      	ldr	r1, [r3, #20]
90003760:	687b      	ldr	r3, [r7, #4]
90003762:	681a      	ldr	r2, [r3, #0]
90003764:	4b27      	ldr	r3, [pc, #156]	; (90003804 <HAL_LTDC_Init+0x19c>)
90003766:	400b      	ands	r3, r1
90003768:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
9000376a:	687b      	ldr	r3, [r7, #4]
9000376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000376e:	041b      	lsls	r3, r3, #16
90003770:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90003772:	687b      	ldr	r3, [r7, #4]
90003774:	681b      	ldr	r3, [r3, #0]
90003776:	6959      	ldr	r1, [r3, #20]
90003778:	687b      	ldr	r3, [r7, #4]
9000377a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000377c:	68fb      	ldr	r3, [r7, #12]
9000377e:	431a      	orrs	r2, r3
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	681b      	ldr	r3, [r3, #0]
90003784:	430a      	orrs	r2, r1
90003786:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90003788:	687b      	ldr	r3, [r7, #4]
9000378a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
9000378e:	021b      	lsls	r3, r3, #8
90003790:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90003792:	687b      	ldr	r3, [r7, #4]
90003794:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
90003798:	041b      	lsls	r3, r3, #16
9000379a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000379c:	687b      	ldr	r3, [r7, #4]
9000379e:	681b      	ldr	r3, [r3, #0]
900037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900037a2:	687b      	ldr	r3, [r7, #4]
900037a4:	681b      	ldr	r3, [r3, #0]
900037a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
900037aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900037ac:	687b      	ldr	r3, [r7, #4]
900037ae:	681b      	ldr	r3, [r3, #0]
900037b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
900037b2:	68ba      	ldr	r2, [r7, #8]
900037b4:	68fb      	ldr	r3, [r7, #12]
900037b6:	4313      	orrs	r3, r2
900037b8:	687a      	ldr	r2, [r7, #4]
900037ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
900037be:	431a      	orrs	r2, r3
900037c0:	687b      	ldr	r3, [r7, #4]
900037c2:	681b      	ldr	r3, [r3, #0]
900037c4:	430a      	orrs	r2, r1
900037c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900037c8:	687b      	ldr	r3, [r7, #4]
900037ca:	681b      	ldr	r3, [r3, #0]
900037cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900037ce:	687b      	ldr	r3, [r7, #4]
900037d0:	681b      	ldr	r3, [r3, #0]
900037d2:	f042 0206 	orr.w	r2, r2, #6
900037d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
900037d8:	687b      	ldr	r3, [r7, #4]
900037da:	681b      	ldr	r3, [r3, #0]
900037dc:	699a      	ldr	r2, [r3, #24]
900037de:	687b      	ldr	r3, [r7, #4]
900037e0:	681b      	ldr	r3, [r3, #0]
900037e2:	f042 0201 	orr.w	r2, r2, #1
900037e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900037e8:	687b      	ldr	r3, [r7, #4]
900037ea:	2200      	movs	r2, #0
900037ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
900037f0:	687b      	ldr	r3, [r7, #4]
900037f2:	2201      	movs	r2, #1
900037f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
900037f8:	2300      	movs	r3, #0
}
900037fa:	4618      	mov	r0, r3
900037fc:	3710      	adds	r7, #16
900037fe:	46bd      	mov	sp, r7
90003800:	bd80      	pop	{r7, pc}
90003802:	bf00      	nop
90003804:	f000f800 	.word	0xf000f800

90003808 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
90003808:	b580      	push	{r7, lr}
9000380a:	b084      	sub	sp, #16
9000380c:	af00      	add	r7, sp, #0
9000380e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90003810:	687b      	ldr	r3, [r7, #4]
90003812:	681b      	ldr	r3, [r3, #0]
90003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003816:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
90003818:	687b      	ldr	r3, [r7, #4]
9000381a:	681b      	ldr	r3, [r3, #0]
9000381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000381e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
90003820:	68fb      	ldr	r3, [r7, #12]
90003822:	f003 0304 	and.w	r3, r3, #4
90003826:	2b00      	cmp	r3, #0
90003828:	d023      	beq.n	90003872 <HAL_LTDC_IRQHandler+0x6a>
9000382a:	68bb      	ldr	r3, [r7, #8]
9000382c:	f003 0304 	and.w	r3, r3, #4
90003830:	2b00      	cmp	r3, #0
90003832:	d01e      	beq.n	90003872 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
90003834:	687b      	ldr	r3, [r7, #4]
90003836:	681b      	ldr	r3, [r3, #0]
90003838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000383a:	687b      	ldr	r3, [r7, #4]
9000383c:	681b      	ldr	r3, [r3, #0]
9000383e:	f022 0204 	bic.w	r2, r2, #4
90003842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
90003844:	687b      	ldr	r3, [r7, #4]
90003846:	681b      	ldr	r3, [r3, #0]
90003848:	2204      	movs	r2, #4
9000384a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000384c:	687b      	ldr	r3, [r7, #4]
9000384e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90003852:	f043 0201 	orr.w	r2, r3, #1
90003856:	687b      	ldr	r3, [r7, #4]
90003858:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000385c:	687b      	ldr	r3, [r7, #4]
9000385e:	2204      	movs	r2, #4
90003860:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
90003864:	687b      	ldr	r3, [r7, #4]
90003866:	2200      	movs	r2, #0
90003868:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
9000386c:	6878      	ldr	r0, [r7, #4]
9000386e:	f000 f86f 	bl	90003950 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
90003872:	68fb      	ldr	r3, [r7, #12]
90003874:	f003 0302 	and.w	r3, r3, #2
90003878:	2b00      	cmp	r3, #0
9000387a:	d023      	beq.n	900038c4 <HAL_LTDC_IRQHandler+0xbc>
9000387c:	68bb      	ldr	r3, [r7, #8]
9000387e:	f003 0302 	and.w	r3, r3, #2
90003882:	2b00      	cmp	r3, #0
90003884:	d01e      	beq.n	900038c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90003886:	687b      	ldr	r3, [r7, #4]
90003888:	681b      	ldr	r3, [r3, #0]
9000388a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000388c:	687b      	ldr	r3, [r7, #4]
9000388e:	681b      	ldr	r3, [r3, #0]
90003890:	f022 0202 	bic.w	r2, r2, #2
90003894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
90003896:	687b      	ldr	r3, [r7, #4]
90003898:	681b      	ldr	r3, [r3, #0]
9000389a:	2202      	movs	r2, #2
9000389c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000389e:	687b      	ldr	r3, [r7, #4]
900038a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900038a4:	f043 0202 	orr.w	r2, r3, #2
900038a8:	687b      	ldr	r3, [r7, #4]
900038aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
900038ae:	687b      	ldr	r3, [r7, #4]
900038b0:	2204      	movs	r2, #4
900038b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
900038b6:	687b      	ldr	r3, [r7, #4]
900038b8:	2200      	movs	r2, #0
900038ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
900038be:	6878      	ldr	r0, [r7, #4]
900038c0:	f000 f846 	bl	90003950 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
900038c4:	68fb      	ldr	r3, [r7, #12]
900038c6:	f003 0301 	and.w	r3, r3, #1
900038ca:	2b00      	cmp	r3, #0
900038cc:	d01b      	beq.n	90003906 <HAL_LTDC_IRQHandler+0xfe>
900038ce:	68bb      	ldr	r3, [r7, #8]
900038d0:	f003 0301 	and.w	r3, r3, #1
900038d4:	2b00      	cmp	r3, #0
900038d6:	d016      	beq.n	90003906 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900038d8:	687b      	ldr	r3, [r7, #4]
900038da:	681b      	ldr	r3, [r3, #0]
900038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900038de:	687b      	ldr	r3, [r7, #4]
900038e0:	681b      	ldr	r3, [r3, #0]
900038e2:	f022 0201 	bic.w	r2, r2, #1
900038e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
900038e8:	687b      	ldr	r3, [r7, #4]
900038ea:	681b      	ldr	r3, [r3, #0]
900038ec:	2201      	movs	r2, #1
900038ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
900038f0:	687b      	ldr	r3, [r7, #4]
900038f2:	2201      	movs	r2, #1
900038f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
900038f8:	687b      	ldr	r3, [r7, #4]
900038fa:	2200      	movs	r2, #0
900038fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
90003900:	6878      	ldr	r0, [r7, #4]
90003902:	f000 f82f 	bl	90003964 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
90003906:	68fb      	ldr	r3, [r7, #12]
90003908:	f003 0308 	and.w	r3, r3, #8
9000390c:	2b00      	cmp	r3, #0
9000390e:	d01b      	beq.n	90003948 <HAL_LTDC_IRQHandler+0x140>
90003910:	68bb      	ldr	r3, [r7, #8]
90003912:	f003 0308 	and.w	r3, r3, #8
90003916:	2b00      	cmp	r3, #0
90003918:	d016      	beq.n	90003948 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000391a:	687b      	ldr	r3, [r7, #4]
9000391c:	681b      	ldr	r3, [r3, #0]
9000391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003920:	687b      	ldr	r3, [r7, #4]
90003922:	681b      	ldr	r3, [r3, #0]
90003924:	f022 0208 	bic.w	r2, r2, #8
90003928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000392a:	687b      	ldr	r3, [r7, #4]
9000392c:	681b      	ldr	r3, [r3, #0]
9000392e:	2208      	movs	r2, #8
90003930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
90003932:	687b      	ldr	r3, [r7, #4]
90003934:	2201      	movs	r2, #1
90003936:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
9000393a:	687b      	ldr	r3, [r7, #4]
9000393c:	2200      	movs	r2, #0
9000393e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
90003942:	6878      	ldr	r0, [r7, #4]
90003944:	f000 f818 	bl	90003978 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
90003948:	bf00      	nop
9000394a:	3710      	adds	r7, #16
9000394c:	46bd      	mov	sp, r7
9000394e:	bd80      	pop	{r7, pc}

90003950 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
90003950:	b480      	push	{r7}
90003952:	b083      	sub	sp, #12
90003954:	af00      	add	r7, sp, #0
90003956:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
90003958:	bf00      	nop
9000395a:	370c      	adds	r7, #12
9000395c:	46bd      	mov	sp, r7
9000395e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003962:	4770      	bx	lr

90003964 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
90003964:	b480      	push	{r7}
90003966:	b083      	sub	sp, #12
90003968:	af00      	add	r7, sp, #0
9000396a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
9000396c:	bf00      	nop
9000396e:	370c      	adds	r7, #12
90003970:	46bd      	mov	sp, r7
90003972:	f85d 7b04 	ldr.w	r7, [sp], #4
90003976:	4770      	bx	lr

90003978 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
90003978:	b480      	push	{r7}
9000397a:	b083      	sub	sp, #12
9000397c:	af00      	add	r7, sp, #0
9000397e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
90003980:	bf00      	nop
90003982:	370c      	adds	r7, #12
90003984:	46bd      	mov	sp, r7
90003986:	f85d 7b04 	ldr.w	r7, [sp], #4
9000398a:	4770      	bx	lr

9000398c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000398c:	b5b0      	push	{r4, r5, r7, lr}
9000398e:	b084      	sub	sp, #16
90003990:	af00      	add	r7, sp, #0
90003992:	60f8      	str	r0, [r7, #12]
90003994:	60b9      	str	r1, [r7, #8]
90003996:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90003998:	68fb      	ldr	r3, [r7, #12]
9000399a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
9000399e:	2b01      	cmp	r3, #1
900039a0:	d101      	bne.n	900039a6 <HAL_LTDC_ConfigLayer+0x1a>
900039a2:	2302      	movs	r3, #2
900039a4:	e02c      	b.n	90003a00 <HAL_LTDC_ConfigLayer+0x74>
900039a6:	68fb      	ldr	r3, [r7, #12]
900039a8:	2201      	movs	r2, #1
900039aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900039ae:	68fb      	ldr	r3, [r7, #12]
900039b0:	2202      	movs	r2, #2
900039b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900039b6:	68fa      	ldr	r2, [r7, #12]
900039b8:	687b      	ldr	r3, [r7, #4]
900039ba:	2134      	movs	r1, #52	; 0x34
900039bc:	fb01 f303 	mul.w	r3, r1, r3
900039c0:	4413      	add	r3, r2
900039c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
900039c6:	68bb      	ldr	r3, [r7, #8]
900039c8:	4614      	mov	r4, r2
900039ca:	461d      	mov	r5, r3
900039cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900039ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900039d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900039d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900039d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900039d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900039d8:	682b      	ldr	r3, [r5, #0]
900039da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900039dc:	687a      	ldr	r2, [r7, #4]
900039de:	68b9      	ldr	r1, [r7, #8]
900039e0:	68f8      	ldr	r0, [r7, #12]
900039e2:	f000 f857 	bl	90003a94 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900039e6:	68fb      	ldr	r3, [r7, #12]
900039e8:	681b      	ldr	r3, [r3, #0]
900039ea:	2201      	movs	r2, #1
900039ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900039ee:	68fb      	ldr	r3, [r7, #12]
900039f0:	2201      	movs	r2, #1
900039f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900039f6:	68fb      	ldr	r3, [r7, #12]
900039f8:	2200      	movs	r2, #0
900039fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
900039fe:	2300      	movs	r3, #0
}
90003a00:	4618      	mov	r0, r3
90003a02:	3710      	adds	r7, #16
90003a04:	46bd      	mov	sp, r7
90003a06:	bdb0      	pop	{r4, r5, r7, pc}

90003a08 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
90003a08:	b580      	push	{r7, lr}
90003a0a:	b086      	sub	sp, #24
90003a0c:	af00      	add	r7, sp, #0
90003a0e:	60f8      	str	r0, [r7, #12]
90003a10:	60b9      	str	r1, [r7, #8]
90003a12:	607a      	str	r2, [r7, #4]
90003a14:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
90003a16:	68fb      	ldr	r3, [r7, #12]
90003a18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90003a1c:	2b01      	cmp	r3, #1
90003a1e:	d101      	bne.n	90003a24 <HAL_LTDC_SetWindowPosition+0x1c>
90003a20:	2302      	movs	r3, #2
90003a22:	e033      	b.n	90003a8c <HAL_LTDC_SetWindowPosition+0x84>
90003a24:	68fb      	ldr	r3, [r7, #12]
90003a26:	2201      	movs	r2, #1
90003a28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003a2c:	68fb      	ldr	r3, [r7, #12]
90003a2e:	2202      	movs	r2, #2
90003a30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
90003a34:	683b      	ldr	r3, [r7, #0]
90003a36:	2234      	movs	r2, #52	; 0x34
90003a38:	fb02 f303 	mul.w	r3, r2, r3
90003a3c:	3338      	adds	r3, #56	; 0x38
90003a3e:	68fa      	ldr	r2, [r7, #12]
90003a40:	4413      	add	r3, r2
90003a42:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
90003a44:	697b      	ldr	r3, [r7, #20]
90003a46:	68ba      	ldr	r2, [r7, #8]
90003a48:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
90003a4a:	697b      	ldr	r3, [r7, #20]
90003a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90003a4e:	68bb      	ldr	r3, [r7, #8]
90003a50:	441a      	add	r2, r3
90003a52:	697b      	ldr	r3, [r7, #20]
90003a54:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
90003a56:	697b      	ldr	r3, [r7, #20]
90003a58:	687a      	ldr	r2, [r7, #4]
90003a5a:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
90003a5c:	697b      	ldr	r3, [r7, #20]
90003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90003a60:	687b      	ldr	r3, [r7, #4]
90003a62:	441a      	add	r2, r3
90003a64:	697b      	ldr	r3, [r7, #20]
90003a66:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90003a68:	683a      	ldr	r2, [r7, #0]
90003a6a:	6979      	ldr	r1, [r7, #20]
90003a6c:	68f8      	ldr	r0, [r7, #12]
90003a6e:	f000 f811 	bl	90003a94 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90003a72:	68fb      	ldr	r3, [r7, #12]
90003a74:	681b      	ldr	r3, [r3, #0]
90003a76:	2201      	movs	r2, #1
90003a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90003a7a:	68fb      	ldr	r3, [r7, #12]
90003a7c:	2201      	movs	r2, #1
90003a7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90003a82:	68fb      	ldr	r3, [r7, #12]
90003a84:	2200      	movs	r2, #0
90003a86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003a8a:	2300      	movs	r3, #0
}
90003a8c:	4618      	mov	r0, r3
90003a8e:	3718      	adds	r7, #24
90003a90:	46bd      	mov	sp, r7
90003a92:	bd80      	pop	{r7, pc}

90003a94 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90003a94:	b480      	push	{r7}
90003a96:	b089      	sub	sp, #36	; 0x24
90003a98:	af00      	add	r7, sp, #0
90003a9a:	60f8      	str	r0, [r7, #12]
90003a9c:	60b9      	str	r1, [r7, #8]
90003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90003aa0:	68bb      	ldr	r3, [r7, #8]
90003aa2:	685a      	ldr	r2, [r3, #4]
90003aa4:	68fb      	ldr	r3, [r7, #12]
90003aa6:	681b      	ldr	r3, [r3, #0]
90003aa8:	68db      	ldr	r3, [r3, #12]
90003aaa:	0c1b      	lsrs	r3, r3, #16
90003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
90003ab0:	4413      	add	r3, r2
90003ab2:	041b      	lsls	r3, r3, #16
90003ab4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90003ab6:	68fb      	ldr	r3, [r7, #12]
90003ab8:	681b      	ldr	r3, [r3, #0]
90003aba:	461a      	mov	r2, r3
90003abc:	687b      	ldr	r3, [r7, #4]
90003abe:	01db      	lsls	r3, r3, #7
90003ac0:	4413      	add	r3, r2
90003ac2:	3384      	adds	r3, #132	; 0x84
90003ac4:	685b      	ldr	r3, [r3, #4]
90003ac6:	68fa      	ldr	r2, [r7, #12]
90003ac8:	6812      	ldr	r2, [r2, #0]
90003aca:	4611      	mov	r1, r2
90003acc:	687a      	ldr	r2, [r7, #4]
90003ace:	01d2      	lsls	r2, r2, #7
90003ad0:	440a      	add	r2, r1
90003ad2:	3284      	adds	r2, #132	; 0x84
90003ad4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90003ad8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90003ada:	68bb      	ldr	r3, [r7, #8]
90003adc:	681a      	ldr	r2, [r3, #0]
90003ade:	68fb      	ldr	r3, [r7, #12]
90003ae0:	681b      	ldr	r3, [r3, #0]
90003ae2:	68db      	ldr	r3, [r3, #12]
90003ae4:	0c1b      	lsrs	r3, r3, #16
90003ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
90003aea:	4413      	add	r3, r2
90003aec:	1c5a      	adds	r2, r3, #1
90003aee:	68fb      	ldr	r3, [r7, #12]
90003af0:	681b      	ldr	r3, [r3, #0]
90003af2:	4619      	mov	r1, r3
90003af4:	687b      	ldr	r3, [r7, #4]
90003af6:	01db      	lsls	r3, r3, #7
90003af8:	440b      	add	r3, r1
90003afa:	3384      	adds	r3, #132	; 0x84
90003afc:	4619      	mov	r1, r3
90003afe:	69fb      	ldr	r3, [r7, #28]
90003b00:	4313      	orrs	r3, r2
90003b02:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90003b04:	68bb      	ldr	r3, [r7, #8]
90003b06:	68da      	ldr	r2, [r3, #12]
90003b08:	68fb      	ldr	r3, [r7, #12]
90003b0a:	681b      	ldr	r3, [r3, #0]
90003b0c:	68db      	ldr	r3, [r3, #12]
90003b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90003b12:	4413      	add	r3, r2
90003b14:	041b      	lsls	r3, r3, #16
90003b16:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90003b18:	68fb      	ldr	r3, [r7, #12]
90003b1a:	681b      	ldr	r3, [r3, #0]
90003b1c:	461a      	mov	r2, r3
90003b1e:	687b      	ldr	r3, [r7, #4]
90003b20:	01db      	lsls	r3, r3, #7
90003b22:	4413      	add	r3, r2
90003b24:	3384      	adds	r3, #132	; 0x84
90003b26:	689b      	ldr	r3, [r3, #8]
90003b28:	68fa      	ldr	r2, [r7, #12]
90003b2a:	6812      	ldr	r2, [r2, #0]
90003b2c:	4611      	mov	r1, r2
90003b2e:	687a      	ldr	r2, [r7, #4]
90003b30:	01d2      	lsls	r2, r2, #7
90003b32:	440a      	add	r2, r1
90003b34:	3284      	adds	r2, #132	; 0x84
90003b36:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90003b3a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90003b3c:	68bb      	ldr	r3, [r7, #8]
90003b3e:	689a      	ldr	r2, [r3, #8]
90003b40:	68fb      	ldr	r3, [r7, #12]
90003b42:	681b      	ldr	r3, [r3, #0]
90003b44:	68db      	ldr	r3, [r3, #12]
90003b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
90003b4a:	4413      	add	r3, r2
90003b4c:	1c5a      	adds	r2, r3, #1
90003b4e:	68fb      	ldr	r3, [r7, #12]
90003b50:	681b      	ldr	r3, [r3, #0]
90003b52:	4619      	mov	r1, r3
90003b54:	687b      	ldr	r3, [r7, #4]
90003b56:	01db      	lsls	r3, r3, #7
90003b58:	440b      	add	r3, r1
90003b5a:	3384      	adds	r3, #132	; 0x84
90003b5c:	4619      	mov	r1, r3
90003b5e:	69fb      	ldr	r3, [r7, #28]
90003b60:	4313      	orrs	r3, r2
90003b62:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90003b64:	68fb      	ldr	r3, [r7, #12]
90003b66:	681b      	ldr	r3, [r3, #0]
90003b68:	461a      	mov	r2, r3
90003b6a:	687b      	ldr	r3, [r7, #4]
90003b6c:	01db      	lsls	r3, r3, #7
90003b6e:	4413      	add	r3, r2
90003b70:	3384      	adds	r3, #132	; 0x84
90003b72:	691b      	ldr	r3, [r3, #16]
90003b74:	68fa      	ldr	r2, [r7, #12]
90003b76:	6812      	ldr	r2, [r2, #0]
90003b78:	4611      	mov	r1, r2
90003b7a:	687a      	ldr	r2, [r7, #4]
90003b7c:	01d2      	lsls	r2, r2, #7
90003b7e:	440a      	add	r2, r1
90003b80:	3284      	adds	r2, #132	; 0x84
90003b82:	f023 0307 	bic.w	r3, r3, #7
90003b86:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90003b88:	68fb      	ldr	r3, [r7, #12]
90003b8a:	681b      	ldr	r3, [r3, #0]
90003b8c:	461a      	mov	r2, r3
90003b8e:	687b      	ldr	r3, [r7, #4]
90003b90:	01db      	lsls	r3, r3, #7
90003b92:	4413      	add	r3, r2
90003b94:	3384      	adds	r3, #132	; 0x84
90003b96:	461a      	mov	r2, r3
90003b98:	68bb      	ldr	r3, [r7, #8]
90003b9a:	691b      	ldr	r3, [r3, #16]
90003b9c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90003b9e:	68bb      	ldr	r3, [r7, #8]
90003ba0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
90003ba4:	021b      	lsls	r3, r3, #8
90003ba6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90003ba8:	68bb      	ldr	r3, [r7, #8]
90003baa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
90003bae:	041b      	lsls	r3, r3, #16
90003bb0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90003bb2:	68bb      	ldr	r3, [r7, #8]
90003bb4:	699b      	ldr	r3, [r3, #24]
90003bb6:	061b      	lsls	r3, r3, #24
90003bb8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90003bba:	68fb      	ldr	r3, [r7, #12]
90003bbc:	681b      	ldr	r3, [r3, #0]
90003bbe:	461a      	mov	r2, r3
90003bc0:	687b      	ldr	r3, [r7, #4]
90003bc2:	01db      	lsls	r3, r3, #7
90003bc4:	4413      	add	r3, r2
90003bc6:	3384      	adds	r3, #132	; 0x84
90003bc8:	699b      	ldr	r3, [r3, #24]
90003bca:	68fb      	ldr	r3, [r7, #12]
90003bcc:	681b      	ldr	r3, [r3, #0]
90003bce:	461a      	mov	r2, r3
90003bd0:	687b      	ldr	r3, [r7, #4]
90003bd2:	01db      	lsls	r3, r3, #7
90003bd4:	4413      	add	r3, r2
90003bd6:	3384      	adds	r3, #132	; 0x84
90003bd8:	461a      	mov	r2, r3
90003bda:	2300      	movs	r3, #0
90003bdc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90003bde:	68bb      	ldr	r3, [r7, #8]
90003be0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90003be4:	461a      	mov	r2, r3
90003be6:	69fb      	ldr	r3, [r7, #28]
90003be8:	431a      	orrs	r2, r3
90003bea:	69bb      	ldr	r3, [r7, #24]
90003bec:	431a      	orrs	r2, r3
90003bee:	68fb      	ldr	r3, [r7, #12]
90003bf0:	681b      	ldr	r3, [r3, #0]
90003bf2:	4619      	mov	r1, r3
90003bf4:	687b      	ldr	r3, [r7, #4]
90003bf6:	01db      	lsls	r3, r3, #7
90003bf8:	440b      	add	r3, r1
90003bfa:	3384      	adds	r3, #132	; 0x84
90003bfc:	4619      	mov	r1, r3
90003bfe:	697b      	ldr	r3, [r7, #20]
90003c00:	4313      	orrs	r3, r2
90003c02:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90003c04:	68fb      	ldr	r3, [r7, #12]
90003c06:	681b      	ldr	r3, [r3, #0]
90003c08:	461a      	mov	r2, r3
90003c0a:	687b      	ldr	r3, [r7, #4]
90003c0c:	01db      	lsls	r3, r3, #7
90003c0e:	4413      	add	r3, r2
90003c10:	3384      	adds	r3, #132	; 0x84
90003c12:	695b      	ldr	r3, [r3, #20]
90003c14:	68fa      	ldr	r2, [r7, #12]
90003c16:	6812      	ldr	r2, [r2, #0]
90003c18:	4611      	mov	r1, r2
90003c1a:	687a      	ldr	r2, [r7, #4]
90003c1c:	01d2      	lsls	r2, r2, #7
90003c1e:	440a      	add	r2, r1
90003c20:	3284      	adds	r2, #132	; 0x84
90003c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90003c26:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90003c28:	68fb      	ldr	r3, [r7, #12]
90003c2a:	681b      	ldr	r3, [r3, #0]
90003c2c:	461a      	mov	r2, r3
90003c2e:	687b      	ldr	r3, [r7, #4]
90003c30:	01db      	lsls	r3, r3, #7
90003c32:	4413      	add	r3, r2
90003c34:	3384      	adds	r3, #132	; 0x84
90003c36:	461a      	mov	r2, r3
90003c38:	68bb      	ldr	r3, [r7, #8]
90003c3a:	695b      	ldr	r3, [r3, #20]
90003c3c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90003c3e:	68fb      	ldr	r3, [r7, #12]
90003c40:	681b      	ldr	r3, [r3, #0]
90003c42:	461a      	mov	r2, r3
90003c44:	687b      	ldr	r3, [r7, #4]
90003c46:	01db      	lsls	r3, r3, #7
90003c48:	4413      	add	r3, r2
90003c4a:	3384      	adds	r3, #132	; 0x84
90003c4c:	69da      	ldr	r2, [r3, #28]
90003c4e:	68fb      	ldr	r3, [r7, #12]
90003c50:	681b      	ldr	r3, [r3, #0]
90003c52:	4619      	mov	r1, r3
90003c54:	687b      	ldr	r3, [r7, #4]
90003c56:	01db      	lsls	r3, r3, #7
90003c58:	440b      	add	r3, r1
90003c5a:	3384      	adds	r3, #132	; 0x84
90003c5c:	4619      	mov	r1, r3
90003c5e:	4b58      	ldr	r3, [pc, #352]	; (90003dc0 <LTDC_SetConfig+0x32c>)
90003c60:	4013      	ands	r3, r2
90003c62:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90003c64:	68bb      	ldr	r3, [r7, #8]
90003c66:	69da      	ldr	r2, [r3, #28]
90003c68:	68bb      	ldr	r3, [r7, #8]
90003c6a:	6a1b      	ldr	r3, [r3, #32]
90003c6c:	68f9      	ldr	r1, [r7, #12]
90003c6e:	6809      	ldr	r1, [r1, #0]
90003c70:	4608      	mov	r0, r1
90003c72:	6879      	ldr	r1, [r7, #4]
90003c74:	01c9      	lsls	r1, r1, #7
90003c76:	4401      	add	r1, r0
90003c78:	3184      	adds	r1, #132	; 0x84
90003c7a:	4313      	orrs	r3, r2
90003c7c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90003c7e:	68fb      	ldr	r3, [r7, #12]
90003c80:	681b      	ldr	r3, [r3, #0]
90003c82:	461a      	mov	r2, r3
90003c84:	687b      	ldr	r3, [r7, #4]
90003c86:	01db      	lsls	r3, r3, #7
90003c88:	4413      	add	r3, r2
90003c8a:	3384      	adds	r3, #132	; 0x84
90003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003c8e:	68fb      	ldr	r3, [r7, #12]
90003c90:	681b      	ldr	r3, [r3, #0]
90003c92:	461a      	mov	r2, r3
90003c94:	687b      	ldr	r3, [r7, #4]
90003c96:	01db      	lsls	r3, r3, #7
90003c98:	4413      	add	r3, r2
90003c9a:	3384      	adds	r3, #132	; 0x84
90003c9c:	461a      	mov	r2, r3
90003c9e:	2300      	movs	r3, #0
90003ca0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90003ca2:	68fb      	ldr	r3, [r7, #12]
90003ca4:	681b      	ldr	r3, [r3, #0]
90003ca6:	461a      	mov	r2, r3
90003ca8:	687b      	ldr	r3, [r7, #4]
90003caa:	01db      	lsls	r3, r3, #7
90003cac:	4413      	add	r3, r2
90003cae:	3384      	adds	r3, #132	; 0x84
90003cb0:	461a      	mov	r2, r3
90003cb2:	68bb      	ldr	r3, [r7, #8]
90003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003cb6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90003cb8:	68bb      	ldr	r3, [r7, #8]
90003cba:	691b      	ldr	r3, [r3, #16]
90003cbc:	2b00      	cmp	r3, #0
90003cbe:	d102      	bne.n	90003cc6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
90003cc0:	2304      	movs	r3, #4
90003cc2:	61fb      	str	r3, [r7, #28]
90003cc4:	e01b      	b.n	90003cfe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90003cc6:	68bb      	ldr	r3, [r7, #8]
90003cc8:	691b      	ldr	r3, [r3, #16]
90003cca:	2b01      	cmp	r3, #1
90003ccc:	d102      	bne.n	90003cd4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
90003cce:	2303      	movs	r3, #3
90003cd0:	61fb      	str	r3, [r7, #28]
90003cd2:	e014      	b.n	90003cfe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90003cd4:	68bb      	ldr	r3, [r7, #8]
90003cd6:	691b      	ldr	r3, [r3, #16]
90003cd8:	2b04      	cmp	r3, #4
90003cda:	d00b      	beq.n	90003cf4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90003cdc:	68bb      	ldr	r3, [r7, #8]
90003cde:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90003ce0:	2b02      	cmp	r3, #2
90003ce2:	d007      	beq.n	90003cf4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90003ce4:	68bb      	ldr	r3, [r7, #8]
90003ce6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90003ce8:	2b03      	cmp	r3, #3
90003cea:	d003      	beq.n	90003cf4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90003cec:	68bb      	ldr	r3, [r7, #8]
90003cee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90003cf0:	2b07      	cmp	r3, #7
90003cf2:	d102      	bne.n	90003cfa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
90003cf4:	2302      	movs	r3, #2
90003cf6:	61fb      	str	r3, [r7, #28]
90003cf8:	e001      	b.n	90003cfe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
90003cfa:	2301      	movs	r3, #1
90003cfc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90003cfe:	68fb      	ldr	r3, [r7, #12]
90003d00:	681b      	ldr	r3, [r3, #0]
90003d02:	461a      	mov	r2, r3
90003d04:	687b      	ldr	r3, [r7, #4]
90003d06:	01db      	lsls	r3, r3, #7
90003d08:	4413      	add	r3, r2
90003d0a:	3384      	adds	r3, #132	; 0x84
90003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003d0e:	68fa      	ldr	r2, [r7, #12]
90003d10:	6812      	ldr	r2, [r2, #0]
90003d12:	4611      	mov	r1, r2
90003d14:	687a      	ldr	r2, [r7, #4]
90003d16:	01d2      	lsls	r2, r2, #7
90003d18:	440a      	add	r2, r1
90003d1a:	3284      	adds	r2, #132	; 0x84
90003d1c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90003d20:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90003d22:	68bb      	ldr	r3, [r7, #8]
90003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003d26:	69fa      	ldr	r2, [r7, #28]
90003d28:	fb02 f303 	mul.w	r3, r2, r3
90003d2c:	041a      	lsls	r2, r3, #16
90003d2e:	68bb      	ldr	r3, [r7, #8]
90003d30:	6859      	ldr	r1, [r3, #4]
90003d32:	68bb      	ldr	r3, [r7, #8]
90003d34:	681b      	ldr	r3, [r3, #0]
90003d36:	1acb      	subs	r3, r1, r3
90003d38:	69f9      	ldr	r1, [r7, #28]
90003d3a:	fb01 f303 	mul.w	r3, r1, r3
90003d3e:	3307      	adds	r3, #7
90003d40:	68f9      	ldr	r1, [r7, #12]
90003d42:	6809      	ldr	r1, [r1, #0]
90003d44:	4608      	mov	r0, r1
90003d46:	6879      	ldr	r1, [r7, #4]
90003d48:	01c9      	lsls	r1, r1, #7
90003d4a:	4401      	add	r1, r0
90003d4c:	3184      	adds	r1, #132	; 0x84
90003d4e:	4313      	orrs	r3, r2
90003d50:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90003d52:	68fb      	ldr	r3, [r7, #12]
90003d54:	681b      	ldr	r3, [r3, #0]
90003d56:	461a      	mov	r2, r3
90003d58:	687b      	ldr	r3, [r7, #4]
90003d5a:	01db      	lsls	r3, r3, #7
90003d5c:	4413      	add	r3, r2
90003d5e:	3384      	adds	r3, #132	; 0x84
90003d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003d62:	68fb      	ldr	r3, [r7, #12]
90003d64:	681b      	ldr	r3, [r3, #0]
90003d66:	4619      	mov	r1, r3
90003d68:	687b      	ldr	r3, [r7, #4]
90003d6a:	01db      	lsls	r3, r3, #7
90003d6c:	440b      	add	r3, r1
90003d6e:	3384      	adds	r3, #132	; 0x84
90003d70:	4619      	mov	r1, r3
90003d72:	4b14      	ldr	r3, [pc, #80]	; (90003dc4 <LTDC_SetConfig+0x330>)
90003d74:	4013      	ands	r3, r2
90003d76:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90003d78:	68fb      	ldr	r3, [r7, #12]
90003d7a:	681b      	ldr	r3, [r3, #0]
90003d7c:	461a      	mov	r2, r3
90003d7e:	687b      	ldr	r3, [r7, #4]
90003d80:	01db      	lsls	r3, r3, #7
90003d82:	4413      	add	r3, r2
90003d84:	3384      	adds	r3, #132	; 0x84
90003d86:	461a      	mov	r2, r3
90003d88:	68bb      	ldr	r3, [r7, #8]
90003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003d8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90003d8e:	68fb      	ldr	r3, [r7, #12]
90003d90:	681b      	ldr	r3, [r3, #0]
90003d92:	461a      	mov	r2, r3
90003d94:	687b      	ldr	r3, [r7, #4]
90003d96:	01db      	lsls	r3, r3, #7
90003d98:	4413      	add	r3, r2
90003d9a:	3384      	adds	r3, #132	; 0x84
90003d9c:	681b      	ldr	r3, [r3, #0]
90003d9e:	68fa      	ldr	r2, [r7, #12]
90003da0:	6812      	ldr	r2, [r2, #0]
90003da2:	4611      	mov	r1, r2
90003da4:	687a      	ldr	r2, [r7, #4]
90003da6:	01d2      	lsls	r2, r2, #7
90003da8:	440a      	add	r2, r1
90003daa:	3284      	adds	r2, #132	; 0x84
90003dac:	f043 0301 	orr.w	r3, r3, #1
90003db0:	6013      	str	r3, [r2, #0]
}
90003db2:	bf00      	nop
90003db4:	3724      	adds	r7, #36	; 0x24
90003db6:	46bd      	mov	sp, r7
90003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
90003dbc:	4770      	bx	lr
90003dbe:	bf00      	nop
90003dc0:	fffff8f8 	.word	0xfffff8f8
90003dc4:	fffff800 	.word	0xfffff800

90003dc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
90003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
90003dca:	b08f      	sub	sp, #60	; 0x3c
90003dcc:	af0a      	add	r7, sp, #40	; 0x28
90003dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
90003dd0:	687b      	ldr	r3, [r7, #4]
90003dd2:	2b00      	cmp	r3, #0
90003dd4:	d101      	bne.n	90003dda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
90003dd6:	2301      	movs	r3, #1
90003dd8:	e116      	b.n	90004008 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
90003dda:	687b      	ldr	r3, [r7, #4]
90003ddc:	681b      	ldr	r3, [r3, #0]
90003dde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
90003de0:	687b      	ldr	r3, [r7, #4]
90003de2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
90003de6:	b2db      	uxtb	r3, r3
90003de8:	2b00      	cmp	r3, #0
90003dea:	d106      	bne.n	90003dfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
90003dec:	687b      	ldr	r3, [r7, #4]
90003dee:	2200      	movs	r2, #0
90003df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
90003df4:	6878      	ldr	r0, [r7, #4]
90003df6:	f7fe f8bf 	bl	90001f78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
90003dfa:	687b      	ldr	r3, [r7, #4]
90003dfc:	2203      	movs	r2, #3
90003dfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
90003e02:	68bb      	ldr	r3, [r7, #8]
90003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003e0a:	2b00      	cmp	r3, #0
90003e0c:	d102      	bne.n	90003e14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
90003e0e:	687b      	ldr	r3, [r7, #4]
90003e10:	2200      	movs	r2, #0
90003e12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
90003e14:	687b      	ldr	r3, [r7, #4]
90003e16:	681b      	ldr	r3, [r3, #0]
90003e18:	4618      	mov	r0, r3
90003e1a:	f007 f92d 	bl	9000b078 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
90003e1e:	687b      	ldr	r3, [r7, #4]
90003e20:	681b      	ldr	r3, [r3, #0]
90003e22:	603b      	str	r3, [r7, #0]
90003e24:	687e      	ldr	r6, [r7, #4]
90003e26:	466d      	mov	r5, sp
90003e28:	f106 0410 	add.w	r4, r6, #16
90003e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90003e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90003e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90003e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90003e34:	e894 0003 	ldmia.w	r4, {r0, r1}
90003e38:	e885 0003 	stmia.w	r5, {r0, r1}
90003e3c:	1d33      	adds	r3, r6, #4
90003e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
90003e40:	6838      	ldr	r0, [r7, #0]
90003e42:	f007 f8b7 	bl	9000afb4 <USB_CoreInit>
90003e46:	4603      	mov	r3, r0
90003e48:	2b00      	cmp	r3, #0
90003e4a:	d005      	beq.n	90003e58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
90003e4c:	687b      	ldr	r3, [r7, #4]
90003e4e:	2202      	movs	r2, #2
90003e50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
90003e54:	2301      	movs	r3, #1
90003e56:	e0d7      	b.n	90004008 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
90003e58:	687b      	ldr	r3, [r7, #4]
90003e5a:	681b      	ldr	r3, [r3, #0]
90003e5c:	2100      	movs	r1, #0
90003e5e:	4618      	mov	r0, r3
90003e60:	f007 f91b 	bl	9000b09a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
90003e64:	2300      	movs	r3, #0
90003e66:	73fb      	strb	r3, [r7, #15]
90003e68:	e04a      	b.n	90003f00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
90003e6a:	7bfa      	ldrb	r2, [r7, #15]
90003e6c:	6879      	ldr	r1, [r7, #4]
90003e6e:	4613      	mov	r3, r2
90003e70:	00db      	lsls	r3, r3, #3
90003e72:	1a9b      	subs	r3, r3, r2
90003e74:	009b      	lsls	r3, r3, #2
90003e76:	440b      	add	r3, r1
90003e78:	333d      	adds	r3, #61	; 0x3d
90003e7a:	2201      	movs	r2, #1
90003e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
90003e7e:	7bfa      	ldrb	r2, [r7, #15]
90003e80:	6879      	ldr	r1, [r7, #4]
90003e82:	4613      	mov	r3, r2
90003e84:	00db      	lsls	r3, r3, #3
90003e86:	1a9b      	subs	r3, r3, r2
90003e88:	009b      	lsls	r3, r3, #2
90003e8a:	440b      	add	r3, r1
90003e8c:	333c      	adds	r3, #60	; 0x3c
90003e8e:	7bfa      	ldrb	r2, [r7, #15]
90003e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
90003e92:	7bfa      	ldrb	r2, [r7, #15]
90003e94:	7bfb      	ldrb	r3, [r7, #15]
90003e96:	b298      	uxth	r0, r3
90003e98:	6879      	ldr	r1, [r7, #4]
90003e9a:	4613      	mov	r3, r2
90003e9c:	00db      	lsls	r3, r3, #3
90003e9e:	1a9b      	subs	r3, r3, r2
90003ea0:	009b      	lsls	r3, r3, #2
90003ea2:	440b      	add	r3, r1
90003ea4:	3342      	adds	r3, #66	; 0x42
90003ea6:	4602      	mov	r2, r0
90003ea8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
90003eaa:	7bfa      	ldrb	r2, [r7, #15]
90003eac:	6879      	ldr	r1, [r7, #4]
90003eae:	4613      	mov	r3, r2
90003eb0:	00db      	lsls	r3, r3, #3
90003eb2:	1a9b      	subs	r3, r3, r2
90003eb4:	009b      	lsls	r3, r3, #2
90003eb6:	440b      	add	r3, r1
90003eb8:	333f      	adds	r3, #63	; 0x3f
90003eba:	2200      	movs	r2, #0
90003ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
90003ebe:	7bfa      	ldrb	r2, [r7, #15]
90003ec0:	6879      	ldr	r1, [r7, #4]
90003ec2:	4613      	mov	r3, r2
90003ec4:	00db      	lsls	r3, r3, #3
90003ec6:	1a9b      	subs	r3, r3, r2
90003ec8:	009b      	lsls	r3, r3, #2
90003eca:	440b      	add	r3, r1
90003ecc:	3344      	adds	r3, #68	; 0x44
90003ece:	2200      	movs	r2, #0
90003ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
90003ed2:	7bfa      	ldrb	r2, [r7, #15]
90003ed4:	6879      	ldr	r1, [r7, #4]
90003ed6:	4613      	mov	r3, r2
90003ed8:	00db      	lsls	r3, r3, #3
90003eda:	1a9b      	subs	r3, r3, r2
90003edc:	009b      	lsls	r3, r3, #2
90003ede:	440b      	add	r3, r1
90003ee0:	3348      	adds	r3, #72	; 0x48
90003ee2:	2200      	movs	r2, #0
90003ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
90003ee6:	7bfa      	ldrb	r2, [r7, #15]
90003ee8:	6879      	ldr	r1, [r7, #4]
90003eea:	4613      	mov	r3, r2
90003eec:	00db      	lsls	r3, r3, #3
90003eee:	1a9b      	subs	r3, r3, r2
90003ef0:	009b      	lsls	r3, r3, #2
90003ef2:	440b      	add	r3, r1
90003ef4:	3350      	adds	r3, #80	; 0x50
90003ef6:	2200      	movs	r2, #0
90003ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
90003efa:	7bfb      	ldrb	r3, [r7, #15]
90003efc:	3301      	adds	r3, #1
90003efe:	73fb      	strb	r3, [r7, #15]
90003f00:	7bfa      	ldrb	r2, [r7, #15]
90003f02:	687b      	ldr	r3, [r7, #4]
90003f04:	685b      	ldr	r3, [r3, #4]
90003f06:	429a      	cmp	r2, r3
90003f08:	d3af      	bcc.n	90003e6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
90003f0a:	2300      	movs	r3, #0
90003f0c:	73fb      	strb	r3, [r7, #15]
90003f0e:	e044      	b.n	90003f9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
90003f10:	7bfa      	ldrb	r2, [r7, #15]
90003f12:	6879      	ldr	r1, [r7, #4]
90003f14:	4613      	mov	r3, r2
90003f16:	00db      	lsls	r3, r3, #3
90003f18:	1a9b      	subs	r3, r3, r2
90003f1a:	009b      	lsls	r3, r3, #2
90003f1c:	440b      	add	r3, r1
90003f1e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
90003f22:	2200      	movs	r2, #0
90003f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
90003f26:	7bfa      	ldrb	r2, [r7, #15]
90003f28:	6879      	ldr	r1, [r7, #4]
90003f2a:	4613      	mov	r3, r2
90003f2c:	00db      	lsls	r3, r3, #3
90003f2e:	1a9b      	subs	r3, r3, r2
90003f30:	009b      	lsls	r3, r3, #2
90003f32:	440b      	add	r3, r1
90003f34:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
90003f38:	7bfa      	ldrb	r2, [r7, #15]
90003f3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
90003f3c:	7bfa      	ldrb	r2, [r7, #15]
90003f3e:	6879      	ldr	r1, [r7, #4]
90003f40:	4613      	mov	r3, r2
90003f42:	00db      	lsls	r3, r3, #3
90003f44:	1a9b      	subs	r3, r3, r2
90003f46:	009b      	lsls	r3, r3, #2
90003f48:	440b      	add	r3, r1
90003f4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
90003f4e:	2200      	movs	r2, #0
90003f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
90003f52:	7bfa      	ldrb	r2, [r7, #15]
90003f54:	6879      	ldr	r1, [r7, #4]
90003f56:	4613      	mov	r3, r2
90003f58:	00db      	lsls	r3, r3, #3
90003f5a:	1a9b      	subs	r3, r3, r2
90003f5c:	009b      	lsls	r3, r3, #2
90003f5e:	440b      	add	r3, r1
90003f60:	f503 7301 	add.w	r3, r3, #516	; 0x204
90003f64:	2200      	movs	r2, #0
90003f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
90003f68:	7bfa      	ldrb	r2, [r7, #15]
90003f6a:	6879      	ldr	r1, [r7, #4]
90003f6c:	4613      	mov	r3, r2
90003f6e:	00db      	lsls	r3, r3, #3
90003f70:	1a9b      	subs	r3, r3, r2
90003f72:	009b      	lsls	r3, r3, #2
90003f74:	440b      	add	r3, r1
90003f76:	f503 7302 	add.w	r3, r3, #520	; 0x208
90003f7a:	2200      	movs	r2, #0
90003f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
90003f7e:	7bfa      	ldrb	r2, [r7, #15]
90003f80:	6879      	ldr	r1, [r7, #4]
90003f82:	4613      	mov	r3, r2
90003f84:	00db      	lsls	r3, r3, #3
90003f86:	1a9b      	subs	r3, r3, r2
90003f88:	009b      	lsls	r3, r3, #2
90003f8a:	440b      	add	r3, r1
90003f8c:	f503 7304 	add.w	r3, r3, #528	; 0x210
90003f90:	2200      	movs	r2, #0
90003f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
90003f94:	7bfb      	ldrb	r3, [r7, #15]
90003f96:	3301      	adds	r3, #1
90003f98:	73fb      	strb	r3, [r7, #15]
90003f9a:	7bfa      	ldrb	r2, [r7, #15]
90003f9c:	687b      	ldr	r3, [r7, #4]
90003f9e:	685b      	ldr	r3, [r3, #4]
90003fa0:	429a      	cmp	r2, r3
90003fa2:	d3b5      	bcc.n	90003f10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
90003fa4:	687b      	ldr	r3, [r7, #4]
90003fa6:	681b      	ldr	r3, [r3, #0]
90003fa8:	603b      	str	r3, [r7, #0]
90003faa:	687e      	ldr	r6, [r7, #4]
90003fac:	466d      	mov	r5, sp
90003fae:	f106 0410 	add.w	r4, r6, #16
90003fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90003fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90003fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90003fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90003fba:	e894 0003 	ldmia.w	r4, {r0, r1}
90003fbe:	e885 0003 	stmia.w	r5, {r0, r1}
90003fc2:	1d33      	adds	r3, r6, #4
90003fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
90003fc6:	6838      	ldr	r0, [r7, #0]
90003fc8:	f007 f892 	bl	9000b0f0 <USB_DevInit>
90003fcc:	4603      	mov	r3, r0
90003fce:	2b00      	cmp	r3, #0
90003fd0:	d005      	beq.n	90003fde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
90003fd2:	687b      	ldr	r3, [r7, #4]
90003fd4:	2202      	movs	r2, #2
90003fd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
90003fda:	2301      	movs	r3, #1
90003fdc:	e014      	b.n	90004008 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
90003fde:	687b      	ldr	r3, [r7, #4]
90003fe0:	2200      	movs	r2, #0
90003fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
90003fe6:	687b      	ldr	r3, [r7, #4]
90003fe8:	2201      	movs	r2, #1
90003fea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
90003fee:	687b      	ldr	r3, [r7, #4]
90003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003ff2:	2b01      	cmp	r3, #1
90003ff4:	d102      	bne.n	90003ffc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
90003ff6:	6878      	ldr	r0, [r7, #4]
90003ff8:	f000 f80a 	bl	90004010 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
90003ffc:	687b      	ldr	r3, [r7, #4]
90003ffe:	681b      	ldr	r3, [r3, #0]
90004000:	4618      	mov	r0, r3
90004002:	f007 fa34 	bl	9000b46e <USB_DevDisconnect>

  return HAL_OK;
90004006:	2300      	movs	r3, #0
}
90004008:	4618      	mov	r0, r3
9000400a:	3714      	adds	r7, #20
9000400c:	46bd      	mov	sp, r7
9000400e:	bdf0      	pop	{r4, r5, r6, r7, pc}

90004010 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
90004010:	b480      	push	{r7}
90004012:	b085      	sub	sp, #20
90004014:	af00      	add	r7, sp, #0
90004016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
90004018:	687b      	ldr	r3, [r7, #4]
9000401a:	681b      	ldr	r3, [r3, #0]
9000401c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
9000401e:	687b      	ldr	r3, [r7, #4]
90004020:	2201      	movs	r2, #1
90004022:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
90004026:	687b      	ldr	r3, [r7, #4]
90004028:	2200      	movs	r2, #0
9000402a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
9000402e:	68fb      	ldr	r3, [r7, #12]
90004030:	699b      	ldr	r3, [r3, #24]
90004032:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
90004036:	68fb      	ldr	r3, [r7, #12]
90004038:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
9000403a:	68fb      	ldr	r3, [r7, #12]
9000403c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000403e:	4b05      	ldr	r3, [pc, #20]	; (90004054 <HAL_PCDEx_ActivateLPM+0x44>)
90004040:	4313      	orrs	r3, r2
90004042:	68fa      	ldr	r2, [r7, #12]
90004044:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
90004046:	2300      	movs	r3, #0
}
90004048:	4618      	mov	r0, r3
9000404a:	3714      	adds	r7, #20
9000404c:	46bd      	mov	sp, r7
9000404e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004052:	4770      	bx	lr
90004054:	10000003 	.word	0x10000003

90004058 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90004058:	b580      	push	{r7, lr}
9000405a:	b084      	sub	sp, #16
9000405c:	af00      	add	r7, sp, #0
9000405e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90004060:	4b19      	ldr	r3, [pc, #100]	; (900040c8 <HAL_PWREx_ConfigSupply+0x70>)
90004062:	68db      	ldr	r3, [r3, #12]
90004064:	f003 0304 	and.w	r3, r3, #4
90004068:	2b04      	cmp	r3, #4
9000406a:	d00a      	beq.n	90004082 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000406c:	4b16      	ldr	r3, [pc, #88]	; (900040c8 <HAL_PWREx_ConfigSupply+0x70>)
9000406e:	68db      	ldr	r3, [r3, #12]
90004070:	f003 0307 	and.w	r3, r3, #7
90004074:	687a      	ldr	r2, [r7, #4]
90004076:	429a      	cmp	r2, r3
90004078:	d001      	beq.n	9000407e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000407a:	2301      	movs	r3, #1
9000407c:	e01f      	b.n	900040be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
9000407e:	2300      	movs	r3, #0
90004080:	e01d      	b.n	900040be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90004082:	4b11      	ldr	r3, [pc, #68]	; (900040c8 <HAL_PWREx_ConfigSupply+0x70>)
90004084:	68db      	ldr	r3, [r3, #12]
90004086:	f023 0207 	bic.w	r2, r3, #7
9000408a:	490f      	ldr	r1, [pc, #60]	; (900040c8 <HAL_PWREx_ConfigSupply+0x70>)
9000408c:	687b      	ldr	r3, [r7, #4]
9000408e:	4313      	orrs	r3, r2
90004090:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
90004092:	f7fe f8b5 	bl	90002200 <HAL_GetTick>
90004096:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90004098:	e009      	b.n	900040ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000409a:	f7fe f8b1 	bl	90002200 <HAL_GetTick>
9000409e:	4602      	mov	r2, r0
900040a0:	68fb      	ldr	r3, [r7, #12]
900040a2:	1ad3      	subs	r3, r2, r3
900040a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900040a8:	d901      	bls.n	900040ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
900040aa:	2301      	movs	r3, #1
900040ac:	e007      	b.n	900040be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
900040ae:	4b06      	ldr	r3, [pc, #24]	; (900040c8 <HAL_PWREx_ConfigSupply+0x70>)
900040b0:	685b      	ldr	r3, [r3, #4]
900040b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900040b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900040ba:	d1ee      	bne.n	9000409a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
900040bc:	2300      	movs	r3, #0
}
900040be:	4618      	mov	r0, r3
900040c0:	3710      	adds	r7, #16
900040c2:	46bd      	mov	sp, r7
900040c4:	bd80      	pop	{r7, pc}
900040c6:	bf00      	nop
900040c8:	58024800 	.word	0x58024800

900040cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
900040cc:	b480      	push	{r7}
900040ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
900040d0:	4b05      	ldr	r3, [pc, #20]	; (900040e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
900040d2:	68db      	ldr	r3, [r3, #12]
900040d4:	4a04      	ldr	r2, [pc, #16]	; (900040e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
900040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900040da:	60d3      	str	r3, [r2, #12]
}
900040dc:	bf00      	nop
900040de:	46bd      	mov	sp, r7
900040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900040e4:	4770      	bx	lr
900040e6:	bf00      	nop
900040e8:	58024800 	.word	0x58024800

900040ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900040ec:	b580      	push	{r7, lr}
900040ee:	b08c      	sub	sp, #48	; 0x30
900040f0:	af00      	add	r7, sp, #0
900040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
900040f4:	687b      	ldr	r3, [r7, #4]
900040f6:	2b00      	cmp	r3, #0
900040f8:	d101      	bne.n	900040fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
900040fa:	2301      	movs	r3, #1
900040fc:	e3ff      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900040fe:	687b      	ldr	r3, [r7, #4]
90004100:	681b      	ldr	r3, [r3, #0]
90004102:	f003 0301 	and.w	r3, r3, #1
90004106:	2b00      	cmp	r3, #0
90004108:	f000 8087 	beq.w	9000421a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000410c:	4b99      	ldr	r3, [pc, #612]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000410e:	691b      	ldr	r3, [r3, #16]
90004110:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004114:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90004116:	4b97      	ldr	r3, [pc, #604]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000411a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000411e:	2b10      	cmp	r3, #16
90004120:	d007      	beq.n	90004132 <HAL_RCC_OscConfig+0x46>
90004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004124:	2b18      	cmp	r3, #24
90004126:	d110      	bne.n	9000414a <HAL_RCC_OscConfig+0x5e>
90004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000412a:	f003 0303 	and.w	r3, r3, #3
9000412e:	2b02      	cmp	r3, #2
90004130:	d10b      	bne.n	9000414a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90004132:	4b90      	ldr	r3, [pc, #576]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004134:	681b      	ldr	r3, [r3, #0]
90004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000413a:	2b00      	cmp	r3, #0
9000413c:	d06c      	beq.n	90004218 <HAL_RCC_OscConfig+0x12c>
9000413e:	687b      	ldr	r3, [r7, #4]
90004140:	685b      	ldr	r3, [r3, #4]
90004142:	2b00      	cmp	r3, #0
90004144:	d168      	bne.n	90004218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
90004146:	2301      	movs	r3, #1
90004148:	e3d9      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000414a:	687b      	ldr	r3, [r7, #4]
9000414c:	685b      	ldr	r3, [r3, #4]
9000414e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004152:	d106      	bne.n	90004162 <HAL_RCC_OscConfig+0x76>
90004154:	4b87      	ldr	r3, [pc, #540]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004156:	681b      	ldr	r3, [r3, #0]
90004158:	4a86      	ldr	r2, [pc, #536]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000415a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000415e:	6013      	str	r3, [r2, #0]
90004160:	e02e      	b.n	900041c0 <HAL_RCC_OscConfig+0xd4>
90004162:	687b      	ldr	r3, [r7, #4]
90004164:	685b      	ldr	r3, [r3, #4]
90004166:	2b00      	cmp	r3, #0
90004168:	d10c      	bne.n	90004184 <HAL_RCC_OscConfig+0x98>
9000416a:	4b82      	ldr	r3, [pc, #520]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000416c:	681b      	ldr	r3, [r3, #0]
9000416e:	4a81      	ldr	r2, [pc, #516]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90004174:	6013      	str	r3, [r2, #0]
90004176:	4b7f      	ldr	r3, [pc, #508]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004178:	681b      	ldr	r3, [r3, #0]
9000417a:	4a7e      	ldr	r2, [pc, #504]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000417c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90004180:	6013      	str	r3, [r2, #0]
90004182:	e01d      	b.n	900041c0 <HAL_RCC_OscConfig+0xd4>
90004184:	687b      	ldr	r3, [r7, #4]
90004186:	685b      	ldr	r3, [r3, #4]
90004188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000418c:	d10c      	bne.n	900041a8 <HAL_RCC_OscConfig+0xbc>
9000418e:	4b79      	ldr	r3, [pc, #484]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004190:	681b      	ldr	r3, [r3, #0]
90004192:	4a78      	ldr	r2, [pc, #480]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90004198:	6013      	str	r3, [r2, #0]
9000419a:	4b76      	ldr	r3, [pc, #472]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000419c:	681b      	ldr	r3, [r3, #0]
9000419e:	4a75      	ldr	r2, [pc, #468]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900041a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900041a4:	6013      	str	r3, [r2, #0]
900041a6:	e00b      	b.n	900041c0 <HAL_RCC_OscConfig+0xd4>
900041a8:	4b72      	ldr	r3, [pc, #456]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900041aa:	681b      	ldr	r3, [r3, #0]
900041ac:	4a71      	ldr	r2, [pc, #452]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900041ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900041b2:	6013      	str	r3, [r2, #0]
900041b4:	4b6f      	ldr	r3, [pc, #444]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900041b6:	681b      	ldr	r3, [r3, #0]
900041b8:	4a6e      	ldr	r2, [pc, #440]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900041ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900041be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
900041c0:	687b      	ldr	r3, [r7, #4]
900041c2:	685b      	ldr	r3, [r3, #4]
900041c4:	2b00      	cmp	r3, #0
900041c6:	d013      	beq.n	900041f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900041c8:	f7fe f81a 	bl	90002200 <HAL_GetTick>
900041cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900041ce:	e008      	b.n	900041e2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
900041d0:	f7fe f816 	bl	90002200 <HAL_GetTick>
900041d4:	4602      	mov	r2, r0
900041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900041d8:	1ad3      	subs	r3, r2, r3
900041da:	2b64      	cmp	r3, #100	; 0x64
900041dc:	d901      	bls.n	900041e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
900041de:	2303      	movs	r3, #3
900041e0:	e38d      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900041e2:	4b64      	ldr	r3, [pc, #400]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900041e4:	681b      	ldr	r3, [r3, #0]
900041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900041ea:	2b00      	cmp	r3, #0
900041ec:	d0f0      	beq.n	900041d0 <HAL_RCC_OscConfig+0xe4>
900041ee:	e014      	b.n	9000421a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900041f0:	f7fe f806 	bl	90002200 <HAL_GetTick>
900041f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900041f6:	e008      	b.n	9000420a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
900041f8:	f7fe f802 	bl	90002200 <HAL_GetTick>
900041fc:	4602      	mov	r2, r0
900041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004200:	1ad3      	subs	r3, r2, r3
90004202:	2b64      	cmp	r3, #100	; 0x64
90004204:	d901      	bls.n	9000420a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
90004206:	2303      	movs	r3, #3
90004208:	e379      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000420a:	4b5a      	ldr	r3, [pc, #360]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000420c:	681b      	ldr	r3, [r3, #0]
9000420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004212:	2b00      	cmp	r3, #0
90004214:	d1f0      	bne.n	900041f8 <HAL_RCC_OscConfig+0x10c>
90004216:	e000      	b.n	9000421a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90004218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000421a:	687b      	ldr	r3, [r7, #4]
9000421c:	681b      	ldr	r3, [r3, #0]
9000421e:	f003 0302 	and.w	r3, r3, #2
90004222:	2b00      	cmp	r3, #0
90004224:	f000 80ae 	beq.w	90004384 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90004228:	4b52      	ldr	r3, [pc, #328]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000422a:	691b      	ldr	r3, [r3, #16]
9000422c:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004230:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90004232:	4b50      	ldr	r3, [pc, #320]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004236:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90004238:	6a3b      	ldr	r3, [r7, #32]
9000423a:	2b00      	cmp	r3, #0
9000423c:	d007      	beq.n	9000424e <HAL_RCC_OscConfig+0x162>
9000423e:	6a3b      	ldr	r3, [r7, #32]
90004240:	2b18      	cmp	r3, #24
90004242:	d13a      	bne.n	900042ba <HAL_RCC_OscConfig+0x1ce>
90004244:	69fb      	ldr	r3, [r7, #28]
90004246:	f003 0303 	and.w	r3, r3, #3
9000424a:	2b00      	cmp	r3, #0
9000424c:	d135      	bne.n	900042ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000424e:	4b49      	ldr	r3, [pc, #292]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004250:	681b      	ldr	r3, [r3, #0]
90004252:	f003 0304 	and.w	r3, r3, #4
90004256:	2b00      	cmp	r3, #0
90004258:	d005      	beq.n	90004266 <HAL_RCC_OscConfig+0x17a>
9000425a:	687b      	ldr	r3, [r7, #4]
9000425c:	68db      	ldr	r3, [r3, #12]
9000425e:	2b00      	cmp	r3, #0
90004260:	d101      	bne.n	90004266 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
90004262:	2301      	movs	r3, #1
90004264:	e34b      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90004266:	f7fd fff9 	bl	9000225c <HAL_GetREVID>
9000426a:	4602      	mov	r2, r0
9000426c:	f241 0303 	movw	r3, #4099	; 0x1003
90004270:	429a      	cmp	r2, r3
90004272:	d817      	bhi.n	900042a4 <HAL_RCC_OscConfig+0x1b8>
90004274:	687b      	ldr	r3, [r7, #4]
90004276:	691b      	ldr	r3, [r3, #16]
90004278:	2b40      	cmp	r3, #64	; 0x40
9000427a:	d108      	bne.n	9000428e <HAL_RCC_OscConfig+0x1a2>
9000427c:	4b3d      	ldr	r3, [pc, #244]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000427e:	685b      	ldr	r3, [r3, #4]
90004280:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90004284:	4a3b      	ldr	r2, [pc, #236]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000428a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000428c:	e07a      	b.n	90004384 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000428e:	4b39      	ldr	r3, [pc, #228]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004290:	685b      	ldr	r3, [r3, #4]
90004292:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90004296:	687b      	ldr	r3, [r7, #4]
90004298:	691b      	ldr	r3, [r3, #16]
9000429a:	031b      	lsls	r3, r3, #12
9000429c:	4935      	ldr	r1, [pc, #212]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000429e:	4313      	orrs	r3, r2
900042a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900042a2:	e06f      	b.n	90004384 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900042a4:	4b33      	ldr	r3, [pc, #204]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900042a6:	685b      	ldr	r3, [r3, #4]
900042a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
900042ac:	687b      	ldr	r3, [r7, #4]
900042ae:	691b      	ldr	r3, [r3, #16]
900042b0:	061b      	lsls	r3, r3, #24
900042b2:	4930      	ldr	r1, [pc, #192]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900042b4:	4313      	orrs	r3, r2
900042b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900042b8:	e064      	b.n	90004384 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
900042ba:	687b      	ldr	r3, [r7, #4]
900042bc:	68db      	ldr	r3, [r3, #12]
900042be:	2b00      	cmp	r3, #0
900042c0:	d045      	beq.n	9000434e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900042c2:	4b2c      	ldr	r3, [pc, #176]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900042c4:	681b      	ldr	r3, [r3, #0]
900042c6:	f023 0219 	bic.w	r2, r3, #25
900042ca:	687b      	ldr	r3, [r7, #4]
900042cc:	68db      	ldr	r3, [r3, #12]
900042ce:	4929      	ldr	r1, [pc, #164]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900042d0:	4313      	orrs	r3, r2
900042d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900042d4:	f7fd ff94 	bl	90002200 <HAL_GetTick>
900042d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900042da:	e008      	b.n	900042ee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
900042dc:	f7fd ff90 	bl	90002200 <HAL_GetTick>
900042e0:	4602      	mov	r2, r0
900042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900042e4:	1ad3      	subs	r3, r2, r3
900042e6:	2b02      	cmp	r3, #2
900042e8:	d901      	bls.n	900042ee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
900042ea:	2303      	movs	r3, #3
900042ec:	e307      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900042ee:	4b21      	ldr	r3, [pc, #132]	; (90004374 <HAL_RCC_OscConfig+0x288>)
900042f0:	681b      	ldr	r3, [r3, #0]
900042f2:	f003 0304 	and.w	r3, r3, #4
900042f6:	2b00      	cmp	r3, #0
900042f8:	d0f0      	beq.n	900042dc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900042fa:	f7fd ffaf 	bl	9000225c <HAL_GetREVID>
900042fe:	4602      	mov	r2, r0
90004300:	f241 0303 	movw	r3, #4099	; 0x1003
90004304:	429a      	cmp	r2, r3
90004306:	d817      	bhi.n	90004338 <HAL_RCC_OscConfig+0x24c>
90004308:	687b      	ldr	r3, [r7, #4]
9000430a:	691b      	ldr	r3, [r3, #16]
9000430c:	2b40      	cmp	r3, #64	; 0x40
9000430e:	d108      	bne.n	90004322 <HAL_RCC_OscConfig+0x236>
90004310:	4b18      	ldr	r3, [pc, #96]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004312:	685b      	ldr	r3, [r3, #4]
90004314:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90004318:	4a16      	ldr	r2, [pc, #88]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000431a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000431e:	6053      	str	r3, [r2, #4]
90004320:	e030      	b.n	90004384 <HAL_RCC_OscConfig+0x298>
90004322:	4b14      	ldr	r3, [pc, #80]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004324:	685b      	ldr	r3, [r3, #4]
90004326:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
9000432a:	687b      	ldr	r3, [r7, #4]
9000432c:	691b      	ldr	r3, [r3, #16]
9000432e:	031b      	lsls	r3, r3, #12
90004330:	4910      	ldr	r1, [pc, #64]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004332:	4313      	orrs	r3, r2
90004334:	604b      	str	r3, [r1, #4]
90004336:	e025      	b.n	90004384 <HAL_RCC_OscConfig+0x298>
90004338:	4b0e      	ldr	r3, [pc, #56]	; (90004374 <HAL_RCC_OscConfig+0x288>)
9000433a:	685b      	ldr	r3, [r3, #4]
9000433c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90004340:	687b      	ldr	r3, [r7, #4]
90004342:	691b      	ldr	r3, [r3, #16]
90004344:	061b      	lsls	r3, r3, #24
90004346:	490b      	ldr	r1, [pc, #44]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004348:	4313      	orrs	r3, r2
9000434a:	604b      	str	r3, [r1, #4]
9000434c:	e01a      	b.n	90004384 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
9000434e:	4b09      	ldr	r3, [pc, #36]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004350:	681b      	ldr	r3, [r3, #0]
90004352:	4a08      	ldr	r2, [pc, #32]	; (90004374 <HAL_RCC_OscConfig+0x288>)
90004354:	f023 0301 	bic.w	r3, r3, #1
90004358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000435a:	f7fd ff51 	bl	90002200 <HAL_GetTick>
9000435e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90004360:	e00a      	b.n	90004378 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
90004362:	f7fd ff4d 	bl	90002200 <HAL_GetTick>
90004366:	4602      	mov	r2, r0
90004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000436a:	1ad3      	subs	r3, r2, r3
9000436c:	2b02      	cmp	r3, #2
9000436e:	d903      	bls.n	90004378 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
90004370:	2303      	movs	r3, #3
90004372:	e2c4      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
90004374:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90004378:	4ba4      	ldr	r3, [pc, #656]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000437a:	681b      	ldr	r3, [r3, #0]
9000437c:	f003 0304 	and.w	r3, r3, #4
90004380:	2b00      	cmp	r3, #0
90004382:	d1ee      	bne.n	90004362 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90004384:	687b      	ldr	r3, [r7, #4]
90004386:	681b      	ldr	r3, [r3, #0]
90004388:	f003 0310 	and.w	r3, r3, #16
9000438c:	2b00      	cmp	r3, #0
9000438e:	f000 80a9 	beq.w	900044e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90004392:	4b9e      	ldr	r3, [pc, #632]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004394:	691b      	ldr	r3, [r3, #16]
90004396:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000439a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000439c:	4b9b      	ldr	r3, [pc, #620]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900043a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
900043a2:	69bb      	ldr	r3, [r7, #24]
900043a4:	2b08      	cmp	r3, #8
900043a6:	d007      	beq.n	900043b8 <HAL_RCC_OscConfig+0x2cc>
900043a8:	69bb      	ldr	r3, [r7, #24]
900043aa:	2b18      	cmp	r3, #24
900043ac:	d13a      	bne.n	90004424 <HAL_RCC_OscConfig+0x338>
900043ae:	697b      	ldr	r3, [r7, #20]
900043b0:	f003 0303 	and.w	r3, r3, #3
900043b4:	2b01      	cmp	r3, #1
900043b6:	d135      	bne.n	90004424 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900043b8:	4b94      	ldr	r3, [pc, #592]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900043ba:	681b      	ldr	r3, [r3, #0]
900043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
900043c0:	2b00      	cmp	r3, #0
900043c2:	d005      	beq.n	900043d0 <HAL_RCC_OscConfig+0x2e4>
900043c4:	687b      	ldr	r3, [r7, #4]
900043c6:	69db      	ldr	r3, [r3, #28]
900043c8:	2b80      	cmp	r3, #128	; 0x80
900043ca:	d001      	beq.n	900043d0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
900043cc:	2301      	movs	r3, #1
900043ce:	e296      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900043d0:	f7fd ff44 	bl	9000225c <HAL_GetREVID>
900043d4:	4602      	mov	r2, r0
900043d6:	f241 0303 	movw	r3, #4099	; 0x1003
900043da:	429a      	cmp	r2, r3
900043dc:	d817      	bhi.n	9000440e <HAL_RCC_OscConfig+0x322>
900043de:	687b      	ldr	r3, [r7, #4]
900043e0:	6a1b      	ldr	r3, [r3, #32]
900043e2:	2b20      	cmp	r3, #32
900043e4:	d108      	bne.n	900043f8 <HAL_RCC_OscConfig+0x30c>
900043e6:	4b89      	ldr	r3, [pc, #548]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900043e8:	685b      	ldr	r3, [r3, #4]
900043ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
900043ee:	4a87      	ldr	r2, [pc, #540]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900043f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
900043f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900043f6:	e075      	b.n	900044e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900043f8:	4b84      	ldr	r3, [pc, #528]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900043fa:	685b      	ldr	r3, [r3, #4]
900043fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90004400:	687b      	ldr	r3, [r7, #4]
90004402:	6a1b      	ldr	r3, [r3, #32]
90004404:	069b      	lsls	r3, r3, #26
90004406:	4981      	ldr	r1, [pc, #516]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004408:	4313      	orrs	r3, r2
9000440a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000440c:	e06a      	b.n	900044e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000440e:	4b7f      	ldr	r3, [pc, #508]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004410:	68db      	ldr	r3, [r3, #12]
90004412:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90004416:	687b      	ldr	r3, [r7, #4]
90004418:	6a1b      	ldr	r3, [r3, #32]
9000441a:	061b      	lsls	r3, r3, #24
9000441c:	497b      	ldr	r1, [pc, #492]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000441e:	4313      	orrs	r3, r2
90004420:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90004422:	e05f      	b.n	900044e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
90004424:	687b      	ldr	r3, [r7, #4]
90004426:	69db      	ldr	r3, [r3, #28]
90004428:	2b00      	cmp	r3, #0
9000442a:	d042      	beq.n	900044b2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
9000442c:	4b77      	ldr	r3, [pc, #476]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000442e:	681b      	ldr	r3, [r3, #0]
90004430:	4a76      	ldr	r2, [pc, #472]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004438:	f7fd fee2 	bl	90002200 <HAL_GetTick>
9000443c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000443e:	e008      	b.n	90004452 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
90004440:	f7fd fede 	bl	90002200 <HAL_GetTick>
90004444:	4602      	mov	r2, r0
90004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004448:	1ad3      	subs	r3, r2, r3
9000444a:	2b02      	cmp	r3, #2
9000444c:	d901      	bls.n	90004452 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
9000444e:	2303      	movs	r3, #3
90004450:	e255      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90004452:	4b6e      	ldr	r3, [pc, #440]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004454:	681b      	ldr	r3, [r3, #0]
90004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000445a:	2b00      	cmp	r3, #0
9000445c:	d0f0      	beq.n	90004440 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000445e:	f7fd fefd 	bl	9000225c <HAL_GetREVID>
90004462:	4602      	mov	r2, r0
90004464:	f241 0303 	movw	r3, #4099	; 0x1003
90004468:	429a      	cmp	r2, r3
9000446a:	d817      	bhi.n	9000449c <HAL_RCC_OscConfig+0x3b0>
9000446c:	687b      	ldr	r3, [r7, #4]
9000446e:	6a1b      	ldr	r3, [r3, #32]
90004470:	2b20      	cmp	r3, #32
90004472:	d108      	bne.n	90004486 <HAL_RCC_OscConfig+0x39a>
90004474:	4b65      	ldr	r3, [pc, #404]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004476:	685b      	ldr	r3, [r3, #4]
90004478:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000447c:	4a63      	ldr	r2, [pc, #396]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000447e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90004482:	6053      	str	r3, [r2, #4]
90004484:	e02e      	b.n	900044e4 <HAL_RCC_OscConfig+0x3f8>
90004486:	4b61      	ldr	r3, [pc, #388]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004488:	685b      	ldr	r3, [r3, #4]
9000448a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
9000448e:	687b      	ldr	r3, [r7, #4]
90004490:	6a1b      	ldr	r3, [r3, #32]
90004492:	069b      	lsls	r3, r3, #26
90004494:	495d      	ldr	r1, [pc, #372]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004496:	4313      	orrs	r3, r2
90004498:	604b      	str	r3, [r1, #4]
9000449a:	e023      	b.n	900044e4 <HAL_RCC_OscConfig+0x3f8>
9000449c:	4b5b      	ldr	r3, [pc, #364]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000449e:	68db      	ldr	r3, [r3, #12]
900044a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
900044a4:	687b      	ldr	r3, [r7, #4]
900044a6:	6a1b      	ldr	r3, [r3, #32]
900044a8:	061b      	lsls	r3, r3, #24
900044aa:	4958      	ldr	r1, [pc, #352]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900044ac:	4313      	orrs	r3, r2
900044ae:	60cb      	str	r3, [r1, #12]
900044b0:	e018      	b.n	900044e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
900044b2:	4b56      	ldr	r3, [pc, #344]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900044b4:	681b      	ldr	r3, [r3, #0]
900044b6:	4a55      	ldr	r2, [pc, #340]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900044b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900044be:	f7fd fe9f 	bl	90002200 <HAL_GetTick>
900044c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900044c4:	e008      	b.n	900044d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
900044c6:	f7fd fe9b 	bl	90002200 <HAL_GetTick>
900044ca:	4602      	mov	r2, r0
900044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900044ce:	1ad3      	subs	r3, r2, r3
900044d0:	2b02      	cmp	r3, #2
900044d2:	d901      	bls.n	900044d8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
900044d4:	2303      	movs	r3, #3
900044d6:	e212      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900044d8:	4b4c      	ldr	r3, [pc, #304]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900044da:	681b      	ldr	r3, [r3, #0]
900044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
900044e0:	2b00      	cmp	r3, #0
900044e2:	d1f0      	bne.n	900044c6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900044e4:	687b      	ldr	r3, [r7, #4]
900044e6:	681b      	ldr	r3, [r3, #0]
900044e8:	f003 0308 	and.w	r3, r3, #8
900044ec:	2b00      	cmp	r3, #0
900044ee:	d036      	beq.n	9000455e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
900044f0:	687b      	ldr	r3, [r7, #4]
900044f2:	695b      	ldr	r3, [r3, #20]
900044f4:	2b00      	cmp	r3, #0
900044f6:	d019      	beq.n	9000452c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900044f8:	4b44      	ldr	r3, [pc, #272]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900044fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900044fc:	4a43      	ldr	r2, [pc, #268]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900044fe:	f043 0301 	orr.w	r3, r3, #1
90004502:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004504:	f7fd fe7c 	bl	90002200 <HAL_GetTick>
90004508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000450a:	e008      	b.n	9000451e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
9000450c:	f7fd fe78 	bl	90002200 <HAL_GetTick>
90004510:	4602      	mov	r2, r0
90004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004514:	1ad3      	subs	r3, r2, r3
90004516:	2b02      	cmp	r3, #2
90004518:	d901      	bls.n	9000451e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
9000451a:	2303      	movs	r3, #3
9000451c:	e1ef      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000451e:	4b3b      	ldr	r3, [pc, #236]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004522:	f003 0302 	and.w	r3, r3, #2
90004526:	2b00      	cmp	r3, #0
90004528:	d0f0      	beq.n	9000450c <HAL_RCC_OscConfig+0x420>
9000452a:	e018      	b.n	9000455e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
9000452c:	4b37      	ldr	r3, [pc, #220]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000452e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004530:	4a36      	ldr	r2, [pc, #216]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004532:	f023 0301 	bic.w	r3, r3, #1
90004536:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004538:	f7fd fe62 	bl	90002200 <HAL_GetTick>
9000453c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000453e:	e008      	b.n	90004552 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
90004540:	f7fd fe5e 	bl	90002200 <HAL_GetTick>
90004544:	4602      	mov	r2, r0
90004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004548:	1ad3      	subs	r3, r2, r3
9000454a:	2b02      	cmp	r3, #2
9000454c:	d901      	bls.n	90004552 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
9000454e:	2303      	movs	r3, #3
90004550:	e1d5      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90004552:	4b2e      	ldr	r3, [pc, #184]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004556:	f003 0302 	and.w	r3, r3, #2
9000455a:	2b00      	cmp	r3, #0
9000455c:	d1f0      	bne.n	90004540 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000455e:	687b      	ldr	r3, [r7, #4]
90004560:	681b      	ldr	r3, [r3, #0]
90004562:	f003 0320 	and.w	r3, r3, #32
90004566:	2b00      	cmp	r3, #0
90004568:	d036      	beq.n	900045d8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
9000456a:	687b      	ldr	r3, [r7, #4]
9000456c:	699b      	ldr	r3, [r3, #24]
9000456e:	2b00      	cmp	r3, #0
90004570:	d019      	beq.n	900045a6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90004572:	4b26      	ldr	r3, [pc, #152]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004574:	681b      	ldr	r3, [r3, #0]
90004576:	4a25      	ldr	r2, [pc, #148]	; (9000460c <HAL_RCC_OscConfig+0x520>)
90004578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000457c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000457e:	f7fd fe3f 	bl	90002200 <HAL_GetTick>
90004582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90004584:	e008      	b.n	90004598 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
90004586:	f7fd fe3b 	bl	90002200 <HAL_GetTick>
9000458a:	4602      	mov	r2, r0
9000458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000458e:	1ad3      	subs	r3, r2, r3
90004590:	2b02      	cmp	r3, #2
90004592:	d901      	bls.n	90004598 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
90004594:	2303      	movs	r3, #3
90004596:	e1b2      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90004598:	4b1c      	ldr	r3, [pc, #112]	; (9000460c <HAL_RCC_OscConfig+0x520>)
9000459a:	681b      	ldr	r3, [r3, #0]
9000459c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900045a0:	2b00      	cmp	r3, #0
900045a2:	d0f0      	beq.n	90004586 <HAL_RCC_OscConfig+0x49a>
900045a4:	e018      	b.n	900045d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
900045a6:	4b19      	ldr	r3, [pc, #100]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900045a8:	681b      	ldr	r3, [r3, #0]
900045aa:	4a18      	ldr	r2, [pc, #96]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900045ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
900045b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900045b2:	f7fd fe25 	bl	90002200 <HAL_GetTick>
900045b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900045b8:	e008      	b.n	900045cc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
900045ba:	f7fd fe21 	bl	90002200 <HAL_GetTick>
900045be:	4602      	mov	r2, r0
900045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900045c2:	1ad3      	subs	r3, r2, r3
900045c4:	2b02      	cmp	r3, #2
900045c6:	d901      	bls.n	900045cc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
900045c8:	2303      	movs	r3, #3
900045ca:	e198      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900045cc:	4b0f      	ldr	r3, [pc, #60]	; (9000460c <HAL_RCC_OscConfig+0x520>)
900045ce:	681b      	ldr	r3, [r3, #0]
900045d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900045d4:	2b00      	cmp	r3, #0
900045d6:	d1f0      	bne.n	900045ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900045d8:	687b      	ldr	r3, [r7, #4]
900045da:	681b      	ldr	r3, [r3, #0]
900045dc:	f003 0304 	and.w	r3, r3, #4
900045e0:	2b00      	cmp	r3, #0
900045e2:	f000 8085 	beq.w	900046f0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900045e6:	4b0a      	ldr	r3, [pc, #40]	; (90004610 <HAL_RCC_OscConfig+0x524>)
900045e8:	681b      	ldr	r3, [r3, #0]
900045ea:	4a09      	ldr	r2, [pc, #36]	; (90004610 <HAL_RCC_OscConfig+0x524>)
900045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900045f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900045f2:	f7fd fe05 	bl	90002200 <HAL_GetTick>
900045f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
900045f8:	e00c      	b.n	90004614 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
900045fa:	f7fd fe01 	bl	90002200 <HAL_GetTick>
900045fe:	4602      	mov	r2, r0
90004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004602:	1ad3      	subs	r3, r2, r3
90004604:	2b64      	cmp	r3, #100	; 0x64
90004606:	d905      	bls.n	90004614 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
90004608:	2303      	movs	r3, #3
9000460a:	e178      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
9000460c:	58024400 	.word	0x58024400
90004610:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90004614:	4b96      	ldr	r3, [pc, #600]	; (90004870 <HAL_RCC_OscConfig+0x784>)
90004616:	681b      	ldr	r3, [r3, #0]
90004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000461c:	2b00      	cmp	r3, #0
9000461e:	d0ec      	beq.n	900045fa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004620:	687b      	ldr	r3, [r7, #4]
90004622:	689b      	ldr	r3, [r3, #8]
90004624:	2b01      	cmp	r3, #1
90004626:	d106      	bne.n	90004636 <HAL_RCC_OscConfig+0x54a>
90004628:	4b92      	ldr	r3, [pc, #584]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000462c:	4a91      	ldr	r2, [pc, #580]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000462e:	f043 0301 	orr.w	r3, r3, #1
90004632:	6713      	str	r3, [r2, #112]	; 0x70
90004634:	e02d      	b.n	90004692 <HAL_RCC_OscConfig+0x5a6>
90004636:	687b      	ldr	r3, [r7, #4]
90004638:	689b      	ldr	r3, [r3, #8]
9000463a:	2b00      	cmp	r3, #0
9000463c:	d10c      	bne.n	90004658 <HAL_RCC_OscConfig+0x56c>
9000463e:	4b8d      	ldr	r3, [pc, #564]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004642:	4a8c      	ldr	r2, [pc, #560]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004644:	f023 0301 	bic.w	r3, r3, #1
90004648:	6713      	str	r3, [r2, #112]	; 0x70
9000464a:	4b8a      	ldr	r3, [pc, #552]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000464e:	4a89      	ldr	r2, [pc, #548]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004650:	f023 0304 	bic.w	r3, r3, #4
90004654:	6713      	str	r3, [r2, #112]	; 0x70
90004656:	e01c      	b.n	90004692 <HAL_RCC_OscConfig+0x5a6>
90004658:	687b      	ldr	r3, [r7, #4]
9000465a:	689b      	ldr	r3, [r3, #8]
9000465c:	2b05      	cmp	r3, #5
9000465e:	d10c      	bne.n	9000467a <HAL_RCC_OscConfig+0x58e>
90004660:	4b84      	ldr	r3, [pc, #528]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004664:	4a83      	ldr	r2, [pc, #524]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004666:	f043 0304 	orr.w	r3, r3, #4
9000466a:	6713      	str	r3, [r2, #112]	; 0x70
9000466c:	4b81      	ldr	r3, [pc, #516]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004670:	4a80      	ldr	r2, [pc, #512]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004672:	f043 0301 	orr.w	r3, r3, #1
90004676:	6713      	str	r3, [r2, #112]	; 0x70
90004678:	e00b      	b.n	90004692 <HAL_RCC_OscConfig+0x5a6>
9000467a:	4b7e      	ldr	r3, [pc, #504]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000467e:	4a7d      	ldr	r2, [pc, #500]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004680:	f023 0301 	bic.w	r3, r3, #1
90004684:	6713      	str	r3, [r2, #112]	; 0x70
90004686:	4b7b      	ldr	r3, [pc, #492]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000468a:	4a7a      	ldr	r2, [pc, #488]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000468c:	f023 0304 	bic.w	r3, r3, #4
90004690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90004692:	687b      	ldr	r3, [r7, #4]
90004694:	689b      	ldr	r3, [r3, #8]
90004696:	2b00      	cmp	r3, #0
90004698:	d015      	beq.n	900046c6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000469a:	f7fd fdb1 	bl	90002200 <HAL_GetTick>
9000469e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900046a0:	e00a      	b.n	900046b8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
900046a2:	f7fd fdad 	bl	90002200 <HAL_GetTick>
900046a6:	4602      	mov	r2, r0
900046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900046aa:	1ad3      	subs	r3, r2, r3
900046ac:	f241 3288 	movw	r2, #5000	; 0x1388
900046b0:	4293      	cmp	r3, r2
900046b2:	d901      	bls.n	900046b8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
900046b4:	2303      	movs	r3, #3
900046b6:	e122      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900046b8:	4b6e      	ldr	r3, [pc, #440]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900046bc:	f003 0302 	and.w	r3, r3, #2
900046c0:	2b00      	cmp	r3, #0
900046c2:	d0ee      	beq.n	900046a2 <HAL_RCC_OscConfig+0x5b6>
900046c4:	e014      	b.n	900046f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900046c6:	f7fd fd9b 	bl	90002200 <HAL_GetTick>
900046ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900046cc:	e00a      	b.n	900046e4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
900046ce:	f7fd fd97 	bl	90002200 <HAL_GetTick>
900046d2:	4602      	mov	r2, r0
900046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900046d6:	1ad3      	subs	r3, r2, r3
900046d8:	f241 3288 	movw	r2, #5000	; 0x1388
900046dc:	4293      	cmp	r3, r2
900046de:	d901      	bls.n	900046e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
900046e0:	2303      	movs	r3, #3
900046e2:	e10c      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900046e4:	4b63      	ldr	r3, [pc, #396]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900046e8:	f003 0302 	and.w	r3, r3, #2
900046ec:	2b00      	cmp	r3, #0
900046ee:	d1ee      	bne.n	900046ce <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900046f0:	687b      	ldr	r3, [r7, #4]
900046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900046f4:	2b00      	cmp	r3, #0
900046f6:	f000 8101 	beq.w	900048fc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
900046fa:	4b5e      	ldr	r3, [pc, #376]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900046fc:	691b      	ldr	r3, [r3, #16]
900046fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004702:	2b18      	cmp	r3, #24
90004704:	f000 80bc 	beq.w	90004880 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90004708:	687b      	ldr	r3, [r7, #4]
9000470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000470c:	2b02      	cmp	r3, #2
9000470e:	f040 8095 	bne.w	9000483c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90004712:	4b58      	ldr	r3, [pc, #352]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004714:	681b      	ldr	r3, [r3, #0]
90004716:	4a57      	ldr	r2, [pc, #348]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004718:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000471c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000471e:	f7fd fd6f 	bl	90002200 <HAL_GetTick>
90004722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90004724:	e008      	b.n	90004738 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90004726:	f7fd fd6b 	bl	90002200 <HAL_GetTick>
9000472a:	4602      	mov	r2, r0
9000472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000472e:	1ad3      	subs	r3, r2, r3
90004730:	2b02      	cmp	r3, #2
90004732:	d901      	bls.n	90004738 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
90004734:	2303      	movs	r3, #3
90004736:	e0e2      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90004738:	4b4e      	ldr	r3, [pc, #312]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000473a:	681b      	ldr	r3, [r3, #0]
9000473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004740:	2b00      	cmp	r3, #0
90004742:	d1f0      	bne.n	90004726 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90004744:	4b4b      	ldr	r3, [pc, #300]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90004748:	4b4b      	ldr	r3, [pc, #300]	; (90004878 <HAL_RCC_OscConfig+0x78c>)
9000474a:	4013      	ands	r3, r2
9000474c:	687a      	ldr	r2, [r7, #4]
9000474e:	6a91      	ldr	r1, [r2, #40]	; 0x28
90004750:	687a      	ldr	r2, [r7, #4]
90004752:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90004754:	0112      	lsls	r2, r2, #4
90004756:	430a      	orrs	r2, r1
90004758:	4946      	ldr	r1, [pc, #280]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000475a:	4313      	orrs	r3, r2
9000475c:	628b      	str	r3, [r1, #40]	; 0x28
9000475e:	687b      	ldr	r3, [r7, #4]
90004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004762:	3b01      	subs	r3, #1
90004764:	f3c3 0208 	ubfx	r2, r3, #0, #9
90004768:	687b      	ldr	r3, [r7, #4]
9000476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000476c:	3b01      	subs	r3, #1
9000476e:	025b      	lsls	r3, r3, #9
90004770:	b29b      	uxth	r3, r3
90004772:	431a      	orrs	r2, r3
90004774:	687b      	ldr	r3, [r7, #4]
90004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90004778:	3b01      	subs	r3, #1
9000477a:	041b      	lsls	r3, r3, #16
9000477c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90004780:	431a      	orrs	r2, r3
90004782:	687b      	ldr	r3, [r7, #4]
90004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90004786:	3b01      	subs	r3, #1
90004788:	061b      	lsls	r3, r3, #24
9000478a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
9000478e:	4939      	ldr	r1, [pc, #228]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004790:	4313      	orrs	r3, r2
90004792:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
90004794:	4b37      	ldr	r3, [pc, #220]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004798:	4a36      	ldr	r2, [pc, #216]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000479a:	f023 0301 	bic.w	r3, r3, #1
9000479e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900047a0:	4b34      	ldr	r3, [pc, #208]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900047a4:	4b35      	ldr	r3, [pc, #212]	; (9000487c <HAL_RCC_OscConfig+0x790>)
900047a6:	4013      	ands	r3, r2
900047a8:	687a      	ldr	r2, [r7, #4]
900047aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
900047ac:	00d2      	lsls	r2, r2, #3
900047ae:	4931      	ldr	r1, [pc, #196]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047b0:	4313      	orrs	r3, r2
900047b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
900047b4:	4b2f      	ldr	r3, [pc, #188]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900047b8:	f023 020c 	bic.w	r2, r3, #12
900047bc:	687b      	ldr	r3, [r7, #4]
900047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900047c0:	492c      	ldr	r1, [pc, #176]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047c2:	4313      	orrs	r3, r2
900047c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
900047c6:	4b2b      	ldr	r3, [pc, #172]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900047ca:	f023 0202 	bic.w	r2, r3, #2
900047ce:	687b      	ldr	r3, [r7, #4]
900047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900047d2:	4928      	ldr	r1, [pc, #160]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047d4:	4313      	orrs	r3, r2
900047d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
900047d8:	4b26      	ldr	r3, [pc, #152]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900047dc:	4a25      	ldr	r2, [pc, #148]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900047e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900047e4:	4b23      	ldr	r3, [pc, #140]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900047e8:	4a22      	ldr	r2, [pc, #136]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900047ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900047f0:	4b20      	ldr	r3, [pc, #128]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900047f4:	4a1f      	ldr	r2, [pc, #124]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900047fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
900047fc:	4b1d      	ldr	r3, [pc, #116]	; (90004874 <HAL_RCC_OscConfig+0x788>)
900047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004800:	4a1c      	ldr	r2, [pc, #112]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004802:	f043 0301 	orr.w	r3, r3, #1
90004806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90004808:	4b1a      	ldr	r3, [pc, #104]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000480a:	681b      	ldr	r3, [r3, #0]
9000480c:	4a19      	ldr	r2, [pc, #100]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000480e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90004812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004814:	f7fd fcf4 	bl	90002200 <HAL_GetTick>
90004818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000481a:	e008      	b.n	9000482e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
9000481c:	f7fd fcf0 	bl	90002200 <HAL_GetTick>
90004820:	4602      	mov	r2, r0
90004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004824:	1ad3      	subs	r3, r2, r3
90004826:	2b02      	cmp	r3, #2
90004828:	d901      	bls.n	9000482e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
9000482a:	2303      	movs	r3, #3
9000482c:	e067      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000482e:	4b11      	ldr	r3, [pc, #68]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004830:	681b      	ldr	r3, [r3, #0]
90004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004836:	2b00      	cmp	r3, #0
90004838:	d0f0      	beq.n	9000481c <HAL_RCC_OscConfig+0x730>
9000483a:	e05f      	b.n	900048fc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000483c:	4b0d      	ldr	r3, [pc, #52]	; (90004874 <HAL_RCC_OscConfig+0x788>)
9000483e:	681b      	ldr	r3, [r3, #0]
90004840:	4a0c      	ldr	r2, [pc, #48]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004848:	f7fd fcda 	bl	90002200 <HAL_GetTick>
9000484c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000484e:	e008      	b.n	90004862 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90004850:	f7fd fcd6 	bl	90002200 <HAL_GetTick>
90004854:	4602      	mov	r2, r0
90004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004858:	1ad3      	subs	r3, r2, r3
9000485a:	2b02      	cmp	r3, #2
9000485c:	d901      	bls.n	90004862 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
9000485e:	2303      	movs	r3, #3
90004860:	e04d      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90004862:	4b04      	ldr	r3, [pc, #16]	; (90004874 <HAL_RCC_OscConfig+0x788>)
90004864:	681b      	ldr	r3, [r3, #0]
90004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000486a:	2b00      	cmp	r3, #0
9000486c:	d1f0      	bne.n	90004850 <HAL_RCC_OscConfig+0x764>
9000486e:	e045      	b.n	900048fc <HAL_RCC_OscConfig+0x810>
90004870:	58024800 	.word	0x58024800
90004874:	58024400 	.word	0x58024400
90004878:	fffffc0c 	.word	0xfffffc0c
9000487c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90004880:	4b21      	ldr	r3, [pc, #132]	; (90004908 <HAL_RCC_OscConfig+0x81c>)
90004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004884:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90004886:	4b20      	ldr	r3, [pc, #128]	; (90004908 <HAL_RCC_OscConfig+0x81c>)
90004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000488a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000488c:	687b      	ldr	r3, [r7, #4]
9000488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004890:	2b01      	cmp	r3, #1
90004892:	d031      	beq.n	900048f8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90004894:	693b      	ldr	r3, [r7, #16]
90004896:	f003 0203 	and.w	r2, r3, #3
9000489a:	687b      	ldr	r3, [r7, #4]
9000489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000489e:	429a      	cmp	r2, r3
900048a0:	d12a      	bne.n	900048f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900048a2:	693b      	ldr	r3, [r7, #16]
900048a4:	091b      	lsrs	r3, r3, #4
900048a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
900048aa:	687b      	ldr	r3, [r7, #4]
900048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900048ae:	429a      	cmp	r2, r3
900048b0:	d122      	bne.n	900048f8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900048b2:	68fb      	ldr	r3, [r7, #12]
900048b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
900048b8:	687b      	ldr	r3, [r7, #4]
900048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900048bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900048be:	429a      	cmp	r2, r3
900048c0:	d11a      	bne.n	900048f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900048c2:	68fb      	ldr	r3, [r7, #12]
900048c4:	0a5b      	lsrs	r3, r3, #9
900048c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900048ca:	687b      	ldr	r3, [r7, #4]
900048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900048ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900048d0:	429a      	cmp	r2, r3
900048d2:	d111      	bne.n	900048f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900048d4:	68fb      	ldr	r3, [r7, #12]
900048d6:	0c1b      	lsrs	r3, r3, #16
900048d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900048dc:	687b      	ldr	r3, [r7, #4]
900048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900048e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900048e2:	429a      	cmp	r2, r3
900048e4:	d108      	bne.n	900048f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900048e6:	68fb      	ldr	r3, [r7, #12]
900048e8:	0e1b      	lsrs	r3, r3, #24
900048ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900048ee:	687b      	ldr	r3, [r7, #4]
900048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900048f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900048f4:	429a      	cmp	r2, r3
900048f6:	d001      	beq.n	900048fc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
900048f8:	2301      	movs	r3, #1
900048fa:	e000      	b.n	900048fe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
900048fc:	2300      	movs	r3, #0
}
900048fe:	4618      	mov	r0, r3
90004900:	3730      	adds	r7, #48	; 0x30
90004902:	46bd      	mov	sp, r7
90004904:	bd80      	pop	{r7, pc}
90004906:	bf00      	nop
90004908:	58024400 	.word	0x58024400

9000490c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
9000490c:	b580      	push	{r7, lr}
9000490e:	b086      	sub	sp, #24
90004910:	af00      	add	r7, sp, #0
90004912:	6078      	str	r0, [r7, #4]
90004914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
90004916:	687b      	ldr	r3, [r7, #4]
90004918:	2b00      	cmp	r3, #0
9000491a:	d101      	bne.n	90004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
9000491c:	2301      	movs	r3, #1
9000491e:	e19c      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
90004920:	4b8a      	ldr	r3, [pc, #552]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004922:	681b      	ldr	r3, [r3, #0]
90004924:	f003 030f 	and.w	r3, r3, #15
90004928:	683a      	ldr	r2, [r7, #0]
9000492a:	429a      	cmp	r2, r3
9000492c:	d910      	bls.n	90004950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000492e:	4b87      	ldr	r3, [pc, #540]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004930:	681b      	ldr	r3, [r3, #0]
90004932:	f023 020f 	bic.w	r2, r3, #15
90004936:	4985      	ldr	r1, [pc, #532]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004938:	683b      	ldr	r3, [r7, #0]
9000493a:	4313      	orrs	r3, r2
9000493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
9000493e:	4b83      	ldr	r3, [pc, #524]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004940:	681b      	ldr	r3, [r3, #0]
90004942:	f003 030f 	and.w	r3, r3, #15
90004946:	683a      	ldr	r2, [r7, #0]
90004948:	429a      	cmp	r2, r3
9000494a:	d001      	beq.n	90004950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
9000494c:	2301      	movs	r3, #1
9000494e:	e184      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90004950:	687b      	ldr	r3, [r7, #4]
90004952:	681b      	ldr	r3, [r3, #0]
90004954:	f003 0304 	and.w	r3, r3, #4
90004958:	2b00      	cmp	r3, #0
9000495a:	d010      	beq.n	9000497e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000495c:	687b      	ldr	r3, [r7, #4]
9000495e:	691a      	ldr	r2, [r3, #16]
90004960:	4b7b      	ldr	r3, [pc, #492]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004962:	699b      	ldr	r3, [r3, #24]
90004964:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004968:	429a      	cmp	r2, r3
9000496a:	d908      	bls.n	9000497e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000496c:	4b78      	ldr	r3, [pc, #480]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
9000496e:	699b      	ldr	r3, [r3, #24]
90004970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004974:	687b      	ldr	r3, [r7, #4]
90004976:	691b      	ldr	r3, [r3, #16]
90004978:	4975      	ldr	r1, [pc, #468]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
9000497a:	4313      	orrs	r3, r2
9000497c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000497e:	687b      	ldr	r3, [r7, #4]
90004980:	681b      	ldr	r3, [r3, #0]
90004982:	f003 0308 	and.w	r3, r3, #8
90004986:	2b00      	cmp	r3, #0
90004988:	d010      	beq.n	900049ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000498a:	687b      	ldr	r3, [r7, #4]
9000498c:	695a      	ldr	r2, [r3, #20]
9000498e:	4b70      	ldr	r3, [pc, #448]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004990:	69db      	ldr	r3, [r3, #28]
90004992:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004996:	429a      	cmp	r2, r3
90004998:	d908      	bls.n	900049ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000499a:	4b6d      	ldr	r3, [pc, #436]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
9000499c:	69db      	ldr	r3, [r3, #28]
9000499e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900049a2:	687b      	ldr	r3, [r7, #4]
900049a4:	695b      	ldr	r3, [r3, #20]
900049a6:	496a      	ldr	r1, [pc, #424]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
900049a8:	4313      	orrs	r3, r2
900049aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900049ac:	687b      	ldr	r3, [r7, #4]
900049ae:	681b      	ldr	r3, [r3, #0]
900049b0:	f003 0310 	and.w	r3, r3, #16
900049b4:	2b00      	cmp	r3, #0
900049b6:	d010      	beq.n	900049da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900049b8:	687b      	ldr	r3, [r7, #4]
900049ba:	699a      	ldr	r2, [r3, #24]
900049bc:	4b64      	ldr	r3, [pc, #400]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
900049be:	69db      	ldr	r3, [r3, #28]
900049c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
900049c4:	429a      	cmp	r2, r3
900049c6:	d908      	bls.n	900049da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900049c8:	4b61      	ldr	r3, [pc, #388]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
900049ca:	69db      	ldr	r3, [r3, #28]
900049cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
900049d0:	687b      	ldr	r3, [r7, #4]
900049d2:	699b      	ldr	r3, [r3, #24]
900049d4:	495e      	ldr	r1, [pc, #376]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
900049d6:	4313      	orrs	r3, r2
900049d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900049da:	687b      	ldr	r3, [r7, #4]
900049dc:	681b      	ldr	r3, [r3, #0]
900049de:	f003 0320 	and.w	r3, r3, #32
900049e2:	2b00      	cmp	r3, #0
900049e4:	d010      	beq.n	90004a08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900049e6:	687b      	ldr	r3, [r7, #4]
900049e8:	69da      	ldr	r2, [r3, #28]
900049ea:	4b59      	ldr	r3, [pc, #356]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
900049ec:	6a1b      	ldr	r3, [r3, #32]
900049ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
900049f2:	429a      	cmp	r2, r3
900049f4:	d908      	bls.n	90004a08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
900049f6:	4b56      	ldr	r3, [pc, #344]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
900049f8:	6a1b      	ldr	r3, [r3, #32]
900049fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900049fe:	687b      	ldr	r3, [r7, #4]
90004a00:	69db      	ldr	r3, [r3, #28]
90004a02:	4953      	ldr	r1, [pc, #332]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a04:	4313      	orrs	r3, r2
90004a06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004a08:	687b      	ldr	r3, [r7, #4]
90004a0a:	681b      	ldr	r3, [r3, #0]
90004a0c:	f003 0302 	and.w	r3, r3, #2
90004a10:	2b00      	cmp	r3, #0
90004a12:	d010      	beq.n	90004a36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90004a14:	687b      	ldr	r3, [r7, #4]
90004a16:	68da      	ldr	r2, [r3, #12]
90004a18:	4b4d      	ldr	r3, [pc, #308]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a1a:	699b      	ldr	r3, [r3, #24]
90004a1c:	f003 030f 	and.w	r3, r3, #15
90004a20:	429a      	cmp	r2, r3
90004a22:	d908      	bls.n	90004a36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004a24:	4b4a      	ldr	r3, [pc, #296]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a26:	699b      	ldr	r3, [r3, #24]
90004a28:	f023 020f 	bic.w	r2, r3, #15
90004a2c:	687b      	ldr	r3, [r7, #4]
90004a2e:	68db      	ldr	r3, [r3, #12]
90004a30:	4947      	ldr	r1, [pc, #284]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a32:	4313      	orrs	r3, r2
90004a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90004a36:	687b      	ldr	r3, [r7, #4]
90004a38:	681b      	ldr	r3, [r3, #0]
90004a3a:	f003 0301 	and.w	r3, r3, #1
90004a3e:	2b00      	cmp	r3, #0
90004a40:	d055      	beq.n	90004aee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90004a42:	4b43      	ldr	r3, [pc, #268]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a44:	699b      	ldr	r3, [r3, #24]
90004a46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
90004a4a:	687b      	ldr	r3, [r7, #4]
90004a4c:	689b      	ldr	r3, [r3, #8]
90004a4e:	4940      	ldr	r1, [pc, #256]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a50:	4313      	orrs	r3, r2
90004a52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004a54:	687b      	ldr	r3, [r7, #4]
90004a56:	685b      	ldr	r3, [r3, #4]
90004a58:	2b02      	cmp	r3, #2
90004a5a:	d107      	bne.n	90004a6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90004a5c:	4b3c      	ldr	r3, [pc, #240]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a5e:	681b      	ldr	r3, [r3, #0]
90004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004a64:	2b00      	cmp	r3, #0
90004a66:	d121      	bne.n	90004aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004a68:	2301      	movs	r3, #1
90004a6a:	e0f6      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004a6c:	687b      	ldr	r3, [r7, #4]
90004a6e:	685b      	ldr	r3, [r3, #4]
90004a70:	2b03      	cmp	r3, #3
90004a72:	d107      	bne.n	90004a84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90004a74:	4b36      	ldr	r3, [pc, #216]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a76:	681b      	ldr	r3, [r3, #0]
90004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004a7c:	2b00      	cmp	r3, #0
90004a7e:	d115      	bne.n	90004aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004a80:	2301      	movs	r3, #1
90004a82:	e0ea      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90004a84:	687b      	ldr	r3, [r7, #4]
90004a86:	685b      	ldr	r3, [r3, #4]
90004a88:	2b01      	cmp	r3, #1
90004a8a:	d107      	bne.n	90004a9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90004a8c:	4b30      	ldr	r3, [pc, #192]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a8e:	681b      	ldr	r3, [r3, #0]
90004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004a94:	2b00      	cmp	r3, #0
90004a96:	d109      	bne.n	90004aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004a98:	2301      	movs	r3, #1
90004a9a:	e0de      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90004a9c:	4b2c      	ldr	r3, [pc, #176]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004a9e:	681b      	ldr	r3, [r3, #0]
90004aa0:	f003 0304 	and.w	r3, r3, #4
90004aa4:	2b00      	cmp	r3, #0
90004aa6:	d101      	bne.n	90004aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90004aa8:	2301      	movs	r3, #1
90004aaa:	e0d6      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90004aac:	4b28      	ldr	r3, [pc, #160]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004aae:	691b      	ldr	r3, [r3, #16]
90004ab0:	f023 0207 	bic.w	r2, r3, #7
90004ab4:	687b      	ldr	r3, [r7, #4]
90004ab6:	685b      	ldr	r3, [r3, #4]
90004ab8:	4925      	ldr	r1, [pc, #148]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004aba:	4313      	orrs	r3, r2
90004abc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004abe:	f7fd fb9f 	bl	90002200 <HAL_GetTick>
90004ac2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004ac4:	e00a      	b.n	90004adc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
90004ac6:	f7fd fb9b 	bl	90002200 <HAL_GetTick>
90004aca:	4602      	mov	r2, r0
90004acc:	697b      	ldr	r3, [r7, #20]
90004ace:	1ad3      	subs	r3, r2, r3
90004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
90004ad4:	4293      	cmp	r3, r2
90004ad6:	d901      	bls.n	90004adc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
90004ad8:	2303      	movs	r3, #3
90004ada:	e0be      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004adc:	4b1c      	ldr	r3, [pc, #112]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004ade:	691b      	ldr	r3, [r3, #16]
90004ae0:	f003 0238 	and.w	r2, r3, #56	; 0x38
90004ae4:	687b      	ldr	r3, [r7, #4]
90004ae6:	685b      	ldr	r3, [r3, #4]
90004ae8:	00db      	lsls	r3, r3, #3
90004aea:	429a      	cmp	r2, r3
90004aec:	d1eb      	bne.n	90004ac6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004aee:	687b      	ldr	r3, [r7, #4]
90004af0:	681b      	ldr	r3, [r3, #0]
90004af2:	f003 0302 	and.w	r3, r3, #2
90004af6:	2b00      	cmp	r3, #0
90004af8:	d010      	beq.n	90004b1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90004afa:	687b      	ldr	r3, [r7, #4]
90004afc:	68da      	ldr	r2, [r3, #12]
90004afe:	4b14      	ldr	r3, [pc, #80]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004b00:	699b      	ldr	r3, [r3, #24]
90004b02:	f003 030f 	and.w	r3, r3, #15
90004b06:	429a      	cmp	r2, r3
90004b08:	d208      	bcs.n	90004b1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004b0a:	4b11      	ldr	r3, [pc, #68]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004b0c:	699b      	ldr	r3, [r3, #24]
90004b0e:	f023 020f 	bic.w	r2, r3, #15
90004b12:	687b      	ldr	r3, [r7, #4]
90004b14:	68db      	ldr	r3, [r3, #12]
90004b16:	490e      	ldr	r1, [pc, #56]	; (90004b50 <HAL_RCC_ClockConfig+0x244>)
90004b18:	4313      	orrs	r3, r2
90004b1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
90004b1c:	4b0b      	ldr	r3, [pc, #44]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004b1e:	681b      	ldr	r3, [r3, #0]
90004b20:	f003 030f 	and.w	r3, r3, #15
90004b24:	683a      	ldr	r2, [r7, #0]
90004b26:	429a      	cmp	r2, r3
90004b28:	d214      	bcs.n	90004b54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90004b2a:	4b08      	ldr	r3, [pc, #32]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004b2c:	681b      	ldr	r3, [r3, #0]
90004b2e:	f023 020f 	bic.w	r2, r3, #15
90004b32:	4906      	ldr	r1, [pc, #24]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004b34:	683b      	ldr	r3, [r7, #0]
90004b36:	4313      	orrs	r3, r2
90004b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
90004b3a:	4b04      	ldr	r3, [pc, #16]	; (90004b4c <HAL_RCC_ClockConfig+0x240>)
90004b3c:	681b      	ldr	r3, [r3, #0]
90004b3e:	f003 030f 	and.w	r3, r3, #15
90004b42:	683a      	ldr	r2, [r7, #0]
90004b44:	429a      	cmp	r2, r3
90004b46:	d005      	beq.n	90004b54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90004b48:	2301      	movs	r3, #1
90004b4a:	e086      	b.n	90004c5a <HAL_RCC_ClockConfig+0x34e>
90004b4c:	52002000 	.word	0x52002000
90004b50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90004b54:	687b      	ldr	r3, [r7, #4]
90004b56:	681b      	ldr	r3, [r3, #0]
90004b58:	f003 0304 	and.w	r3, r3, #4
90004b5c:	2b00      	cmp	r3, #0
90004b5e:	d010      	beq.n	90004b82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90004b60:	687b      	ldr	r3, [r7, #4]
90004b62:	691a      	ldr	r2, [r3, #16]
90004b64:	4b3f      	ldr	r3, [pc, #252]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004b66:	699b      	ldr	r3, [r3, #24]
90004b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004b6c:	429a      	cmp	r2, r3
90004b6e:	d208      	bcs.n	90004b82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90004b70:	4b3c      	ldr	r3, [pc, #240]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004b72:	699b      	ldr	r3, [r3, #24]
90004b74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004b78:	687b      	ldr	r3, [r7, #4]
90004b7a:	691b      	ldr	r3, [r3, #16]
90004b7c:	4939      	ldr	r1, [pc, #228]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004b7e:	4313      	orrs	r3, r2
90004b80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004b82:	687b      	ldr	r3, [r7, #4]
90004b84:	681b      	ldr	r3, [r3, #0]
90004b86:	f003 0308 	and.w	r3, r3, #8
90004b8a:	2b00      	cmp	r3, #0
90004b8c:	d010      	beq.n	90004bb0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90004b8e:	687b      	ldr	r3, [r7, #4]
90004b90:	695a      	ldr	r2, [r3, #20]
90004b92:	4b34      	ldr	r3, [pc, #208]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004b94:	69db      	ldr	r3, [r3, #28]
90004b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004b9a:	429a      	cmp	r2, r3
90004b9c:	d208      	bcs.n	90004bb0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90004b9e:	4b31      	ldr	r3, [pc, #196]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004ba0:	69db      	ldr	r3, [r3, #28]
90004ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004ba6:	687b      	ldr	r3, [r7, #4]
90004ba8:	695b      	ldr	r3, [r3, #20]
90004baa:	492e      	ldr	r1, [pc, #184]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004bac:	4313      	orrs	r3, r2
90004bae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004bb0:	687b      	ldr	r3, [r7, #4]
90004bb2:	681b      	ldr	r3, [r3, #0]
90004bb4:	f003 0310 	and.w	r3, r3, #16
90004bb8:	2b00      	cmp	r3, #0
90004bba:	d010      	beq.n	90004bde <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90004bbc:	687b      	ldr	r3, [r7, #4]
90004bbe:	699a      	ldr	r2, [r3, #24]
90004bc0:	4b28      	ldr	r3, [pc, #160]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004bc2:	69db      	ldr	r3, [r3, #28]
90004bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90004bc8:	429a      	cmp	r2, r3
90004bca:	d208      	bcs.n	90004bde <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90004bcc:	4b25      	ldr	r3, [pc, #148]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004bce:	69db      	ldr	r3, [r3, #28]
90004bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90004bd4:	687b      	ldr	r3, [r7, #4]
90004bd6:	699b      	ldr	r3, [r3, #24]
90004bd8:	4922      	ldr	r1, [pc, #136]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004bda:	4313      	orrs	r3, r2
90004bdc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90004bde:	687b      	ldr	r3, [r7, #4]
90004be0:	681b      	ldr	r3, [r3, #0]
90004be2:	f003 0320 	and.w	r3, r3, #32
90004be6:	2b00      	cmp	r3, #0
90004be8:	d010      	beq.n	90004c0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90004bea:	687b      	ldr	r3, [r7, #4]
90004bec:	69da      	ldr	r2, [r3, #28]
90004bee:	4b1d      	ldr	r3, [pc, #116]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004bf0:	6a1b      	ldr	r3, [r3, #32]
90004bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004bf6:	429a      	cmp	r2, r3
90004bf8:	d208      	bcs.n	90004c0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
90004bfa:	4b1a      	ldr	r3, [pc, #104]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004bfc:	6a1b      	ldr	r3, [r3, #32]
90004bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004c02:	687b      	ldr	r3, [r7, #4]
90004c04:	69db      	ldr	r3, [r3, #28]
90004c06:	4917      	ldr	r1, [pc, #92]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004c08:	4313      	orrs	r3, r2
90004c0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90004c0c:	f000 f834 	bl	90004c78 <HAL_RCC_GetSysClockFreq>
90004c10:	4601      	mov	r1, r0
90004c12:	4b14      	ldr	r3, [pc, #80]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004c14:	699b      	ldr	r3, [r3, #24]
90004c16:	0a1b      	lsrs	r3, r3, #8
90004c18:	f003 030f 	and.w	r3, r3, #15
90004c1c:	4a12      	ldr	r2, [pc, #72]	; (90004c68 <HAL_RCC_ClockConfig+0x35c>)
90004c1e:	5cd3      	ldrb	r3, [r2, r3]
90004c20:	f003 031f 	and.w	r3, r3, #31
90004c24:	fa21 f303 	lsr.w	r3, r1, r3
90004c28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90004c2a:	4b0e      	ldr	r3, [pc, #56]	; (90004c64 <HAL_RCC_ClockConfig+0x358>)
90004c2c:	699b      	ldr	r3, [r3, #24]
90004c2e:	f003 030f 	and.w	r3, r3, #15
90004c32:	4a0d      	ldr	r2, [pc, #52]	; (90004c68 <HAL_RCC_ClockConfig+0x35c>)
90004c34:	5cd3      	ldrb	r3, [r2, r3]
90004c36:	f003 031f 	and.w	r3, r3, #31
90004c3a:	693a      	ldr	r2, [r7, #16]
90004c3c:	fa22 f303 	lsr.w	r3, r2, r3
90004c40:	4a0a      	ldr	r2, [pc, #40]	; (90004c6c <HAL_RCC_ClockConfig+0x360>)
90004c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90004c44:	4a0a      	ldr	r2, [pc, #40]	; (90004c70 <HAL_RCC_ClockConfig+0x364>)
90004c46:	693b      	ldr	r3, [r7, #16]
90004c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
90004c4a:	4b0a      	ldr	r3, [pc, #40]	; (90004c74 <HAL_RCC_ClockConfig+0x368>)
90004c4c:	681b      	ldr	r3, [r3, #0]
90004c4e:	4618      	mov	r0, r3
90004c50:	f7fc feb6 	bl	900019c0 <HAL_InitTick>
90004c54:	4603      	mov	r3, r0
90004c56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90004c58:	7bfb      	ldrb	r3, [r7, #15]
}
90004c5a:	4618      	mov	r0, r3
90004c5c:	3718      	adds	r7, #24
90004c5e:	46bd      	mov	sp, r7
90004c60:	bd80      	pop	{r7, pc}
90004c62:	bf00      	nop
90004c64:	58024400 	.word	0x58024400
90004c68:	9000f004 	.word	0x9000f004
90004c6c:	2400a004 	.word	0x2400a004
90004c70:	2400a000 	.word	0x2400a000
90004c74:	2400a008 	.word	0x2400a008

90004c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90004c78:	b480      	push	{r7}
90004c7a:	b089      	sub	sp, #36	; 0x24
90004c7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90004c7e:	4baf      	ldr	r3, [pc, #700]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004c80:	691b      	ldr	r3, [r3, #16]
90004c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004c86:	2b18      	cmp	r3, #24
90004c88:	f200 814e 	bhi.w	90004f28 <HAL_RCC_GetSysClockFreq+0x2b0>
90004c8c:	a201      	add	r2, pc, #4	; (adr r2, 90004c94 <HAL_RCC_GetSysClockFreq+0x1c>)
90004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004c92:	bf00      	nop
90004c94:	90004cf9 	.word	0x90004cf9
90004c98:	90004f29 	.word	0x90004f29
90004c9c:	90004f29 	.word	0x90004f29
90004ca0:	90004f29 	.word	0x90004f29
90004ca4:	90004f29 	.word	0x90004f29
90004ca8:	90004f29 	.word	0x90004f29
90004cac:	90004f29 	.word	0x90004f29
90004cb0:	90004f29 	.word	0x90004f29
90004cb4:	90004d1f 	.word	0x90004d1f
90004cb8:	90004f29 	.word	0x90004f29
90004cbc:	90004f29 	.word	0x90004f29
90004cc0:	90004f29 	.word	0x90004f29
90004cc4:	90004f29 	.word	0x90004f29
90004cc8:	90004f29 	.word	0x90004f29
90004ccc:	90004f29 	.word	0x90004f29
90004cd0:	90004f29 	.word	0x90004f29
90004cd4:	90004d25 	.word	0x90004d25
90004cd8:	90004f29 	.word	0x90004f29
90004cdc:	90004f29 	.word	0x90004f29
90004ce0:	90004f29 	.word	0x90004f29
90004ce4:	90004f29 	.word	0x90004f29
90004ce8:	90004f29 	.word	0x90004f29
90004cec:	90004f29 	.word	0x90004f29
90004cf0:	90004f29 	.word	0x90004f29
90004cf4:	90004d2b 	.word	0x90004d2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004cf8:	4b90      	ldr	r3, [pc, #576]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004cfa:	681b      	ldr	r3, [r3, #0]
90004cfc:	f003 0320 	and.w	r3, r3, #32
90004d00:	2b00      	cmp	r3, #0
90004d02:	d009      	beq.n	90004d18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90004d04:	4b8d      	ldr	r3, [pc, #564]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004d06:	681b      	ldr	r3, [r3, #0]
90004d08:	08db      	lsrs	r3, r3, #3
90004d0a:	f003 0303 	and.w	r3, r3, #3
90004d0e:	4a8c      	ldr	r2, [pc, #560]	; (90004f40 <HAL_RCC_GetSysClockFreq+0x2c8>)
90004d10:	fa22 f303 	lsr.w	r3, r2, r3
90004d14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
90004d16:	e10a      	b.n	90004f2e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
90004d18:	4b89      	ldr	r3, [pc, #548]	; (90004f40 <HAL_RCC_GetSysClockFreq+0x2c8>)
90004d1a:	61bb      	str	r3, [r7, #24]
    break;
90004d1c:	e107      	b.n	90004f2e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
90004d1e:	4b89      	ldr	r3, [pc, #548]	; (90004f44 <HAL_RCC_GetSysClockFreq+0x2cc>)
90004d20:	61bb      	str	r3, [r7, #24]
    break;
90004d22:	e104      	b.n	90004f2e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
90004d24:	4b88      	ldr	r3, [pc, #544]	; (90004f48 <HAL_RCC_GetSysClockFreq+0x2d0>)
90004d26:	61bb      	str	r3, [r7, #24]
    break;
90004d28:	e101      	b.n	90004f2e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90004d2a:	4b84      	ldr	r3, [pc, #528]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004d2e:	f003 0303 	and.w	r3, r3, #3
90004d32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
90004d34:	4b81      	ldr	r3, [pc, #516]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004d38:	091b      	lsrs	r3, r3, #4
90004d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90004d3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
90004d40:	4b7e      	ldr	r3, [pc, #504]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004d44:	f003 0301 	and.w	r3, r3, #1
90004d48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
90004d4a:	4b7c      	ldr	r3, [pc, #496]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90004d4e:	08db      	lsrs	r3, r3, #3
90004d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
90004d54:	68fa      	ldr	r2, [r7, #12]
90004d56:	fb02 f303 	mul.w	r3, r2, r3
90004d5a:	ee07 3a90 	vmov	s15, r3
90004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004d62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
90004d66:	693b      	ldr	r3, [r7, #16]
90004d68:	2b00      	cmp	r3, #0
90004d6a:	f000 80da 	beq.w	90004f22 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
90004d6e:	697b      	ldr	r3, [r7, #20]
90004d70:	2b01      	cmp	r3, #1
90004d72:	d05a      	beq.n	90004e2a <HAL_RCC_GetSysClockFreq+0x1b2>
90004d74:	2b01      	cmp	r3, #1
90004d76:	d302      	bcc.n	90004d7e <HAL_RCC_GetSysClockFreq+0x106>
90004d78:	2b02      	cmp	r3, #2
90004d7a:	d078      	beq.n	90004e6e <HAL_RCC_GetSysClockFreq+0x1f6>
90004d7c:	e099      	b.n	90004eb2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004d7e:	4b6f      	ldr	r3, [pc, #444]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004d80:	681b      	ldr	r3, [r3, #0]
90004d82:	f003 0320 	and.w	r3, r3, #32
90004d86:	2b00      	cmp	r3, #0
90004d88:	d02d      	beq.n	90004de6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90004d8a:	4b6c      	ldr	r3, [pc, #432]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004d8c:	681b      	ldr	r3, [r3, #0]
90004d8e:	08db      	lsrs	r3, r3, #3
90004d90:	f003 0303 	and.w	r3, r3, #3
90004d94:	4a6a      	ldr	r2, [pc, #424]	; (90004f40 <HAL_RCC_GetSysClockFreq+0x2c8>)
90004d96:	fa22 f303 	lsr.w	r3, r2, r3
90004d9a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004d9c:	687b      	ldr	r3, [r7, #4]
90004d9e:	ee07 3a90 	vmov	s15, r3
90004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004da6:	693b      	ldr	r3, [r7, #16]
90004da8:	ee07 3a90 	vmov	s15, r3
90004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004db4:	4b61      	ldr	r3, [pc, #388]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004dbc:	ee07 3a90 	vmov	s15, r3
90004dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004dc4:	ed97 6a02 	vldr	s12, [r7, #8]
90004dc8:	eddf 5a60 	vldr	s11, [pc, #384]	; 90004f4c <HAL_RCC_GetSysClockFreq+0x2d4>
90004dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
90004de0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
90004de4:	e087      	b.n	90004ef6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004de6:	693b      	ldr	r3, [r7, #16]
90004de8:	ee07 3a90 	vmov	s15, r3
90004dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004df0:	eddf 6a57 	vldr	s13, [pc, #348]	; 90004f50 <HAL_RCC_GetSysClockFreq+0x2d8>
90004df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004df8:	4b50      	ldr	r3, [pc, #320]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004e00:	ee07 3a90 	vmov	s15, r3
90004e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004e08:	ed97 6a02 	vldr	s12, [r7, #8]
90004e0c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 90004f4c <HAL_RCC_GetSysClockFreq+0x2d4>
90004e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004e20:	ee67 7a27 	vmul.f32	s15, s14, s15
90004e24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004e28:	e065      	b.n	90004ef6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004e2a:	693b      	ldr	r3, [r7, #16]
90004e2c:	ee07 3a90 	vmov	s15, r3
90004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004e34:	eddf 6a47 	vldr	s13, [pc, #284]	; 90004f54 <HAL_RCC_GetSysClockFreq+0x2dc>
90004e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004e3c:	4b3f      	ldr	r3, [pc, #252]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004e44:	ee07 3a90 	vmov	s15, r3
90004e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004e4c:	ed97 6a02 	vldr	s12, [r7, #8]
90004e50:	eddf 5a3e 	vldr	s11, [pc, #248]	; 90004f4c <HAL_RCC_GetSysClockFreq+0x2d4>
90004e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004e64:	ee67 7a27 	vmul.f32	s15, s14, s15
90004e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004e6c:	e043      	b.n	90004ef6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004e6e:	693b      	ldr	r3, [r7, #16]
90004e70:	ee07 3a90 	vmov	s15, r3
90004e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004e78:	eddf 6a37 	vldr	s13, [pc, #220]	; 90004f58 <HAL_RCC_GetSysClockFreq+0x2e0>
90004e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004e80:	4b2e      	ldr	r3, [pc, #184]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004e88:	ee07 3a90 	vmov	s15, r3
90004e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004e90:	ed97 6a02 	vldr	s12, [r7, #8]
90004e94:	eddf 5a2d 	vldr	s11, [pc, #180]	; 90004f4c <HAL_RCC_GetSysClockFreq+0x2d4>
90004e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
90004eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004eb0:	e021      	b.n	90004ef6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004eb2:	693b      	ldr	r3, [r7, #16]
90004eb4:	ee07 3a90 	vmov	s15, r3
90004eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004ebc:	eddf 6a25 	vldr	s13, [pc, #148]	; 90004f54 <HAL_RCC_GetSysClockFreq+0x2dc>
90004ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004ec4:	4b1d      	ldr	r3, [pc, #116]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004ecc:	ee07 3a90 	vmov	s15, r3
90004ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004ed4:	ed97 6a02 	vldr	s12, [r7, #8]
90004ed8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 90004f4c <HAL_RCC_GetSysClockFreq+0x2d4>
90004edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004eec:	ee67 7a27 	vmul.f32	s15, s14, s15
90004ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004ef4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
90004ef6:	4b11      	ldr	r3, [pc, #68]	; (90004f3c <HAL_RCC_GetSysClockFreq+0x2c4>)
90004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004efa:	0a5b      	lsrs	r3, r3, #9
90004efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90004f00:	3301      	adds	r3, #1
90004f02:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
90004f04:	683b      	ldr	r3, [r7, #0]
90004f06:	ee07 3a90 	vmov	s15, r3
90004f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90004f0e:	edd7 6a07 	vldr	s13, [r7, #28]
90004f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
90004f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90004f1a:	ee17 3a90 	vmov	r3, s15
90004f1e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
90004f20:	e005      	b.n	90004f2e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
90004f22:	2300      	movs	r3, #0
90004f24:	61bb      	str	r3, [r7, #24]
    break;
90004f26:	e002      	b.n	90004f2e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
90004f28:	4b06      	ldr	r3, [pc, #24]	; (90004f44 <HAL_RCC_GetSysClockFreq+0x2cc>)
90004f2a:	61bb      	str	r3, [r7, #24]
    break;
90004f2c:	bf00      	nop
  }

  return sysclockfreq;
90004f2e:	69bb      	ldr	r3, [r7, #24]
}
90004f30:	4618      	mov	r0, r3
90004f32:	3724      	adds	r7, #36	; 0x24
90004f34:	46bd      	mov	sp, r7
90004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
90004f3a:	4770      	bx	lr
90004f3c:	58024400 	.word	0x58024400
90004f40:	03d09000 	.word	0x03d09000
90004f44:	003d0900 	.word	0x003d0900
90004f48:	017d7840 	.word	0x017d7840
90004f4c:	46000000 	.word	0x46000000
90004f50:	4c742400 	.word	0x4c742400
90004f54:	4a742400 	.word	0x4a742400
90004f58:	4bbebc20 	.word	0x4bbebc20

90004f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90004f5c:	b580      	push	{r7, lr}
90004f5e:	b082      	sub	sp, #8
90004f60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90004f62:	f7ff fe89 	bl	90004c78 <HAL_RCC_GetSysClockFreq>
90004f66:	4601      	mov	r1, r0
90004f68:	4b10      	ldr	r3, [pc, #64]	; (90004fac <HAL_RCC_GetHCLKFreq+0x50>)
90004f6a:	699b      	ldr	r3, [r3, #24]
90004f6c:	0a1b      	lsrs	r3, r3, #8
90004f6e:	f003 030f 	and.w	r3, r3, #15
90004f72:	4a0f      	ldr	r2, [pc, #60]	; (90004fb0 <HAL_RCC_GetHCLKFreq+0x54>)
90004f74:	5cd3      	ldrb	r3, [r2, r3]
90004f76:	f003 031f 	and.w	r3, r3, #31
90004f7a:	fa21 f303 	lsr.w	r3, r1, r3
90004f7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90004f80:	4b0a      	ldr	r3, [pc, #40]	; (90004fac <HAL_RCC_GetHCLKFreq+0x50>)
90004f82:	699b      	ldr	r3, [r3, #24]
90004f84:	f003 030f 	and.w	r3, r3, #15
90004f88:	4a09      	ldr	r2, [pc, #36]	; (90004fb0 <HAL_RCC_GetHCLKFreq+0x54>)
90004f8a:	5cd3      	ldrb	r3, [r2, r3]
90004f8c:	f003 031f 	and.w	r3, r3, #31
90004f90:	687a      	ldr	r2, [r7, #4]
90004f92:	fa22 f303 	lsr.w	r3, r2, r3
90004f96:	4a07      	ldr	r2, [pc, #28]	; (90004fb4 <HAL_RCC_GetHCLKFreq+0x58>)
90004f98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90004f9a:	4a07      	ldr	r2, [pc, #28]	; (90004fb8 <HAL_RCC_GetHCLKFreq+0x5c>)
90004f9c:	687b      	ldr	r3, [r7, #4]
90004f9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90004fa0:	4b04      	ldr	r3, [pc, #16]	; (90004fb4 <HAL_RCC_GetHCLKFreq+0x58>)
90004fa2:	681b      	ldr	r3, [r3, #0]
}
90004fa4:	4618      	mov	r0, r3
90004fa6:	3708      	adds	r7, #8
90004fa8:	46bd      	mov	sp, r7
90004faa:	bd80      	pop	{r7, pc}
90004fac:	58024400 	.word	0x58024400
90004fb0:	9000f004 	.word	0x9000f004
90004fb4:	2400a004 	.word	0x2400a004
90004fb8:	2400a000 	.word	0x2400a000

90004fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90004fbc:	b580      	push	{r7, lr}
90004fbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90004fc0:	f7ff ffcc 	bl	90004f5c <HAL_RCC_GetHCLKFreq>
90004fc4:	4601      	mov	r1, r0
90004fc6:	4b06      	ldr	r3, [pc, #24]	; (90004fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
90004fc8:	69db      	ldr	r3, [r3, #28]
90004fca:	091b      	lsrs	r3, r3, #4
90004fcc:	f003 0307 	and.w	r3, r3, #7
90004fd0:	4a04      	ldr	r2, [pc, #16]	; (90004fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
90004fd2:	5cd3      	ldrb	r3, [r2, r3]
90004fd4:	f003 031f 	and.w	r3, r3, #31
90004fd8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90004fdc:	4618      	mov	r0, r3
90004fde:	bd80      	pop	{r7, pc}
90004fe0:	58024400 	.word	0x58024400
90004fe4:	9000f004 	.word	0x9000f004

90004fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90004fe8:	b580      	push	{r7, lr}
90004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90004fec:	f7ff ffb6 	bl	90004f5c <HAL_RCC_GetHCLKFreq>
90004ff0:	4601      	mov	r1, r0
90004ff2:	4b06      	ldr	r3, [pc, #24]	; (9000500c <HAL_RCC_GetPCLK2Freq+0x24>)
90004ff4:	69db      	ldr	r3, [r3, #28]
90004ff6:	0a1b      	lsrs	r3, r3, #8
90004ff8:	f003 0307 	and.w	r3, r3, #7
90004ffc:	4a04      	ldr	r2, [pc, #16]	; (90005010 <HAL_RCC_GetPCLK2Freq+0x28>)
90004ffe:	5cd3      	ldrb	r3, [r2, r3]
90005000:	f003 031f 	and.w	r3, r3, #31
90005004:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90005008:	4618      	mov	r0, r3
9000500a:	bd80      	pop	{r7, pc}
9000500c:	58024400 	.word	0x58024400
90005010:	9000f004 	.word	0x9000f004

90005014 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
90005014:	b480      	push	{r7}
90005016:	b083      	sub	sp, #12
90005018:	af00      	add	r7, sp, #0
9000501a:	6078      	str	r0, [r7, #4]
9000501c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000501e:	687b      	ldr	r3, [r7, #4]
90005020:	223f      	movs	r2, #63	; 0x3f
90005022:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
90005024:	4b1a      	ldr	r3, [pc, #104]	; (90005090 <HAL_RCC_GetClockConfig+0x7c>)
90005026:	691b      	ldr	r3, [r3, #16]
90005028:	f003 0207 	and.w	r2, r3, #7
9000502c:	687b      	ldr	r3, [r7, #4]
9000502e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
90005030:	4b17      	ldr	r3, [pc, #92]	; (90005090 <HAL_RCC_GetClockConfig+0x7c>)
90005032:	699b      	ldr	r3, [r3, #24]
90005034:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
90005038:	687b      	ldr	r3, [r7, #4]
9000503a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000503c:	4b14      	ldr	r3, [pc, #80]	; (90005090 <HAL_RCC_GetClockConfig+0x7c>)
9000503e:	699b      	ldr	r3, [r3, #24]
90005040:	f003 020f 	and.w	r2, r3, #15
90005044:	687b      	ldr	r3, [r7, #4]
90005046:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
90005048:	4b11      	ldr	r3, [pc, #68]	; (90005090 <HAL_RCC_GetClockConfig+0x7c>)
9000504a:	699b      	ldr	r3, [r3, #24]
9000504c:	f003 0270 	and.w	r2, r3, #112	; 0x70
90005050:	687b      	ldr	r3, [r7, #4]
90005052:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
90005054:	4b0e      	ldr	r3, [pc, #56]	; (90005090 <HAL_RCC_GetClockConfig+0x7c>)
90005056:	69db      	ldr	r3, [r3, #28]
90005058:	f003 0270 	and.w	r2, r3, #112	; 0x70
9000505c:	687b      	ldr	r3, [r7, #4]
9000505e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
90005060:	4b0b      	ldr	r3, [pc, #44]	; (90005090 <HAL_RCC_GetClockConfig+0x7c>)
90005062:	69db      	ldr	r3, [r3, #28]
90005064:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
90005068:	687b      	ldr	r3, [r7, #4]
9000506a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000506c:	4b08      	ldr	r3, [pc, #32]	; (90005090 <HAL_RCC_GetClockConfig+0x7c>)
9000506e:	6a1b      	ldr	r3, [r3, #32]
90005070:	f003 0270 	and.w	r2, r3, #112	; 0x70
90005074:	687b      	ldr	r3, [r7, #4]
90005076:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
90005078:	4b06      	ldr	r3, [pc, #24]	; (90005094 <HAL_RCC_GetClockConfig+0x80>)
9000507a:	681b      	ldr	r3, [r3, #0]
9000507c:	f003 020f 	and.w	r2, r3, #15
90005080:	683b      	ldr	r3, [r7, #0]
90005082:	601a      	str	r2, [r3, #0]
}
90005084:	bf00      	nop
90005086:	370c      	adds	r7, #12
90005088:	46bd      	mov	sp, r7
9000508a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000508e:	4770      	bx	lr
90005090:	58024400 	.word	0x58024400
90005094:	52002000 	.word	0x52002000

90005098 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90005098:	b580      	push	{r7, lr}
9000509a:	b086      	sub	sp, #24
9000509c:	af00      	add	r7, sp, #0
9000509e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
900050a0:	2300      	movs	r3, #0
900050a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
900050a4:	2300      	movs	r3, #0
900050a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900050a8:	687b      	ldr	r3, [r7, #4]
900050aa:	681b      	ldr	r3, [r3, #0]
900050ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900050b0:	2b00      	cmp	r3, #0
900050b2:	d03d      	beq.n	90005130 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
900050b4:	687b      	ldr	r3, [r7, #4]
900050b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900050b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900050bc:	d013      	beq.n	900050e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
900050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900050c2:	d802      	bhi.n	900050ca <HAL_RCCEx_PeriphCLKConfig+0x32>
900050c4:	2b00      	cmp	r3, #0
900050c6:	d007      	beq.n	900050d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
900050c8:	e01f      	b.n	9000510a <HAL_RCCEx_PeriphCLKConfig+0x72>
900050ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900050ce:	d013      	beq.n	900050f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
900050d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
900050d4:	d01c      	beq.n	90005110 <HAL_RCCEx_PeriphCLKConfig+0x78>
900050d6:	e018      	b.n	9000510a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900050d8:	4baf      	ldr	r3, [pc, #700]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900050dc:	4aae      	ldr	r2, [pc, #696]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900050de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900050e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
900050e4:	e015      	b.n	90005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
900050e6:	687b      	ldr	r3, [r7, #4]
900050e8:	3304      	adds	r3, #4
900050ea:	2102      	movs	r1, #2
900050ec:	4618      	mov	r0, r3
900050ee:	f001 fd33 	bl	90006b58 <RCCEx_PLL2_Config>
900050f2:	4603      	mov	r3, r0
900050f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
900050f6:	e00c      	b.n	90005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
900050f8:	687b      	ldr	r3, [r7, #4]
900050fa:	3324      	adds	r3, #36	; 0x24
900050fc:	2102      	movs	r1, #2
900050fe:	4618      	mov	r0, r3
90005100:	f001 fddc 	bl	90006cbc <RCCEx_PLL3_Config>
90005104:	4603      	mov	r3, r0
90005106:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
90005108:	e003      	b.n	90005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000510a:	2301      	movs	r3, #1
9000510c:	75fb      	strb	r3, [r7, #23]
      break;
9000510e:	e000      	b.n	90005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
90005110:	bf00      	nop
    }

    if(ret == HAL_OK)
90005112:	7dfb      	ldrb	r3, [r7, #23]
90005114:	2b00      	cmp	r3, #0
90005116:	d109      	bne.n	9000512c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90005118:	4b9f      	ldr	r3, [pc, #636]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
9000511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000511c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90005120:	687b      	ldr	r3, [r7, #4]
90005122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90005124:	499c      	ldr	r1, [pc, #624]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005126:	4313      	orrs	r3, r2
90005128:	650b      	str	r3, [r1, #80]	; 0x50
9000512a:	e001      	b.n	90005130 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000512c:	7dfb      	ldrb	r3, [r7, #23]
9000512e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90005130:	687b      	ldr	r3, [r7, #4]
90005132:	681b      	ldr	r3, [r3, #0]
90005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
90005138:	2b00      	cmp	r3, #0
9000513a:	d03d      	beq.n	900051b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
9000513c:	687b      	ldr	r3, [r7, #4]
9000513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005140:	2b04      	cmp	r3, #4
90005142:	d826      	bhi.n	90005192 <HAL_RCCEx_PeriphCLKConfig+0xfa>
90005144:	a201      	add	r2, pc, #4	; (adr r2, 9000514c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
90005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000514a:	bf00      	nop
9000514c:	90005161 	.word	0x90005161
90005150:	9000516f 	.word	0x9000516f
90005154:	90005181 	.word	0x90005181
90005158:	90005199 	.word	0x90005199
9000515c:	90005199 	.word	0x90005199
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005160:	4b8d      	ldr	r3, [pc, #564]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005164:	4a8c      	ldr	r2, [pc, #560]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000516a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000516c:	e015      	b.n	9000519a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000516e:	687b      	ldr	r3, [r7, #4]
90005170:	3304      	adds	r3, #4
90005172:	2100      	movs	r1, #0
90005174:	4618      	mov	r0, r3
90005176:	f001 fcef 	bl	90006b58 <RCCEx_PLL2_Config>
9000517a:	4603      	mov	r3, r0
9000517c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000517e:	e00c      	b.n	9000519a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90005180:	687b      	ldr	r3, [r7, #4]
90005182:	3324      	adds	r3, #36	; 0x24
90005184:	2100      	movs	r1, #0
90005186:	4618      	mov	r0, r3
90005188:	f001 fd98 	bl	90006cbc <RCCEx_PLL3_Config>
9000518c:	4603      	mov	r3, r0
9000518e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90005190:	e003      	b.n	9000519a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005192:	2301      	movs	r3, #1
90005194:	75fb      	strb	r3, [r7, #23]
      break;
90005196:	e000      	b.n	9000519a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
90005198:	bf00      	nop
    }

    if(ret == HAL_OK)
9000519a:	7dfb      	ldrb	r3, [r7, #23]
9000519c:	2b00      	cmp	r3, #0
9000519e:	d109      	bne.n	900051b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900051a0:	4b7d      	ldr	r3, [pc, #500]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900051a4:	f023 0207 	bic.w	r2, r3, #7
900051a8:	687b      	ldr	r3, [r7, #4]
900051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900051ac:	497a      	ldr	r1, [pc, #488]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900051ae:	4313      	orrs	r3, r2
900051b0:	650b      	str	r3, [r1, #80]	; 0x50
900051b2:	e001      	b.n	900051b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
900051b4:	7dfb      	ldrb	r3, [r7, #23]
900051b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
900051b8:	687b      	ldr	r3, [r7, #4]
900051ba:	681b      	ldr	r3, [r3, #0]
900051bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
900051c0:	2b00      	cmp	r3, #0
900051c2:	d03e      	beq.n	90005242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
900051c4:	687b      	ldr	r3, [r7, #4]
900051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900051c8:	2b80      	cmp	r3, #128	; 0x80
900051ca:	d01c      	beq.n	90005206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
900051cc:	2b80      	cmp	r3, #128	; 0x80
900051ce:	d804      	bhi.n	900051da <HAL_RCCEx_PeriphCLKConfig+0x142>
900051d0:	2b00      	cmp	r3, #0
900051d2:	d008      	beq.n	900051e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
900051d4:	2b40      	cmp	r3, #64	; 0x40
900051d6:	d00d      	beq.n	900051f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
900051d8:	e01e      	b.n	90005218 <HAL_RCCEx_PeriphCLKConfig+0x180>
900051da:	2bc0      	cmp	r3, #192	; 0xc0
900051dc:	d01f      	beq.n	9000521e <HAL_RCCEx_PeriphCLKConfig+0x186>
900051de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900051e2:	d01e      	beq.n	90005222 <HAL_RCCEx_PeriphCLKConfig+0x18a>
900051e4:	e018      	b.n	90005218 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900051e6:	4b6c      	ldr	r3, [pc, #432]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900051ea:	4a6b      	ldr	r2, [pc, #428]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900051ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900051f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
900051f2:	e017      	b.n	90005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900051f4:	687b      	ldr	r3, [r7, #4]
900051f6:	3304      	adds	r3, #4
900051f8:	2100      	movs	r1, #0
900051fa:	4618      	mov	r0, r3
900051fc:	f001 fcac 	bl	90006b58 <RCCEx_PLL2_Config>
90005200:	4603      	mov	r3, r0
90005202:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
90005204:	e00e      	b.n	90005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90005206:	687b      	ldr	r3, [r7, #4]
90005208:	3324      	adds	r3, #36	; 0x24
9000520a:	2100      	movs	r1, #0
9000520c:	4618      	mov	r0, r3
9000520e:	f001 fd55 	bl	90006cbc <RCCEx_PLL3_Config>
90005212:	4603      	mov	r3, r0
90005214:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
90005216:	e005      	b.n	90005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005218:	2301      	movs	r3, #1
9000521a:	75fb      	strb	r3, [r7, #23]
      break;
9000521c:	e002      	b.n	90005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
9000521e:	bf00      	nop
90005220:	e000      	b.n	90005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
90005222:	bf00      	nop
    }

    if(ret == HAL_OK)
90005224:	7dfb      	ldrb	r3, [r7, #23]
90005226:	2b00      	cmp	r3, #0
90005228:	d109      	bne.n	9000523e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000522a:	4b5b      	ldr	r3, [pc, #364]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
9000522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000522e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
90005232:	687b      	ldr	r3, [r7, #4]
90005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005236:	4958      	ldr	r1, [pc, #352]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005238:	4313      	orrs	r3, r2
9000523a:	650b      	str	r3, [r1, #80]	; 0x50
9000523c:	e001      	b.n	90005242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000523e:	7dfb      	ldrb	r3, [r7, #23]
90005240:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90005242:	687b      	ldr	r3, [r7, #4]
90005244:	681b      	ldr	r3, [r3, #0]
90005246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000524a:	2b00      	cmp	r3, #0
9000524c:	d044      	beq.n	900052d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
9000524e:	687b      	ldr	r3, [r7, #4]
90005250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90005254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90005258:	d01f      	beq.n	9000529a <HAL_RCCEx_PeriphCLKConfig+0x202>
9000525a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000525e:	d805      	bhi.n	9000526c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
90005260:	2b00      	cmp	r3, #0
90005262:	d00a      	beq.n	9000527a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90005264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90005268:	d00e      	beq.n	90005288 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
9000526a:	e01f      	b.n	900052ac <HAL_RCCEx_PeriphCLKConfig+0x214>
9000526c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90005270:	d01f      	beq.n	900052b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
90005272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90005276:	d01e      	beq.n	900052b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
90005278:	e018      	b.n	900052ac <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000527a:	4b47      	ldr	r3, [pc, #284]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
9000527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000527e:	4a46      	ldr	r2, [pc, #280]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90005286:	e017      	b.n	900052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005288:	687b      	ldr	r3, [r7, #4]
9000528a:	3304      	adds	r3, #4
9000528c:	2100      	movs	r1, #0
9000528e:	4618      	mov	r0, r3
90005290:	f001 fc62 	bl	90006b58 <RCCEx_PLL2_Config>
90005294:	4603      	mov	r3, r0
90005296:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
90005298:	e00e      	b.n	900052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
9000529a:	687b      	ldr	r3, [r7, #4]
9000529c:	3324      	adds	r3, #36	; 0x24
9000529e:	2100      	movs	r1, #0
900052a0:	4618      	mov	r0, r3
900052a2:	f001 fd0b 	bl	90006cbc <RCCEx_PLL3_Config>
900052a6:	4603      	mov	r3, r0
900052a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900052aa:	e005      	b.n	900052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
900052ac:	2301      	movs	r3, #1
900052ae:	75fb      	strb	r3, [r7, #23]
      break;
900052b0:	e002      	b.n	900052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
900052b2:	bf00      	nop
900052b4:	e000      	b.n	900052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
900052b6:	bf00      	nop
    }

    if(ret == HAL_OK)
900052b8:	7dfb      	ldrb	r3, [r7, #23]
900052ba:	2b00      	cmp	r3, #0
900052bc:	d10a      	bne.n	900052d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
900052be:	4b36      	ldr	r3, [pc, #216]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900052c2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
900052c6:	687b      	ldr	r3, [r7, #4]
900052c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900052cc:	4932      	ldr	r1, [pc, #200]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
900052ce:	4313      	orrs	r3, r2
900052d0:	658b      	str	r3, [r1, #88]	; 0x58
900052d2:	e001      	b.n	900052d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
900052d4:	7dfb      	ldrb	r3, [r7, #23]
900052d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
900052d8:	687b      	ldr	r3, [r7, #4]
900052da:	681b      	ldr	r3, [r3, #0]
900052dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
900052e0:	2b00      	cmp	r3, #0
900052e2:	d044      	beq.n	9000536e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
900052e4:	687b      	ldr	r3, [r7, #4]
900052e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
900052ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900052ee:	d01f      	beq.n	90005330 <HAL_RCCEx_PeriphCLKConfig+0x298>
900052f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900052f4:	d805      	bhi.n	90005302 <HAL_RCCEx_PeriphCLKConfig+0x26a>
900052f6:	2b00      	cmp	r3, #0
900052f8:	d00a      	beq.n	90005310 <HAL_RCCEx_PeriphCLKConfig+0x278>
900052fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900052fe:	d00e      	beq.n	9000531e <HAL_RCCEx_PeriphCLKConfig+0x286>
90005300:	e01f      	b.n	90005342 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
90005302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90005306:	d01f      	beq.n	90005348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90005308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000530c:	d01e      	beq.n	9000534c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
9000530e:	e018      	b.n	90005342 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005310:	4b21      	ldr	r3, [pc, #132]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005314:	4a20      	ldr	r2, [pc, #128]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000531a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000531c:	e017      	b.n	9000534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000531e:	687b      	ldr	r3, [r7, #4]
90005320:	3304      	adds	r3, #4
90005322:	2100      	movs	r1, #0
90005324:	4618      	mov	r0, r3
90005326:	f001 fc17 	bl	90006b58 <RCCEx_PLL2_Config>
9000532a:	4603      	mov	r3, r0
9000532c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
9000532e:	e00e      	b.n	9000534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90005330:	687b      	ldr	r3, [r7, #4]
90005332:	3324      	adds	r3, #36	; 0x24
90005334:	2100      	movs	r1, #0
90005336:	4618      	mov	r0, r3
90005338:	f001 fcc0 	bl	90006cbc <RCCEx_PLL3_Config>
9000533c:	4603      	mov	r3, r0
9000533e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90005340:	e005      	b.n	9000534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
90005342:	2301      	movs	r3, #1
90005344:	75fb      	strb	r3, [r7, #23]
      break;
90005346:	e002      	b.n	9000534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
90005348:	bf00      	nop
9000534a:	e000      	b.n	9000534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
9000534c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000534e:	7dfb      	ldrb	r3, [r7, #23]
90005350:	2b00      	cmp	r3, #0
90005352:	d10a      	bne.n	9000536a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90005354:	4b10      	ldr	r3, [pc, #64]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005358:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
9000535c:	687b      	ldr	r3, [r7, #4]
9000535e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90005362:	490d      	ldr	r1, [pc, #52]	; (90005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
90005364:	4313      	orrs	r3, r2
90005366:	658b      	str	r3, [r1, #88]	; 0x58
90005368:	e001      	b.n	9000536e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000536a:	7dfb      	ldrb	r3, [r7, #23]
9000536c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000536e:	687b      	ldr	r3, [r7, #4]
90005370:	681b      	ldr	r3, [r3, #0]
90005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90005376:	2b00      	cmp	r3, #0
90005378:	d035      	beq.n	900053e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
9000537a:	687b      	ldr	r3, [r7, #4]
9000537c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000537e:	2b10      	cmp	r3, #16
90005380:	d00c      	beq.n	9000539c <HAL_RCCEx_PeriphCLKConfig+0x304>
90005382:	2b10      	cmp	r3, #16
90005384:	d802      	bhi.n	9000538c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
90005386:	2b00      	cmp	r3, #0
90005388:	d01b      	beq.n	900053c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000538a:	e017      	b.n	900053bc <HAL_RCCEx_PeriphCLKConfig+0x324>
9000538c:	2b20      	cmp	r3, #32
9000538e:	d00c      	beq.n	900053aa <HAL_RCCEx_PeriphCLKConfig+0x312>
90005390:	2b30      	cmp	r3, #48	; 0x30
90005392:	d018      	beq.n	900053c6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
90005394:	e012      	b.n	900053bc <HAL_RCCEx_PeriphCLKConfig+0x324>
90005396:	bf00      	nop
90005398:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000539c:	4baf      	ldr	r3, [pc, #700]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
9000539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900053a0:	4aae      	ldr	r2, [pc, #696]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900053a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900053a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
900053a8:	e00e      	b.n	900053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
900053aa:	687b      	ldr	r3, [r7, #4]
900053ac:	3304      	adds	r3, #4
900053ae:	2102      	movs	r1, #2
900053b0:	4618      	mov	r0, r3
900053b2:	f001 fbd1 	bl	90006b58 <RCCEx_PLL2_Config>
900053b6:	4603      	mov	r3, r0
900053b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
900053ba:	e005      	b.n	900053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
900053bc:	2301      	movs	r3, #1
900053be:	75fb      	strb	r3, [r7, #23]
      break;
900053c0:	e002      	b.n	900053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
900053c2:	bf00      	nop
900053c4:	e000      	b.n	900053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
900053c6:	bf00      	nop
    }

    if(ret == HAL_OK)
900053c8:	7dfb      	ldrb	r3, [r7, #23]
900053ca:	2b00      	cmp	r3, #0
900053cc:	d109      	bne.n	900053e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
900053ce:	4ba3      	ldr	r3, [pc, #652]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900053d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
900053d6:	687b      	ldr	r3, [r7, #4]
900053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900053da:	49a0      	ldr	r1, [pc, #640]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900053dc:	4313      	orrs	r3, r2
900053de:	64cb      	str	r3, [r1, #76]	; 0x4c
900053e0:	e001      	b.n	900053e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
900053e2:	7dfb      	ldrb	r3, [r7, #23]
900053e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
900053e6:	687b      	ldr	r3, [r7, #4]
900053e8:	681b      	ldr	r3, [r3, #0]
900053ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900053ee:	2b00      	cmp	r3, #0
900053f0:	d042      	beq.n	90005478 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
900053f2:	687b      	ldr	r3, [r7, #4]
900053f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900053f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900053fa:	d01f      	beq.n	9000543c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
900053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90005400:	d805      	bhi.n	9000540e <HAL_RCCEx_PeriphCLKConfig+0x376>
90005402:	2b00      	cmp	r3, #0
90005404:	d00a      	beq.n	9000541c <HAL_RCCEx_PeriphCLKConfig+0x384>
90005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000540a:	d00e      	beq.n	9000542a <HAL_RCCEx_PeriphCLKConfig+0x392>
9000540c:	e01f      	b.n	9000544e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
9000540e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90005412:	d01f      	beq.n	90005454 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
90005414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005418:	d01e      	beq.n	90005458 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
9000541a:	e018      	b.n	9000544e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000541c:	4b8f      	ldr	r3, [pc, #572]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
9000541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005420:	4a8e      	ldr	r2, [pc, #568]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
90005422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90005428:	e017      	b.n	9000545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000542a:	687b      	ldr	r3, [r7, #4]
9000542c:	3304      	adds	r3, #4
9000542e:	2100      	movs	r1, #0
90005430:	4618      	mov	r0, r3
90005432:	f001 fb91 	bl	90006b58 <RCCEx_PLL2_Config>
90005436:	4603      	mov	r3, r0
90005438:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
9000543a:	e00e      	b.n	9000545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
9000543c:	687b      	ldr	r3, [r7, #4]
9000543e:	3324      	adds	r3, #36	; 0x24
90005440:	2100      	movs	r1, #0
90005442:	4618      	mov	r0, r3
90005444:	f001 fc3a 	bl	90006cbc <RCCEx_PLL3_Config>
90005448:	4603      	mov	r3, r0
9000544a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
9000544c:	e005      	b.n	9000545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000544e:	2301      	movs	r3, #1
90005450:	75fb      	strb	r3, [r7, #23]
      break;
90005452:	e002      	b.n	9000545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
90005454:	bf00      	nop
90005456:	e000      	b.n	9000545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
90005458:	bf00      	nop
    }

    if(ret == HAL_OK)
9000545a:	7dfb      	ldrb	r3, [r7, #23]
9000545c:	2b00      	cmp	r3, #0
9000545e:	d109      	bne.n	90005474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90005460:	4b7e      	ldr	r3, [pc, #504]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
90005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005464:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
90005468:	687b      	ldr	r3, [r7, #4]
9000546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000546c:	497b      	ldr	r1, [pc, #492]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
9000546e:	4313      	orrs	r3, r2
90005470:	650b      	str	r3, [r1, #80]	; 0x50
90005472:	e001      	b.n	90005478 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005474:	7dfb      	ldrb	r3, [r7, #23]
90005476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90005478:	687b      	ldr	r3, [r7, #4]
9000547a:	681b      	ldr	r3, [r3, #0]
9000547c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90005480:	2b00      	cmp	r3, #0
90005482:	d042      	beq.n	9000550a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
90005484:	687b      	ldr	r3, [r7, #4]
90005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000548c:	d01b      	beq.n	900054c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
9000548e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90005492:	d805      	bhi.n	900054a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
90005494:	2b00      	cmp	r3, #0
90005496:	d022      	beq.n	900054de <HAL_RCCEx_PeriphCLKConfig+0x446>
90005498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000549c:	d00a      	beq.n	900054b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
9000549e:	e01b      	b.n	900054d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
900054a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
900054a4:	d01d      	beq.n	900054e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
900054a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900054aa:	d01c      	beq.n	900054e6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
900054ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
900054b0:	d01b      	beq.n	900054ea <HAL_RCCEx_PeriphCLKConfig+0x452>
900054b2:	e011      	b.n	900054d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900054b4:	687b      	ldr	r3, [r7, #4]
900054b6:	3304      	adds	r3, #4
900054b8:	2101      	movs	r1, #1
900054ba:	4618      	mov	r0, r3
900054bc:	f001 fb4c 	bl	90006b58 <RCCEx_PLL2_Config>
900054c0:	4603      	mov	r3, r0
900054c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
900054c4:	e012      	b.n	900054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900054c6:	687b      	ldr	r3, [r7, #4]
900054c8:	3324      	adds	r3, #36	; 0x24
900054ca:	2101      	movs	r1, #1
900054cc:	4618      	mov	r0, r3
900054ce:	f001 fbf5 	bl	90006cbc <RCCEx_PLL3_Config>
900054d2:	4603      	mov	r3, r0
900054d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
900054d6:	e009      	b.n	900054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900054d8:	2301      	movs	r3, #1
900054da:	75fb      	strb	r3, [r7, #23]
      break;
900054dc:	e006      	b.n	900054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
900054de:	bf00      	nop
900054e0:	e004      	b.n	900054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
900054e2:	bf00      	nop
900054e4:	e002      	b.n	900054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
900054e6:	bf00      	nop
900054e8:	e000      	b.n	900054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
900054ea:	bf00      	nop
    }

    if(ret == HAL_OK)
900054ec:	7dfb      	ldrb	r3, [r7, #23]
900054ee:	2b00      	cmp	r3, #0
900054f0:	d109      	bne.n	90005506 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900054f2:	4b5a      	ldr	r3, [pc, #360]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900054f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900054f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
900054fa:	687b      	ldr	r3, [r7, #4]
900054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900054fe:	4957      	ldr	r1, [pc, #348]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
90005500:	4313      	orrs	r3, r2
90005502:	650b      	str	r3, [r1, #80]	; 0x50
90005504:	e001      	b.n	9000550a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005506:	7dfb      	ldrb	r3, [r7, #23]
90005508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000550a:	687b      	ldr	r3, [r7, #4]
9000550c:	681b      	ldr	r3, [r3, #0]
9000550e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90005512:	2b00      	cmp	r3, #0
90005514:	d044      	beq.n	900055a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
90005516:	687b      	ldr	r3, [r7, #4]
90005518:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
9000551c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005520:	d01b      	beq.n	9000555a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
90005522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005526:	d805      	bhi.n	90005534 <HAL_RCCEx_PeriphCLKConfig+0x49c>
90005528:	2b00      	cmp	r3, #0
9000552a:	d022      	beq.n	90005572 <HAL_RCCEx_PeriphCLKConfig+0x4da>
9000552c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90005530:	d00a      	beq.n	90005548 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
90005532:	e01b      	b.n	9000556c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
90005534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90005538:	d01d      	beq.n	90005576 <HAL_RCCEx_PeriphCLKConfig+0x4de>
9000553a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
9000553e:	d01c      	beq.n	9000557a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
90005540:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90005544:	d01b      	beq.n	9000557e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
90005546:	e011      	b.n	9000556c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90005548:	687b      	ldr	r3, [r7, #4]
9000554a:	3304      	adds	r3, #4
9000554c:	2101      	movs	r1, #1
9000554e:	4618      	mov	r0, r3
90005550:	f001 fb02 	bl	90006b58 <RCCEx_PLL2_Config>
90005554:	4603      	mov	r3, r0
90005556:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
90005558:	e012      	b.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
9000555a:	687b      	ldr	r3, [r7, #4]
9000555c:	3324      	adds	r3, #36	; 0x24
9000555e:	2101      	movs	r1, #1
90005560:	4618      	mov	r0, r3
90005562:	f001 fbab 	bl	90006cbc <RCCEx_PLL3_Config>
90005566:	4603      	mov	r3, r0
90005568:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
9000556a:	e009      	b.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
9000556c:	2301      	movs	r3, #1
9000556e:	75fb      	strb	r3, [r7, #23]
      break;
90005570:	e006      	b.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
90005572:	bf00      	nop
90005574:	e004      	b.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
90005576:	bf00      	nop
90005578:	e002      	b.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
9000557a:	bf00      	nop
9000557c:	e000      	b.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
9000557e:	bf00      	nop
    }

    if(ret == HAL_OK)
90005580:	7dfb      	ldrb	r3, [r7, #23]
90005582:	2b00      	cmp	r3, #0
90005584:	d10a      	bne.n	9000559c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90005586:	4b35      	ldr	r3, [pc, #212]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
90005588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000558a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
9000558e:	687b      	ldr	r3, [r7, #4]
90005590:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90005594:	4931      	ldr	r1, [pc, #196]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
90005596:	4313      	orrs	r3, r2
90005598:	658b      	str	r3, [r1, #88]	; 0x58
9000559a:	e001      	b.n	900055a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000559c:	7dfb      	ldrb	r3, [r7, #23]
9000559e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
900055a0:	687b      	ldr	r3, [r7, #4]
900055a2:	681b      	ldr	r3, [r3, #0]
900055a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900055a8:	2b00      	cmp	r3, #0
900055aa:	d02d      	beq.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
900055ac:	687b      	ldr	r3, [r7, #4]
900055ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900055b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900055b4:	d005      	beq.n	900055c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
900055b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900055ba:	d009      	beq.n	900055d0 <HAL_RCCEx_PeriphCLKConfig+0x538>
900055bc:	2b00      	cmp	r3, #0
900055be:	d013      	beq.n	900055e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
900055c0:	e00f      	b.n	900055e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900055c2:	4b26      	ldr	r3, [pc, #152]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900055c6:	4a25      	ldr	r2, [pc, #148]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900055c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900055cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
900055ce:	e00c      	b.n	900055ea <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900055d0:	687b      	ldr	r3, [r7, #4]
900055d2:	3304      	adds	r3, #4
900055d4:	2101      	movs	r1, #1
900055d6:	4618      	mov	r0, r3
900055d8:	f001 fabe 	bl	90006b58 <RCCEx_PLL2_Config>
900055dc:	4603      	mov	r3, r0
900055de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
900055e0:	e003      	b.n	900055ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900055e2:	2301      	movs	r3, #1
900055e4:	75fb      	strb	r3, [r7, #23]
      break;
900055e6:	e000      	b.n	900055ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
900055e8:	bf00      	nop
    }

    if(ret == HAL_OK)
900055ea:	7dfb      	ldrb	r3, [r7, #23]
900055ec:	2b00      	cmp	r3, #0
900055ee:	d109      	bne.n	90005604 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
900055f0:	4b1a      	ldr	r3, [pc, #104]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900055f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
900055f8:	687b      	ldr	r3, [r7, #4]
900055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900055fc:	4917      	ldr	r1, [pc, #92]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
900055fe:	4313      	orrs	r3, r2
90005600:	650b      	str	r3, [r1, #80]	; 0x50
90005602:	e001      	b.n	90005608 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005604:	7dfb      	ldrb	r3, [r7, #23]
90005606:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90005608:	687b      	ldr	r3, [r7, #4]
9000560a:	681b      	ldr	r3, [r3, #0]
9000560c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90005610:	2b00      	cmp	r3, #0
90005612:	d035      	beq.n	90005680 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
90005614:	687b      	ldr	r3, [r7, #4]
90005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005618:	2b03      	cmp	r3, #3
9000561a:	d81b      	bhi.n	90005654 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
9000561c:	a201      	add	r2, pc, #4	; (adr r2, 90005624 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
9000561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005622:	bf00      	nop
90005624:	90005661 	.word	0x90005661
90005628:	90005635 	.word	0x90005635
9000562c:	90005643 	.word	0x90005643
90005630:	90005661 	.word	0x90005661
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005634:	4b09      	ldr	r3, [pc, #36]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
90005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005638:	4a08      	ldr	r2, [pc, #32]	; (9000565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
9000563a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000563e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
90005640:	e00f      	b.n	90005662 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90005642:	687b      	ldr	r3, [r7, #4]
90005644:	3304      	adds	r3, #4
90005646:	2102      	movs	r1, #2
90005648:	4618      	mov	r0, r3
9000564a:	f001 fa85 	bl	90006b58 <RCCEx_PLL2_Config>
9000564e:	4603      	mov	r3, r0
90005650:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
90005652:	e006      	b.n	90005662 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
90005654:	2301      	movs	r3, #1
90005656:	75fb      	strb	r3, [r7, #23]
      break;
90005658:	e003      	b.n	90005662 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
9000565a:	bf00      	nop
9000565c:	58024400 	.word	0x58024400
      break;
90005660:	bf00      	nop
    }

    if(ret == HAL_OK)
90005662:	7dfb      	ldrb	r3, [r7, #23]
90005664:	2b00      	cmp	r3, #0
90005666:	d109      	bne.n	9000567c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90005668:	4bba      	ldr	r3, [pc, #744]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
9000566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000566c:	f023 0203 	bic.w	r2, r3, #3
90005670:	687b      	ldr	r3, [r7, #4]
90005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005674:	49b7      	ldr	r1, [pc, #732]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005676:	4313      	orrs	r3, r2
90005678:	64cb      	str	r3, [r1, #76]	; 0x4c
9000567a:	e001      	b.n	90005680 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000567c:	7dfb      	ldrb	r3, [r7, #23]
9000567e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90005680:	687b      	ldr	r3, [r7, #4]
90005682:	681b      	ldr	r3, [r3, #0]
90005684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90005688:	2b00      	cmp	r3, #0
9000568a:	f000 8086 	beq.w	9000579a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000568e:	4bb2      	ldr	r3, [pc, #712]	; (90005958 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
90005690:	681b      	ldr	r3, [r3, #0]
90005692:	4ab1      	ldr	r2, [pc, #708]	; (90005958 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
90005694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90005698:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000569a:	f7fc fdb1 	bl	90002200 <HAL_GetTick>
9000569e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
900056a0:	e009      	b.n	900056b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900056a2:	f7fc fdad 	bl	90002200 <HAL_GetTick>
900056a6:	4602      	mov	r2, r0
900056a8:	693b      	ldr	r3, [r7, #16]
900056aa:	1ad3      	subs	r3, r2, r3
900056ac:	2b64      	cmp	r3, #100	; 0x64
900056ae:	d902      	bls.n	900056b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
900056b0:	2303      	movs	r3, #3
900056b2:	75fb      	strb	r3, [r7, #23]
        break;
900056b4:	e005      	b.n	900056c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
900056b6:	4ba8      	ldr	r3, [pc, #672]	; (90005958 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
900056b8:	681b      	ldr	r3, [r3, #0]
900056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
900056be:	2b00      	cmp	r3, #0
900056c0:	d0ef      	beq.n	900056a2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
900056c2:	7dfb      	ldrb	r3, [r7, #23]
900056c4:	2b00      	cmp	r3, #0
900056c6:	d166      	bne.n	90005796 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
900056c8:	4ba2      	ldr	r3, [pc, #648]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
900056ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
900056cc:	687b      	ldr	r3, [r7, #4]
900056ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900056d2:	4053      	eors	r3, r2
900056d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
900056d8:	2b00      	cmp	r3, #0
900056da:	d013      	beq.n	90005704 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
900056dc:	4b9d      	ldr	r3, [pc, #628]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
900056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
900056e4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
900056e6:	4b9b      	ldr	r3, [pc, #620]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
900056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900056ea:	4a9a      	ldr	r2, [pc, #616]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
900056ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900056f0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
900056f2:	4b98      	ldr	r3, [pc, #608]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
900056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900056f6:	4a97      	ldr	r2, [pc, #604]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
900056f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900056fc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
900056fe:	4a95      	ldr	r2, [pc, #596]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005700:	68fb      	ldr	r3, [r7, #12]
90005702:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90005704:	687b      	ldr	r3, [r7, #4]
90005706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000570e:	d115      	bne.n	9000573c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90005710:	f7fc fd76 	bl	90002200 <HAL_GetTick>
90005714:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90005716:	e00b      	b.n	90005730 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90005718:	f7fc fd72 	bl	90002200 <HAL_GetTick>
9000571c:	4602      	mov	r2, r0
9000571e:	693b      	ldr	r3, [r7, #16]
90005720:	1ad3      	subs	r3, r2, r3
90005722:	f241 3288 	movw	r2, #5000	; 0x1388
90005726:	4293      	cmp	r3, r2
90005728:	d902      	bls.n	90005730 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
9000572a:	2303      	movs	r3, #3
9000572c:	75fb      	strb	r3, [r7, #23]
            break;
9000572e:	e005      	b.n	9000573c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90005730:	4b88      	ldr	r3, [pc, #544]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005734:	f003 0302 	and.w	r3, r3, #2
90005738:	2b00      	cmp	r3, #0
9000573a:	d0ed      	beq.n	90005718 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
9000573c:	7dfb      	ldrb	r3, [r7, #23]
9000573e:	2b00      	cmp	r3, #0
90005740:	d126      	bne.n	90005790 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90005742:	687b      	ldr	r3, [r7, #4]
90005744:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90005748:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000574c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90005750:	d10d      	bne.n	9000576e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
90005752:	4b80      	ldr	r3, [pc, #512]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005754:	691b      	ldr	r3, [r3, #16]
90005756:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
9000575a:	687b      	ldr	r3, [r7, #4]
9000575c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90005760:	0919      	lsrs	r1, r3, #4
90005762:	4b7e      	ldr	r3, [pc, #504]	; (9000595c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
90005764:	400b      	ands	r3, r1
90005766:	497b      	ldr	r1, [pc, #492]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005768:	4313      	orrs	r3, r2
9000576a:	610b      	str	r3, [r1, #16]
9000576c:	e005      	b.n	9000577a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
9000576e:	4b79      	ldr	r3, [pc, #484]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005770:	691b      	ldr	r3, [r3, #16]
90005772:	4a78      	ldr	r2, [pc, #480]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005774:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90005778:	6113      	str	r3, [r2, #16]
9000577a:	4b76      	ldr	r3, [pc, #472]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
9000577c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000577e:	687b      	ldr	r3, [r7, #4]
90005780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90005784:	f3c3 030b 	ubfx	r3, r3, #0, #12
90005788:	4972      	ldr	r1, [pc, #456]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
9000578a:	4313      	orrs	r3, r2
9000578c:	670b      	str	r3, [r1, #112]	; 0x70
9000578e:	e004      	b.n	9000579a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
90005790:	7dfb      	ldrb	r3, [r7, #23]
90005792:	75bb      	strb	r3, [r7, #22]
90005794:	e001      	b.n	9000579a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90005796:	7dfb      	ldrb	r3, [r7, #23]
90005798:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000579a:	687b      	ldr	r3, [r7, #4]
9000579c:	681b      	ldr	r3, [r3, #0]
9000579e:	f003 0301 	and.w	r3, r3, #1
900057a2:	2b00      	cmp	r3, #0
900057a4:	d07d      	beq.n	900058a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
900057a6:	687b      	ldr	r3, [r7, #4]
900057a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900057aa:	2b28      	cmp	r3, #40	; 0x28
900057ac:	d866      	bhi.n	9000587c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
900057ae:	a201      	add	r2, pc, #4	; (adr r2, 900057b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
900057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900057b4:	90005883 	.word	0x90005883
900057b8:	9000587d 	.word	0x9000587d
900057bc:	9000587d 	.word	0x9000587d
900057c0:	9000587d 	.word	0x9000587d
900057c4:	9000587d 	.word	0x9000587d
900057c8:	9000587d 	.word	0x9000587d
900057cc:	9000587d 	.word	0x9000587d
900057d0:	9000587d 	.word	0x9000587d
900057d4:	90005859 	.word	0x90005859
900057d8:	9000587d 	.word	0x9000587d
900057dc:	9000587d 	.word	0x9000587d
900057e0:	9000587d 	.word	0x9000587d
900057e4:	9000587d 	.word	0x9000587d
900057e8:	9000587d 	.word	0x9000587d
900057ec:	9000587d 	.word	0x9000587d
900057f0:	9000587d 	.word	0x9000587d
900057f4:	9000586b 	.word	0x9000586b
900057f8:	9000587d 	.word	0x9000587d
900057fc:	9000587d 	.word	0x9000587d
90005800:	9000587d 	.word	0x9000587d
90005804:	9000587d 	.word	0x9000587d
90005808:	9000587d 	.word	0x9000587d
9000580c:	9000587d 	.word	0x9000587d
90005810:	9000587d 	.word	0x9000587d
90005814:	90005883 	.word	0x90005883
90005818:	9000587d 	.word	0x9000587d
9000581c:	9000587d 	.word	0x9000587d
90005820:	9000587d 	.word	0x9000587d
90005824:	9000587d 	.word	0x9000587d
90005828:	9000587d 	.word	0x9000587d
9000582c:	9000587d 	.word	0x9000587d
90005830:	9000587d 	.word	0x9000587d
90005834:	90005883 	.word	0x90005883
90005838:	9000587d 	.word	0x9000587d
9000583c:	9000587d 	.word	0x9000587d
90005840:	9000587d 	.word	0x9000587d
90005844:	9000587d 	.word	0x9000587d
90005848:	9000587d 	.word	0x9000587d
9000584c:	9000587d 	.word	0x9000587d
90005850:	9000587d 	.word	0x9000587d
90005854:	90005883 	.word	0x90005883
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90005858:	687b      	ldr	r3, [r7, #4]
9000585a:	3304      	adds	r3, #4
9000585c:	2101      	movs	r1, #1
9000585e:	4618      	mov	r0, r3
90005860:	f001 f97a 	bl	90006b58 <RCCEx_PLL2_Config>
90005864:	4603      	mov	r3, r0
90005866:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
90005868:	e00c      	b.n	90005884 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
9000586a:	687b      	ldr	r3, [r7, #4]
9000586c:	3324      	adds	r3, #36	; 0x24
9000586e:	2101      	movs	r1, #1
90005870:	4618      	mov	r0, r3
90005872:	f001 fa23 	bl	90006cbc <RCCEx_PLL3_Config>
90005876:	4603      	mov	r3, r0
90005878:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
9000587a:	e003      	b.n	90005884 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000587c:	2301      	movs	r3, #1
9000587e:	75fb      	strb	r3, [r7, #23]
      break;
90005880:	e000      	b.n	90005884 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
90005882:	bf00      	nop
    }

    if(ret == HAL_OK)
90005884:	7dfb      	ldrb	r3, [r7, #23]
90005886:	2b00      	cmp	r3, #0
90005888:	d109      	bne.n	9000589e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000588a:	4b32      	ldr	r3, [pc, #200]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
9000588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000588e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
90005892:	687b      	ldr	r3, [r7, #4]
90005894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90005896:	492f      	ldr	r1, [pc, #188]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005898:	4313      	orrs	r3, r2
9000589a:	654b      	str	r3, [r1, #84]	; 0x54
9000589c:	e001      	b.n	900058a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000589e:	7dfb      	ldrb	r3, [r7, #23]
900058a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
900058a2:	687b      	ldr	r3, [r7, #4]
900058a4:	681b      	ldr	r3, [r3, #0]
900058a6:	f003 0302 	and.w	r3, r3, #2
900058aa:	2b00      	cmp	r3, #0
900058ac:	d037      	beq.n	9000591e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
900058ae:	687b      	ldr	r3, [r7, #4]
900058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900058b2:	2b05      	cmp	r3, #5
900058b4:	d820      	bhi.n	900058f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
900058b6:	a201      	add	r2, pc, #4	; (adr r2, 900058bc <HAL_RCCEx_PeriphCLKConfig+0x824>)
900058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900058bc:	900058ff 	.word	0x900058ff
900058c0:	900058d5 	.word	0x900058d5
900058c4:	900058e7 	.word	0x900058e7
900058c8:	900058ff 	.word	0x900058ff
900058cc:	900058ff 	.word	0x900058ff
900058d0:	900058ff 	.word	0x900058ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900058d4:	687b      	ldr	r3, [r7, #4]
900058d6:	3304      	adds	r3, #4
900058d8:	2101      	movs	r1, #1
900058da:	4618      	mov	r0, r3
900058dc:	f001 f93c 	bl	90006b58 <RCCEx_PLL2_Config>
900058e0:	4603      	mov	r3, r0
900058e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
900058e4:	e00c      	b.n	90005900 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900058e6:	687b      	ldr	r3, [r7, #4]
900058e8:	3324      	adds	r3, #36	; 0x24
900058ea:	2101      	movs	r1, #1
900058ec:	4618      	mov	r0, r3
900058ee:	f001 f9e5 	bl	90006cbc <RCCEx_PLL3_Config>
900058f2:	4603      	mov	r3, r0
900058f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
900058f6:	e003      	b.n	90005900 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900058f8:	2301      	movs	r3, #1
900058fa:	75fb      	strb	r3, [r7, #23]
      break;
900058fc:	e000      	b.n	90005900 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
900058fe:	bf00      	nop
    }

    if(ret == HAL_OK)
90005900:	7dfb      	ldrb	r3, [r7, #23]
90005902:	2b00      	cmp	r3, #0
90005904:	d109      	bne.n	9000591a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90005906:	4b13      	ldr	r3, [pc, #76]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000590a:	f023 0207 	bic.w	r2, r3, #7
9000590e:	687b      	ldr	r3, [r7, #4]
90005910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90005912:	4910      	ldr	r1, [pc, #64]	; (90005954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
90005914:	4313      	orrs	r3, r2
90005916:	654b      	str	r3, [r1, #84]	; 0x54
90005918:	e001      	b.n	9000591e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000591a:	7dfb      	ldrb	r3, [r7, #23]
9000591c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000591e:	687b      	ldr	r3, [r7, #4]
90005920:	681b      	ldr	r3, [r3, #0]
90005922:	f003 0304 	and.w	r3, r3, #4
90005926:	2b00      	cmp	r3, #0
90005928:	d040      	beq.n	900059ac <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
9000592a:	687b      	ldr	r3, [r7, #4]
9000592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90005930:	2b05      	cmp	r3, #5
90005932:	d827      	bhi.n	90005984 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
90005934:	a201      	add	r2, pc, #4	; (adr r2, 9000593c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
90005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000593a:	bf00      	nop
9000593c:	9000598b 	.word	0x9000598b
90005940:	90005961 	.word	0x90005961
90005944:	90005973 	.word	0x90005973
90005948:	9000598b 	.word	0x9000598b
9000594c:	9000598b 	.word	0x9000598b
90005950:	9000598b 	.word	0x9000598b
90005954:	58024400 	.word	0x58024400
90005958:	58024800 	.word	0x58024800
9000595c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90005960:	687b      	ldr	r3, [r7, #4]
90005962:	3304      	adds	r3, #4
90005964:	2101      	movs	r1, #1
90005966:	4618      	mov	r0, r3
90005968:	f001 f8f6 	bl	90006b58 <RCCEx_PLL2_Config>
9000596c:	4603      	mov	r3, r0
9000596e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90005970:	e00c      	b.n	9000598c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90005972:	687b      	ldr	r3, [r7, #4]
90005974:	3324      	adds	r3, #36	; 0x24
90005976:	2101      	movs	r1, #1
90005978:	4618      	mov	r0, r3
9000597a:	f001 f99f 	bl	90006cbc <RCCEx_PLL3_Config>
9000597e:	4603      	mov	r3, r0
90005980:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90005982:	e003      	b.n	9000598c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005984:	2301      	movs	r3, #1
90005986:	75fb      	strb	r3, [r7, #23]
      break;
90005988:	e000      	b.n	9000598c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
9000598a:	bf00      	nop
    }

    if(ret == HAL_OK)
9000598c:	7dfb      	ldrb	r3, [r7, #23]
9000598e:	2b00      	cmp	r3, #0
90005990:	d10a      	bne.n	900059a8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90005992:	4bb2      	ldr	r3, [pc, #712]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005996:	f023 0207 	bic.w	r2, r3, #7
9000599a:	687b      	ldr	r3, [r7, #4]
9000599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900059a0:	49ae      	ldr	r1, [pc, #696]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
900059a2:	4313      	orrs	r3, r2
900059a4:	658b      	str	r3, [r1, #88]	; 0x58
900059a6:	e001      	b.n	900059ac <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
900059a8:	7dfb      	ldrb	r3, [r7, #23]
900059aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900059ac:	687b      	ldr	r3, [r7, #4]
900059ae:	681b      	ldr	r3, [r3, #0]
900059b0:	f003 0320 	and.w	r3, r3, #32
900059b4:	2b00      	cmp	r3, #0
900059b6:	d044      	beq.n	90005a42 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
900059b8:	687b      	ldr	r3, [r7, #4]
900059ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900059be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900059c2:	d01b      	beq.n	900059fc <HAL_RCCEx_PeriphCLKConfig+0x964>
900059c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900059c8:	d805      	bhi.n	900059d6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
900059ca:	2b00      	cmp	r3, #0
900059cc:	d022      	beq.n	90005a14 <HAL_RCCEx_PeriphCLKConfig+0x97c>
900059ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900059d2:	d00a      	beq.n	900059ea <HAL_RCCEx_PeriphCLKConfig+0x952>
900059d4:	e01b      	b.n	90005a0e <HAL_RCCEx_PeriphCLKConfig+0x976>
900059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900059da:	d01d      	beq.n	90005a18 <HAL_RCCEx_PeriphCLKConfig+0x980>
900059dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900059e0:	d01c      	beq.n	90005a1c <HAL_RCCEx_PeriphCLKConfig+0x984>
900059e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900059e6:	d01b      	beq.n	90005a20 <HAL_RCCEx_PeriphCLKConfig+0x988>
900059e8:	e011      	b.n	90005a0e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900059ea:	687b      	ldr	r3, [r7, #4]
900059ec:	3304      	adds	r3, #4
900059ee:	2100      	movs	r1, #0
900059f0:	4618      	mov	r0, r3
900059f2:	f001 f8b1 	bl	90006b58 <RCCEx_PLL2_Config>
900059f6:	4603      	mov	r3, r0
900059f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
900059fa:	e012      	b.n	90005a22 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
900059fc:	687b      	ldr	r3, [r7, #4]
900059fe:	3324      	adds	r3, #36	; 0x24
90005a00:	2102      	movs	r1, #2
90005a02:	4618      	mov	r0, r3
90005a04:	f001 f95a 	bl	90006cbc <RCCEx_PLL3_Config>
90005a08:	4603      	mov	r3, r0
90005a0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90005a0c:	e009      	b.n	90005a22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005a0e:	2301      	movs	r3, #1
90005a10:	75fb      	strb	r3, [r7, #23]
      break;
90005a12:	e006      	b.n	90005a22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
90005a14:	bf00      	nop
90005a16:	e004      	b.n	90005a22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
90005a18:	bf00      	nop
90005a1a:	e002      	b.n	90005a22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
90005a1c:	bf00      	nop
90005a1e:	e000      	b.n	90005a22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
90005a20:	bf00      	nop
    }

    if(ret == HAL_OK)
90005a22:	7dfb      	ldrb	r3, [r7, #23]
90005a24:	2b00      	cmp	r3, #0
90005a26:	d10a      	bne.n	90005a3e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90005a28:	4b8c      	ldr	r3, [pc, #560]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005a2c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
90005a30:	687b      	ldr	r3, [r7, #4]
90005a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005a36:	4989      	ldr	r1, [pc, #548]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005a38:	4313      	orrs	r3, r2
90005a3a:	654b      	str	r3, [r1, #84]	; 0x54
90005a3c:	e001      	b.n	90005a42 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005a3e:	7dfb      	ldrb	r3, [r7, #23]
90005a40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90005a42:	687b      	ldr	r3, [r7, #4]
90005a44:	681b      	ldr	r3, [r3, #0]
90005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
90005a4a:	2b00      	cmp	r3, #0
90005a4c:	d044      	beq.n	90005ad8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
90005a4e:	687b      	ldr	r3, [r7, #4]
90005a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90005a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90005a58:	d01b      	beq.n	90005a92 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
90005a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90005a5e:	d805      	bhi.n	90005a6c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
90005a60:	2b00      	cmp	r3, #0
90005a62:	d022      	beq.n	90005aaa <HAL_RCCEx_PeriphCLKConfig+0xa12>
90005a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90005a68:	d00a      	beq.n	90005a80 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
90005a6a:	e01b      	b.n	90005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
90005a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005a70:	d01d      	beq.n	90005aae <HAL_RCCEx_PeriphCLKConfig+0xa16>
90005a72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90005a76:	d01c      	beq.n	90005ab2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
90005a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90005a7c:	d01b      	beq.n	90005ab6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
90005a7e:	e011      	b.n	90005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005a80:	687b      	ldr	r3, [r7, #4]
90005a82:	3304      	adds	r3, #4
90005a84:	2100      	movs	r1, #0
90005a86:	4618      	mov	r0, r3
90005a88:	f001 f866 	bl	90006b58 <RCCEx_PLL2_Config>
90005a8c:	4603      	mov	r3, r0
90005a8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90005a90:	e012      	b.n	90005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005a92:	687b      	ldr	r3, [r7, #4]
90005a94:	3324      	adds	r3, #36	; 0x24
90005a96:	2102      	movs	r1, #2
90005a98:	4618      	mov	r0, r3
90005a9a:	f001 f90f 	bl	90006cbc <RCCEx_PLL3_Config>
90005a9e:	4603      	mov	r3, r0
90005aa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90005aa2:	e009      	b.n	90005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005aa4:	2301      	movs	r3, #1
90005aa6:	75fb      	strb	r3, [r7, #23]
      break;
90005aa8:	e006      	b.n	90005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
90005aaa:	bf00      	nop
90005aac:	e004      	b.n	90005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
90005aae:	bf00      	nop
90005ab0:	e002      	b.n	90005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
90005ab2:	bf00      	nop
90005ab4:	e000      	b.n	90005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
90005ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
90005ab8:	7dfb      	ldrb	r3, [r7, #23]
90005aba:	2b00      	cmp	r3, #0
90005abc:	d10a      	bne.n	90005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90005abe:	4b67      	ldr	r3, [pc, #412]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005ac2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90005ac6:	687b      	ldr	r3, [r7, #4]
90005ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90005acc:	4963      	ldr	r1, [pc, #396]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005ace:	4313      	orrs	r3, r2
90005ad0:	658b      	str	r3, [r1, #88]	; 0x58
90005ad2:	e001      	b.n	90005ad8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005ad4:	7dfb      	ldrb	r3, [r7, #23]
90005ad6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90005ad8:	687b      	ldr	r3, [r7, #4]
90005ada:	681b      	ldr	r3, [r3, #0]
90005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
90005ae0:	2b00      	cmp	r3, #0
90005ae2:	d044      	beq.n	90005b6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
90005ae4:	687b      	ldr	r3, [r7, #4]
90005ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90005aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005aee:	d01b      	beq.n	90005b28 <HAL_RCCEx_PeriphCLKConfig+0xa90>
90005af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005af4:	d805      	bhi.n	90005b02 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
90005af6:	2b00      	cmp	r3, #0
90005af8:	d022      	beq.n	90005b40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
90005afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90005afe:	d00a      	beq.n	90005b16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
90005b00:	e01b      	b.n	90005b3a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
90005b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90005b06:	d01d      	beq.n	90005b44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
90005b08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90005b0c:	d01c      	beq.n	90005b48 <HAL_RCCEx_PeriphCLKConfig+0xab0>
90005b0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90005b12:	d01b      	beq.n	90005b4c <HAL_RCCEx_PeriphCLKConfig+0xab4>
90005b14:	e011      	b.n	90005b3a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005b16:	687b      	ldr	r3, [r7, #4]
90005b18:	3304      	adds	r3, #4
90005b1a:	2100      	movs	r1, #0
90005b1c:	4618      	mov	r0, r3
90005b1e:	f001 f81b 	bl	90006b58 <RCCEx_PLL2_Config>
90005b22:	4603      	mov	r3, r0
90005b24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90005b26:	e012      	b.n	90005b4e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005b28:	687b      	ldr	r3, [r7, #4]
90005b2a:	3324      	adds	r3, #36	; 0x24
90005b2c:	2102      	movs	r1, #2
90005b2e:	4618      	mov	r0, r3
90005b30:	f001 f8c4 	bl	90006cbc <RCCEx_PLL3_Config>
90005b34:	4603      	mov	r3, r0
90005b36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90005b38:	e009      	b.n	90005b4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005b3a:	2301      	movs	r3, #1
90005b3c:	75fb      	strb	r3, [r7, #23]
      break;
90005b3e:	e006      	b.n	90005b4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
90005b40:	bf00      	nop
90005b42:	e004      	b.n	90005b4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
90005b44:	bf00      	nop
90005b46:	e002      	b.n	90005b4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
90005b48:	bf00      	nop
90005b4a:	e000      	b.n	90005b4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
90005b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
90005b4e:	7dfb      	ldrb	r3, [r7, #23]
90005b50:	2b00      	cmp	r3, #0
90005b52:	d10a      	bne.n	90005b6a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90005b54:	4b41      	ldr	r3, [pc, #260]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005b58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90005b5c:	687b      	ldr	r3, [r7, #4]
90005b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90005b62:	493e      	ldr	r1, [pc, #248]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005b64:	4313      	orrs	r3, r2
90005b66:	658b      	str	r3, [r1, #88]	; 0x58
90005b68:	e001      	b.n	90005b6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005b6a:	7dfb      	ldrb	r3, [r7, #23]
90005b6c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90005b6e:	687b      	ldr	r3, [r7, #4]
90005b70:	681b      	ldr	r3, [r3, #0]
90005b72:	f003 0308 	and.w	r3, r3, #8
90005b76:	2b00      	cmp	r3, #0
90005b78:	d01a      	beq.n	90005bb0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
90005b7a:	687b      	ldr	r3, [r7, #4]
90005b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005b84:	d10a      	bne.n	90005b9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
90005b86:	687b      	ldr	r3, [r7, #4]
90005b88:	3324      	adds	r3, #36	; 0x24
90005b8a:	2102      	movs	r1, #2
90005b8c:	4618      	mov	r0, r3
90005b8e:	f001 f895 	bl	90006cbc <RCCEx_PLL3_Config>
90005b92:	4603      	mov	r3, r0
90005b94:	2b00      	cmp	r3, #0
90005b96:	d001      	beq.n	90005b9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
90005b98:	2301      	movs	r3, #1
90005b9a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90005b9c:	4b2f      	ldr	r3, [pc, #188]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005ba0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
90005ba4:	687b      	ldr	r3, [r7, #4]
90005ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90005baa:	492c      	ldr	r1, [pc, #176]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005bac:	4313      	orrs	r3, r2
90005bae:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90005bb0:	687b      	ldr	r3, [r7, #4]
90005bb2:	681b      	ldr	r3, [r3, #0]
90005bb4:	f003 0310 	and.w	r3, r3, #16
90005bb8:	2b00      	cmp	r3, #0
90005bba:	d01a      	beq.n	90005bf2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
90005bbc:	687b      	ldr	r3, [r7, #4]
90005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90005bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005bc6:	d10a      	bne.n	90005bde <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
90005bc8:	687b      	ldr	r3, [r7, #4]
90005bca:	3324      	adds	r3, #36	; 0x24
90005bcc:	2102      	movs	r1, #2
90005bce:	4618      	mov	r0, r3
90005bd0:	f001 f874 	bl	90006cbc <RCCEx_PLL3_Config>
90005bd4:	4603      	mov	r3, r0
90005bd6:	2b00      	cmp	r3, #0
90005bd8:	d001      	beq.n	90005bde <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
90005bda:	2301      	movs	r3, #1
90005bdc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90005bde:	4b1f      	ldr	r3, [pc, #124]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90005be6:	687b      	ldr	r3, [r7, #4]
90005be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90005bec:	491b      	ldr	r1, [pc, #108]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005bee:	4313      	orrs	r3, r2
90005bf0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90005bf2:	687b      	ldr	r3, [r7, #4]
90005bf4:	681b      	ldr	r3, [r3, #0]
90005bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90005bfa:	2b00      	cmp	r3, #0
90005bfc:	d032      	beq.n	90005c64 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
90005bfe:	687b      	ldr	r3, [r7, #4]
90005c00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90005c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90005c08:	d00d      	beq.n	90005c26 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
90005c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90005c0e:	d016      	beq.n	90005c3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
90005c10:	2b00      	cmp	r3, #0
90005c12:	d111      	bne.n	90005c38 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90005c14:	687b      	ldr	r3, [r7, #4]
90005c16:	3304      	adds	r3, #4
90005c18:	2100      	movs	r1, #0
90005c1a:	4618      	mov	r0, r3
90005c1c:	f000 ff9c 	bl	90006b58 <RCCEx_PLL2_Config>
90005c20:	4603      	mov	r3, r0
90005c22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90005c24:	e00c      	b.n	90005c40 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90005c26:	687b      	ldr	r3, [r7, #4]
90005c28:	3324      	adds	r3, #36	; 0x24
90005c2a:	2102      	movs	r1, #2
90005c2c:	4618      	mov	r0, r3
90005c2e:	f001 f845 	bl	90006cbc <RCCEx_PLL3_Config>
90005c32:	4603      	mov	r3, r0
90005c34:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90005c36:	e003      	b.n	90005c40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005c38:	2301      	movs	r3, #1
90005c3a:	75fb      	strb	r3, [r7, #23]
      break;
90005c3c:	e000      	b.n	90005c40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
90005c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
90005c40:	7dfb      	ldrb	r3, [r7, #23]
90005c42:	2b00      	cmp	r3, #0
90005c44:	d10c      	bne.n	90005c60 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90005c46:	4b05      	ldr	r3, [pc, #20]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90005c4e:	687b      	ldr	r3, [r7, #4]
90005c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90005c54:	4901      	ldr	r1, [pc, #4]	; (90005c5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
90005c56:	4313      	orrs	r3, r2
90005c58:	658b      	str	r3, [r1, #88]	; 0x58
90005c5a:	e003      	b.n	90005c64 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
90005c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90005c60:	7dfb      	ldrb	r3, [r7, #23]
90005c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90005c64:	687b      	ldr	r3, [r7, #4]
90005c66:	681b      	ldr	r3, [r3, #0]
90005c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90005c6c:	2b00      	cmp	r3, #0
90005c6e:	d02f      	beq.n	90005cd0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
90005c70:	687b      	ldr	r3, [r7, #4]
90005c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90005c7a:	d00c      	beq.n	90005c96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
90005c7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90005c80:	d015      	beq.n	90005cae <HAL_RCCEx_PeriphCLKConfig+0xc16>
90005c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90005c86:	d10f      	bne.n	90005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005c88:	4b79      	ldr	r3, [pc, #484]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005c8c:	4a78      	ldr	r2, [pc, #480]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
90005c94:	e00c      	b.n	90005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90005c96:	687b      	ldr	r3, [r7, #4]
90005c98:	3324      	adds	r3, #36	; 0x24
90005c9a:	2101      	movs	r1, #1
90005c9c:	4618      	mov	r0, r3
90005c9e:	f001 f80d 	bl	90006cbc <RCCEx_PLL3_Config>
90005ca2:	4603      	mov	r3, r0
90005ca4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
90005ca6:	e003      	b.n	90005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005ca8:	2301      	movs	r3, #1
90005caa:	75fb      	strb	r3, [r7, #23]
      break;
90005cac:	e000      	b.n	90005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
90005cae:	bf00      	nop
    }

    if(ret == HAL_OK)
90005cb0:	7dfb      	ldrb	r3, [r7, #23]
90005cb2:	2b00      	cmp	r3, #0
90005cb4:	d10a      	bne.n	90005ccc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90005cb6:	4b6e      	ldr	r3, [pc, #440]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90005cbe:	687b      	ldr	r3, [r7, #4]
90005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005cc4:	496a      	ldr	r1, [pc, #424]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005cc6:	4313      	orrs	r3, r2
90005cc8:	654b      	str	r3, [r1, #84]	; 0x54
90005cca:	e001      	b.n	90005cd0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005ccc:	7dfb      	ldrb	r3, [r7, #23]
90005cce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90005cd0:	687b      	ldr	r3, [r7, #4]
90005cd2:	681b      	ldr	r3, [r3, #0]
90005cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90005cd8:	2b00      	cmp	r3, #0
90005cda:	d029      	beq.n	90005d30 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
90005cdc:	687b      	ldr	r3, [r7, #4]
90005cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005ce0:	2b00      	cmp	r3, #0
90005ce2:	d003      	beq.n	90005cec <HAL_RCCEx_PeriphCLKConfig+0xc54>
90005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90005ce8:	d007      	beq.n	90005cfa <HAL_RCCEx_PeriphCLKConfig+0xc62>
90005cea:	e00f      	b.n	90005d0c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005cec:	4b60      	ldr	r3, [pc, #384]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005cf0:	4a5f      	ldr	r2, [pc, #380]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90005cf8:	e00b      	b.n	90005d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90005cfa:	687b      	ldr	r3, [r7, #4]
90005cfc:	3304      	adds	r3, #4
90005cfe:	2102      	movs	r1, #2
90005d00:	4618      	mov	r0, r3
90005d02:	f000 ff29 	bl	90006b58 <RCCEx_PLL2_Config>
90005d06:	4603      	mov	r3, r0
90005d08:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90005d0a:	e002      	b.n	90005d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
90005d0c:	2301      	movs	r3, #1
90005d0e:	75fb      	strb	r3, [r7, #23]
      break;
90005d10:	bf00      	nop
    }

    if(ret == HAL_OK)
90005d12:	7dfb      	ldrb	r3, [r7, #23]
90005d14:	2b00      	cmp	r3, #0
90005d16:	d109      	bne.n	90005d2c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90005d18:	4b55      	ldr	r3, [pc, #340]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
90005d20:	687b      	ldr	r3, [r7, #4]
90005d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005d24:	4952      	ldr	r1, [pc, #328]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005d26:	4313      	orrs	r3, r2
90005d28:	64cb      	str	r3, [r1, #76]	; 0x4c
90005d2a:	e001      	b.n	90005d30 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005d2c:	7dfb      	ldrb	r3, [r7, #23]
90005d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90005d30:	687b      	ldr	r3, [r7, #4]
90005d32:	681b      	ldr	r3, [r3, #0]
90005d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90005d38:	2b00      	cmp	r3, #0
90005d3a:	d00a      	beq.n	90005d52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
90005d3c:	687b      	ldr	r3, [r7, #4]
90005d3e:	3324      	adds	r3, #36	; 0x24
90005d40:	2102      	movs	r1, #2
90005d42:	4618      	mov	r0, r3
90005d44:	f000 ffba 	bl	90006cbc <RCCEx_PLL3_Config>
90005d48:	4603      	mov	r3, r0
90005d4a:	2b00      	cmp	r3, #0
90005d4c:	d001      	beq.n	90005d52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
90005d4e:	2301      	movs	r3, #1
90005d50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90005d52:	687b      	ldr	r3, [r7, #4]
90005d54:	681b      	ldr	r3, [r3, #0]
90005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90005d5a:	2b00      	cmp	r3, #0
90005d5c:	d02f      	beq.n	90005dbe <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
90005d5e:	687b      	ldr	r3, [r7, #4]
90005d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005d66:	d00c      	beq.n	90005d82 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90005d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005d6c:	d802      	bhi.n	90005d74 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
90005d6e:	2b00      	cmp	r3, #0
90005d70:	d011      	beq.n	90005d96 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
90005d72:	e00d      	b.n	90005d90 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
90005d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90005d78:	d00f      	beq.n	90005d9a <HAL_RCCEx_PeriphCLKConfig+0xd02>
90005d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90005d7e:	d00e      	beq.n	90005d9e <HAL_RCCEx_PeriphCLKConfig+0xd06>
90005d80:	e006      	b.n	90005d90 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005d82:	4b3b      	ldr	r3, [pc, #236]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005d86:	4a3a      	ldr	r2, [pc, #232]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
90005d8e:	e007      	b.n	90005da0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90005d90:	2301      	movs	r3, #1
90005d92:	75fb      	strb	r3, [r7, #23]
      break;
90005d94:	e004      	b.n	90005da0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
90005d96:	bf00      	nop
90005d98:	e002      	b.n	90005da0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
90005d9a:	bf00      	nop
90005d9c:	e000      	b.n	90005da0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
90005d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
90005da0:	7dfb      	ldrb	r3, [r7, #23]
90005da2:	2b00      	cmp	r3, #0
90005da4:	d109      	bne.n	90005dba <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90005da6:	4b32      	ldr	r3, [pc, #200]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90005dae:	687b      	ldr	r3, [r7, #4]
90005db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005db2:	492f      	ldr	r1, [pc, #188]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005db4:	4313      	orrs	r3, r2
90005db6:	654b      	str	r3, [r1, #84]	; 0x54
90005db8:	e001      	b.n	90005dbe <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005dba:	7dfb      	ldrb	r3, [r7, #23]
90005dbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90005dbe:	687b      	ldr	r3, [r7, #4]
90005dc0:	681b      	ldr	r3, [r3, #0]
90005dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90005dc6:	2b00      	cmp	r3, #0
90005dc8:	d008      	beq.n	90005ddc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90005dca:	4b29      	ldr	r3, [pc, #164]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90005dd2:	687b      	ldr	r3, [r7, #4]
90005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005dd6:	4926      	ldr	r1, [pc, #152]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005dd8:	4313      	orrs	r3, r2
90005dda:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90005ddc:	687b      	ldr	r3, [r7, #4]
90005dde:	681b      	ldr	r3, [r3, #0]
90005de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90005de4:	2b00      	cmp	r3, #0
90005de6:	d009      	beq.n	90005dfc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90005de8:	4b21      	ldr	r3, [pc, #132]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005dea:	691b      	ldr	r3, [r3, #16]
90005dec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
90005df0:	687b      	ldr	r3, [r7, #4]
90005df2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90005df6:	491e      	ldr	r1, [pc, #120]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005df8:	4313      	orrs	r3, r2
90005dfa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90005dfc:	687b      	ldr	r3, [r7, #4]
90005dfe:	681b      	ldr	r3, [r3, #0]
90005e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90005e04:	2b00      	cmp	r3, #0
90005e06:	d008      	beq.n	90005e1a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90005e08:	4b19      	ldr	r3, [pc, #100]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005e0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
90005e10:	687b      	ldr	r3, [r7, #4]
90005e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90005e14:	4916      	ldr	r1, [pc, #88]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e16:	4313      	orrs	r3, r2
90005e18:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90005e1a:	687b      	ldr	r3, [r7, #4]
90005e1c:	681b      	ldr	r3, [r3, #0]
90005e1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
90005e22:	2b00      	cmp	r3, #0
90005e24:	d00d      	beq.n	90005e42 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90005e26:	4b12      	ldr	r3, [pc, #72]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e28:	691b      	ldr	r3, [r3, #16]
90005e2a:	4a11      	ldr	r2, [pc, #68]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005e30:	6113      	str	r3, [r2, #16]
90005e32:	4b0f      	ldr	r3, [pc, #60]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e34:	691a      	ldr	r2, [r3, #16]
90005e36:	687b      	ldr	r3, [r7, #4]
90005e38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90005e3c:	490c      	ldr	r1, [pc, #48]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e3e:	4313      	orrs	r3, r2
90005e40:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90005e42:	687b      	ldr	r3, [r7, #4]
90005e44:	681b      	ldr	r3, [r3, #0]
90005e46:	2b00      	cmp	r3, #0
90005e48:	da08      	bge.n	90005e5c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90005e4a:	4b09      	ldr	r3, [pc, #36]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005e4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90005e52:	687b      	ldr	r3, [r7, #4]
90005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005e56:	4906      	ldr	r1, [pc, #24]	; (90005e70 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
90005e58:	4313      	orrs	r3, r2
90005e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
90005e5c:	7dbb      	ldrb	r3, [r7, #22]
90005e5e:	2b00      	cmp	r3, #0
90005e60:	d101      	bne.n	90005e66 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
90005e62:	2300      	movs	r3, #0
90005e64:	e000      	b.n	90005e68 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
90005e66:	2301      	movs	r3, #1
}
90005e68:	4618      	mov	r0, r3
90005e6a:	3718      	adds	r7, #24
90005e6c:	46bd      	mov	sp, r7
90005e6e:	bd80      	pop	{r7, pc}
90005e70:	58024400 	.word	0x58024400

90005e74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
90005e74:	b580      	push	{r7, lr}
90005e76:	b090      	sub	sp, #64	; 0x40
90005e78:	af00      	add	r7, sp, #0
90005e7a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
90005e7c:	687b      	ldr	r3, [r7, #4]
90005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005e82:	d150      	bne.n	90005f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
90005e84:	4ba1      	ldr	r3, [pc, #644]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
90005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005e88:	f003 0307 	and.w	r3, r3, #7
90005e8c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
90005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e90:	2b04      	cmp	r3, #4
90005e92:	d844      	bhi.n	90005f1e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
90005e94:	a201      	add	r2, pc, #4	; (adr r2, 90005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
90005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005e9a:	bf00      	nop
90005e9c:	90005eb1 	.word	0x90005eb1
90005ea0:	90005ec1 	.word	0x90005ec1
90005ea4:	90005ed1 	.word	0x90005ed1
90005ea8:	90005f19 	.word	0x90005f19
90005eac:	90005ee1 	.word	0x90005ee1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
90005eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
90005eb4:	4618      	mov	r0, r3
90005eb6:	f000 fd03 	bl	900068c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
90005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005ebe:	e241      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90005ec0:	f107 0318 	add.w	r3, r7, #24
90005ec4:	4618      	mov	r0, r3
90005ec6:	f000 fa63 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90005eca:	69bb      	ldr	r3, [r7, #24]
90005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005ece:	e239      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90005ed0:	f107 030c 	add.w	r3, r7, #12
90005ed4:	4618      	mov	r0, r3
90005ed6:	f000 fba7 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
90005eda:	68fb      	ldr	r3, [r7, #12]
90005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005ede:	e231      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
90005ee0:	4b8a      	ldr	r3, [pc, #552]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
90005ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005ee4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
90005ee8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
90005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005eec:	2b00      	cmp	r3, #0
90005eee:	d102      	bne.n	90005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
90005ef0:	4b87      	ldr	r3, [pc, #540]	; (90006110 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
90005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
90005ef4:	e226      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
90005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90005efc:	d102      	bne.n	90005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
90005efe:	4b85      	ldr	r3, [pc, #532]	; (90006114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
90005f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f02:	e21f      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
90005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005f0a:	d102      	bne.n	90005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
90005f0c:	4b82      	ldr	r3, [pc, #520]	; (90006118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
90005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f10:	e218      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
90005f12:	2300      	movs	r3, #0
90005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f16:	e215      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
90005f18:	4b80      	ldr	r3, [pc, #512]	; (9000611c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
90005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f1c:	e212      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
90005f1e:	2300      	movs	r3, #0
90005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f22:	bf00      	nop
90005f24:	e20e      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
90005f26:	687b      	ldr	r3, [r7, #4]
90005f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90005f2c:	d14f      	bne.n	90005fce <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
90005f2e:	4b77      	ldr	r3, [pc, #476]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
90005f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005f32:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
90005f36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
90005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005f3a:	2b80      	cmp	r3, #128	; 0x80
90005f3c:	d01c      	beq.n	90005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
90005f3e:	2b80      	cmp	r3, #128	; 0x80
90005f40:	d804      	bhi.n	90005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
90005f42:	2b00      	cmp	r3, #0
90005f44:	d008      	beq.n	90005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
90005f46:	2b40      	cmp	r3, #64	; 0x40
90005f48:	d00e      	beq.n	90005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
90005f4a:	e03c      	b.n	90005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
90005f4c:	2bc0      	cmp	r3, #192	; 0xc0
90005f4e:	d037      	beq.n	90005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
90005f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005f54:	d018      	beq.n	90005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
90005f56:	e036      	b.n	90005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
90005f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
90005f5c:	4618      	mov	r0, r3
90005f5e:	f000 fcaf 	bl	900068c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
90005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f66:	e1ed      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90005f68:	f107 0318 	add.w	r3, r7, #24
90005f6c:	4618      	mov	r0, r3
90005f6e:	f000 fa0f 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90005f72:	69bb      	ldr	r3, [r7, #24]
90005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f76:	e1e5      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90005f78:	f107 030c 	add.w	r3, r7, #12
90005f7c:	4618      	mov	r0, r3
90005f7e:	f000 fb53 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
90005f82:	68fb      	ldr	r3, [r7, #12]
90005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005f86:	e1dd      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
90005f88:	4b60      	ldr	r3, [pc, #384]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
90005f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
90005f90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
90005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005f94:	2b00      	cmp	r3, #0
90005f96:	d102      	bne.n	90005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
90005f98:	4b5d      	ldr	r3, [pc, #372]	; (90006110 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
90005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
90005f9c:	e1d2      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
90005f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90005fa4:	d102      	bne.n	90005fac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
90005fa6:	4b5b      	ldr	r3, [pc, #364]	; (90006114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
90005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005faa:	e1cb      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
90005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005fb2:	d102      	bne.n	90005fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
90005fb4:	4b58      	ldr	r3, [pc, #352]	; (90006118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
90005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005fb8:	e1c4      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
90005fba:	2300      	movs	r3, #0
90005fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005fbe:	e1c1      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
90005fc0:	4b56      	ldr	r3, [pc, #344]	; (9000611c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
90005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005fc4:	e1be      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
90005fc6:	2300      	movs	r3, #0
90005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90005fca:	bf00      	nop
90005fcc:	e1ba      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
90005fce:	687b      	ldr	r3, [r7, #4]
90005fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90005fd4:	d153      	bne.n	9000607e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
90005fd6:	4b4d      	ldr	r3, [pc, #308]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
90005fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005fda:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
90005fde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
90005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90005fe6:	d01f      	beq.n	90006028 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
90005fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90005fec:	d805      	bhi.n	90005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x186>
90005fee:	2b00      	cmp	r3, #0
90005ff0:	d00a      	beq.n	90006008 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
90005ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90005ff6:	d00f      	beq.n	90006018 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
90005ff8:	e03d      	b.n	90006076 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
90005ffa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90005ffe:	d037      	beq.n	90006070 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
90006000:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90006004:	d018      	beq.n	90006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
90006006:	e036      	b.n	90006076 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
90006008:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000600c:	4618      	mov	r0, r3
9000600e:	f000 fc57 	bl	900068c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
90006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006016:	e195      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006018:	f107 0318 	add.w	r3, r7, #24
9000601c:	4618      	mov	r0, r3
9000601e:	f000 f9b7 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90006022:	69bb      	ldr	r3, [r7, #24]
90006024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006026:	e18d      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90006028:	f107 030c 	add.w	r3, r7, #12
9000602c:	4618      	mov	r0, r3
9000602e:	f000 fafb 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
90006032:	68fb      	ldr	r3, [r7, #12]
90006034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006036:	e185      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
90006038:	4b34      	ldr	r3, [pc, #208]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
9000603a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000603c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
90006040:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
90006042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006044:	2b00      	cmp	r3, #0
90006046:	d102      	bne.n	9000604e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
90006048:	4b31      	ldr	r3, [pc, #196]	; (90006110 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
9000604a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
9000604c:	e17a      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
9000604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006054:	d102      	bne.n	9000605c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
90006056:	4b2f      	ldr	r3, [pc, #188]	; (90006114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
90006058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000605a:	e173      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
9000605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000605e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006062:	d102      	bne.n	9000606a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
90006064:	4b2c      	ldr	r3, [pc, #176]	; (90006118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
90006066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006068:	e16c      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
9000606a:	2300      	movs	r3, #0
9000606c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000606e:	e169      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
90006070:	4b2a      	ldr	r3, [pc, #168]	; (9000611c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
90006072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006074:	e166      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
90006076:	2300      	movs	r3, #0
90006078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000607a:	bf00      	nop
9000607c:	e162      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
9000607e:	687b      	ldr	r3, [r7, #4]
90006080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90006084:	d15d      	bne.n	90006142 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
90006086:	4b21      	ldr	r3, [pc, #132]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
90006088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000608a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
9000608e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
90006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90006096:	d01f      	beq.n	900060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
90006098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000609c:	d805      	bhi.n	900060aa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
9000609e:	2b00      	cmp	r3, #0
900060a0:	d00a      	beq.n	900060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
900060a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900060a6:	d00f      	beq.n	900060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
900060a8:	e047      	b.n	9000613a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
900060aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
900060ae:	d041      	beq.n	90006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
900060b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
900060b4:	d018      	beq.n	900060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
900060b6:	e040      	b.n	9000613a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
900060b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
900060bc:	4618      	mov	r0, r3
900060be:	f000 fbff 	bl	900068c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
900060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900060c6:	e13d      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900060c8:	f107 0318 	add.w	r3, r7, #24
900060cc:	4618      	mov	r0, r3
900060ce:	f000 f95f 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
900060d2:	69bb      	ldr	r3, [r7, #24]
900060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900060d6:	e135      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900060d8:	f107 030c 	add.w	r3, r7, #12
900060dc:	4618      	mov	r0, r3
900060de:	f000 faa3 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
900060e2:	68fb      	ldr	r3, [r7, #12]
900060e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900060e6:	e12d      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
900060e8:	4b08      	ldr	r3, [pc, #32]	; (9000610c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
900060ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900060ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
900060f0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
900060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900060f4:	2b00      	cmp	r3, #0
900060f6:	d102      	bne.n	900060fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
900060f8:	4b05      	ldr	r3, [pc, #20]	; (90006110 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
900060fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
900060fc:	e122      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
900060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006104:	d10c      	bne.n	90006120 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
90006106:	4b03      	ldr	r3, [pc, #12]	; (90006114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
90006108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000610a:	e11b      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
9000610c:	58024400 	.word	0x58024400
90006110:	03d09000 	.word	0x03d09000
90006114:	003d0900 	.word	0x003d0900
90006118:	017d7840 	.word	0x017d7840
9000611c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
90006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006126:	d102      	bne.n	9000612e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
90006128:	4b89      	ldr	r3, [pc, #548]	; (90006350 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
9000612a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000612c:	e10a      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
9000612e:	2300      	movs	r3, #0
90006130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006132:	e107      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
90006134:	4b87      	ldr	r3, [pc, #540]	; (90006354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
90006136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006138:	e104      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
9000613a:	2300      	movs	r3, #0
9000613c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000613e:	bf00      	nop
90006140:	e100      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
90006142:	687b      	ldr	r3, [r7, #4]
90006144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90006148:	d153      	bne.n	900061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
9000614a:	4b83      	ldr	r3, [pc, #524]	; (90006358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
9000614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000614e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
90006152:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
90006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000615a:	d01f      	beq.n	9000619c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
9000615c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90006160:	d805      	bhi.n	9000616e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
90006162:	2b00      	cmp	r3, #0
90006164:	d00a      	beq.n	9000617c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
90006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000616a:	d00f      	beq.n	9000618c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
9000616c:	e03d      	b.n	900061ea <HAL_RCCEx_GetPeriphCLKFreq+0x376>
9000616e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90006172:	d037      	beq.n	900061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
90006174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90006178:	d018      	beq.n	900061ac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
9000617a:	e036      	b.n	900061ea <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
9000617c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90006180:	4618      	mov	r0, r3
90006182:	f000 fb9d 	bl	900068c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
90006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000618a:	e0db      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000618c:	f107 0318 	add.w	r3, r7, #24
90006190:	4618      	mov	r0, r3
90006192:	f000 f8fd 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90006196:	69bb      	ldr	r3, [r7, #24]
90006198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000619a:	e0d3      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000619c:	f107 030c 	add.w	r3, r7, #12
900061a0:	4618      	mov	r0, r3
900061a2:	f000 fa41 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
900061a6:	68fb      	ldr	r3, [r7, #12]
900061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061aa:	e0cb      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
900061ac:	4b6a      	ldr	r3, [pc, #424]	; (90006358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
900061ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900061b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
900061b4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
900061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900061b8:	2b00      	cmp	r3, #0
900061ba:	d102      	bne.n	900061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
900061bc:	4b67      	ldr	r3, [pc, #412]	; (9000635c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
900061be:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
900061c0:	e0c0      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
900061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900061c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900061c8:	d102      	bne.n	900061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
900061ca:	4b65      	ldr	r3, [pc, #404]	; (90006360 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
900061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061ce:	e0b9      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
900061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900061d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900061d6:	d102      	bne.n	900061de <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
900061d8:	4b5d      	ldr	r3, [pc, #372]	; (90006350 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
900061da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061dc:	e0b2      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
900061de:	2300      	movs	r3, #0
900061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061e2:	e0af      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
900061e4:	4b5b      	ldr	r3, [pc, #364]	; (90006354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
900061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061e8:	e0ac      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
900061ea:	2300      	movs	r3, #0
900061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900061ee:	bf00      	nop
900061f0:	e0a8      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
900061f2:	687b      	ldr	r3, [r7, #4]
900061f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
900061f8:	d13d      	bne.n	90006276 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
900061fa:	4b57      	ldr	r3, [pc, #348]	; (90006358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
900061fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900061fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90006202:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
90006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000620a:	d00c      	beq.n	90006226 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
9000620c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90006210:	d011      	beq.n	90006236 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
90006212:	2b00      	cmp	r3, #0
90006214:	d12b      	bne.n	9000626e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006216:	f107 0318 	add.w	r3, r7, #24
9000621a:	4618      	mov	r0, r3
9000621c:	f000 f8b8 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
90006220:	69bb      	ldr	r3, [r7, #24]
90006222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006224:	e08e      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90006226:	f107 030c 	add.w	r3, r7, #12
9000622a:	4618      	mov	r0, r3
9000622c:	f000 f9fc 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
90006230:	697b      	ldr	r3, [r7, #20]
90006232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006234:	e086      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
90006236:	4b48      	ldr	r3, [pc, #288]	; (90006358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
90006238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000623a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
9000623e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
90006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006242:	2b00      	cmp	r3, #0
90006244:	d102      	bne.n	9000624c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
90006246:	4b45      	ldr	r3, [pc, #276]	; (9000635c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
90006248:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
9000624a:	e07b      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
9000624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000624e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006252:	d102      	bne.n	9000625a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
90006254:	4b42      	ldr	r3, [pc, #264]	; (90006360 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
90006256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006258:	e074      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
9000625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000625c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90006260:	d102      	bne.n	90006268 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
90006262:	4b3b      	ldr	r3, [pc, #236]	; (90006350 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
90006264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006266:	e06d      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
90006268:	2300      	movs	r3, #0
9000626a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000626c:	e06a      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
9000626e:	2300      	movs	r3, #0
90006270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006272:	bf00      	nop
90006274:	e066      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
90006276:	687b      	ldr	r3, [r7, #4]
90006278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000627c:	d11f      	bne.n	900062be <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
9000627e:	4b36      	ldr	r3, [pc, #216]	; (90006358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
90006280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90006286:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
90006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000628a:	2b00      	cmp	r3, #0
9000628c:	d003      	beq.n	90006296 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
9000628e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90006292:	d008      	beq.n	900062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
90006294:	e00f      	b.n	900062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
90006296:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000629a:	4618      	mov	r0, r3
9000629c:	f000 fb10 	bl	900068c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
900062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
900062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900062a4:	e04e      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900062a6:	f107 0318 	add.w	r3, r7, #24
900062aa:	4618      	mov	r0, r3
900062ac:	f000 f870 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
900062b0:	6a3b      	ldr	r3, [r7, #32]
900062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900062b4:	e046      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
900062b6:	2300      	movs	r3, #0
900062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
900062ba:	bf00      	nop
900062bc:	e042      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
900062be:	687b      	ldr	r3, [r7, #4]
900062c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900062c4:	d13c      	bne.n	90006340 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
900062c6:	4b24      	ldr	r3, [pc, #144]	; (90006358 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
900062c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900062ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
900062ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
900062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900062d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900062d6:	d01e      	beq.n	90006316 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
900062d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900062dc:	d805      	bhi.n	900062ea <HAL_RCCEx_GetPeriphCLKFreq+0x476>
900062de:	2b00      	cmp	r3, #0
900062e0:	d00d      	beq.n	900062fe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
900062e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900062e6:	d00e      	beq.n	90006306 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
900062e8:	e026      	b.n	90006338 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
900062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900062ee:	d01d      	beq.n	9000632c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
900062f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900062f4:	d01d      	beq.n	90006332 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
900062f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900062fa:	d014      	beq.n	90006326 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
900062fc:	e01c      	b.n	90006338 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
900062fe:	f000 f831 	bl	90006364 <HAL_RCCEx_GetD3PCLK1Freq>
90006302:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
90006304:	e01e      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90006306:	f107 0318 	add.w	r3, r7, #24
9000630a:	4618      	mov	r0, r3
9000630c:	f000 f840 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
90006310:	69fb      	ldr	r3, [r7, #28]
90006312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006314:	e016      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90006316:	f107 030c 	add.w	r3, r7, #12
9000631a:	4618      	mov	r0, r3
9000631c:	f000 f984 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
90006320:	693b      	ldr	r3, [r7, #16]
90006322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006324:	e00e      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
90006326:	4b0d      	ldr	r3, [pc, #52]	; (9000635c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
90006328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000632a:	e00b      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
9000632c:	4b0c      	ldr	r3, [pc, #48]	; (90006360 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
9000632e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006330:	e008      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
90006332:	4b07      	ldr	r3, [pc, #28]	; (90006350 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
90006334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
90006336:	e005      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
90006338:	2300      	movs	r3, #0
9000633a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
9000633c:	bf00      	nop
9000633e:	e001      	b.n	90006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
90006340:	2300      	movs	r3, #0
90006342:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
90006344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
90006346:	4618      	mov	r0, r3
90006348:	3740      	adds	r7, #64	; 0x40
9000634a:	46bd      	mov	sp, r7
9000634c:	bd80      	pop	{r7, pc}
9000634e:	bf00      	nop
90006350:	017d7840 	.word	0x017d7840
90006354:	00bb8000 	.word	0x00bb8000
90006358:	58024400 	.word	0x58024400
9000635c:	03d09000 	.word	0x03d09000
90006360:	003d0900 	.word	0x003d0900

90006364 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90006364:	b580      	push	{r7, lr}
90006366:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90006368:	f7fe fdf8 	bl	90004f5c <HAL_RCC_GetHCLKFreq>
9000636c:	4601      	mov	r1, r0
9000636e:	4b06      	ldr	r3, [pc, #24]	; (90006388 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90006370:	6a1b      	ldr	r3, [r3, #32]
90006372:	091b      	lsrs	r3, r3, #4
90006374:	f003 0307 	and.w	r3, r3, #7
90006378:	4a04      	ldr	r2, [pc, #16]	; (9000638c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
9000637a:	5cd3      	ldrb	r3, [r2, r3]
9000637c:	f003 031f 	and.w	r3, r3, #31
90006380:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90006384:	4618      	mov	r0, r3
90006386:	bd80      	pop	{r7, pc}
90006388:	58024400 	.word	0x58024400
9000638c:	9000f004 	.word	0x9000f004

90006390 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
90006390:	b480      	push	{r7}
90006392:	b089      	sub	sp, #36	; 0x24
90006394:	af00      	add	r7, sp, #0
90006396:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90006398:	4b9d      	ldr	r3, [pc, #628]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
9000639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000639c:	f003 0303 	and.w	r3, r3, #3
900063a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
900063a2:	4b9b      	ldr	r3, [pc, #620]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900063a6:	0b1b      	lsrs	r3, r3, #12
900063a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900063ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
900063ae:	4b98      	ldr	r3, [pc, #608]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900063b2:	091b      	lsrs	r3, r3, #4
900063b4:	f003 0301 	and.w	r3, r3, #1
900063b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
900063ba:	4b95      	ldr	r3, [pc, #596]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900063be:	08db      	lsrs	r3, r3, #3
900063c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
900063c4:	693a      	ldr	r2, [r7, #16]
900063c6:	fb02 f303 	mul.w	r3, r2, r3
900063ca:	ee07 3a90 	vmov	s15, r3
900063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
900063d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
900063d6:	697b      	ldr	r3, [r7, #20]
900063d8:	2b00      	cmp	r3, #0
900063da:	f000 810a 	beq.w	900065f2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
900063de:	69bb      	ldr	r3, [r7, #24]
900063e0:	2b01      	cmp	r3, #1
900063e2:	d05a      	beq.n	9000649a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
900063e4:	2b01      	cmp	r3, #1
900063e6:	d302      	bcc.n	900063ee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
900063e8:	2b02      	cmp	r3, #2
900063ea:	d078      	beq.n	900064de <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
900063ec:	e099      	b.n	90006522 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900063ee:	4b88      	ldr	r3, [pc, #544]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900063f0:	681b      	ldr	r3, [r3, #0]
900063f2:	f003 0320 	and.w	r3, r3, #32
900063f6:	2b00      	cmp	r3, #0
900063f8:	d02d      	beq.n	90006456 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900063fa:	4b85      	ldr	r3, [pc, #532]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900063fc:	681b      	ldr	r3, [r3, #0]
900063fe:	08db      	lsrs	r3, r3, #3
90006400:	f003 0303 	and.w	r3, r3, #3
90006404:	4a83      	ldr	r2, [pc, #524]	; (90006614 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
90006406:	fa22 f303 	lsr.w	r3, r2, r3
9000640a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000640c:	68bb      	ldr	r3, [r7, #8]
9000640e:	ee07 3a90 	vmov	s15, r3
90006412:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006416:	697b      	ldr	r3, [r7, #20]
90006418:	ee07 3a90 	vmov	s15, r3
9000641c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006424:	4b7a      	ldr	r3, [pc, #488]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
90006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000642c:	ee07 3a90 	vmov	s15, r3
90006430:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006434:	ed97 6a03 	vldr	s12, [r7, #12]
90006438:	eddf 5a77 	vldr	s11, [pc, #476]	; 90006618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
9000643c:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006440:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006448:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000644c:	ee67 7a27 	vmul.f32	s15, s14, s15
90006450:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
90006454:	e087      	b.n	90006566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90006456:	697b      	ldr	r3, [r7, #20]
90006458:	ee07 3a90 	vmov	s15, r3
9000645c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006460:	eddf 6a6e 	vldr	s13, [pc, #440]	; 9000661c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
90006464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006468:	4b69      	ldr	r3, [pc, #420]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
9000646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000646c:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006470:	ee07 3a90 	vmov	s15, r3
90006474:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006478:	ed97 6a03 	vldr	s12, [r7, #12]
9000647c:	eddf 5a66 	vldr	s11, [pc, #408]	; 90006618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
90006480:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006484:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000648c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006490:	ee67 7a27 	vmul.f32	s15, s14, s15
90006494:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006498:	e065      	b.n	90006566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000649a:	697b      	ldr	r3, [r7, #20]
9000649c:	ee07 3a90 	vmov	s15, r3
900064a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
900064a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 90006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
900064a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900064ac:	4b58      	ldr	r3, [pc, #352]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900064b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
900064b4:	ee07 3a90 	vmov	s15, r3
900064b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900064bc:	ed97 6a03 	vldr	s12, [r7, #12]
900064c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 90006618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
900064c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
900064c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
900064cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900064d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
900064d4:	ee67 7a27 	vmul.f32	s15, s14, s15
900064d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900064dc:	e043      	b.n	90006566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
900064de:	697b      	ldr	r3, [r7, #20]
900064e0:	ee07 3a90 	vmov	s15, r3
900064e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
900064e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 90006624 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
900064ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900064f0:	4b47      	ldr	r3, [pc, #284]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
900064f8:	ee07 3a90 	vmov	s15, r3
900064fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006500:	ed97 6a03 	vldr	s12, [r7, #12]
90006504:	eddf 5a44 	vldr	s11, [pc, #272]	; 90006618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
90006508:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000650c:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006514:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006518:	ee67 7a27 	vmul.f32	s15, s14, s15
9000651c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006520:	e021      	b.n	90006566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90006522:	697b      	ldr	r3, [r7, #20]
90006524:	ee07 3a90 	vmov	s15, r3
90006528:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000652c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 90006620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
90006530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006534:	4b36      	ldr	r3, [pc, #216]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
90006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006538:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000653c:	ee07 3a90 	vmov	s15, r3
90006540:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006544:	ed97 6a03 	vldr	s12, [r7, #12]
90006548:	eddf 5a33 	vldr	s11, [pc, #204]	; 90006618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
9000654c:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006550:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006558:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000655c:	ee67 7a27 	vmul.f32	s15, s14, s15
90006560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006564:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
90006566:	4b2a      	ldr	r3, [pc, #168]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
90006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000656a:	0a5b      	lsrs	r3, r3, #9
9000656c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006570:	ee07 3a90 	vmov	s15, r3
90006574:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000657c:	ee37 7a87 	vadd.f32	s14, s15, s14
90006580:	edd7 6a07 	vldr	s13, [r7, #28]
90006584:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000658c:	ee17 2a90 	vmov	r2, s15
90006590:	687b      	ldr	r3, [r7, #4]
90006592:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
90006594:	4b1e      	ldr	r3, [pc, #120]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
90006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006598:	0c1b      	lsrs	r3, r3, #16
9000659a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000659e:	ee07 3a90 	vmov	s15, r3
900065a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900065a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900065aa:	ee37 7a87 	vadd.f32	s14, s15, s14
900065ae:	edd7 6a07 	vldr	s13, [r7, #28]
900065b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
900065b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900065ba:	ee17 2a90 	vmov	r2, s15
900065be:	687b      	ldr	r3, [r7, #4]
900065c0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
900065c2:	4b13      	ldr	r3, [pc, #76]	; (90006610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
900065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900065c6:	0e1b      	lsrs	r3, r3, #24
900065c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900065cc:	ee07 3a90 	vmov	s15, r3
900065d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
900065d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900065d8:	ee37 7a87 	vadd.f32	s14, s15, s14
900065dc:	edd7 6a07 	vldr	s13, [r7, #28]
900065e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
900065e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900065e8:	ee17 2a90 	vmov	r2, s15
900065ec:	687b      	ldr	r3, [r7, #4]
900065ee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900065f0:	e008      	b.n	90006604 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900065f2:	687b      	ldr	r3, [r7, #4]
900065f4:	2200      	movs	r2, #0
900065f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900065f8:	687b      	ldr	r3, [r7, #4]
900065fa:	2200      	movs	r2, #0
900065fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
900065fe:	687b      	ldr	r3, [r7, #4]
90006600:	2200      	movs	r2, #0
90006602:	609a      	str	r2, [r3, #8]
}
90006604:	bf00      	nop
90006606:	3724      	adds	r7, #36	; 0x24
90006608:	46bd      	mov	sp, r7
9000660a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000660e:	4770      	bx	lr
90006610:	58024400 	.word	0x58024400
90006614:	03d09000 	.word	0x03d09000
90006618:	46000000 	.word	0x46000000
9000661c:	4c742400 	.word	0x4c742400
90006620:	4a742400 	.word	0x4a742400
90006624:	4bbebc20 	.word	0x4bbebc20

90006628 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
90006628:	b480      	push	{r7}
9000662a:	b089      	sub	sp, #36	; 0x24
9000662c:	af00      	add	r7, sp, #0
9000662e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90006630:	4b9d      	ldr	r3, [pc, #628]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006634:	f003 0303 	and.w	r3, r3, #3
90006638:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
9000663a:	4b9b      	ldr	r3, [pc, #620]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
9000663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000663e:	0d1b      	lsrs	r3, r3, #20
90006640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90006644:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90006646:	4b98      	ldr	r3, [pc, #608]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000664a:	0a1b      	lsrs	r3, r3, #8
9000664c:	f003 0301 	and.w	r3, r3, #1
90006650:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
90006652:	4b95      	ldr	r3, [pc, #596]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90006656:	08db      	lsrs	r3, r3, #3
90006658:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000665c:	693a      	ldr	r2, [r7, #16]
9000665e:	fb02 f303 	mul.w	r3, r2, r3
90006662:	ee07 3a90 	vmov	s15, r3
90006666:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000666a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
9000666e:	697b      	ldr	r3, [r7, #20]
90006670:	2b00      	cmp	r3, #0
90006672:	f000 810a 	beq.w	9000688a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
90006676:	69bb      	ldr	r3, [r7, #24]
90006678:	2b01      	cmp	r3, #1
9000667a:	d05a      	beq.n	90006732 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
9000667c:	2b01      	cmp	r3, #1
9000667e:	d302      	bcc.n	90006686 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
90006680:	2b02      	cmp	r3, #2
90006682:	d078      	beq.n	90006776 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
90006684:	e099      	b.n	900067ba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90006686:	4b88      	ldr	r3, [pc, #544]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006688:	681b      	ldr	r3, [r3, #0]
9000668a:	f003 0320 	and.w	r3, r3, #32
9000668e:	2b00      	cmp	r3, #0
90006690:	d02d      	beq.n	900066ee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90006692:	4b85      	ldr	r3, [pc, #532]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006694:	681b      	ldr	r3, [r3, #0]
90006696:	08db      	lsrs	r3, r3, #3
90006698:	f003 0303 	and.w	r3, r3, #3
9000669c:	4a83      	ldr	r2, [pc, #524]	; (900068ac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
9000669e:	fa22 f303 	lsr.w	r3, r2, r3
900066a2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
900066a4:	68bb      	ldr	r3, [r7, #8]
900066a6:	ee07 3a90 	vmov	s15, r3
900066aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
900066ae:	697b      	ldr	r3, [r7, #20]
900066b0:	ee07 3a90 	vmov	s15, r3
900066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
900066b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900066bc:	4b7a      	ldr	r3, [pc, #488]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
900066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900066c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
900066c4:	ee07 3a90 	vmov	s15, r3
900066c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900066cc:	ed97 6a03 	vldr	s12, [r7, #12]
900066d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 900068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
900066d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
900066d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
900066dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900066e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
900066e4:	ee67 7a27 	vmul.f32	s15, s14, s15
900066e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
900066ec:	e087      	b.n	900067fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
900066ee:	697b      	ldr	r3, [r7, #20]
900066f0:	ee07 3a90 	vmov	s15, r3
900066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
900066f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 900068b4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
900066fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006700:	4b69      	ldr	r3, [pc, #420]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006704:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006708:	ee07 3a90 	vmov	s15, r3
9000670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006710:	ed97 6a03 	vldr	s12, [r7, #12]
90006714:	eddf 5a66 	vldr	s11, [pc, #408]	; 900068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
90006718:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000671c:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006724:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006728:	ee67 7a27 	vmul.f32	s15, s14, s15
9000672c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006730:	e065      	b.n	900067fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90006732:	697b      	ldr	r3, [r7, #20]
90006734:	ee07 3a90 	vmov	s15, r3
90006738:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000673c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 900068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
90006740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006744:	4b58      	ldr	r3, [pc, #352]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006748:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000674c:	ee07 3a90 	vmov	s15, r3
90006750:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006754:	ed97 6a03 	vldr	s12, [r7, #12]
90006758:	eddf 5a55 	vldr	s11, [pc, #340]	; 900068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
9000675c:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006760:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006768:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000676c:	ee67 7a27 	vmul.f32	s15, s14, s15
90006770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006774:	e043      	b.n	900067fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90006776:	697b      	ldr	r3, [r7, #20]
90006778:	ee07 3a90 	vmov	s15, r3
9000677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006780:	eddf 6a4e 	vldr	s13, [pc, #312]	; 900068bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
90006784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006788:	4b47      	ldr	r3, [pc, #284]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
9000678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006790:	ee07 3a90 	vmov	s15, r3
90006794:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006798:	ed97 6a03 	vldr	s12, [r7, #12]
9000679c:	eddf 5a44 	vldr	s11, [pc, #272]	; 900068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
900067a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
900067a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
900067a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900067ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
900067b0:	ee67 7a27 	vmul.f32	s15, s14, s15
900067b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900067b8:	e021      	b.n	900067fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
900067ba:	697b      	ldr	r3, [r7, #20]
900067bc:	ee07 3a90 	vmov	s15, r3
900067c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
900067c4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 900068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
900067c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900067cc:	4b36      	ldr	r3, [pc, #216]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
900067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
900067d4:	ee07 3a90 	vmov	s15, r3
900067d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900067dc:	ed97 6a03 	vldr	s12, [r7, #12]
900067e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 900068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
900067e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
900067e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
900067ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900067f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
900067f4:	ee67 7a27 	vmul.f32	s15, s14, s15
900067f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900067fc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
900067fe:	4b2a      	ldr	r3, [pc, #168]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
90006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006802:	0a5b      	lsrs	r3, r3, #9
90006804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006808:	ee07 3a90 	vmov	s15, r3
9000680c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006814:	ee37 7a87 	vadd.f32	s14, s15, s14
90006818:	edd7 6a07 	vldr	s13, [r7, #28]
9000681c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006824:	ee17 2a90 	vmov	r2, s15
90006828:	687b      	ldr	r3, [r7, #4]
9000682a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
9000682c:	4b1e      	ldr	r3, [pc, #120]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
9000682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006830:	0c1b      	lsrs	r3, r3, #16
90006832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006836:	ee07 3a90 	vmov	s15, r3
9000683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000683e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006842:	ee37 7a87 	vadd.f32	s14, s15, s14
90006846:	edd7 6a07 	vldr	s13, [r7, #28]
9000684a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000684e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006852:	ee17 2a90 	vmov	r2, s15
90006856:	687b      	ldr	r3, [r7, #4]
90006858:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
9000685a:	4b13      	ldr	r3, [pc, #76]	; (900068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
9000685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000685e:	0e1b      	lsrs	r3, r3, #24
90006860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006864:	ee07 3a90 	vmov	s15, r3
90006868:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000686c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006870:	ee37 7a87 	vadd.f32	s14, s15, s14
90006874:	edd7 6a07 	vldr	s13, [r7, #28]
90006878:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000687c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006880:	ee17 2a90 	vmov	r2, s15
90006884:	687b      	ldr	r3, [r7, #4]
90006886:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90006888:	e008      	b.n	9000689c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
9000688a:	687b      	ldr	r3, [r7, #4]
9000688c:	2200      	movs	r2, #0
9000688e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90006890:	687b      	ldr	r3, [r7, #4]
90006892:	2200      	movs	r2, #0
90006894:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90006896:	687b      	ldr	r3, [r7, #4]
90006898:	2200      	movs	r2, #0
9000689a:	609a      	str	r2, [r3, #8]
}
9000689c:	bf00      	nop
9000689e:	3724      	adds	r7, #36	; 0x24
900068a0:	46bd      	mov	sp, r7
900068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900068a6:	4770      	bx	lr
900068a8:	58024400 	.word	0x58024400
900068ac:	03d09000 	.word	0x03d09000
900068b0:	46000000 	.word	0x46000000
900068b4:	4c742400 	.word	0x4c742400
900068b8:	4a742400 	.word	0x4a742400
900068bc:	4bbebc20 	.word	0x4bbebc20

900068c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
900068c0:	b480      	push	{r7}
900068c2:	b089      	sub	sp, #36	; 0x24
900068c4:	af00      	add	r7, sp, #0
900068c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900068c8:	4b9d      	ldr	r3, [pc, #628]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
900068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900068cc:	f003 0303 	and.w	r3, r3, #3
900068d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
900068d2:	4b9b      	ldr	r3, [pc, #620]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
900068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900068d6:	091b      	lsrs	r3, r3, #4
900068d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900068dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
900068de:	4b98      	ldr	r3, [pc, #608]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
900068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900068e2:	f003 0301 	and.w	r3, r3, #1
900068e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
900068e8:	4b95      	ldr	r3, [pc, #596]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
900068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900068ec:	08db      	lsrs	r3, r3, #3
900068ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
900068f2:	693a      	ldr	r2, [r7, #16]
900068f4:	fb02 f303 	mul.w	r3, r2, r3
900068f8:	ee07 3a90 	vmov	s15, r3
900068fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006900:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
90006904:	697b      	ldr	r3, [r7, #20]
90006906:	2b00      	cmp	r3, #0
90006908:	f000 810a 	beq.w	90006b20 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
9000690c:	69bb      	ldr	r3, [r7, #24]
9000690e:	2b01      	cmp	r3, #1
90006910:	d05a      	beq.n	900069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
90006912:	2b01      	cmp	r3, #1
90006914:	d302      	bcc.n	9000691c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
90006916:	2b02      	cmp	r3, #2
90006918:	d078      	beq.n	90006a0c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
9000691a:	e099      	b.n	90006a50 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000691c:	4b88      	ldr	r3, [pc, #544]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
9000691e:	681b      	ldr	r3, [r3, #0]
90006920:	f003 0320 	and.w	r3, r3, #32
90006924:	2b00      	cmp	r3, #0
90006926:	d02d      	beq.n	90006984 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90006928:	4b85      	ldr	r3, [pc, #532]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
9000692a:	681b      	ldr	r3, [r3, #0]
9000692c:	08db      	lsrs	r3, r3, #3
9000692e:	f003 0303 	and.w	r3, r3, #3
90006932:	4a84      	ldr	r2, [pc, #528]	; (90006b44 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
90006934:	fa22 f303 	lsr.w	r3, r2, r3
90006938:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
9000693a:	68bb      	ldr	r3, [r7, #8]
9000693c:	ee07 3a90 	vmov	s15, r3
90006940:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006944:	697b      	ldr	r3, [r7, #20]
90006946:	ee07 3a90 	vmov	s15, r3
9000694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000694e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006952:	4b7b      	ldr	r3, [pc, #492]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
90006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006956:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000695a:	ee07 3a90 	vmov	s15, r3
9000695e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006962:	ed97 6a03 	vldr	s12, [r7, #12]
90006966:	eddf 5a78 	vldr	s11, [pc, #480]	; 90006b48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
9000696a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006976:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000697a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000697e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
90006982:	e087      	b.n	90006a94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90006984:	697b      	ldr	r3, [r7, #20]
90006986:	ee07 3a90 	vmov	s15, r3
9000698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000698e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 90006b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
90006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006996:	4b6a      	ldr	r3, [pc, #424]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
90006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000699e:	ee07 3a90 	vmov	s15, r3
900069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900069a6:	ed97 6a03 	vldr	s12, [r7, #12]
900069aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 90006b48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
900069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
900069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900069b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
900069be:	ee67 7a27 	vmul.f32	s15, s14, s15
900069c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900069c6:	e065      	b.n	90006a94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900069c8:	697b      	ldr	r3, [r7, #20]
900069ca:	ee07 3a90 	vmov	s15, r3
900069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
900069d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 90006b50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
900069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900069da:	4b59      	ldr	r3, [pc, #356]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
900069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
900069e2:	ee07 3a90 	vmov	s15, r3
900069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900069ea:	ed97 6a03 	vldr	s12, [r7, #12]
900069ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 90006b48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
900069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900069fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006a0a:	e043      	b.n	90006a94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90006a0c:	697b      	ldr	r3, [r7, #20]
90006a0e:	ee07 3a90 	vmov	s15, r3
90006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006a16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 90006b54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
90006a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006a1e:	4b48      	ldr	r3, [pc, #288]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
90006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006a26:	ee07 3a90 	vmov	s15, r3
90006a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006a2e:	ed97 6a03 	vldr	s12, [r7, #12]
90006a32:	eddf 5a45 	vldr	s11, [pc, #276]	; 90006b48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
90006a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a46:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006a4e:	e021      	b.n	90006a94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90006a50:	697b      	ldr	r3, [r7, #20]
90006a52:	ee07 3a90 	vmov	s15, r3
90006a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 90006b50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
90006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006a62:	4b37      	ldr	r3, [pc, #220]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
90006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006a6a:	ee07 3a90 	vmov	s15, r3
90006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006a72:	ed97 6a03 	vldr	s12, [r7, #12]
90006a76:	eddf 5a34 	vldr	s11, [pc, #208]	; 90006b48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
90006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90006a92:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
90006a94:	4b2a      	ldr	r3, [pc, #168]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
90006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006a98:	0a5b      	lsrs	r3, r3, #9
90006a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006a9e:	ee07 3a90 	vmov	s15, r3
90006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
90006aae:	edd7 6a07 	vldr	s13, [r7, #28]
90006ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006aba:	ee17 2a90 	vmov	r2, s15
90006abe:	687b      	ldr	r3, [r7, #4]
90006ac0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
90006ac2:	4b1f      	ldr	r3, [pc, #124]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
90006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006ac6:	0c1b      	lsrs	r3, r3, #16
90006ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006acc:	ee07 3a90 	vmov	s15, r3
90006ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
90006adc:	edd7 6a07 	vldr	s13, [r7, #28]
90006ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006ae8:	ee17 2a90 	vmov	r2, s15
90006aec:	687b      	ldr	r3, [r7, #4]
90006aee:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
90006af0:	4b13      	ldr	r3, [pc, #76]	; (90006b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
90006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006af4:	0e1b      	lsrs	r3, r3, #24
90006af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006afa:	ee07 3a90 	vmov	s15, r3
90006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006b06:	ee37 7a87 	vadd.f32	s14, s15, s14
90006b0a:	edd7 6a07 	vldr	s13, [r7, #28]
90006b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006b16:	ee17 2a90 	vmov	r2, s15
90006b1a:	687b      	ldr	r3, [r7, #4]
90006b1c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
90006b1e:	e008      	b.n	90006b32 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
90006b20:	687b      	ldr	r3, [r7, #4]
90006b22:	2200      	movs	r2, #0
90006b24:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
90006b26:	687b      	ldr	r3, [r7, #4]
90006b28:	2200      	movs	r2, #0
90006b2a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
90006b2c:	687b      	ldr	r3, [r7, #4]
90006b2e:	2200      	movs	r2, #0
90006b30:	609a      	str	r2, [r3, #8]
}
90006b32:	bf00      	nop
90006b34:	3724      	adds	r7, #36	; 0x24
90006b36:	46bd      	mov	sp, r7
90006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b3c:	4770      	bx	lr
90006b3e:	bf00      	nop
90006b40:	58024400 	.word	0x58024400
90006b44:	03d09000 	.word	0x03d09000
90006b48:	46000000 	.word	0x46000000
90006b4c:	4c742400 	.word	0x4c742400
90006b50:	4a742400 	.word	0x4a742400
90006b54:	4bbebc20 	.word	0x4bbebc20

90006b58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90006b58:	b580      	push	{r7, lr}
90006b5a:	b084      	sub	sp, #16
90006b5c:	af00      	add	r7, sp, #0
90006b5e:	6078      	str	r0, [r7, #4]
90006b60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90006b62:	2300      	movs	r3, #0
90006b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90006b66:	4b53      	ldr	r3, [pc, #332]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006b6a:	f003 0303 	and.w	r3, r3, #3
90006b6e:	2b03      	cmp	r3, #3
90006b70:	d101      	bne.n	90006b76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90006b72:	2301      	movs	r3, #1
90006b74:	e099      	b.n	90006caa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90006b76:	4b4f      	ldr	r3, [pc, #316]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006b78:	681b      	ldr	r3, [r3, #0]
90006b7a:	4a4e      	ldr	r2, [pc, #312]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006b7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90006b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006b82:	f7fb fb3d 	bl	90002200 <HAL_GetTick>
90006b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90006b88:	e008      	b.n	90006b9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
90006b8a:	f7fb fb39 	bl	90002200 <HAL_GetTick>
90006b8e:	4602      	mov	r2, r0
90006b90:	68bb      	ldr	r3, [r7, #8]
90006b92:	1ad3      	subs	r3, r2, r3
90006b94:	2b02      	cmp	r3, #2
90006b96:	d901      	bls.n	90006b9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90006b98:	2303      	movs	r3, #3
90006b9a:	e086      	b.n	90006caa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90006b9c:	4b45      	ldr	r3, [pc, #276]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006b9e:	681b      	ldr	r3, [r3, #0]
90006ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90006ba4:	2b00      	cmp	r3, #0
90006ba6:	d1f0      	bne.n	90006b8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90006ba8:	4b42      	ldr	r3, [pc, #264]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006bac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90006bb0:	687b      	ldr	r3, [r7, #4]
90006bb2:	681b      	ldr	r3, [r3, #0]
90006bb4:	031b      	lsls	r3, r3, #12
90006bb6:	493f      	ldr	r1, [pc, #252]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006bb8:	4313      	orrs	r3, r2
90006bba:	628b      	str	r3, [r1, #40]	; 0x28
90006bbc:	687b      	ldr	r3, [r7, #4]
90006bbe:	685b      	ldr	r3, [r3, #4]
90006bc0:	3b01      	subs	r3, #1
90006bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
90006bc6:	687b      	ldr	r3, [r7, #4]
90006bc8:	689b      	ldr	r3, [r3, #8]
90006bca:	3b01      	subs	r3, #1
90006bcc:	025b      	lsls	r3, r3, #9
90006bce:	b29b      	uxth	r3, r3
90006bd0:	431a      	orrs	r2, r3
90006bd2:	687b      	ldr	r3, [r7, #4]
90006bd4:	68db      	ldr	r3, [r3, #12]
90006bd6:	3b01      	subs	r3, #1
90006bd8:	041b      	lsls	r3, r3, #16
90006bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90006bde:	431a      	orrs	r2, r3
90006be0:	687b      	ldr	r3, [r7, #4]
90006be2:	691b      	ldr	r3, [r3, #16]
90006be4:	3b01      	subs	r3, #1
90006be6:	061b      	lsls	r3, r3, #24
90006be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90006bec:	4931      	ldr	r1, [pc, #196]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006bee:	4313      	orrs	r3, r2
90006bf0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90006bf2:	4b30      	ldr	r3, [pc, #192]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006bf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
90006bfa:	687b      	ldr	r3, [r7, #4]
90006bfc:	695b      	ldr	r3, [r3, #20]
90006bfe:	492d      	ldr	r1, [pc, #180]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c00:	4313      	orrs	r3, r2
90006c02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90006c04:	4b2b      	ldr	r3, [pc, #172]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c08:	f023 0220 	bic.w	r2, r3, #32
90006c0c:	687b      	ldr	r3, [r7, #4]
90006c0e:	699b      	ldr	r3, [r3, #24]
90006c10:	4928      	ldr	r1, [pc, #160]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c12:	4313      	orrs	r3, r2
90006c14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90006c16:	4b27      	ldr	r3, [pc, #156]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c1a:	4a26      	ldr	r2, [pc, #152]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c1c:	f023 0310 	bic.w	r3, r3, #16
90006c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90006c22:	4b24      	ldr	r3, [pc, #144]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90006c26:	4b24      	ldr	r3, [pc, #144]	; (90006cb8 <RCCEx_PLL2_Config+0x160>)
90006c28:	4013      	ands	r3, r2
90006c2a:	687a      	ldr	r2, [r7, #4]
90006c2c:	69d2      	ldr	r2, [r2, #28]
90006c2e:	00d2      	lsls	r2, r2, #3
90006c30:	4920      	ldr	r1, [pc, #128]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c32:	4313      	orrs	r3, r2
90006c34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90006c36:	4b1f      	ldr	r3, [pc, #124]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c3a:	4a1e      	ldr	r2, [pc, #120]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c3c:	f043 0310 	orr.w	r3, r3, #16
90006c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
90006c42:	683b      	ldr	r3, [r7, #0]
90006c44:	2b00      	cmp	r3, #0
90006c46:	d106      	bne.n	90006c56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90006c48:	4b1a      	ldr	r3, [pc, #104]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c4c:	4a19      	ldr	r2, [pc, #100]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90006c52:	62d3      	str	r3, [r2, #44]	; 0x2c
90006c54:	e00f      	b.n	90006c76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
90006c56:	683b      	ldr	r3, [r7, #0]
90006c58:	2b01      	cmp	r3, #1
90006c5a:	d106      	bne.n	90006c6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90006c5c:	4b15      	ldr	r3, [pc, #84]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c60:	4a14      	ldr	r2, [pc, #80]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90006c66:	62d3      	str	r3, [r2, #44]	; 0x2c
90006c68:	e005      	b.n	90006c76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90006c6a:	4b12      	ldr	r3, [pc, #72]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c6e:	4a11      	ldr	r2, [pc, #68]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90006c74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
90006c76:	4b0f      	ldr	r3, [pc, #60]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c78:	681b      	ldr	r3, [r3, #0]
90006c7a:	4a0e      	ldr	r2, [pc, #56]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90006c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006c82:	f7fb fabd 	bl	90002200 <HAL_GetTick>
90006c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90006c88:	e008      	b.n	90006c9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
90006c8a:	f7fb fab9 	bl	90002200 <HAL_GetTick>
90006c8e:	4602      	mov	r2, r0
90006c90:	68bb      	ldr	r3, [r7, #8]
90006c92:	1ad3      	subs	r3, r2, r3
90006c94:	2b02      	cmp	r3, #2
90006c96:	d901      	bls.n	90006c9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90006c98:	2303      	movs	r3, #3
90006c9a:	e006      	b.n	90006caa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90006c9c:	4b05      	ldr	r3, [pc, #20]	; (90006cb4 <RCCEx_PLL2_Config+0x15c>)
90006c9e:	681b      	ldr	r3, [r3, #0]
90006ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90006ca4:	2b00      	cmp	r3, #0
90006ca6:	d0f0      	beq.n	90006c8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
90006caa:	4618      	mov	r0, r3
90006cac:	3710      	adds	r7, #16
90006cae:	46bd      	mov	sp, r7
90006cb0:	bd80      	pop	{r7, pc}
90006cb2:	bf00      	nop
90006cb4:	58024400 	.word	0x58024400
90006cb8:	ffff0007 	.word	0xffff0007

90006cbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90006cbc:	b580      	push	{r7, lr}
90006cbe:	b084      	sub	sp, #16
90006cc0:	af00      	add	r7, sp, #0
90006cc2:	6078      	str	r0, [r7, #4]
90006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90006cc6:	2300      	movs	r3, #0
90006cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90006cca:	4b53      	ldr	r3, [pc, #332]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006cce:	f003 0303 	and.w	r3, r3, #3
90006cd2:	2b03      	cmp	r3, #3
90006cd4:	d101      	bne.n	90006cda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90006cd6:	2301      	movs	r3, #1
90006cd8:	e099      	b.n	90006e0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90006cda:	4b4f      	ldr	r3, [pc, #316]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006cdc:	681b      	ldr	r3, [r3, #0]
90006cde:	4a4e      	ldr	r2, [pc, #312]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90006ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006ce6:	f7fb fa8b 	bl	90002200 <HAL_GetTick>
90006cea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90006cec:	e008      	b.n	90006d00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
90006cee:	f7fb fa87 	bl	90002200 <HAL_GetTick>
90006cf2:	4602      	mov	r2, r0
90006cf4:	68bb      	ldr	r3, [r7, #8]
90006cf6:	1ad3      	subs	r3, r2, r3
90006cf8:	2b02      	cmp	r3, #2
90006cfa:	d901      	bls.n	90006d00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90006cfc:	2303      	movs	r3, #3
90006cfe:	e086      	b.n	90006e0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90006d00:	4b45      	ldr	r3, [pc, #276]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d02:	681b      	ldr	r3, [r3, #0]
90006d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006d08:	2b00      	cmp	r3, #0
90006d0a:	d1f0      	bne.n	90006cee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90006d0c:	4b42      	ldr	r3, [pc, #264]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006d10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
90006d14:	687b      	ldr	r3, [r7, #4]
90006d16:	681b      	ldr	r3, [r3, #0]
90006d18:	051b      	lsls	r3, r3, #20
90006d1a:	493f      	ldr	r1, [pc, #252]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d1c:	4313      	orrs	r3, r2
90006d1e:	628b      	str	r3, [r1, #40]	; 0x28
90006d20:	687b      	ldr	r3, [r7, #4]
90006d22:	685b      	ldr	r3, [r3, #4]
90006d24:	3b01      	subs	r3, #1
90006d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
90006d2a:	687b      	ldr	r3, [r7, #4]
90006d2c:	689b      	ldr	r3, [r3, #8]
90006d2e:	3b01      	subs	r3, #1
90006d30:	025b      	lsls	r3, r3, #9
90006d32:	b29b      	uxth	r3, r3
90006d34:	431a      	orrs	r2, r3
90006d36:	687b      	ldr	r3, [r7, #4]
90006d38:	68db      	ldr	r3, [r3, #12]
90006d3a:	3b01      	subs	r3, #1
90006d3c:	041b      	lsls	r3, r3, #16
90006d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90006d42:	431a      	orrs	r2, r3
90006d44:	687b      	ldr	r3, [r7, #4]
90006d46:	691b      	ldr	r3, [r3, #16]
90006d48:	3b01      	subs	r3, #1
90006d4a:	061b      	lsls	r3, r3, #24
90006d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90006d50:	4931      	ldr	r1, [pc, #196]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d52:	4313      	orrs	r3, r2
90006d54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90006d56:	4b30      	ldr	r3, [pc, #192]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006d5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90006d5e:	687b      	ldr	r3, [r7, #4]
90006d60:	695b      	ldr	r3, [r3, #20]
90006d62:	492d      	ldr	r1, [pc, #180]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d64:	4313      	orrs	r3, r2
90006d66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90006d68:	4b2b      	ldr	r3, [pc, #172]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006d6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
90006d70:	687b      	ldr	r3, [r7, #4]
90006d72:	699b      	ldr	r3, [r3, #24]
90006d74:	4928      	ldr	r1, [pc, #160]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d76:	4313      	orrs	r3, r2
90006d78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
90006d7a:	4b27      	ldr	r3, [pc, #156]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006d7e:	4a26      	ldr	r2, [pc, #152]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90006d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90006d86:	4b24      	ldr	r3, [pc, #144]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90006d8a:	4b24      	ldr	r3, [pc, #144]	; (90006e1c <RCCEx_PLL3_Config+0x160>)
90006d8c:	4013      	ands	r3, r2
90006d8e:	687a      	ldr	r2, [r7, #4]
90006d90:	69d2      	ldr	r2, [r2, #28]
90006d92:	00d2      	lsls	r2, r2, #3
90006d94:	4920      	ldr	r1, [pc, #128]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d96:	4313      	orrs	r3, r2
90006d98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90006d9a:	4b1f      	ldr	r3, [pc, #124]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006d9e:	4a1e      	ldr	r2, [pc, #120]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90006da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
90006da6:	683b      	ldr	r3, [r7, #0]
90006da8:	2b00      	cmp	r3, #0
90006daa:	d106      	bne.n	90006dba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90006dac:	4b1a      	ldr	r3, [pc, #104]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006db0:	4a19      	ldr	r2, [pc, #100]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90006db6:	62d3      	str	r3, [r2, #44]	; 0x2c
90006db8:	e00f      	b.n	90006dda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
90006dba:	683b      	ldr	r3, [r7, #0]
90006dbc:	2b01      	cmp	r3, #1
90006dbe:	d106      	bne.n	90006dce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90006dc0:	4b15      	ldr	r3, [pc, #84]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006dc4:	4a14      	ldr	r2, [pc, #80]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90006dca:	62d3      	str	r3, [r2, #44]	; 0x2c
90006dcc:	e005      	b.n	90006dda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90006dce:	4b12      	ldr	r3, [pc, #72]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006dd2:	4a11      	ldr	r2, [pc, #68]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90006dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90006dda:	4b0f      	ldr	r3, [pc, #60]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006ddc:	681b      	ldr	r3, [r3, #0]
90006dde:	4a0e      	ldr	r2, [pc, #56]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90006de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006de6:	f7fb fa0b 	bl	90002200 <HAL_GetTick>
90006dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90006dec:	e008      	b.n	90006e00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
90006dee:	f7fb fa07 	bl	90002200 <HAL_GetTick>
90006df2:	4602      	mov	r2, r0
90006df4:	68bb      	ldr	r3, [r7, #8]
90006df6:	1ad3      	subs	r3, r2, r3
90006df8:	2b02      	cmp	r3, #2
90006dfa:	d901      	bls.n	90006e00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90006dfc:	2303      	movs	r3, #3
90006dfe:	e006      	b.n	90006e0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90006e00:	4b05      	ldr	r3, [pc, #20]	; (90006e18 <RCCEx_PLL3_Config+0x15c>)
90006e02:	681b      	ldr	r3, [r3, #0]
90006e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006e08:	2b00      	cmp	r3, #0
90006e0a:	d0f0      	beq.n	90006dee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
90006e0e:	4618      	mov	r0, r3
90006e10:	3710      	adds	r7, #16
90006e12:	46bd      	mov	sp, r7
90006e14:	bd80      	pop	{r7, pc}
90006e16:	bf00      	nop
90006e18:	58024400 	.word	0x58024400
90006e1c:	ffff0007 	.word	0xffff0007

90006e20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
90006e20:	b580      	push	{r7, lr}
90006e22:	b08a      	sub	sp, #40	; 0x28
90006e24:	af00      	add	r7, sp, #0
90006e26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
90006e28:	687b      	ldr	r3, [r7, #4]
90006e2a:	2b00      	cmp	r3, #0
90006e2c:	d101      	bne.n	90006e32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
90006e2e:	2301      	movs	r3, #1
90006e30:	e07c      	b.n	90006f2c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
90006e32:	687b      	ldr	r3, [r7, #4]
90006e34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
90006e38:	b2db      	uxtb	r3, r3
90006e3a:	2b00      	cmp	r3, #0
90006e3c:	d10c      	bne.n	90006e58 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
90006e3e:	687b      	ldr	r3, [r7, #4]
90006e40:	2200      	movs	r2, #0
90006e42:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
90006e44:	687b      	ldr	r3, [r7, #4]
90006e46:	699b      	ldr	r3, [r3, #24]
90006e48:	2b00      	cmp	r3, #0
90006e4a:	d102      	bne.n	90006e52 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
90006e4c:	687b      	ldr	r3, [r7, #4]
90006e4e:	2202      	movs	r2, #2
90006e50:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
90006e52:	6878      	ldr	r0, [r7, #4]
90006e54:	f7fa fc44 	bl	900016e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
90006e58:	687b      	ldr	r3, [r7, #4]
90006e5a:	2203      	movs	r2, #3
90006e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
90006e60:	6878      	ldr	r0, [r7, #4]
90006e62:	f000 f867 	bl	90006f34 <HAL_SD_InitCard>
90006e66:	4603      	mov	r3, r0
90006e68:	2b00      	cmp	r3, #0
90006e6a:	d001      	beq.n	90006e70 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
90006e6c:	2301      	movs	r3, #1
90006e6e:	e05d      	b.n	90006f2c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
90006e70:	f107 0308 	add.w	r3, r7, #8
90006e74:	4619      	mov	r1, r3
90006e76:	6878      	ldr	r0, [r7, #4]
90006e78:	f000 fc7a 	bl	90007770 <HAL_SD_GetCardStatus>
90006e7c:	4603      	mov	r3, r0
90006e7e:	2b00      	cmp	r3, #0
90006e80:	d001      	beq.n	90006e86 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
90006e82:	2301      	movs	r3, #1
90006e84:	e052      	b.n	90006f2c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
90006e86:	7e3b      	ldrb	r3, [r7, #24]
90006e88:	b2db      	uxtb	r3, r3
90006e8a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
90006e8c:	7e7b      	ldrb	r3, [r7, #25]
90006e8e:	b2db      	uxtb	r3, r3
90006e90:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
90006e92:	687b      	ldr	r3, [r7, #4]
90006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006e96:	2b01      	cmp	r3, #1
90006e98:	d10a      	bne.n	90006eb0 <HAL_SD_Init+0x90>
90006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006e9c:	2b00      	cmp	r3, #0
90006e9e:	d102      	bne.n	90006ea6 <HAL_SD_Init+0x86>
90006ea0:	6a3b      	ldr	r3, [r7, #32]
90006ea2:	2b00      	cmp	r3, #0
90006ea4:	d004      	beq.n	90006eb0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
90006ea6:	687b      	ldr	r3, [r7, #4]
90006ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
90006eac:	65da      	str	r2, [r3, #92]	; 0x5c
90006eae:	e00b      	b.n	90006ec8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
90006eb0:	687b      	ldr	r3, [r7, #4]
90006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006eb4:	2b01      	cmp	r3, #1
90006eb6:	d104      	bne.n	90006ec2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
90006eb8:	687b      	ldr	r3, [r7, #4]
90006eba:	f44f 7280 	mov.w	r2, #256	; 0x100
90006ebe:	65da      	str	r2, [r3, #92]	; 0x5c
90006ec0:	e002      	b.n	90006ec8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
90006ec2:	687b      	ldr	r3, [r7, #4]
90006ec4:	2200      	movs	r2, #0
90006ec6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
90006ec8:	687b      	ldr	r3, [r7, #4]
90006eca:	68db      	ldr	r3, [r3, #12]
90006ecc:	4619      	mov	r1, r3
90006ece:	6878      	ldr	r0, [r7, #4]
90006ed0:	f000 fd04 	bl	900078dc <HAL_SD_ConfigWideBusOperation>
90006ed4:	4603      	mov	r3, r0
90006ed6:	2b00      	cmp	r3, #0
90006ed8:	d001      	beq.n	90006ede <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
90006eda:	2301      	movs	r3, #1
90006edc:	e026      	b.n	90006f2c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
90006ede:	f7fb f98f 	bl	90002200 <HAL_GetTick>
90006ee2:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
90006ee4:	e011      	b.n	90006f0a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
90006ee6:	f7fb f98b 	bl	90002200 <HAL_GetTick>
90006eea:	4602      	mov	r2, r0
90006eec:	69fb      	ldr	r3, [r7, #28]
90006eee:	1ad3      	subs	r3, r2, r3
90006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
90006ef4:	d109      	bne.n	90006f0a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
90006ef6:	687b      	ldr	r3, [r7, #4]
90006ef8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
90006efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
90006efe:	687b      	ldr	r3, [r7, #4]
90006f00:	2201      	movs	r2, #1
90006f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
90006f06:	2303      	movs	r3, #3
90006f08:	e010      	b.n	90006f2c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
90006f0a:	6878      	ldr	r0, [r7, #4]
90006f0c:	f000 fd90 	bl	90007a30 <HAL_SD_GetCardState>
90006f10:	4603      	mov	r3, r0
90006f12:	2b04      	cmp	r3, #4
90006f14:	d1e7      	bne.n	90006ee6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
90006f16:	687b      	ldr	r3, [r7, #4]
90006f18:	2200      	movs	r2, #0
90006f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
90006f1c:	687b      	ldr	r3, [r7, #4]
90006f1e:	2200      	movs	r2, #0
90006f20:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
90006f22:	687b      	ldr	r3, [r7, #4]
90006f24:	2201      	movs	r2, #1
90006f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
90006f2a:	2300      	movs	r3, #0
}
90006f2c:	4618      	mov	r0, r3
90006f2e:	3728      	adds	r7, #40	; 0x28
90006f30:	46bd      	mov	sp, r7
90006f32:	bd80      	pop	{r7, pc}

90006f34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
90006f34:	b5b0      	push	{r4, r5, r7, lr}
90006f36:	b08e      	sub	sp, #56	; 0x38
90006f38:	af04      	add	r7, sp, #16
90006f3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
90006f3c:	2300      	movs	r3, #0
90006f3e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
90006f40:	2300      	movs	r3, #0
90006f42:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
90006f44:	2300      	movs	r3, #0
90006f46:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
90006f48:	2300      	movs	r3, #0
90006f4a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
90006f4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
90006f50:	f7fe ff90 	bl	90005e74 <HAL_RCCEx_GetPeriphCLKFreq>
90006f54:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
90006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006f58:	0a1b      	lsrs	r3, r3, #8
90006f5a:	4a40      	ldr	r2, [pc, #256]	; (9000705c <HAL_SD_InitCard+0x128>)
90006f5c:	fba2 2303 	umull	r2, r3, r2, r3
90006f60:	091b      	lsrs	r3, r3, #4
90006f62:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
90006f64:	687b      	ldr	r3, [r7, #4]
90006f66:	699b      	ldr	r3, [r3, #24]
90006f68:	2b02      	cmp	r3, #2
90006f6a:	d107      	bne.n	90006f7c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
90006f6c:	687b      	ldr	r3, [r7, #4]
90006f6e:	681b      	ldr	r3, [r3, #0]
90006f70:	681a      	ldr	r2, [r3, #0]
90006f72:	687b      	ldr	r3, [r7, #4]
90006f74:	681b      	ldr	r3, [r3, #0]
90006f76:	f042 0210 	orr.w	r2, r2, #16
90006f7a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
90006f7c:	687b      	ldr	r3, [r7, #4]
90006f7e:	681d      	ldr	r5, [r3, #0]
90006f80:	466c      	mov	r4, sp
90006f82:	f107 0314 	add.w	r3, r7, #20
90006f86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
90006f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90006f8e:	f107 0308 	add.w	r3, r7, #8
90006f92:	cb0e      	ldmia	r3, {r1, r2, r3}
90006f94:	4628      	mov	r0, r5
90006f96:	f003 faad 	bl	9000a4f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
90006f9a:	687b      	ldr	r3, [r7, #4]
90006f9c:	681b      	ldr	r3, [r3, #0]
90006f9e:	4618      	mov	r0, r3
90006fa0:	f003 faf0 	bl	9000a584 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
90006fa4:	69bb      	ldr	r3, [r7, #24]
90006fa6:	005b      	lsls	r3, r3, #1
90006fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90006faa:	fbb2 f3f3 	udiv	r3, r2, r3
90006fae:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
90006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006fb2:	2b00      	cmp	r3, #0
90006fb4:	d008      	beq.n	90006fc8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
90006fb6:	4a2a      	ldr	r2, [pc, #168]	; (90007060 <HAL_SD_InitCard+0x12c>)
90006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006fba:	fbb2 f3f3 	udiv	r3, r2, r3
90006fbe:	3301      	adds	r3, #1
90006fc0:	4618      	mov	r0, r3
90006fc2:	f7fb f929 	bl	90002218 <HAL_Delay>
90006fc6:	e002      	b.n	90006fce <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
90006fc8:	2002      	movs	r0, #2
90006fca:	f7fb f925 	bl	90002218 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
90006fce:	6878      	ldr	r0, [r7, #4]
90006fd0:	f000 fe0c 	bl	90007bec <SD_PowerON>
90006fd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
90006fd6:	6a3b      	ldr	r3, [r7, #32]
90006fd8:	2b00      	cmp	r3, #0
90006fda:	d00b      	beq.n	90006ff4 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
90006fdc:	687b      	ldr	r3, [r7, #4]
90006fde:	2201      	movs	r2, #1
90006fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
90006fe4:	687b      	ldr	r3, [r7, #4]
90006fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90006fe8:	6a3b      	ldr	r3, [r7, #32]
90006fea:	431a      	orrs	r2, r3
90006fec:	687b      	ldr	r3, [r7, #4]
90006fee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
90006ff0:	2301      	movs	r3, #1
90006ff2:	e02e      	b.n	90007052 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
90006ff4:	6878      	ldr	r0, [r7, #4]
90006ff6:	f000 fd3b 	bl	90007a70 <SD_InitCard>
90006ffa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
90006ffc:	6a3b      	ldr	r3, [r7, #32]
90006ffe:	2b00      	cmp	r3, #0
90007000:	d00b      	beq.n	9000701a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
90007002:	687b      	ldr	r3, [r7, #4]
90007004:	2201      	movs	r2, #1
90007006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
9000700a:	687b      	ldr	r3, [r7, #4]
9000700c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000700e:	6a3b      	ldr	r3, [r7, #32]
90007010:	431a      	orrs	r2, r3
90007012:	687b      	ldr	r3, [r7, #4]
90007014:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
90007016:	2301      	movs	r3, #1
90007018:	e01b      	b.n	90007052 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
9000701a:	687b      	ldr	r3, [r7, #4]
9000701c:	681b      	ldr	r3, [r3, #0]
9000701e:	f44f 7100 	mov.w	r1, #512	; 0x200
90007022:	4618      	mov	r0, r3
90007024:	f003 fb44 	bl	9000a6b0 <SDMMC_CmdBlockLength>
90007028:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
9000702a:	6a3b      	ldr	r3, [r7, #32]
9000702c:	2b00      	cmp	r3, #0
9000702e:	d00f      	beq.n	90007050 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
90007030:	687b      	ldr	r3, [r7, #4]
90007032:	681b      	ldr	r3, [r3, #0]
90007034:	4a0b      	ldr	r2, [pc, #44]	; (90007064 <HAL_SD_InitCard+0x130>)
90007036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
90007038:	687b      	ldr	r3, [r7, #4]
9000703a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000703c:	6a3b      	ldr	r3, [r7, #32]
9000703e:	431a      	orrs	r2, r3
90007040:	687b      	ldr	r3, [r7, #4]
90007042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
90007044:	687b      	ldr	r3, [r7, #4]
90007046:	2201      	movs	r2, #1
90007048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
9000704c:	2301      	movs	r3, #1
9000704e:	e000      	b.n	90007052 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
90007050:	2300      	movs	r3, #0
}
90007052:	4618      	mov	r0, r3
90007054:	3728      	adds	r7, #40	; 0x28
90007056:	46bd      	mov	sp, r7
90007058:	bdb0      	pop	{r4, r5, r7, pc}
9000705a:	bf00      	nop
9000705c:	014f8b59 	.word	0x014f8b59
90007060:	00012110 	.word	0x00012110
90007064:	1fe00fff 	.word	0x1fe00fff

90007068 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
90007068:	b580      	push	{r7, lr}
9000706a:	b084      	sub	sp, #16
9000706c:	af00      	add	r7, sp, #0
9000706e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
90007070:	687b      	ldr	r3, [r7, #4]
90007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007074:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
90007076:	687b      	ldr	r3, [r7, #4]
90007078:	681b      	ldr	r3, [r3, #0]
9000707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000707c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90007080:	2b00      	cmp	r3, #0
90007082:	d008      	beq.n	90007096 <HAL_SD_IRQHandler+0x2e>
90007084:	68fb      	ldr	r3, [r7, #12]
90007086:	f003 0308 	and.w	r3, r3, #8
9000708a:	2b00      	cmp	r3, #0
9000708c:	d003      	beq.n	90007096 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
9000708e:	6878      	ldr	r0, [r7, #4]
90007090:	f001 f912 	bl	900082b8 <SD_Read_IT>
90007094:	e19a      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
90007096:	687b      	ldr	r3, [r7, #4]
90007098:	681b      	ldr	r3, [r3, #0]
9000709a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
900070a0:	2b00      	cmp	r3, #0
900070a2:	f000 80ac 	beq.w	900071fe <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
900070a6:	687b      	ldr	r3, [r7, #4]
900070a8:	681b      	ldr	r3, [r3, #0]
900070aa:	f44f 7280 	mov.w	r2, #256	; 0x100
900070ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
900070b0:	687b      	ldr	r3, [r7, #4]
900070b2:	681b      	ldr	r3, [r3, #0]
900070b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
900070b6:	687b      	ldr	r3, [r7, #4]
900070b8:	681a      	ldr	r2, [r3, #0]
900070ba:	4b9d      	ldr	r3, [pc, #628]	; (90007330 <HAL_SD_IRQHandler+0x2c8>)
900070bc:	400b      	ands	r3, r1
900070be:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
900070c0:	687b      	ldr	r3, [r7, #4]
900070c2:	681b      	ldr	r3, [r3, #0]
900070c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
900070c6:	687b      	ldr	r3, [r7, #4]
900070c8:	681b      	ldr	r3, [r3, #0]
900070ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
900070ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
900070d0:	687b      	ldr	r3, [r7, #4]
900070d2:	681b      	ldr	r3, [r3, #0]
900070d4:	68da      	ldr	r2, [r3, #12]
900070d6:	687b      	ldr	r3, [r7, #4]
900070d8:	681b      	ldr	r3, [r3, #0]
900070da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
900070de:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
900070e0:	68fb      	ldr	r3, [r7, #12]
900070e2:	f003 0308 	and.w	r3, r3, #8
900070e6:	2b00      	cmp	r3, #0
900070e8:	d038      	beq.n	9000715c <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
900070ea:	68fb      	ldr	r3, [r7, #12]
900070ec:	f003 0302 	and.w	r3, r3, #2
900070f0:	2b00      	cmp	r3, #0
900070f2:	d104      	bne.n	900070fe <HAL_SD_IRQHandler+0x96>
900070f4:	68fb      	ldr	r3, [r7, #12]
900070f6:	f003 0320 	and.w	r3, r3, #32
900070fa:	2b00      	cmp	r3, #0
900070fc:	d011      	beq.n	90007122 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
900070fe:	687b      	ldr	r3, [r7, #4]
90007100:	681b      	ldr	r3, [r3, #0]
90007102:	4618      	mov	r0, r3
90007104:	f003 faf8 	bl	9000a6f8 <SDMMC_CmdStopTransfer>
90007108:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
9000710a:	68bb      	ldr	r3, [r7, #8]
9000710c:	2b00      	cmp	r3, #0
9000710e:	d008      	beq.n	90007122 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
90007110:	687b      	ldr	r3, [r7, #4]
90007112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007114:	68bb      	ldr	r3, [r7, #8]
90007116:	431a      	orrs	r2, r3
90007118:	687b      	ldr	r3, [r7, #4]
9000711a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
9000711c:	6878      	ldr	r0, [r7, #4]
9000711e:	f000 f96d 	bl	900073fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
90007122:	687b      	ldr	r3, [r7, #4]
90007124:	681b      	ldr	r3, [r3, #0]
90007126:	4a83      	ldr	r2, [pc, #524]	; (90007334 <HAL_SD_IRQHandler+0x2cc>)
90007128:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
9000712a:	687b      	ldr	r3, [r7, #4]
9000712c:	2201      	movs	r2, #1
9000712e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
90007132:	687b      	ldr	r3, [r7, #4]
90007134:	2200      	movs	r2, #0
90007136:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
90007138:	68fb      	ldr	r3, [r7, #12]
9000713a:	f003 0301 	and.w	r3, r3, #1
9000713e:	2b00      	cmp	r3, #0
90007140:	d104      	bne.n	9000714c <HAL_SD_IRQHandler+0xe4>
90007142:	68fb      	ldr	r3, [r7, #12]
90007144:	f003 0302 	and.w	r3, r3, #2
90007148:	2b00      	cmp	r3, #0
9000714a:	d003      	beq.n	90007154 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
9000714c:	6878      	ldr	r0, [r7, #4]
9000714e:	f000 f94b 	bl	900073e8 <HAL_SD_RxCpltCallback>
90007152:	e13b      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
90007154:	6878      	ldr	r0, [r7, #4]
90007156:	f000 f93d 	bl	900073d4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
9000715a:	e137      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
9000715c:	68fb      	ldr	r3, [r7, #12]
9000715e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90007162:	2b00      	cmp	r3, #0
90007164:	f000 8132 	beq.w	900073cc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
90007168:	687b      	ldr	r3, [r7, #4]
9000716a:	681b      	ldr	r3, [r3, #0]
9000716c:	2200      	movs	r2, #0
9000716e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
90007170:	687b      	ldr	r3, [r7, #4]
90007172:	681b      	ldr	r3, [r3, #0]
90007174:	2200      	movs	r2, #0
90007176:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
90007178:	687b      	ldr	r3, [r7, #4]
9000717a:	681b      	ldr	r3, [r3, #0]
9000717c:	2200      	movs	r2, #0
9000717e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
90007180:	68fb      	ldr	r3, [r7, #12]
90007182:	f003 0302 	and.w	r3, r3, #2
90007186:	2b00      	cmp	r3, #0
90007188:	d104      	bne.n	90007194 <HAL_SD_IRQHandler+0x12c>
9000718a:	68fb      	ldr	r3, [r7, #12]
9000718c:	f003 0320 	and.w	r3, r3, #32
90007190:	2b00      	cmp	r3, #0
90007192:	d011      	beq.n	900071b8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
90007194:	687b      	ldr	r3, [r7, #4]
90007196:	681b      	ldr	r3, [r3, #0]
90007198:	4618      	mov	r0, r3
9000719a:	f003 faad 	bl	9000a6f8 <SDMMC_CmdStopTransfer>
9000719e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
900071a0:	68bb      	ldr	r3, [r7, #8]
900071a2:	2b00      	cmp	r3, #0
900071a4:	d008      	beq.n	900071b8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
900071a6:	687b      	ldr	r3, [r7, #4]
900071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900071aa:	68bb      	ldr	r3, [r7, #8]
900071ac:	431a      	orrs	r2, r3
900071ae:	687b      	ldr	r3, [r7, #4]
900071b0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
900071b2:	6878      	ldr	r0, [r7, #4]
900071b4:	f000 f922 	bl	900073fc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
900071b8:	687b      	ldr	r3, [r7, #4]
900071ba:	2201      	movs	r2, #1
900071bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
900071c0:	687b      	ldr	r3, [r7, #4]
900071c2:	2200      	movs	r2, #0
900071c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
900071c6:	68fb      	ldr	r3, [r7, #12]
900071c8:	f003 0310 	and.w	r3, r3, #16
900071cc:	2b00      	cmp	r3, #0
900071ce:	d104      	bne.n	900071da <HAL_SD_IRQHandler+0x172>
900071d0:	68fb      	ldr	r3, [r7, #12]
900071d2:	f003 0320 	and.w	r3, r3, #32
900071d6:	2b00      	cmp	r3, #0
900071d8:	d002      	beq.n	900071e0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
900071da:	6878      	ldr	r0, [r7, #4]
900071dc:	f000 f8fa 	bl	900073d4 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
900071e0:	68fb      	ldr	r3, [r7, #12]
900071e2:	f003 0301 	and.w	r3, r3, #1
900071e6:	2b00      	cmp	r3, #0
900071e8:	d105      	bne.n	900071f6 <HAL_SD_IRQHandler+0x18e>
900071ea:	68fb      	ldr	r3, [r7, #12]
900071ec:	f003 0302 	and.w	r3, r3, #2
900071f0:	2b00      	cmp	r3, #0
900071f2:	f000 80eb 	beq.w	900073cc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
900071f6:	6878      	ldr	r0, [r7, #4]
900071f8:	f000 f8f6 	bl	900073e8 <HAL_SD_RxCpltCallback>
}
900071fc:	e0e6      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
900071fe:	687b      	ldr	r3, [r7, #4]
90007200:	681b      	ldr	r3, [r3, #0]
90007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90007208:	2b00      	cmp	r3, #0
9000720a:	d008      	beq.n	9000721e <HAL_SD_IRQHandler+0x1b6>
9000720c:	68fb      	ldr	r3, [r7, #12]
9000720e:	f003 0308 	and.w	r3, r3, #8
90007212:	2b00      	cmp	r3, #0
90007214:	d003      	beq.n	9000721e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
90007216:	6878      	ldr	r0, [r7, #4]
90007218:	f001 f894 	bl	90008344 <SD_Write_IT>
9000721c:	e0d6      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
9000721e:	687b      	ldr	r3, [r7, #4]
90007220:	681b      	ldr	r3, [r3, #0]
90007222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007224:	f003 033a 	and.w	r3, r3, #58	; 0x3a
90007228:	2b00      	cmp	r3, #0
9000722a:	f000 80a2 	beq.w	90007372 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
9000722e:	687b      	ldr	r3, [r7, #4]
90007230:	681b      	ldr	r3, [r3, #0]
90007232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007234:	f003 0302 	and.w	r3, r3, #2
90007238:	2b00      	cmp	r3, #0
9000723a:	d005      	beq.n	90007248 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
9000723c:	687b      	ldr	r3, [r7, #4]
9000723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007240:	f043 0202 	orr.w	r2, r3, #2
90007244:	687b      	ldr	r3, [r7, #4]
90007246:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
90007248:	687b      	ldr	r3, [r7, #4]
9000724a:	681b      	ldr	r3, [r3, #0]
9000724c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000724e:	f003 0308 	and.w	r3, r3, #8
90007252:	2b00      	cmp	r3, #0
90007254:	d005      	beq.n	90007262 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
90007256:	687b      	ldr	r3, [r7, #4]
90007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000725a:	f043 0208 	orr.w	r2, r3, #8
9000725e:	687b      	ldr	r3, [r7, #4]
90007260:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
90007262:	687b      	ldr	r3, [r7, #4]
90007264:	681b      	ldr	r3, [r3, #0]
90007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007268:	f003 0320 	and.w	r3, r3, #32
9000726c:	2b00      	cmp	r3, #0
9000726e:	d005      	beq.n	9000727c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
90007270:	687b      	ldr	r3, [r7, #4]
90007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007274:	f043 0220 	orr.w	r2, r3, #32
90007278:	687b      	ldr	r3, [r7, #4]
9000727a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
9000727c:	687b      	ldr	r3, [r7, #4]
9000727e:	681b      	ldr	r3, [r3, #0]
90007280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007282:	f003 0310 	and.w	r3, r3, #16
90007286:	2b00      	cmp	r3, #0
90007288:	d005      	beq.n	90007296 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
9000728a:	687b      	ldr	r3, [r7, #4]
9000728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000728e:	f043 0210 	orr.w	r2, r3, #16
90007292:	687b      	ldr	r3, [r7, #4]
90007294:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
90007296:	687b      	ldr	r3, [r7, #4]
90007298:	681b      	ldr	r3, [r3, #0]
9000729a:	4a26      	ldr	r2, [pc, #152]	; (90007334 <HAL_SD_IRQHandler+0x2cc>)
9000729c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
9000729e:	687b      	ldr	r3, [r7, #4]
900072a0:	681b      	ldr	r3, [r3, #0]
900072a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
900072a4:	687b      	ldr	r3, [r7, #4]
900072a6:	681b      	ldr	r3, [r3, #0]
900072a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
900072ac:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
900072ae:	687b      	ldr	r3, [r7, #4]
900072b0:	681b      	ldr	r3, [r3, #0]
900072b2:	68da      	ldr	r2, [r3, #12]
900072b4:	687b      	ldr	r3, [r7, #4]
900072b6:	681b      	ldr	r3, [r3, #0]
900072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
900072bc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
900072be:	687b      	ldr	r3, [r7, #4]
900072c0:	681b      	ldr	r3, [r3, #0]
900072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900072c4:	687b      	ldr	r3, [r7, #4]
900072c6:	681b      	ldr	r3, [r3, #0]
900072c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
900072cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
900072ce:	687b      	ldr	r3, [r7, #4]
900072d0:	681b      	ldr	r3, [r3, #0]
900072d2:	68da      	ldr	r2, [r3, #12]
900072d4:	687b      	ldr	r3, [r7, #4]
900072d6:	681b      	ldr	r3, [r3, #0]
900072d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900072dc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
900072de:	687b      	ldr	r3, [r7, #4]
900072e0:	681b      	ldr	r3, [r3, #0]
900072e2:	4618      	mov	r0, r3
900072e4:	f003 fa08 	bl	9000a6f8 <SDMMC_CmdStopTransfer>
900072e8:	4602      	mov	r2, r0
900072ea:	687b      	ldr	r3, [r7, #4]
900072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900072ee:	431a      	orrs	r2, r3
900072f0:	687b      	ldr	r3, [r7, #4]
900072f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
900072f4:	687b      	ldr	r3, [r7, #4]
900072f6:	681b      	ldr	r3, [r3, #0]
900072f8:	68da      	ldr	r2, [r3, #12]
900072fa:	687b      	ldr	r3, [r7, #4]
900072fc:	681b      	ldr	r3, [r3, #0]
900072fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90007302:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
90007304:	687b      	ldr	r3, [r7, #4]
90007306:	681b      	ldr	r3, [r3, #0]
90007308:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000730c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
9000730e:	68fb      	ldr	r3, [r7, #12]
90007310:	f003 0308 	and.w	r3, r3, #8
90007314:	2b00      	cmp	r3, #0
90007316:	d00f      	beq.n	90007338 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
90007318:	687b      	ldr	r3, [r7, #4]
9000731a:	2201      	movs	r2, #1
9000731c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
90007320:	687b      	ldr	r3, [r7, #4]
90007322:	2200      	movs	r2, #0
90007324:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
90007326:	6878      	ldr	r0, [r7, #4]
90007328:	f000 f868 	bl	900073fc <HAL_SD_ErrorCallback>
}
9000732c:	e04e      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
9000732e:	bf00      	nop
90007330:	ffff3ec5 	.word	0xffff3ec5
90007334:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
90007338:	68fb      	ldr	r3, [r7, #12]
9000733a:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000733e:	2b00      	cmp	r3, #0
90007340:	d044      	beq.n	900073cc <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
90007342:	687b      	ldr	r3, [r7, #4]
90007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007346:	2b00      	cmp	r3, #0
90007348:	d040      	beq.n	900073cc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
9000734a:	687b      	ldr	r3, [r7, #4]
9000734c:	681b      	ldr	r3, [r3, #0]
9000734e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90007350:	687b      	ldr	r3, [r7, #4]
90007352:	681b      	ldr	r3, [r3, #0]
90007354:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
90007358:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
9000735a:	687b      	ldr	r3, [r7, #4]
9000735c:	681b      	ldr	r3, [r3, #0]
9000735e:	2200      	movs	r2, #0
90007360:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
90007362:	687b      	ldr	r3, [r7, #4]
90007364:	2201      	movs	r2, #1
90007366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
9000736a:	6878      	ldr	r0, [r7, #4]
9000736c:	f000 f846 	bl	900073fc <HAL_SD_ErrorCallback>
}
90007370:	e02c      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
90007372:	687b      	ldr	r3, [r7, #4]
90007374:	681b      	ldr	r3, [r3, #0]
90007376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000737c:	2b00      	cmp	r3, #0
9000737e:	d025      	beq.n	900073cc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
90007380:	687b      	ldr	r3, [r7, #4]
90007382:	681b      	ldr	r3, [r3, #0]
90007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007388:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
9000738a:	687b      	ldr	r3, [r7, #4]
9000738c:	681b      	ldr	r3, [r3, #0]
9000738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007390:	f003 0304 	and.w	r3, r3, #4
90007394:	2b00      	cmp	r3, #0
90007396:	d10c      	bne.n	900073b2 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
90007398:	68fb      	ldr	r3, [r7, #12]
9000739a:	f003 0320 	and.w	r3, r3, #32
9000739e:	2b00      	cmp	r3, #0
900073a0:	d003      	beq.n	900073aa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
900073a2:	6878      	ldr	r0, [r7, #4]
900073a4:	f001 f836 	bl	90008414 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
900073a8:	e010      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
900073aa:	6878      	ldr	r0, [r7, #4]
900073ac:	f001 f81e 	bl	900083ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
900073b0:	e00c      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
900073b2:	68fb      	ldr	r3, [r7, #12]
900073b4:	f003 0320 	and.w	r3, r3, #32
900073b8:	2b00      	cmp	r3, #0
900073ba:	d003      	beq.n	900073c4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
900073bc:	6878      	ldr	r0, [r7, #4]
900073be:	f001 f81f 	bl	90008400 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
900073c2:	e003      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
900073c4:	6878      	ldr	r0, [r7, #4]
900073c6:	f001 f807 	bl	900083d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
900073ca:	e7ff      	b.n	900073cc <HAL_SD_IRQHandler+0x364>
900073cc:	bf00      	nop
900073ce:	3710      	adds	r7, #16
900073d0:	46bd      	mov	sp, r7
900073d2:	bd80      	pop	{r7, pc}

900073d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
900073d4:	b480      	push	{r7}
900073d6:	b083      	sub	sp, #12
900073d8:	af00      	add	r7, sp, #0
900073da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
900073dc:	bf00      	nop
900073de:	370c      	adds	r7, #12
900073e0:	46bd      	mov	sp, r7
900073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900073e6:	4770      	bx	lr

900073e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
900073e8:	b480      	push	{r7}
900073ea:	b083      	sub	sp, #12
900073ec:	af00      	add	r7, sp, #0
900073ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
900073f0:	bf00      	nop
900073f2:	370c      	adds	r7, #12
900073f4:	46bd      	mov	sp, r7
900073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
900073fa:	4770      	bx	lr

900073fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
900073fc:	b480      	push	{r7}
900073fe:	b083      	sub	sp, #12
90007400:	af00      	add	r7, sp, #0
90007402:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
90007404:	bf00      	nop
90007406:	370c      	adds	r7, #12
90007408:	46bd      	mov	sp, r7
9000740a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000740e:	4770      	bx	lr

90007410 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
90007410:	b480      	push	{r7}
90007412:	b083      	sub	sp, #12
90007414:	af00      	add	r7, sp, #0
90007416:	4603      	mov	r3, r0
90007418:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
9000741a:	bf00      	nop
9000741c:	370c      	adds	r7, #12
9000741e:	46bd      	mov	sp, r7
90007420:	f85d 7b04 	ldr.w	r7, [sp], #4
90007424:	4770      	bx	lr
	...

90007428 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
90007428:	b480      	push	{r7}
9000742a:	b083      	sub	sp, #12
9000742c:	af00      	add	r7, sp, #0
9000742e:	6078      	str	r0, [r7, #4]
90007430:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
90007432:	687b      	ldr	r3, [r7, #4]
90007434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90007436:	0f9b      	lsrs	r3, r3, #30
90007438:	b2da      	uxtb	r2, r3
9000743a:	683b      	ldr	r3, [r7, #0]
9000743c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
9000743e:	687b      	ldr	r3, [r7, #4]
90007440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90007442:	0e9b      	lsrs	r3, r3, #26
90007444:	b2db      	uxtb	r3, r3
90007446:	f003 030f 	and.w	r3, r3, #15
9000744a:	b2da      	uxtb	r2, r3
9000744c:	683b      	ldr	r3, [r7, #0]
9000744e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
90007450:	687b      	ldr	r3, [r7, #4]
90007452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90007454:	0e1b      	lsrs	r3, r3, #24
90007456:	b2db      	uxtb	r3, r3
90007458:	f003 0303 	and.w	r3, r3, #3
9000745c:	b2da      	uxtb	r2, r3
9000745e:	683b      	ldr	r3, [r7, #0]
90007460:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
90007462:	687b      	ldr	r3, [r7, #4]
90007464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90007466:	0c1b      	lsrs	r3, r3, #16
90007468:	b2da      	uxtb	r2, r3
9000746a:	683b      	ldr	r3, [r7, #0]
9000746c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
9000746e:	687b      	ldr	r3, [r7, #4]
90007470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90007472:	0a1b      	lsrs	r3, r3, #8
90007474:	b2da      	uxtb	r2, r3
90007476:	683b      	ldr	r3, [r7, #0]
90007478:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
9000747a:	687b      	ldr	r3, [r7, #4]
9000747c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000747e:	b2da      	uxtb	r2, r3
90007480:	683b      	ldr	r3, [r7, #0]
90007482:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
90007484:	687b      	ldr	r3, [r7, #4]
90007486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90007488:	0d1b      	lsrs	r3, r3, #20
9000748a:	b29a      	uxth	r2, r3
9000748c:	683b      	ldr	r3, [r7, #0]
9000748e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
90007490:	687b      	ldr	r3, [r7, #4]
90007492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90007494:	0c1b      	lsrs	r3, r3, #16
90007496:	b2db      	uxtb	r3, r3
90007498:	f003 030f 	and.w	r3, r3, #15
9000749c:	b2da      	uxtb	r2, r3
9000749e:	683b      	ldr	r3, [r7, #0]
900074a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
900074a2:	687b      	ldr	r3, [r7, #4]
900074a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900074a6:	0bdb      	lsrs	r3, r3, #15
900074a8:	b2db      	uxtb	r3, r3
900074aa:	f003 0301 	and.w	r3, r3, #1
900074ae:	b2da      	uxtb	r2, r3
900074b0:	683b      	ldr	r3, [r7, #0]
900074b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
900074b4:	687b      	ldr	r3, [r7, #4]
900074b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900074b8:	0b9b      	lsrs	r3, r3, #14
900074ba:	b2db      	uxtb	r3, r3
900074bc:	f003 0301 	and.w	r3, r3, #1
900074c0:	b2da      	uxtb	r2, r3
900074c2:	683b      	ldr	r3, [r7, #0]
900074c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
900074c6:	687b      	ldr	r3, [r7, #4]
900074c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900074ca:	0b5b      	lsrs	r3, r3, #13
900074cc:	b2db      	uxtb	r3, r3
900074ce:	f003 0301 	and.w	r3, r3, #1
900074d2:	b2da      	uxtb	r2, r3
900074d4:	683b      	ldr	r3, [r7, #0]
900074d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
900074d8:	687b      	ldr	r3, [r7, #4]
900074da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900074dc:	0b1b      	lsrs	r3, r3, #12
900074de:	b2db      	uxtb	r3, r3
900074e0:	f003 0301 	and.w	r3, r3, #1
900074e4:	b2da      	uxtb	r2, r3
900074e6:	683b      	ldr	r3, [r7, #0]
900074e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
900074ea:	683b      	ldr	r3, [r7, #0]
900074ec:	2200      	movs	r2, #0
900074ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
900074f0:	687b      	ldr	r3, [r7, #4]
900074f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900074f4:	2b00      	cmp	r3, #0
900074f6:	d163      	bne.n	900075c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
900074f8:	687b      	ldr	r3, [r7, #4]
900074fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900074fc:	009a      	lsls	r2, r3, #2
900074fe:	f640 73fc 	movw	r3, #4092	; 0xffc
90007502:	4013      	ands	r3, r2
90007504:	687a      	ldr	r2, [r7, #4]
90007506:	6e92      	ldr	r2, [r2, #104]	; 0x68
90007508:	0f92      	lsrs	r2, r2, #30
9000750a:	431a      	orrs	r2, r3
9000750c:	683b      	ldr	r3, [r7, #0]
9000750e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
90007510:	687b      	ldr	r3, [r7, #4]
90007512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007514:	0edb      	lsrs	r3, r3, #27
90007516:	b2db      	uxtb	r3, r3
90007518:	f003 0307 	and.w	r3, r3, #7
9000751c:	b2da      	uxtb	r2, r3
9000751e:	683b      	ldr	r3, [r7, #0]
90007520:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
90007522:	687b      	ldr	r3, [r7, #4]
90007524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007526:	0e1b      	lsrs	r3, r3, #24
90007528:	b2db      	uxtb	r3, r3
9000752a:	f003 0307 	and.w	r3, r3, #7
9000752e:	b2da      	uxtb	r2, r3
90007530:	683b      	ldr	r3, [r7, #0]
90007532:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
90007534:	687b      	ldr	r3, [r7, #4]
90007536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007538:	0d5b      	lsrs	r3, r3, #21
9000753a:	b2db      	uxtb	r3, r3
9000753c:	f003 0307 	and.w	r3, r3, #7
90007540:	b2da      	uxtb	r2, r3
90007542:	683b      	ldr	r3, [r7, #0]
90007544:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
90007546:	687b      	ldr	r3, [r7, #4]
90007548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000754a:	0c9b      	lsrs	r3, r3, #18
9000754c:	b2db      	uxtb	r3, r3
9000754e:	f003 0307 	and.w	r3, r3, #7
90007552:	b2da      	uxtb	r2, r3
90007554:	683b      	ldr	r3, [r7, #0]
90007556:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
90007558:	687b      	ldr	r3, [r7, #4]
9000755a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000755c:	0bdb      	lsrs	r3, r3, #15
9000755e:	b2db      	uxtb	r3, r3
90007560:	f003 0307 	and.w	r3, r3, #7
90007564:	b2da      	uxtb	r2, r3
90007566:	683b      	ldr	r3, [r7, #0]
90007568:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
9000756a:	683b      	ldr	r3, [r7, #0]
9000756c:	691b      	ldr	r3, [r3, #16]
9000756e:	1c5a      	adds	r2, r3, #1
90007570:	687b      	ldr	r3, [r7, #4]
90007572:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
90007574:	683b      	ldr	r3, [r7, #0]
90007576:	7e1b      	ldrb	r3, [r3, #24]
90007578:	b2db      	uxtb	r3, r3
9000757a:	f003 0307 	and.w	r3, r3, #7
9000757e:	3302      	adds	r3, #2
90007580:	2201      	movs	r2, #1
90007582:	fa02 f303 	lsl.w	r3, r2, r3
90007586:	687a      	ldr	r2, [r7, #4]
90007588:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
9000758a:	fb02 f203 	mul.w	r2, r2, r3
9000758e:	687b      	ldr	r3, [r7, #4]
90007590:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
90007592:	683b      	ldr	r3, [r7, #0]
90007594:	7a1b      	ldrb	r3, [r3, #8]
90007596:	b2db      	uxtb	r3, r3
90007598:	f003 030f 	and.w	r3, r3, #15
9000759c:	2201      	movs	r2, #1
9000759e:	409a      	lsls	r2, r3
900075a0:	687b      	ldr	r3, [r7, #4]
900075a2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
900075a4:	687b      	ldr	r3, [r7, #4]
900075a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900075a8:	687a      	ldr	r2, [r7, #4]
900075aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
900075ac:	0a52      	lsrs	r2, r2, #9
900075ae:	fb02 f203 	mul.w	r2, r2, r3
900075b2:	687b      	ldr	r3, [r7, #4]
900075b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
900075b6:	687b      	ldr	r3, [r7, #4]
900075b8:	f44f 7200 	mov.w	r2, #512	; 0x200
900075bc:	659a      	str	r2, [r3, #88]	; 0x58
900075be:	e031      	b.n	90007624 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
900075c0:	687b      	ldr	r3, [r7, #4]
900075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900075c4:	2b01      	cmp	r3, #1
900075c6:	d11d      	bne.n	90007604 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
900075c8:	687b      	ldr	r3, [r7, #4]
900075ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900075cc:	041b      	lsls	r3, r3, #16
900075ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
900075d2:	687b      	ldr	r3, [r7, #4]
900075d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
900075d6:	0c1b      	lsrs	r3, r3, #16
900075d8:	431a      	orrs	r2, r3
900075da:	683b      	ldr	r3, [r7, #0]
900075dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
900075de:	683b      	ldr	r3, [r7, #0]
900075e0:	691b      	ldr	r3, [r3, #16]
900075e2:	3301      	adds	r3, #1
900075e4:	029a      	lsls	r2, r3, #10
900075e6:	687b      	ldr	r3, [r7, #4]
900075e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
900075ea:	687b      	ldr	r3, [r7, #4]
900075ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
900075ee:	687b      	ldr	r3, [r7, #4]
900075f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
900075f2:	687b      	ldr	r3, [r7, #4]
900075f4:	f44f 7200 	mov.w	r2, #512	; 0x200
900075f8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
900075fa:	687b      	ldr	r3, [r7, #4]
900075fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
900075fe:	687b      	ldr	r3, [r7, #4]
90007600:	659a      	str	r2, [r3, #88]	; 0x58
90007602:	e00f      	b.n	90007624 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
90007604:	687b      	ldr	r3, [r7, #4]
90007606:	681b      	ldr	r3, [r3, #0]
90007608:	4a58      	ldr	r2, [pc, #352]	; (9000776c <HAL_SD_GetCardCSD+0x344>)
9000760a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
9000760c:	687b      	ldr	r3, [r7, #4]
9000760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
90007614:	687b      	ldr	r3, [r7, #4]
90007616:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
90007618:	687b      	ldr	r3, [r7, #4]
9000761a:	2201      	movs	r2, #1
9000761c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
90007620:	2301      	movs	r3, #1
90007622:	e09d      	b.n	90007760 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
90007624:	687b      	ldr	r3, [r7, #4]
90007626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007628:	0b9b      	lsrs	r3, r3, #14
9000762a:	b2db      	uxtb	r3, r3
9000762c:	f003 0301 	and.w	r3, r3, #1
90007630:	b2da      	uxtb	r2, r3
90007632:	683b      	ldr	r3, [r7, #0]
90007634:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
90007636:	687b      	ldr	r3, [r7, #4]
90007638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000763a:	09db      	lsrs	r3, r3, #7
9000763c:	b2db      	uxtb	r3, r3
9000763e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90007642:	b2da      	uxtb	r2, r3
90007644:	683b      	ldr	r3, [r7, #0]
90007646:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
90007648:	687b      	ldr	r3, [r7, #4]
9000764a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000764c:	b2db      	uxtb	r3, r3
9000764e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90007652:	b2da      	uxtb	r2, r3
90007654:	683b      	ldr	r3, [r7, #0]
90007656:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
90007658:	687b      	ldr	r3, [r7, #4]
9000765a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000765c:	0fdb      	lsrs	r3, r3, #31
9000765e:	b2da      	uxtb	r2, r3
90007660:	683b      	ldr	r3, [r7, #0]
90007662:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
90007664:	687b      	ldr	r3, [r7, #4]
90007666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90007668:	0f5b      	lsrs	r3, r3, #29
9000766a:	b2db      	uxtb	r3, r3
9000766c:	f003 0303 	and.w	r3, r3, #3
90007670:	b2da      	uxtb	r2, r3
90007672:	683b      	ldr	r3, [r7, #0]
90007674:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
90007676:	687b      	ldr	r3, [r7, #4]
90007678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000767a:	0e9b      	lsrs	r3, r3, #26
9000767c:	b2db      	uxtb	r3, r3
9000767e:	f003 0307 	and.w	r3, r3, #7
90007682:	b2da      	uxtb	r2, r3
90007684:	683b      	ldr	r3, [r7, #0]
90007686:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
90007688:	687b      	ldr	r3, [r7, #4]
9000768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000768c:	0d9b      	lsrs	r3, r3, #22
9000768e:	b2db      	uxtb	r3, r3
90007690:	f003 030f 	and.w	r3, r3, #15
90007694:	b2da      	uxtb	r2, r3
90007696:	683b      	ldr	r3, [r7, #0]
90007698:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
9000769a:	687b      	ldr	r3, [r7, #4]
9000769c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000769e:	0d5b      	lsrs	r3, r3, #21
900076a0:	b2db      	uxtb	r3, r3
900076a2:	f003 0301 	and.w	r3, r3, #1
900076a6:	b2da      	uxtb	r2, r3
900076a8:	683b      	ldr	r3, [r7, #0]
900076aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
900076ae:	683b      	ldr	r3, [r7, #0]
900076b0:	2200      	movs	r2, #0
900076b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
900076b6:	687b      	ldr	r3, [r7, #4]
900076b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900076ba:	0c1b      	lsrs	r3, r3, #16
900076bc:	b2db      	uxtb	r3, r3
900076be:	f003 0301 	and.w	r3, r3, #1
900076c2:	b2da      	uxtb	r2, r3
900076c4:	683b      	ldr	r3, [r7, #0]
900076c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
900076ca:	687b      	ldr	r3, [r7, #4]
900076cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900076ce:	0bdb      	lsrs	r3, r3, #15
900076d0:	b2db      	uxtb	r3, r3
900076d2:	f003 0301 	and.w	r3, r3, #1
900076d6:	b2da      	uxtb	r2, r3
900076d8:	683b      	ldr	r3, [r7, #0]
900076da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
900076de:	687b      	ldr	r3, [r7, #4]
900076e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900076e2:	0b9b      	lsrs	r3, r3, #14
900076e4:	b2db      	uxtb	r3, r3
900076e6:	f003 0301 	and.w	r3, r3, #1
900076ea:	b2da      	uxtb	r2, r3
900076ec:	683b      	ldr	r3, [r7, #0]
900076ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
900076f2:	687b      	ldr	r3, [r7, #4]
900076f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900076f6:	0b5b      	lsrs	r3, r3, #13
900076f8:	b2db      	uxtb	r3, r3
900076fa:	f003 0301 	and.w	r3, r3, #1
900076fe:	b2da      	uxtb	r2, r3
90007700:	683b      	ldr	r3, [r7, #0]
90007702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
90007706:	687b      	ldr	r3, [r7, #4]
90007708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000770a:	0b1b      	lsrs	r3, r3, #12
9000770c:	b2db      	uxtb	r3, r3
9000770e:	f003 0301 	and.w	r3, r3, #1
90007712:	b2da      	uxtb	r2, r3
90007714:	683b      	ldr	r3, [r7, #0]
90007716:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
9000771a:	687b      	ldr	r3, [r7, #4]
9000771c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000771e:	0a9b      	lsrs	r3, r3, #10
90007720:	b2db      	uxtb	r3, r3
90007722:	f003 0303 	and.w	r3, r3, #3
90007726:	b2da      	uxtb	r2, r3
90007728:	683b      	ldr	r3, [r7, #0]
9000772a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
9000772e:	687b      	ldr	r3, [r7, #4]
90007730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90007732:	0a1b      	lsrs	r3, r3, #8
90007734:	b2db      	uxtb	r3, r3
90007736:	f003 0303 	and.w	r3, r3, #3
9000773a:	b2da      	uxtb	r2, r3
9000773c:	683b      	ldr	r3, [r7, #0]
9000773e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
90007742:	687b      	ldr	r3, [r7, #4]
90007744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90007746:	085b      	lsrs	r3, r3, #1
90007748:	b2db      	uxtb	r3, r3
9000774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000774e:	b2da      	uxtb	r2, r3
90007750:	683b      	ldr	r3, [r7, #0]
90007752:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
90007756:	683b      	ldr	r3, [r7, #0]
90007758:	2201      	movs	r2, #1
9000775a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
9000775e:	2300      	movs	r3, #0
}
90007760:	4618      	mov	r0, r3
90007762:	370c      	adds	r7, #12
90007764:	46bd      	mov	sp, r7
90007766:	f85d 7b04 	ldr.w	r7, [sp], #4
9000776a:	4770      	bx	lr
9000776c:	1fe00fff 	.word	0x1fe00fff

90007770 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
90007770:	b580      	push	{r7, lr}
90007772:	b094      	sub	sp, #80	; 0x50
90007774:	af00      	add	r7, sp, #0
90007776:	6078      	str	r0, [r7, #4]
90007778:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
9000777a:	2300      	movs	r3, #0
9000777c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
90007780:	f107 0308 	add.w	r3, r7, #8
90007784:	4619      	mov	r1, r3
90007786:	6878      	ldr	r0, [r7, #4]
90007788:	f000 fb38 	bl	90007dfc <SD_SendSDStatus>
9000778c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
9000778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90007790:	2b00      	cmp	r3, #0
90007792:	d011      	beq.n	900077b8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
90007794:	687b      	ldr	r3, [r7, #4]
90007796:	681b      	ldr	r3, [r3, #0]
90007798:	4a4f      	ldr	r2, [pc, #316]	; (900078d8 <HAL_SD_GetCardStatus+0x168>)
9000779a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
9000779c:	687b      	ldr	r3, [r7, #4]
9000779e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900077a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900077a2:	431a      	orrs	r2, r3
900077a4:	687b      	ldr	r3, [r7, #4]
900077a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
900077a8:	687b      	ldr	r3, [r7, #4]
900077aa:	2201      	movs	r2, #1
900077ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
900077b0:	2301      	movs	r3, #1
900077b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
900077b6:	e070      	b.n	9000789a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
900077b8:	68bb      	ldr	r3, [r7, #8]
900077ba:	099b      	lsrs	r3, r3, #6
900077bc:	b2db      	uxtb	r3, r3
900077be:	f003 0303 	and.w	r3, r3, #3
900077c2:	b2da      	uxtb	r2, r3
900077c4:	683b      	ldr	r3, [r7, #0]
900077c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
900077c8:	68bb      	ldr	r3, [r7, #8]
900077ca:	095b      	lsrs	r3, r3, #5
900077cc:	b2db      	uxtb	r3, r3
900077ce:	f003 0301 	and.w	r3, r3, #1
900077d2:	b2da      	uxtb	r2, r3
900077d4:	683b      	ldr	r3, [r7, #0]
900077d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
900077d8:	68bb      	ldr	r3, [r7, #8]
900077da:	0a1b      	lsrs	r3, r3, #8
900077dc:	b29b      	uxth	r3, r3
900077de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
900077e2:	b29a      	uxth	r2, r3
900077e4:	68bb      	ldr	r3, [r7, #8]
900077e6:	0e1b      	lsrs	r3, r3, #24
900077e8:	b29b      	uxth	r3, r3
900077ea:	4313      	orrs	r3, r2
900077ec:	b29a      	uxth	r2, r3
900077ee:	683b      	ldr	r3, [r7, #0]
900077f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
900077f2:	68fb      	ldr	r3, [r7, #12]
900077f4:	061a      	lsls	r2, r3, #24
900077f6:	68fb      	ldr	r3, [r7, #12]
900077f8:	021b      	lsls	r3, r3, #8
900077fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
900077fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
90007800:	68fb      	ldr	r3, [r7, #12]
90007802:	0a1b      	lsrs	r3, r3, #8
90007804:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
90007808:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
9000780a:	68fb      	ldr	r3, [r7, #12]
9000780c:	0e1b      	lsrs	r3, r3, #24
9000780e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
90007810:	683b      	ldr	r3, [r7, #0]
90007812:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
90007814:	693b      	ldr	r3, [r7, #16]
90007816:	b2da      	uxtb	r2, r3
90007818:	683b      	ldr	r3, [r7, #0]
9000781a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
9000781c:	693b      	ldr	r3, [r7, #16]
9000781e:	0a1b      	lsrs	r3, r3, #8
90007820:	b2da      	uxtb	r2, r3
90007822:	683b      	ldr	r3, [r7, #0]
90007824:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
90007826:	693b      	ldr	r3, [r7, #16]
90007828:	0d1b      	lsrs	r3, r3, #20
9000782a:	b2db      	uxtb	r3, r3
9000782c:	f003 030f 	and.w	r3, r3, #15
90007830:	b2da      	uxtb	r2, r3
90007832:	683b      	ldr	r3, [r7, #0]
90007834:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
90007836:	693b      	ldr	r3, [r7, #16]
90007838:	0c1b      	lsrs	r3, r3, #16
9000783a:	b29b      	uxth	r3, r3
9000783c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90007840:	b29a      	uxth	r2, r3
90007842:	697b      	ldr	r3, [r7, #20]
90007844:	b29b      	uxth	r3, r3
90007846:	b2db      	uxtb	r3, r3
90007848:	b29b      	uxth	r3, r3
9000784a:	4313      	orrs	r3, r2
9000784c:	b29a      	uxth	r2, r3
9000784e:	683b      	ldr	r3, [r7, #0]
90007850:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
90007852:	697b      	ldr	r3, [r7, #20]
90007854:	0a9b      	lsrs	r3, r3, #10
90007856:	b2db      	uxtb	r3, r3
90007858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000785c:	b2da      	uxtb	r2, r3
9000785e:	683b      	ldr	r3, [r7, #0]
90007860:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
90007862:	697b      	ldr	r3, [r7, #20]
90007864:	0a1b      	lsrs	r3, r3, #8
90007866:	b2db      	uxtb	r3, r3
90007868:	f003 0303 	and.w	r3, r3, #3
9000786c:	b2da      	uxtb	r2, r3
9000786e:	683b      	ldr	r3, [r7, #0]
90007870:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
90007872:	697b      	ldr	r3, [r7, #20]
90007874:	091b      	lsrs	r3, r3, #4
90007876:	b2db      	uxtb	r3, r3
90007878:	f003 030f 	and.w	r3, r3, #15
9000787c:	b2da      	uxtb	r2, r3
9000787e:	683b      	ldr	r3, [r7, #0]
90007880:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
90007882:	697b      	ldr	r3, [r7, #20]
90007884:	b2db      	uxtb	r3, r3
90007886:	f003 030f 	and.w	r3, r3, #15
9000788a:	b2da      	uxtb	r2, r3
9000788c:	683b      	ldr	r3, [r7, #0]
9000788e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
90007890:	69bb      	ldr	r3, [r7, #24]
90007892:	0e1b      	lsrs	r3, r3, #24
90007894:	b2da      	uxtb	r2, r3
90007896:	683b      	ldr	r3, [r7, #0]
90007898:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
9000789a:	687b      	ldr	r3, [r7, #4]
9000789c:	681b      	ldr	r3, [r3, #0]
9000789e:	f44f 7100 	mov.w	r1, #512	; 0x200
900078a2:	4618      	mov	r0, r3
900078a4:	f002 ff04 	bl	9000a6b0 <SDMMC_CmdBlockLength>
900078a8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
900078aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900078ac:	2b00      	cmp	r3, #0
900078ae:	d00d      	beq.n	900078cc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
900078b0:	687b      	ldr	r3, [r7, #4]
900078b2:	681b      	ldr	r3, [r3, #0]
900078b4:	4a08      	ldr	r2, [pc, #32]	; (900078d8 <HAL_SD_GetCardStatus+0x168>)
900078b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
900078b8:	687b      	ldr	r3, [r7, #4]
900078ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
900078bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
900078be:	687b      	ldr	r3, [r7, #4]
900078c0:	2201      	movs	r2, #1
900078c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
900078c6:	2301      	movs	r3, #1
900078c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
900078cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
900078d0:	4618      	mov	r0, r3
900078d2:	3750      	adds	r7, #80	; 0x50
900078d4:	46bd      	mov	sp, r7
900078d6:	bd80      	pop	{r7, pc}
900078d8:	1fe00fff 	.word	0x1fe00fff

900078dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
900078dc:	b5b0      	push	{r4, r5, r7, lr}
900078de:	b08e      	sub	sp, #56	; 0x38
900078e0:	af04      	add	r7, sp, #16
900078e2:	6078      	str	r0, [r7, #4]
900078e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
900078e6:	2300      	movs	r3, #0
900078e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
900078ec:	687b      	ldr	r3, [r7, #4]
900078ee:	2203      	movs	r2, #3
900078f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
900078f4:	687b      	ldr	r3, [r7, #4]
900078f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900078f8:	2b03      	cmp	r3, #3
900078fa:	d02e      	beq.n	9000795a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
900078fc:	683b      	ldr	r3, [r7, #0]
900078fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90007902:	d106      	bne.n	90007912 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
90007904:	687b      	ldr	r3, [r7, #4]
90007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007908:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
9000790c:	687b      	ldr	r3, [r7, #4]
9000790e:	639a      	str	r2, [r3, #56]	; 0x38
90007910:	e029      	b.n	90007966 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
90007912:	683b      	ldr	r3, [r7, #0]
90007914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90007918:	d10a      	bne.n	90007930 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
9000791a:	6878      	ldr	r0, [r7, #4]
9000791c:	f000 fb66 	bl	90007fec <SD_WideBus_Enable>
90007920:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
90007922:	687b      	ldr	r3, [r7, #4]
90007924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007926:	6a3b      	ldr	r3, [r7, #32]
90007928:	431a      	orrs	r2, r3
9000792a:	687b      	ldr	r3, [r7, #4]
9000792c:	639a      	str	r2, [r3, #56]	; 0x38
9000792e:	e01a      	b.n	90007966 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
90007930:	683b      	ldr	r3, [r7, #0]
90007932:	2b00      	cmp	r3, #0
90007934:	d10a      	bne.n	9000794c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
90007936:	6878      	ldr	r0, [r7, #4]
90007938:	f000 fba3 	bl	90008082 <SD_WideBus_Disable>
9000793c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
9000793e:	687b      	ldr	r3, [r7, #4]
90007940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007942:	6a3b      	ldr	r3, [r7, #32]
90007944:	431a      	orrs	r2, r3
90007946:	687b      	ldr	r3, [r7, #4]
90007948:	639a      	str	r2, [r3, #56]	; 0x38
9000794a:	e00c      	b.n	90007966 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
9000794c:	687b      	ldr	r3, [r7, #4]
9000794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007950:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
90007954:	687b      	ldr	r3, [r7, #4]
90007956:	639a      	str	r2, [r3, #56]	; 0x38
90007958:	e005      	b.n	90007966 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
9000795a:	687b      	ldr	r3, [r7, #4]
9000795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000795e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
90007962:	687b      	ldr	r3, [r7, #4]
90007964:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
90007966:	687b      	ldr	r3, [r7, #4]
90007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000796a:	2b00      	cmp	r3, #0
9000796c:	d007      	beq.n	9000797e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
9000796e:	687b      	ldr	r3, [r7, #4]
90007970:	681b      	ldr	r3, [r3, #0]
90007972:	4a2e      	ldr	r2, [pc, #184]	; (90007a2c <HAL_SD_ConfigWideBusOperation+0x150>)
90007974:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
90007976:	2301      	movs	r3, #1
90007978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000797c:	e034      	b.n	900079e8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
9000797e:	687b      	ldr	r3, [r7, #4]
90007980:	685b      	ldr	r3, [r3, #4]
90007982:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
90007984:	687b      	ldr	r3, [r7, #4]
90007986:	689b      	ldr	r3, [r3, #8]
90007988:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
9000798a:	683b      	ldr	r3, [r7, #0]
9000798c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
9000798e:	687b      	ldr	r3, [r7, #4]
90007990:	691b      	ldr	r3, [r3, #16]
90007992:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
90007994:	687b      	ldr	r3, [r7, #4]
90007996:	695b      	ldr	r3, [r3, #20]
90007998:	2b03      	cmp	r3, #3
9000799a:	d903      	bls.n	900079a4 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
9000799c:	687b      	ldr	r3, [r7, #4]
9000799e:	695b      	ldr	r3, [r3, #20]
900079a0:	61bb      	str	r3, [r7, #24]
900079a2:	e012      	b.n	900079ca <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
900079a4:	687b      	ldr	r3, [r7, #4]
900079a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900079a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900079ac:	d103      	bne.n	900079b6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
900079ae:	687b      	ldr	r3, [r7, #4]
900079b0:	695b      	ldr	r3, [r3, #20]
900079b2:	61bb      	str	r3, [r7, #24]
900079b4:	e009      	b.n	900079ca <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
900079b6:	687b      	ldr	r3, [r7, #4]
900079b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900079be:	d102      	bne.n	900079c6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
900079c0:	2302      	movs	r3, #2
900079c2:	61bb      	str	r3, [r7, #24]
900079c4:	e001      	b.n	900079ca <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
900079c6:	2304      	movs	r3, #4
900079c8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
900079ca:	687b      	ldr	r3, [r7, #4]
900079cc:	681d      	ldr	r5, [r3, #0]
900079ce:	466c      	mov	r4, sp
900079d0:	f107 0314 	add.w	r3, r7, #20
900079d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
900079d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
900079dc:	f107 0308 	add.w	r3, r7, #8
900079e0:	cb0e      	ldmia	r3, {r1, r2, r3}
900079e2:	4628      	mov	r0, r5
900079e4:	f002 fd86 	bl	9000a4f4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
900079e8:	687b      	ldr	r3, [r7, #4]
900079ea:	681b      	ldr	r3, [r3, #0]
900079ec:	f44f 7100 	mov.w	r1, #512	; 0x200
900079f0:	4618      	mov	r0, r3
900079f2:	f002 fe5d 	bl	9000a6b0 <SDMMC_CmdBlockLength>
900079f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
900079f8:	6a3b      	ldr	r3, [r7, #32]
900079fa:	2b00      	cmp	r3, #0
900079fc:	d00c      	beq.n	90007a18 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
900079fe:	687b      	ldr	r3, [r7, #4]
90007a00:	681b      	ldr	r3, [r3, #0]
90007a02:	4a0a      	ldr	r2, [pc, #40]	; (90007a2c <HAL_SD_ConfigWideBusOperation+0x150>)
90007a04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
90007a06:	687b      	ldr	r3, [r7, #4]
90007a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007a0a:	6a3b      	ldr	r3, [r7, #32]
90007a0c:	431a      	orrs	r2, r3
90007a0e:	687b      	ldr	r3, [r7, #4]
90007a10:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
90007a12:	2301      	movs	r3, #1
90007a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
90007a18:	687b      	ldr	r3, [r7, #4]
90007a1a:	2201      	movs	r2, #1
90007a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
90007a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
90007a24:	4618      	mov	r0, r3
90007a26:	3728      	adds	r7, #40	; 0x28
90007a28:	46bd      	mov	sp, r7
90007a2a:	bdb0      	pop	{r4, r5, r7, pc}
90007a2c:	1fe00fff 	.word	0x1fe00fff

90007a30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
90007a30:	b580      	push	{r7, lr}
90007a32:	b086      	sub	sp, #24
90007a34:	af00      	add	r7, sp, #0
90007a36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
90007a38:	2300      	movs	r3, #0
90007a3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
90007a3c:	f107 030c 	add.w	r3, r7, #12
90007a40:	4619      	mov	r1, r3
90007a42:	6878      	ldr	r0, [r7, #4]
90007a44:	f000 faaa 	bl	90007f9c <SD_SendStatus>
90007a48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
90007a4a:	697b      	ldr	r3, [r7, #20]
90007a4c:	2b00      	cmp	r3, #0
90007a4e:	d005      	beq.n	90007a5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
90007a50:	687b      	ldr	r3, [r7, #4]
90007a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007a54:	697b      	ldr	r3, [r7, #20]
90007a56:	431a      	orrs	r2, r3
90007a58:	687b      	ldr	r3, [r7, #4]
90007a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
90007a5c:	68fb      	ldr	r3, [r7, #12]
90007a5e:	0a5b      	lsrs	r3, r3, #9
90007a60:	f003 030f 	and.w	r3, r3, #15
90007a64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
90007a66:	693b      	ldr	r3, [r7, #16]
}
90007a68:	4618      	mov	r0, r3
90007a6a:	3718      	adds	r7, #24
90007a6c:	46bd      	mov	sp, r7
90007a6e:	bd80      	pop	{r7, pc}

90007a70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
90007a70:	b590      	push	{r4, r7, lr}
90007a72:	b091      	sub	sp, #68	; 0x44
90007a74:	af00      	add	r7, sp, #0
90007a76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
90007a78:	2301      	movs	r3, #1
90007a7a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
90007a7c:	687b      	ldr	r3, [r7, #4]
90007a7e:	681b      	ldr	r3, [r3, #0]
90007a80:	4618      	mov	r0, r3
90007a82:	f002 fd90 	bl	9000a5a6 <SDMMC_GetPowerState>
90007a86:	4603      	mov	r3, r0
90007a88:	2b00      	cmp	r3, #0
90007a8a:	d102      	bne.n	90007a92 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
90007a8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
90007a90:	e0a8      	b.n	90007be4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
90007a92:	687b      	ldr	r3, [r7, #4]
90007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007a96:	2b03      	cmp	r3, #3
90007a98:	d02e      	beq.n	90007af8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
90007a9a:	687b      	ldr	r3, [r7, #4]
90007a9c:	681b      	ldr	r3, [r3, #0]
90007a9e:	4618      	mov	r0, r3
90007aa0:	f002 ff50 	bl	9000a944 <SDMMC_CmdSendCID>
90007aa4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
90007aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007aa8:	2b00      	cmp	r3, #0
90007aaa:	d001      	beq.n	90007ab0 <SD_InitCard+0x40>
    {
      return errorstate;
90007aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007aae:	e099      	b.n	90007be4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
90007ab0:	687b      	ldr	r3, [r7, #4]
90007ab2:	681b      	ldr	r3, [r3, #0]
90007ab4:	2100      	movs	r1, #0
90007ab6:	4618      	mov	r0, r3
90007ab8:	f002 fdbb 	bl	9000a632 <SDMMC_GetResponse>
90007abc:	4602      	mov	r2, r0
90007abe:	687b      	ldr	r3, [r7, #4]
90007ac0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
90007ac2:	687b      	ldr	r3, [r7, #4]
90007ac4:	681b      	ldr	r3, [r3, #0]
90007ac6:	2104      	movs	r1, #4
90007ac8:	4618      	mov	r0, r3
90007aca:	f002 fdb2 	bl	9000a632 <SDMMC_GetResponse>
90007ace:	4602      	mov	r2, r0
90007ad0:	687b      	ldr	r3, [r7, #4]
90007ad2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
90007ad4:	687b      	ldr	r3, [r7, #4]
90007ad6:	681b      	ldr	r3, [r3, #0]
90007ad8:	2108      	movs	r1, #8
90007ada:	4618      	mov	r0, r3
90007adc:	f002 fda9 	bl	9000a632 <SDMMC_GetResponse>
90007ae0:	4602      	mov	r2, r0
90007ae2:	687b      	ldr	r3, [r7, #4]
90007ae4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
90007ae6:	687b      	ldr	r3, [r7, #4]
90007ae8:	681b      	ldr	r3, [r3, #0]
90007aea:	210c      	movs	r1, #12
90007aec:	4618      	mov	r0, r3
90007aee:	f002 fda0 	bl	9000a632 <SDMMC_GetResponse>
90007af2:	4602      	mov	r2, r0
90007af4:	687b      	ldr	r3, [r7, #4]
90007af6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
90007af8:	687b      	ldr	r3, [r7, #4]
90007afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007afc:	2b03      	cmp	r3, #3
90007afe:	d00d      	beq.n	90007b1c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
90007b00:	687b      	ldr	r3, [r7, #4]
90007b02:	681b      	ldr	r3, [r3, #0]
90007b04:	f107 020e 	add.w	r2, r7, #14
90007b08:	4611      	mov	r1, r2
90007b0a:	4618      	mov	r0, r3
90007b0c:	f002 ff59 	bl	9000a9c2 <SDMMC_CmdSetRelAdd>
90007b10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
90007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007b14:	2b00      	cmp	r3, #0
90007b16:	d001      	beq.n	90007b1c <SD_InitCard+0xac>
    {
      return errorstate;
90007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007b1a:	e063      	b.n	90007be4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
90007b1c:	687b      	ldr	r3, [r7, #4]
90007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007b20:	2b03      	cmp	r3, #3
90007b22:	d036      	beq.n	90007b92 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
90007b24:	89fb      	ldrh	r3, [r7, #14]
90007b26:	461a      	mov	r2, r3
90007b28:	687b      	ldr	r3, [r7, #4]
90007b2a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
90007b2c:	687b      	ldr	r3, [r7, #4]
90007b2e:	681a      	ldr	r2, [r3, #0]
90007b30:	687b      	ldr	r3, [r7, #4]
90007b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007b34:	041b      	lsls	r3, r3, #16
90007b36:	4619      	mov	r1, r3
90007b38:	4610      	mov	r0, r2
90007b3a:	f002 ff22 	bl	9000a982 <SDMMC_CmdSendCSD>
90007b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
90007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007b42:	2b00      	cmp	r3, #0
90007b44:	d001      	beq.n	90007b4a <SD_InitCard+0xda>
    {
      return errorstate;
90007b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007b48:	e04c      	b.n	90007be4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
90007b4a:	687b      	ldr	r3, [r7, #4]
90007b4c:	681b      	ldr	r3, [r3, #0]
90007b4e:	2100      	movs	r1, #0
90007b50:	4618      	mov	r0, r3
90007b52:	f002 fd6e 	bl	9000a632 <SDMMC_GetResponse>
90007b56:	4602      	mov	r2, r0
90007b58:	687b      	ldr	r3, [r7, #4]
90007b5a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
90007b5c:	687b      	ldr	r3, [r7, #4]
90007b5e:	681b      	ldr	r3, [r3, #0]
90007b60:	2104      	movs	r1, #4
90007b62:	4618      	mov	r0, r3
90007b64:	f002 fd65 	bl	9000a632 <SDMMC_GetResponse>
90007b68:	4602      	mov	r2, r0
90007b6a:	687b      	ldr	r3, [r7, #4]
90007b6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
90007b6e:	687b      	ldr	r3, [r7, #4]
90007b70:	681b      	ldr	r3, [r3, #0]
90007b72:	2108      	movs	r1, #8
90007b74:	4618      	mov	r0, r3
90007b76:	f002 fd5c 	bl	9000a632 <SDMMC_GetResponse>
90007b7a:	4602      	mov	r2, r0
90007b7c:	687b      	ldr	r3, [r7, #4]
90007b7e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
90007b80:	687b      	ldr	r3, [r7, #4]
90007b82:	681b      	ldr	r3, [r3, #0]
90007b84:	210c      	movs	r1, #12
90007b86:	4618      	mov	r0, r3
90007b88:	f002 fd53 	bl	9000a632 <SDMMC_GetResponse>
90007b8c:	4602      	mov	r2, r0
90007b8e:	687b      	ldr	r3, [r7, #4]
90007b90:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
90007b92:	687b      	ldr	r3, [r7, #4]
90007b94:	681b      	ldr	r3, [r3, #0]
90007b96:	2104      	movs	r1, #4
90007b98:	4618      	mov	r0, r3
90007b9a:	f002 fd4a 	bl	9000a632 <SDMMC_GetResponse>
90007b9e:	4603      	mov	r3, r0
90007ba0:	0d1a      	lsrs	r2, r3, #20
90007ba2:	687b      	ldr	r3, [r7, #4]
90007ba4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
90007ba6:	f107 0310 	add.w	r3, r7, #16
90007baa:	4619      	mov	r1, r3
90007bac:	6878      	ldr	r0, [r7, #4]
90007bae:	f7ff fc3b 	bl	90007428 <HAL_SD_GetCardCSD>
90007bb2:	4603      	mov	r3, r0
90007bb4:	2b00      	cmp	r3, #0
90007bb6:	d002      	beq.n	90007bbe <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
90007bb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90007bbc:	e012      	b.n	90007be4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
90007bbe:	687b      	ldr	r3, [r7, #4]
90007bc0:	6819      	ldr	r1, [r3, #0]
90007bc2:	687b      	ldr	r3, [r7, #4]
90007bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007bc6:	041b      	lsls	r3, r3, #16
90007bc8:	f04f 0400 	mov.w	r4, #0
90007bcc:	461a      	mov	r2, r3
90007bce:	4623      	mov	r3, r4
90007bd0:	4608      	mov	r0, r1
90007bd2:	f002 fdcd 	bl	9000a770 <SDMMC_CmdSelDesel>
90007bd6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
90007bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007bda:	2b00      	cmp	r3, #0
90007bdc:	d001      	beq.n	90007be2 <SD_InitCard+0x172>
  {
    return errorstate;
90007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007be0:	e000      	b.n	90007be4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
90007be2:	2300      	movs	r3, #0
}
90007be4:	4618      	mov	r0, r3
90007be6:	3744      	adds	r7, #68	; 0x44
90007be8:	46bd      	mov	sp, r7
90007bea:	bd90      	pop	{r4, r7, pc}

90007bec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
90007bec:	b580      	push	{r7, lr}
90007bee:	b088      	sub	sp, #32
90007bf0:	af00      	add	r7, sp, #0
90007bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
90007bf4:	2300      	movs	r3, #0
90007bf6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
90007bf8:	2300      	movs	r3, #0
90007bfa:	61fb      	str	r3, [r7, #28]
90007bfc:	2300      	movs	r3, #0
90007bfe:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
90007c00:	f7fa fafe 	bl	90002200 <HAL_GetTick>
90007c04:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
90007c06:	687b      	ldr	r3, [r7, #4]
90007c08:	681b      	ldr	r3, [r3, #0]
90007c0a:	4618      	mov	r0, r3
90007c0c:	f002 fdd4 	bl	9000a7b8 <SDMMC_CmdGoIdleState>
90007c10:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
90007c12:	693b      	ldr	r3, [r7, #16]
90007c14:	2b00      	cmp	r3, #0
90007c16:	d001      	beq.n	90007c1c <SD_PowerON+0x30>
  {
    return errorstate;
90007c18:	693b      	ldr	r3, [r7, #16]
90007c1a:	e0e9      	b.n	90007df0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
90007c1c:	687b      	ldr	r3, [r7, #4]
90007c1e:	681b      	ldr	r3, [r3, #0]
90007c20:	4618      	mov	r0, r3
90007c22:	f002 fde7 	bl	9000a7f4 <SDMMC_CmdOperCond>
90007c26:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
90007c28:	693b      	ldr	r3, [r7, #16]
90007c2a:	2b00      	cmp	r3, #0
90007c2c:	d00d      	beq.n	90007c4a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
90007c2e:	687b      	ldr	r3, [r7, #4]
90007c30:	2200      	movs	r2, #0
90007c32:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
90007c34:	687b      	ldr	r3, [r7, #4]
90007c36:	681b      	ldr	r3, [r3, #0]
90007c38:	4618      	mov	r0, r3
90007c3a:	f002 fdbd 	bl	9000a7b8 <SDMMC_CmdGoIdleState>
90007c3e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
90007c40:	693b      	ldr	r3, [r7, #16]
90007c42:	2b00      	cmp	r3, #0
90007c44:	d004      	beq.n	90007c50 <SD_PowerON+0x64>
    {
      return errorstate;
90007c46:	693b      	ldr	r3, [r7, #16]
90007c48:	e0d2      	b.n	90007df0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
90007c4a:	687b      	ldr	r3, [r7, #4]
90007c4c:	2201      	movs	r2, #1
90007c4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
90007c50:	687b      	ldr	r3, [r7, #4]
90007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90007c54:	2b01      	cmp	r3, #1
90007c56:	d137      	bne.n	90007cc8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
90007c58:	687b      	ldr	r3, [r7, #4]
90007c5a:	681b      	ldr	r3, [r3, #0]
90007c5c:	2100      	movs	r1, #0
90007c5e:	4618      	mov	r0, r3
90007c60:	f002 fde8 	bl	9000a834 <SDMMC_CmdAppCommand>
90007c64:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
90007c66:	693b      	ldr	r3, [r7, #16]
90007c68:	2b00      	cmp	r3, #0
90007c6a:	d02d      	beq.n	90007cc8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
90007c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90007c70:	e0be      	b.n	90007df0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
90007c72:	687b      	ldr	r3, [r7, #4]
90007c74:	681b      	ldr	r3, [r3, #0]
90007c76:	2100      	movs	r1, #0
90007c78:	4618      	mov	r0, r3
90007c7a:	f002 fddb 	bl	9000a834 <SDMMC_CmdAppCommand>
90007c7e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
90007c80:	693b      	ldr	r3, [r7, #16]
90007c82:	2b00      	cmp	r3, #0
90007c84:	d001      	beq.n	90007c8a <SD_PowerON+0x9e>
    {
      return errorstate;
90007c86:	693b      	ldr	r3, [r7, #16]
90007c88:	e0b2      	b.n	90007df0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
90007c8a:	687b      	ldr	r3, [r7, #4]
90007c8c:	681b      	ldr	r3, [r3, #0]
90007c8e:	495a      	ldr	r1, [pc, #360]	; (90007df8 <SD_PowerON+0x20c>)
90007c90:	4618      	mov	r0, r3
90007c92:	f002 fdf2 	bl	9000a87a <SDMMC_CmdAppOperCommand>
90007c96:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
90007c98:	693b      	ldr	r3, [r7, #16]
90007c9a:	2b00      	cmp	r3, #0
90007c9c:	d002      	beq.n	90007ca4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
90007c9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90007ca2:	e0a5      	b.n	90007df0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
90007ca4:	687b      	ldr	r3, [r7, #4]
90007ca6:	681b      	ldr	r3, [r3, #0]
90007ca8:	2100      	movs	r1, #0
90007caa:	4618      	mov	r0, r3
90007cac:	f002 fcc1 	bl	9000a632 <SDMMC_GetResponse>
90007cb0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
90007cb2:	69fb      	ldr	r3, [r7, #28]
90007cb4:	0fdb      	lsrs	r3, r3, #31
90007cb6:	2b01      	cmp	r3, #1
90007cb8:	d101      	bne.n	90007cbe <SD_PowerON+0xd2>
90007cba:	2301      	movs	r3, #1
90007cbc:	e000      	b.n	90007cc0 <SD_PowerON+0xd4>
90007cbe:	2300      	movs	r3, #0
90007cc0:	61bb      	str	r3, [r7, #24]

    count++;
90007cc2:	68fb      	ldr	r3, [r7, #12]
90007cc4:	3301      	adds	r3, #1
90007cc6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
90007cc8:	68fb      	ldr	r3, [r7, #12]
90007cca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90007cce:	4293      	cmp	r3, r2
90007cd0:	d802      	bhi.n	90007cd8 <SD_PowerON+0xec>
90007cd2:	69bb      	ldr	r3, [r7, #24]
90007cd4:	2b00      	cmp	r3, #0
90007cd6:	d0cc      	beq.n	90007c72 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
90007cd8:	68fb      	ldr	r3, [r7, #12]
90007cda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90007cde:	4293      	cmp	r3, r2
90007ce0:	d902      	bls.n	90007ce8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
90007ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90007ce6:	e083      	b.n	90007df0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
90007ce8:	69fb      	ldr	r3, [r7, #28]
90007cea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
90007cee:	2b00      	cmp	r3, #0
90007cf0:	d07d      	beq.n	90007dee <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
90007cf2:	687b      	ldr	r3, [r7, #4]
90007cf4:	2201      	movs	r2, #1
90007cf6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
90007cf8:	687b      	ldr	r3, [r7, #4]
90007cfa:	699b      	ldr	r3, [r3, #24]
90007cfc:	2b02      	cmp	r3, #2
90007cfe:	d176      	bne.n	90007dee <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
90007d00:	69fb      	ldr	r3, [r7, #28]
90007d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90007d06:	2b00      	cmp	r3, #0
90007d08:	d071      	beq.n	90007dee <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
90007d0a:	687b      	ldr	r3, [r7, #4]
90007d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
90007d10:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
90007d12:	687b      	ldr	r3, [r7, #4]
90007d14:	681b      	ldr	r3, [r3, #0]
90007d16:	681a      	ldr	r2, [r3, #0]
90007d18:	687b      	ldr	r3, [r7, #4]
90007d1a:	681b      	ldr	r3, [r3, #0]
90007d1c:	f042 0208 	orr.w	r2, r2, #8
90007d20:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
90007d22:	687b      	ldr	r3, [r7, #4]
90007d24:	681b      	ldr	r3, [r3, #0]
90007d26:	4618      	mov	r0, r3
90007d28:	f002 feb2 	bl	9000aa90 <SDMMC_CmdVoltageSwitch>
90007d2c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
90007d2e:	693b      	ldr	r3, [r7, #16]
90007d30:	2b00      	cmp	r3, #0
90007d32:	d00c      	beq.n	90007d4e <SD_PowerON+0x162>
        {
          return errorstate;
90007d34:	693b      	ldr	r3, [r7, #16]
90007d36:	e05b      	b.n	90007df0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
90007d38:	f7fa fa62 	bl	90002200 <HAL_GetTick>
90007d3c:	4602      	mov	r2, r0
90007d3e:	697b      	ldr	r3, [r7, #20]
90007d40:	1ad3      	subs	r3, r2, r3
90007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
90007d46:	d102      	bne.n	90007d4e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
90007d48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
90007d4c:	e050      	b.n	90007df0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
90007d4e:	687b      	ldr	r3, [r7, #4]
90007d50:	681b      	ldr	r3, [r3, #0]
90007d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
90007d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90007d5c:	d1ec      	bne.n	90007d38 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
90007d5e:	687b      	ldr	r3, [r7, #4]
90007d60:	681b      	ldr	r3, [r3, #0]
90007d62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90007d66:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
90007d68:	687b      	ldr	r3, [r7, #4]
90007d6a:	681b      	ldr	r3, [r3, #0]
90007d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90007d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90007d76:	d002      	beq.n	90007d7e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
90007d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90007d7c:	e038      	b.n	90007df0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
90007d7e:	2001      	movs	r0, #1
90007d80:	f7ff fb46 	bl	90007410 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
90007d84:	687b      	ldr	r3, [r7, #4]
90007d86:	681b      	ldr	r3, [r3, #0]
90007d88:	681a      	ldr	r2, [r3, #0]
90007d8a:	687b      	ldr	r3, [r7, #4]
90007d8c:	681b      	ldr	r3, [r3, #0]
90007d8e:	f042 0204 	orr.w	r2, r2, #4
90007d92:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
90007d94:	e00a      	b.n	90007dac <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
90007d96:	f7fa fa33 	bl	90002200 <HAL_GetTick>
90007d9a:	4602      	mov	r2, r0
90007d9c:	697b      	ldr	r3, [r7, #20]
90007d9e:	1ad3      	subs	r3, r2, r3
90007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
90007da4:	d102      	bne.n	90007dac <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
90007da6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
90007daa:	e021      	b.n	90007df0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
90007dac:	687b      	ldr	r3, [r7, #4]
90007dae:	681b      	ldr	r3, [r3, #0]
90007db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90007db6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90007dba:	d1ec      	bne.n	90007d96 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
90007dbc:	687b      	ldr	r3, [r7, #4]
90007dbe:	681b      	ldr	r3, [r3, #0]
90007dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90007dc4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
90007dc6:	687b      	ldr	r3, [r7, #4]
90007dc8:	681b      	ldr	r3, [r3, #0]
90007dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90007dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90007dd4:	d102      	bne.n	90007ddc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
90007dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90007dda:	e009      	b.n	90007df0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
90007ddc:	687b      	ldr	r3, [r7, #4]
90007dde:	681b      	ldr	r3, [r3, #0]
90007de0:	2213      	movs	r2, #19
90007de2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
90007de4:	687b      	ldr	r3, [r7, #4]
90007de6:	681b      	ldr	r3, [r3, #0]
90007de8:	f04f 32ff 	mov.w	r2, #4294967295
90007dec:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
90007dee:	2300      	movs	r3, #0
}
90007df0:	4618      	mov	r0, r3
90007df2:	3720      	adds	r7, #32
90007df4:	46bd      	mov	sp, r7
90007df6:	bd80      	pop	{r7, pc}
90007df8:	c1100000 	.word	0xc1100000

90007dfc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
90007dfc:	b580      	push	{r7, lr}
90007dfe:	b08c      	sub	sp, #48	; 0x30
90007e00:	af00      	add	r7, sp, #0
90007e02:	6078      	str	r0, [r7, #4]
90007e04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
90007e06:	f7fa f9fb 	bl	90002200 <HAL_GetTick>
90007e0a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
90007e0c:	683b      	ldr	r3, [r7, #0]
90007e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
90007e10:	687b      	ldr	r3, [r7, #4]
90007e12:	681b      	ldr	r3, [r3, #0]
90007e14:	2100      	movs	r1, #0
90007e16:	4618      	mov	r0, r3
90007e18:	f002 fc0b 	bl	9000a632 <SDMMC_GetResponse>
90007e1c:	4603      	mov	r3, r0
90007e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90007e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90007e26:	d102      	bne.n	90007e2e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
90007e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
90007e2c:	e0b0      	b.n	90007f90 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
90007e2e:	687b      	ldr	r3, [r7, #4]
90007e30:	681b      	ldr	r3, [r3, #0]
90007e32:	2140      	movs	r1, #64	; 0x40
90007e34:	4618      	mov	r0, r3
90007e36:	f002 fc3b 	bl	9000a6b0 <SDMMC_CmdBlockLength>
90007e3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
90007e3c:	6a3b      	ldr	r3, [r7, #32]
90007e3e:	2b00      	cmp	r3, #0
90007e40:	d005      	beq.n	90007e4e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
90007e42:	687b      	ldr	r3, [r7, #4]
90007e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007e46:	687b      	ldr	r3, [r7, #4]
90007e48:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
90007e4a:	6a3b      	ldr	r3, [r7, #32]
90007e4c:	e0a0      	b.n	90007f90 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
90007e4e:	687b      	ldr	r3, [r7, #4]
90007e50:	681a      	ldr	r2, [r3, #0]
90007e52:	687b      	ldr	r3, [r7, #4]
90007e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007e56:	041b      	lsls	r3, r3, #16
90007e58:	4619      	mov	r1, r3
90007e5a:	4610      	mov	r0, r2
90007e5c:	f002 fcea 	bl	9000a834 <SDMMC_CmdAppCommand>
90007e60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
90007e62:	6a3b      	ldr	r3, [r7, #32]
90007e64:	2b00      	cmp	r3, #0
90007e66:	d005      	beq.n	90007e74 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
90007e68:	687b      	ldr	r3, [r7, #4]
90007e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007e6c:	687b      	ldr	r3, [r7, #4]
90007e6e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
90007e70:	6a3b      	ldr	r3, [r7, #32]
90007e72:	e08d      	b.n	90007f90 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
90007e74:	f04f 33ff 	mov.w	r3, #4294967295
90007e78:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
90007e7a:	2340      	movs	r3, #64	; 0x40
90007e7c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
90007e7e:	2360      	movs	r3, #96	; 0x60
90007e80:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
90007e82:	2302      	movs	r3, #2
90007e84:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
90007e86:	2300      	movs	r3, #0
90007e88:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
90007e8a:	2301      	movs	r3, #1
90007e8c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
90007e8e:	687b      	ldr	r3, [r7, #4]
90007e90:	681b      	ldr	r3, [r3, #0]
90007e92:	f107 0208 	add.w	r2, r7, #8
90007e96:	4611      	mov	r1, r2
90007e98:	4618      	mov	r0, r3
90007e9a:	f002 fbdd 	bl	9000a658 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
90007e9e:	687b      	ldr	r3, [r7, #4]
90007ea0:	681b      	ldr	r3, [r3, #0]
90007ea2:	4618      	mov	r0, r3
90007ea4:	f002 fdd2 	bl	9000aa4c <SDMMC_CmdStatusRegister>
90007ea8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
90007eaa:	6a3b      	ldr	r3, [r7, #32]
90007eac:	2b00      	cmp	r3, #0
90007eae:	d02b      	beq.n	90007f08 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
90007eb0:	687b      	ldr	r3, [r7, #4]
90007eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007eb4:	687b      	ldr	r3, [r7, #4]
90007eb6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
90007eb8:	6a3b      	ldr	r3, [r7, #32]
90007eba:	e069      	b.n	90007f90 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
90007ebc:	687b      	ldr	r3, [r7, #4]
90007ebe:	681b      	ldr	r3, [r3, #0]
90007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90007ec6:	2b00      	cmp	r3, #0
90007ec8:	d013      	beq.n	90007ef2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
90007eca:	2300      	movs	r3, #0
90007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
90007ece:	e00d      	b.n	90007eec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
90007ed0:	687b      	ldr	r3, [r7, #4]
90007ed2:	681b      	ldr	r3, [r3, #0]
90007ed4:	4618      	mov	r0, r3
90007ed6:	f002 fb37 	bl	9000a548 <SDMMC_ReadFIFO>
90007eda:	4602      	mov	r2, r0
90007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007ede:	601a      	str	r2, [r3, #0]
        pData++;
90007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007ee2:	3304      	adds	r3, #4
90007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
90007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90007ee8:	3301      	adds	r3, #1
90007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
90007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90007eee:	2b07      	cmp	r3, #7
90007ef0:	d9ee      	bls.n	90007ed0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
90007ef2:	f7fa f985 	bl	90002200 <HAL_GetTick>
90007ef6:	4602      	mov	r2, r0
90007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007efa:	1ad3      	subs	r3, r2, r3
90007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
90007f00:	d102      	bne.n	90007f08 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
90007f02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
90007f06:	e043      	b.n	90007f90 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
90007f08:	687b      	ldr	r3, [r7, #4]
90007f0a:	681b      	ldr	r3, [r3, #0]
90007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007f0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
90007f12:	2b00      	cmp	r3, #0
90007f14:	d0d2      	beq.n	90007ebc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
90007f16:	687b      	ldr	r3, [r7, #4]
90007f18:	681b      	ldr	r3, [r3, #0]
90007f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007f1c:	f003 0308 	and.w	r3, r3, #8
90007f20:	2b00      	cmp	r3, #0
90007f22:	d001      	beq.n	90007f28 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
90007f24:	2308      	movs	r3, #8
90007f26:	e033      	b.n	90007f90 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
90007f28:	687b      	ldr	r3, [r7, #4]
90007f2a:	681b      	ldr	r3, [r3, #0]
90007f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007f2e:	f003 0302 	and.w	r3, r3, #2
90007f32:	2b00      	cmp	r3, #0
90007f34:	d001      	beq.n	90007f3a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
90007f36:	2302      	movs	r3, #2
90007f38:	e02a      	b.n	90007f90 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
90007f3a:	687b      	ldr	r3, [r7, #4]
90007f3c:	681b      	ldr	r3, [r3, #0]
90007f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007f40:	f003 0320 	and.w	r3, r3, #32
90007f44:	2b00      	cmp	r3, #0
90007f46:	d017      	beq.n	90007f78 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
90007f48:	2320      	movs	r3, #32
90007f4a:	e021      	b.n	90007f90 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
90007f4c:	687b      	ldr	r3, [r7, #4]
90007f4e:	681b      	ldr	r3, [r3, #0]
90007f50:	4618      	mov	r0, r3
90007f52:	f002 faf9 	bl	9000a548 <SDMMC_ReadFIFO>
90007f56:	4602      	mov	r2, r0
90007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007f5a:	601a      	str	r2, [r3, #0]
    pData++;
90007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007f5e:	3304      	adds	r3, #4
90007f60:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
90007f62:	f7fa f94d 	bl	90002200 <HAL_GetTick>
90007f66:	4602      	mov	r2, r0
90007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007f6a:	1ad3      	subs	r3, r2, r3
90007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
90007f70:	d102      	bne.n	90007f78 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
90007f72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
90007f76:	e00b      	b.n	90007f90 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
90007f78:	687b      	ldr	r3, [r7, #4]
90007f7a:	681b      	ldr	r3, [r3, #0]
90007f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90007f82:	2b00      	cmp	r3, #0
90007f84:	d1e2      	bne.n	90007f4c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
90007f86:	687b      	ldr	r3, [r7, #4]
90007f88:	681b      	ldr	r3, [r3, #0]
90007f8a:	4a03      	ldr	r2, [pc, #12]	; (90007f98 <SD_SendSDStatus+0x19c>)
90007f8c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
90007f8e:	2300      	movs	r3, #0
}
90007f90:	4618      	mov	r0, r3
90007f92:	3730      	adds	r7, #48	; 0x30
90007f94:	46bd      	mov	sp, r7
90007f96:	bd80      	pop	{r7, pc}
90007f98:	18000f3a 	.word	0x18000f3a

90007f9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
90007f9c:	b580      	push	{r7, lr}
90007f9e:	b084      	sub	sp, #16
90007fa0:	af00      	add	r7, sp, #0
90007fa2:	6078      	str	r0, [r7, #4]
90007fa4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
90007fa6:	683b      	ldr	r3, [r7, #0]
90007fa8:	2b00      	cmp	r3, #0
90007faa:	d102      	bne.n	90007fb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
90007fac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90007fb0:	e018      	b.n	90007fe4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
90007fb2:	687b      	ldr	r3, [r7, #4]
90007fb4:	681a      	ldr	r2, [r3, #0]
90007fb6:	687b      	ldr	r3, [r7, #4]
90007fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007fba:	041b      	lsls	r3, r3, #16
90007fbc:	4619      	mov	r1, r3
90007fbe:	4610      	mov	r0, r2
90007fc0:	f002 fd21 	bl	9000aa06 <SDMMC_CmdSendStatus>
90007fc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
90007fc6:	68fb      	ldr	r3, [r7, #12]
90007fc8:	2b00      	cmp	r3, #0
90007fca:	d001      	beq.n	90007fd0 <SD_SendStatus+0x34>
  {
    return errorstate;
90007fcc:	68fb      	ldr	r3, [r7, #12]
90007fce:	e009      	b.n	90007fe4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
90007fd0:	687b      	ldr	r3, [r7, #4]
90007fd2:	681b      	ldr	r3, [r3, #0]
90007fd4:	2100      	movs	r1, #0
90007fd6:	4618      	mov	r0, r3
90007fd8:	f002 fb2b 	bl	9000a632 <SDMMC_GetResponse>
90007fdc:	4602      	mov	r2, r0
90007fde:	683b      	ldr	r3, [r7, #0]
90007fe0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
90007fe2:	2300      	movs	r3, #0
}
90007fe4:	4618      	mov	r0, r3
90007fe6:	3710      	adds	r7, #16
90007fe8:	46bd      	mov	sp, r7
90007fea:	bd80      	pop	{r7, pc}

90007fec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
90007fec:	b580      	push	{r7, lr}
90007fee:	b086      	sub	sp, #24
90007ff0:	af00      	add	r7, sp, #0
90007ff2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
90007ff4:	2300      	movs	r3, #0
90007ff6:	60fb      	str	r3, [r7, #12]
90007ff8:	2300      	movs	r3, #0
90007ffa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
90007ffc:	687b      	ldr	r3, [r7, #4]
90007ffe:	681b      	ldr	r3, [r3, #0]
90008000:	2100      	movs	r1, #0
90008002:	4618      	mov	r0, r3
90008004:	f002 fb15 	bl	9000a632 <SDMMC_GetResponse>
90008008:	4603      	mov	r3, r0
9000800a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000800e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90008012:	d102      	bne.n	9000801a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
90008014:	f44f 6300 	mov.w	r3, #2048	; 0x800
90008018:	e02f      	b.n	9000807a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
9000801a:	f107 030c 	add.w	r3, r7, #12
9000801e:	4619      	mov	r1, r3
90008020:	6878      	ldr	r0, [r7, #4]
90008022:	f000 f879 	bl	90008118 <SD_FindSCR>
90008026:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
90008028:	697b      	ldr	r3, [r7, #20]
9000802a:	2b00      	cmp	r3, #0
9000802c:	d001      	beq.n	90008032 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
9000802e:	697b      	ldr	r3, [r7, #20]
90008030:	e023      	b.n	9000807a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
90008032:	693b      	ldr	r3, [r7, #16]
90008034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90008038:	2b00      	cmp	r3, #0
9000803a:	d01c      	beq.n	90008076 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
9000803c:	687b      	ldr	r3, [r7, #4]
9000803e:	681a      	ldr	r2, [r3, #0]
90008040:	687b      	ldr	r3, [r7, #4]
90008042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90008044:	041b      	lsls	r3, r3, #16
90008046:	4619      	mov	r1, r3
90008048:	4610      	mov	r0, r2
9000804a:	f002 fbf3 	bl	9000a834 <SDMMC_CmdAppCommand>
9000804e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
90008050:	697b      	ldr	r3, [r7, #20]
90008052:	2b00      	cmp	r3, #0
90008054:	d001      	beq.n	9000805a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
90008056:	697b      	ldr	r3, [r7, #20]
90008058:	e00f      	b.n	9000807a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
9000805a:	687b      	ldr	r3, [r7, #4]
9000805c:	681b      	ldr	r3, [r3, #0]
9000805e:	2102      	movs	r1, #2
90008060:	4618      	mov	r0, r3
90008062:	f002 fc2a 	bl	9000a8ba <SDMMC_CmdBusWidth>
90008066:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
90008068:	697b      	ldr	r3, [r7, #20]
9000806a:	2b00      	cmp	r3, #0
9000806c:	d001      	beq.n	90008072 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
9000806e:	697b      	ldr	r3, [r7, #20]
90008070:	e003      	b.n	9000807a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
90008072:	2300      	movs	r3, #0
90008074:	e001      	b.n	9000807a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
90008076:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
9000807a:	4618      	mov	r0, r3
9000807c:	3718      	adds	r7, #24
9000807e:	46bd      	mov	sp, r7
90008080:	bd80      	pop	{r7, pc}

90008082 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
90008082:	b580      	push	{r7, lr}
90008084:	b086      	sub	sp, #24
90008086:	af00      	add	r7, sp, #0
90008088:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
9000808a:	2300      	movs	r3, #0
9000808c:	60fb      	str	r3, [r7, #12]
9000808e:	2300      	movs	r3, #0
90008090:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
90008092:	687b      	ldr	r3, [r7, #4]
90008094:	681b      	ldr	r3, [r3, #0]
90008096:	2100      	movs	r1, #0
90008098:	4618      	mov	r0, r3
9000809a:	f002 faca 	bl	9000a632 <SDMMC_GetResponse>
9000809e:	4603      	mov	r3, r0
900080a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900080a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900080a8:	d102      	bne.n	900080b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
900080aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
900080ae:	e02f      	b.n	90008110 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
900080b0:	f107 030c 	add.w	r3, r7, #12
900080b4:	4619      	mov	r1, r3
900080b6:	6878      	ldr	r0, [r7, #4]
900080b8:	f000 f82e 	bl	90008118 <SD_FindSCR>
900080bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
900080be:	697b      	ldr	r3, [r7, #20]
900080c0:	2b00      	cmp	r3, #0
900080c2:	d001      	beq.n	900080c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
900080c4:	697b      	ldr	r3, [r7, #20]
900080c6:	e023      	b.n	90008110 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
900080c8:	693b      	ldr	r3, [r7, #16]
900080ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900080ce:	2b00      	cmp	r3, #0
900080d0:	d01c      	beq.n	9000810c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
900080d2:	687b      	ldr	r3, [r7, #4]
900080d4:	681a      	ldr	r2, [r3, #0]
900080d6:	687b      	ldr	r3, [r7, #4]
900080d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900080da:	041b      	lsls	r3, r3, #16
900080dc:	4619      	mov	r1, r3
900080de:	4610      	mov	r0, r2
900080e0:	f002 fba8 	bl	9000a834 <SDMMC_CmdAppCommand>
900080e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
900080e6:	697b      	ldr	r3, [r7, #20]
900080e8:	2b00      	cmp	r3, #0
900080ea:	d001      	beq.n	900080f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
900080ec:	697b      	ldr	r3, [r7, #20]
900080ee:	e00f      	b.n	90008110 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
900080f0:	687b      	ldr	r3, [r7, #4]
900080f2:	681b      	ldr	r3, [r3, #0]
900080f4:	2100      	movs	r1, #0
900080f6:	4618      	mov	r0, r3
900080f8:	f002 fbdf 	bl	9000a8ba <SDMMC_CmdBusWidth>
900080fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
900080fe:	697b      	ldr	r3, [r7, #20]
90008100:	2b00      	cmp	r3, #0
90008102:	d001      	beq.n	90008108 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
90008104:	697b      	ldr	r3, [r7, #20]
90008106:	e003      	b.n	90008110 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
90008108:	2300      	movs	r3, #0
9000810a:	e001      	b.n	90008110 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
9000810c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
90008110:	4618      	mov	r0, r3
90008112:	3718      	adds	r7, #24
90008114:	46bd      	mov	sp, r7
90008116:	bd80      	pop	{r7, pc}

90008118 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
90008118:	b580      	push	{r7, lr}
9000811a:	b08e      	sub	sp, #56	; 0x38
9000811c:	af00      	add	r7, sp, #0
9000811e:	6078      	str	r0, [r7, #4]
90008120:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
90008122:	f7fa f86d 	bl	90002200 <HAL_GetTick>
90008126:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
90008128:	2300      	movs	r3, #0
9000812a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
9000812c:	2300      	movs	r3, #0
9000812e:	60bb      	str	r3, [r7, #8]
90008130:	2300      	movs	r3, #0
90008132:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
90008134:	683b      	ldr	r3, [r7, #0]
90008136:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
90008138:	687b      	ldr	r3, [r7, #4]
9000813a:	681b      	ldr	r3, [r3, #0]
9000813c:	2108      	movs	r1, #8
9000813e:	4618      	mov	r0, r3
90008140:	f002 fab6 	bl	9000a6b0 <SDMMC_CmdBlockLength>
90008144:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
90008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008148:	2b00      	cmp	r3, #0
9000814a:	d001      	beq.n	90008150 <SD_FindSCR+0x38>
  {
    return errorstate;
9000814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000814e:	e0ad      	b.n	900082ac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
90008150:	687b      	ldr	r3, [r7, #4]
90008152:	681a      	ldr	r2, [r3, #0]
90008154:	687b      	ldr	r3, [r7, #4]
90008156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90008158:	041b      	lsls	r3, r3, #16
9000815a:	4619      	mov	r1, r3
9000815c:	4610      	mov	r0, r2
9000815e:	f002 fb69 	bl	9000a834 <SDMMC_CmdAppCommand>
90008162:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
90008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008166:	2b00      	cmp	r3, #0
90008168:	d001      	beq.n	9000816e <SD_FindSCR+0x56>
  {
    return errorstate;
9000816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000816c:	e09e      	b.n	900082ac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
9000816e:	f04f 33ff 	mov.w	r3, #4294967295
90008172:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
90008174:	2308      	movs	r3, #8
90008176:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
90008178:	2330      	movs	r3, #48	; 0x30
9000817a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
9000817c:	2302      	movs	r3, #2
9000817e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
90008180:	2300      	movs	r3, #0
90008182:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
90008184:	2301      	movs	r3, #1
90008186:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
90008188:	687b      	ldr	r3, [r7, #4]
9000818a:	681b      	ldr	r3, [r3, #0]
9000818c:	f107 0210 	add.w	r2, r7, #16
90008190:	4611      	mov	r1, r2
90008192:	4618      	mov	r0, r3
90008194:	f002 fa60 	bl	9000a658 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
90008198:	687b      	ldr	r3, [r7, #4]
9000819a:	681b      	ldr	r3, [r3, #0]
9000819c:	4618      	mov	r0, r3
9000819e:	f002 fbaf 	bl	9000a900 <SDMMC_CmdSendSCR>
900081a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
900081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900081a6:	2b00      	cmp	r3, #0
900081a8:	d027      	beq.n	900081fa <SD_FindSCR+0xe2>
  {
    return errorstate;
900081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
900081ac:	e07e      	b.n	900082ac <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
900081ae:	687b      	ldr	r3, [r7, #4]
900081b0:	681b      	ldr	r3, [r3, #0]
900081b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900081b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900081b8:	2b00      	cmp	r3, #0
900081ba:	d113      	bne.n	900081e4 <SD_FindSCR+0xcc>
900081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900081be:	2b00      	cmp	r3, #0
900081c0:	d110      	bne.n	900081e4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
900081c2:	687b      	ldr	r3, [r7, #4]
900081c4:	681b      	ldr	r3, [r3, #0]
900081c6:	4618      	mov	r0, r3
900081c8:	f002 f9be 	bl	9000a548 <SDMMC_ReadFIFO>
900081cc:	4603      	mov	r3, r0
900081ce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
900081d0:	687b      	ldr	r3, [r7, #4]
900081d2:	681b      	ldr	r3, [r3, #0]
900081d4:	4618      	mov	r0, r3
900081d6:	f002 f9b7 	bl	9000a548 <SDMMC_ReadFIFO>
900081da:	4603      	mov	r3, r0
900081dc:	60fb      	str	r3, [r7, #12]
      index++;
900081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900081e0:	3301      	adds	r3, #1
900081e2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
900081e4:	f7fa f80c 	bl	90002200 <HAL_GetTick>
900081e8:	4602      	mov	r2, r0
900081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900081ec:	1ad3      	subs	r3, r2, r3
900081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
900081f2:	d102      	bne.n	900081fa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
900081f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
900081f8:	e058      	b.n	900082ac <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
900081fa:	687b      	ldr	r3, [r7, #4]
900081fc:	681b      	ldr	r3, [r3, #0]
900081fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008200:	f240 532a 	movw	r3, #1322	; 0x52a
90008204:	4013      	ands	r3, r2
90008206:	2b00      	cmp	r3, #0
90008208:	d0d1      	beq.n	900081ae <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
9000820a:	687b      	ldr	r3, [r7, #4]
9000820c:	681b      	ldr	r3, [r3, #0]
9000820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90008210:	f003 0308 	and.w	r3, r3, #8
90008214:	2b00      	cmp	r3, #0
90008216:	d005      	beq.n	90008224 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
90008218:	687b      	ldr	r3, [r7, #4]
9000821a:	681b      	ldr	r3, [r3, #0]
9000821c:	2208      	movs	r2, #8
9000821e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
90008220:	2308      	movs	r3, #8
90008222:	e043      	b.n	900082ac <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
90008224:	687b      	ldr	r3, [r7, #4]
90008226:	681b      	ldr	r3, [r3, #0]
90008228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000822a:	f003 0302 	and.w	r3, r3, #2
9000822e:	2b00      	cmp	r3, #0
90008230:	d005      	beq.n	9000823e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
90008232:	687b      	ldr	r3, [r7, #4]
90008234:	681b      	ldr	r3, [r3, #0]
90008236:	2202      	movs	r2, #2
90008238:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
9000823a:	2302      	movs	r3, #2
9000823c:	e036      	b.n	900082ac <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
9000823e:	687b      	ldr	r3, [r7, #4]
90008240:	681b      	ldr	r3, [r3, #0]
90008242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90008244:	f003 0320 	and.w	r3, r3, #32
90008248:	2b00      	cmp	r3, #0
9000824a:	d005      	beq.n	90008258 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
9000824c:	687b      	ldr	r3, [r7, #4]
9000824e:	681b      	ldr	r3, [r3, #0]
90008250:	2220      	movs	r2, #32
90008252:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
90008254:	2320      	movs	r3, #32
90008256:	e029      	b.n	900082ac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
90008258:	687b      	ldr	r3, [r7, #4]
9000825a:	681b      	ldr	r3, [r3, #0]
9000825c:	4a15      	ldr	r2, [pc, #84]	; (900082b4 <SD_FindSCR+0x19c>)
9000825e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
90008260:	68fb      	ldr	r3, [r7, #12]
90008262:	061a      	lsls	r2, r3, #24
90008264:	68fb      	ldr	r3, [r7, #12]
90008266:	021b      	lsls	r3, r3, #8
90008268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
9000826c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
9000826e:	68fb      	ldr	r3, [r7, #12]
90008270:	0a1b      	lsrs	r3, r3, #8
90008272:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
90008276:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
90008278:	68fb      	ldr	r3, [r7, #12]
9000827a:	0e1b      	lsrs	r3, r3, #24
9000827c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
9000827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008280:	601a      	str	r2, [r3, #0]
    scr++;
90008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008284:	3304      	adds	r3, #4
90008286:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
90008288:	68bb      	ldr	r3, [r7, #8]
9000828a:	061a      	lsls	r2, r3, #24
9000828c:	68bb      	ldr	r3, [r7, #8]
9000828e:	021b      	lsls	r3, r3, #8
90008290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90008294:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
90008296:	68bb      	ldr	r3, [r7, #8]
90008298:	0a1b      	lsrs	r3, r3, #8
9000829a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
9000829e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
900082a0:	68bb      	ldr	r3, [r7, #8]
900082a2:	0e1b      	lsrs	r3, r3, #24
900082a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
900082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900082a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
900082aa:	2300      	movs	r3, #0
}
900082ac:	4618      	mov	r0, r3
900082ae:	3738      	adds	r7, #56	; 0x38
900082b0:	46bd      	mov	sp, r7
900082b2:	bd80      	pop	{r7, pc}
900082b4:	18000f3a 	.word	0x18000f3a

900082b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
900082b8:	b580      	push	{r7, lr}
900082ba:	b086      	sub	sp, #24
900082bc:	af00      	add	r7, sp, #0
900082be:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
900082c0:	687b      	ldr	r3, [r7, #4]
900082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900082c4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
900082c6:	687b      	ldr	r3, [r7, #4]
900082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900082ca:	2b1f      	cmp	r3, #31
900082cc:	d936      	bls.n	9000833c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
900082ce:	2300      	movs	r3, #0
900082d0:	617b      	str	r3, [r7, #20]
900082d2:	e027      	b.n	90008324 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
900082d4:	687b      	ldr	r3, [r7, #4]
900082d6:	681b      	ldr	r3, [r3, #0]
900082d8:	4618      	mov	r0, r3
900082da:	f002 f935 	bl	9000a548 <SDMMC_ReadFIFO>
900082de:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
900082e0:	68fb      	ldr	r3, [r7, #12]
900082e2:	b2da      	uxtb	r2, r3
900082e4:	693b      	ldr	r3, [r7, #16]
900082e6:	701a      	strb	r2, [r3, #0]
      tmp++;
900082e8:	693b      	ldr	r3, [r7, #16]
900082ea:	3301      	adds	r3, #1
900082ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
900082ee:	68fb      	ldr	r3, [r7, #12]
900082f0:	0a1b      	lsrs	r3, r3, #8
900082f2:	b2da      	uxtb	r2, r3
900082f4:	693b      	ldr	r3, [r7, #16]
900082f6:	701a      	strb	r2, [r3, #0]
      tmp++;
900082f8:	693b      	ldr	r3, [r7, #16]
900082fa:	3301      	adds	r3, #1
900082fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
900082fe:	68fb      	ldr	r3, [r7, #12]
90008300:	0c1b      	lsrs	r3, r3, #16
90008302:	b2da      	uxtb	r2, r3
90008304:	693b      	ldr	r3, [r7, #16]
90008306:	701a      	strb	r2, [r3, #0]
      tmp++;
90008308:	693b      	ldr	r3, [r7, #16]
9000830a:	3301      	adds	r3, #1
9000830c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
9000830e:	68fb      	ldr	r3, [r7, #12]
90008310:	0e1b      	lsrs	r3, r3, #24
90008312:	b2da      	uxtb	r2, r3
90008314:	693b      	ldr	r3, [r7, #16]
90008316:	701a      	strb	r2, [r3, #0]
      tmp++;
90008318:	693b      	ldr	r3, [r7, #16]
9000831a:	3301      	adds	r3, #1
9000831c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
9000831e:	697b      	ldr	r3, [r7, #20]
90008320:	3301      	adds	r3, #1
90008322:	617b      	str	r3, [r7, #20]
90008324:	697b      	ldr	r3, [r7, #20]
90008326:	2b07      	cmp	r3, #7
90008328:	d9d4      	bls.n	900082d4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
9000832a:	687b      	ldr	r3, [r7, #4]
9000832c:	693a      	ldr	r2, [r7, #16]
9000832e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
90008330:	687b      	ldr	r3, [r7, #4]
90008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008334:	f1a3 0220 	sub.w	r2, r3, #32
90008338:	687b      	ldr	r3, [r7, #4]
9000833a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
9000833c:	bf00      	nop
9000833e:	3718      	adds	r7, #24
90008340:	46bd      	mov	sp, r7
90008342:	bd80      	pop	{r7, pc}

90008344 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
90008344:	b580      	push	{r7, lr}
90008346:	b086      	sub	sp, #24
90008348:	af00      	add	r7, sp, #0
9000834a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
9000834c:	687b      	ldr	r3, [r7, #4]
9000834e:	6a1b      	ldr	r3, [r3, #32]
90008350:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
90008352:	687b      	ldr	r3, [r7, #4]
90008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90008356:	2b1f      	cmp	r3, #31
90008358:	d93a      	bls.n	900083d0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
9000835a:	2300      	movs	r3, #0
9000835c:	617b      	str	r3, [r7, #20]
9000835e:	e02b      	b.n	900083b8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
90008360:	693b      	ldr	r3, [r7, #16]
90008362:	781b      	ldrb	r3, [r3, #0]
90008364:	60fb      	str	r3, [r7, #12]
      tmp++;
90008366:	693b      	ldr	r3, [r7, #16]
90008368:	3301      	adds	r3, #1
9000836a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
9000836c:	693b      	ldr	r3, [r7, #16]
9000836e:	781b      	ldrb	r3, [r3, #0]
90008370:	021a      	lsls	r2, r3, #8
90008372:	68fb      	ldr	r3, [r7, #12]
90008374:	4313      	orrs	r3, r2
90008376:	60fb      	str	r3, [r7, #12]
      tmp++;
90008378:	693b      	ldr	r3, [r7, #16]
9000837a:	3301      	adds	r3, #1
9000837c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
9000837e:	693b      	ldr	r3, [r7, #16]
90008380:	781b      	ldrb	r3, [r3, #0]
90008382:	041a      	lsls	r2, r3, #16
90008384:	68fb      	ldr	r3, [r7, #12]
90008386:	4313      	orrs	r3, r2
90008388:	60fb      	str	r3, [r7, #12]
      tmp++;
9000838a:	693b      	ldr	r3, [r7, #16]
9000838c:	3301      	adds	r3, #1
9000838e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
90008390:	693b      	ldr	r3, [r7, #16]
90008392:	781b      	ldrb	r3, [r3, #0]
90008394:	061a      	lsls	r2, r3, #24
90008396:	68fb      	ldr	r3, [r7, #12]
90008398:	4313      	orrs	r3, r2
9000839a:	60fb      	str	r3, [r7, #12]
      tmp++;
9000839c:	693b      	ldr	r3, [r7, #16]
9000839e:	3301      	adds	r3, #1
900083a0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
900083a2:	687b      	ldr	r3, [r7, #4]
900083a4:	681b      	ldr	r3, [r3, #0]
900083a6:	f107 020c 	add.w	r2, r7, #12
900083aa:	4611      	mov	r1, r2
900083ac:	4618      	mov	r0, r3
900083ae:	f002 f8d8 	bl	9000a562 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
900083b2:	697b      	ldr	r3, [r7, #20]
900083b4:	3301      	adds	r3, #1
900083b6:	617b      	str	r3, [r7, #20]
900083b8:	697b      	ldr	r3, [r7, #20]
900083ba:	2b07      	cmp	r3, #7
900083bc:	d9d0      	bls.n	90008360 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
900083be:	687b      	ldr	r3, [r7, #4]
900083c0:	693a      	ldr	r2, [r7, #16]
900083c2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
900083c4:	687b      	ldr	r3, [r7, #4]
900083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900083c8:	f1a3 0220 	sub.w	r2, r3, #32
900083cc:	687b      	ldr	r3, [r7, #4]
900083ce:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
900083d0:	bf00      	nop
900083d2:	3718      	adds	r7, #24
900083d4:	46bd      	mov	sp, r7
900083d6:	bd80      	pop	{r7, pc}

900083d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
900083d8:	b480      	push	{r7}
900083da:	b083      	sub	sp, #12
900083dc:	af00      	add	r7, sp, #0
900083de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
900083e0:	bf00      	nop
900083e2:	370c      	adds	r7, #12
900083e4:	46bd      	mov	sp, r7
900083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900083ea:	4770      	bx	lr

900083ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
900083ec:	b480      	push	{r7}
900083ee:	b083      	sub	sp, #12
900083f0:	af00      	add	r7, sp, #0
900083f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
900083f4:	bf00      	nop
900083f6:	370c      	adds	r7, #12
900083f8:	46bd      	mov	sp, r7
900083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
900083fe:	4770      	bx	lr

90008400 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
90008400:	b480      	push	{r7}
90008402:	b083      	sub	sp, #12
90008404:	af00      	add	r7, sp, #0
90008406:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
90008408:	bf00      	nop
9000840a:	370c      	adds	r7, #12
9000840c:	46bd      	mov	sp, r7
9000840e:	f85d 7b04 	ldr.w	r7, [sp], #4
90008412:	4770      	bx	lr

90008414 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
90008414:	b480      	push	{r7}
90008416:	b083      	sub	sp, #12
90008418:	af00      	add	r7, sp, #0
9000841a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
9000841c:	bf00      	nop
9000841e:	370c      	adds	r7, #12
90008420:	46bd      	mov	sp, r7
90008422:	f85d 7b04 	ldr.w	r7, [sp], #4
90008426:	4770      	bx	lr

90008428 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90008428:	b580      	push	{r7, lr}
9000842a:	b082      	sub	sp, #8
9000842c:	af00      	add	r7, sp, #0
9000842e:	6078      	str	r0, [r7, #4]
90008430:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
90008432:	687b      	ldr	r3, [r7, #4]
90008434:	2b00      	cmp	r3, #0
90008436:	d101      	bne.n	9000843c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90008438:	2301      	movs	r3, #1
9000843a:	e02b      	b.n	90008494 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000843c:	687b      	ldr	r3, [r7, #4]
9000843e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90008442:	b2db      	uxtb	r3, r3
90008444:	2b00      	cmp	r3, #0
90008446:	d106      	bne.n	90008456 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90008448:	687b      	ldr	r3, [r7, #4]
9000844a:	2200      	movs	r2, #0
9000844c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90008450:	6878      	ldr	r0, [r7, #4]
90008452:	f7f8 fc8f 	bl	90000d74 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90008456:	687b      	ldr	r3, [r7, #4]
90008458:	2202      	movs	r2, #2
9000845a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000845e:	687b      	ldr	r3, [r7, #4]
90008460:	681a      	ldr	r2, [r3, #0]
90008462:	687b      	ldr	r3, [r7, #4]
90008464:	3304      	adds	r3, #4
90008466:	4619      	mov	r1, r3
90008468:	4610      	mov	r0, r2
9000846a:	f001 ff45 	bl	9000a2f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000846e:	687b      	ldr	r3, [r7, #4]
90008470:	6818      	ldr	r0, [r3, #0]
90008472:	687b      	ldr	r3, [r7, #4]
90008474:	685b      	ldr	r3, [r3, #4]
90008476:	461a      	mov	r2, r3
90008478:	6839      	ldr	r1, [r7, #0]
9000847a:	f001 ff99 	bl	9000a3b0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000847e:	4b07      	ldr	r3, [pc, #28]	; (9000849c <HAL_SDRAM_Init+0x74>)
90008480:	681b      	ldr	r3, [r3, #0]
90008482:	4a06      	ldr	r2, [pc, #24]	; (9000849c <HAL_SDRAM_Init+0x74>)
90008484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90008488:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000848a:	687b      	ldr	r3, [r7, #4]
9000848c:	2201      	movs	r2, #1
9000848e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
90008492:	2300      	movs	r3, #0
}
90008494:	4618      	mov	r0, r3
90008496:	3708      	adds	r7, #8
90008498:	46bd      	mov	sp, r7
9000849a:	bd80      	pop	{r7, pc}
9000849c:	52004000 	.word	0x52004000

900084a0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
900084a0:	b580      	push	{r7, lr}
900084a2:	b086      	sub	sp, #24
900084a4:	af00      	add	r7, sp, #0
900084a6:	60f8      	str	r0, [r7, #12]
900084a8:	60b9      	str	r1, [r7, #8]
900084aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
900084ac:	68fb      	ldr	r3, [r7, #12]
900084ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900084b2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900084b4:	7dfb      	ldrb	r3, [r7, #23]
900084b6:	2b02      	cmp	r3, #2
900084b8:	d101      	bne.n	900084be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
900084ba:	2302      	movs	r3, #2
900084bc:	e021      	b.n	90008502 <HAL_SDRAM_SendCommand+0x62>
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
900084be:	7dfb      	ldrb	r3, [r7, #23]
900084c0:	2b01      	cmp	r3, #1
900084c2:	d002      	beq.n	900084ca <HAL_SDRAM_SendCommand+0x2a>
900084c4:	7dfb      	ldrb	r3, [r7, #23]
900084c6:	2b05      	cmp	r3, #5
900084c8:	d118      	bne.n	900084fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900084ca:	68fb      	ldr	r3, [r7, #12]
900084cc:	2202      	movs	r2, #2
900084ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900084d2:	68fb      	ldr	r3, [r7, #12]
900084d4:	681b      	ldr	r3, [r3, #0]
900084d6:	687a      	ldr	r2, [r7, #4]
900084d8:	68b9      	ldr	r1, [r7, #8]
900084da:	4618      	mov	r0, r3
900084dc:	f001 ffd2 	bl	9000a484 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900084e0:	68bb      	ldr	r3, [r7, #8]
900084e2:	681b      	ldr	r3, [r3, #0]
900084e4:	2b02      	cmp	r3, #2
900084e6:	d104      	bne.n	900084f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
900084e8:	68fb      	ldr	r3, [r7, #12]
900084ea:	2205      	movs	r2, #5
900084ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900084f0:	e006      	b.n	90008500 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
900084f2:	68fb      	ldr	r3, [r7, #12]
900084f4:	2201      	movs	r2, #1
900084f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900084fa:	e001      	b.n	90008500 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
900084fc:	2301      	movs	r3, #1
900084fe:	e000      	b.n	90008502 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90008500:	2300      	movs	r3, #0
}
90008502:	4618      	mov	r0, r3
90008504:	3718      	adds	r7, #24
90008506:	46bd      	mov	sp, r7
90008508:	bd80      	pop	{r7, pc}

9000850a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000850a:	b580      	push	{r7, lr}
9000850c:	b082      	sub	sp, #8
9000850e:	af00      	add	r7, sp, #0
90008510:	6078      	str	r0, [r7, #4]
90008512:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90008514:	687b      	ldr	r3, [r7, #4]
90008516:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000851a:	b2db      	uxtb	r3, r3
9000851c:	2b02      	cmp	r3, #2
9000851e:	d101      	bne.n	90008524 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90008520:	2302      	movs	r3, #2
90008522:	e016      	b.n	90008552 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90008524:	687b      	ldr	r3, [r7, #4]
90008526:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000852a:	b2db      	uxtb	r3, r3
9000852c:	2b01      	cmp	r3, #1
9000852e:	d10f      	bne.n	90008550 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90008530:	687b      	ldr	r3, [r7, #4]
90008532:	2202      	movs	r2, #2
90008534:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90008538:	687b      	ldr	r3, [r7, #4]
9000853a:	681b      	ldr	r3, [r3, #0]
9000853c:	6839      	ldr	r1, [r7, #0]
9000853e:	4618      	mov	r0, r3
90008540:	f001 ffc0 	bl	9000a4c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90008544:	687b      	ldr	r3, [r7, #4]
90008546:	2201      	movs	r2, #1
90008548:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
9000854c:	2300      	movs	r3, #0
9000854e:	e000      	b.n	90008552 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90008550:	2301      	movs	r3, #1
}
90008552:	4618      	mov	r0, r3
90008554:	3708      	adds	r7, #8
90008556:	46bd      	mov	sp, r7
90008558:	bd80      	pop	{r7, pc}
	...

9000855c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
9000855c:	b580      	push	{r7, lr}
9000855e:	b084      	sub	sp, #16
90008560:	af00      	add	r7, sp, #0
90008562:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
90008564:	2300      	movs	r3, #0
90008566:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
90008568:	687b      	ldr	r3, [r7, #4]
9000856a:	2b00      	cmp	r3, #0
9000856c:	d101      	bne.n	90008572 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
9000856e:	2301      	movs	r3, #1
90008570:	e0e2      	b.n	90008738 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
90008572:	687b      	ldr	r3, [r7, #4]
90008574:	2200      	movs	r2, #0
90008576:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
90008578:	687b      	ldr	r3, [r7, #4]
9000857a:	681b      	ldr	r3, [r3, #0]
9000857c:	4a70      	ldr	r2, [pc, #448]	; (90008740 <HAL_SPI_Init+0x1e4>)
9000857e:	4293      	cmp	r3, r2
90008580:	d00f      	beq.n	900085a2 <HAL_SPI_Init+0x46>
90008582:	687b      	ldr	r3, [r7, #4]
90008584:	681b      	ldr	r3, [r3, #0]
90008586:	4a6f      	ldr	r2, [pc, #444]	; (90008744 <HAL_SPI_Init+0x1e8>)
90008588:	4293      	cmp	r3, r2
9000858a:	d00a      	beq.n	900085a2 <HAL_SPI_Init+0x46>
9000858c:	687b      	ldr	r3, [r7, #4]
9000858e:	681b      	ldr	r3, [r3, #0]
90008590:	4a6d      	ldr	r2, [pc, #436]	; (90008748 <HAL_SPI_Init+0x1ec>)
90008592:	4293      	cmp	r3, r2
90008594:	d005      	beq.n	900085a2 <HAL_SPI_Init+0x46>
90008596:	687b      	ldr	r3, [r7, #4]
90008598:	68db      	ldr	r3, [r3, #12]
9000859a:	2b0f      	cmp	r3, #15
9000859c:	d901      	bls.n	900085a2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
9000859e:	2301      	movs	r3, #1
900085a0:	e0ca      	b.n	90008738 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
900085a2:	6878      	ldr	r0, [r7, #4]
900085a4:	f000 f8d2 	bl	9000874c <SPI_GetPacketSize>
900085a8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
900085aa:	687b      	ldr	r3, [r7, #4]
900085ac:	681b      	ldr	r3, [r3, #0]
900085ae:	4a64      	ldr	r2, [pc, #400]	; (90008740 <HAL_SPI_Init+0x1e4>)
900085b0:	4293      	cmp	r3, r2
900085b2:	d00c      	beq.n	900085ce <HAL_SPI_Init+0x72>
900085b4:	687b      	ldr	r3, [r7, #4]
900085b6:	681b      	ldr	r3, [r3, #0]
900085b8:	4a62      	ldr	r2, [pc, #392]	; (90008744 <HAL_SPI_Init+0x1e8>)
900085ba:	4293      	cmp	r3, r2
900085bc:	d007      	beq.n	900085ce <HAL_SPI_Init+0x72>
900085be:	687b      	ldr	r3, [r7, #4]
900085c0:	681b      	ldr	r3, [r3, #0]
900085c2:	4a61      	ldr	r2, [pc, #388]	; (90008748 <HAL_SPI_Init+0x1ec>)
900085c4:	4293      	cmp	r3, r2
900085c6:	d002      	beq.n	900085ce <HAL_SPI_Init+0x72>
900085c8:	68bb      	ldr	r3, [r7, #8]
900085ca:	2b08      	cmp	r3, #8
900085cc:	d811      	bhi.n	900085f2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
900085ce:	687b      	ldr	r3, [r7, #4]
900085d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
900085d2:	4a5b      	ldr	r2, [pc, #364]	; (90008740 <HAL_SPI_Init+0x1e4>)
900085d4:	4293      	cmp	r3, r2
900085d6:	d009      	beq.n	900085ec <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
900085d8:	687b      	ldr	r3, [r7, #4]
900085da:	681b      	ldr	r3, [r3, #0]
900085dc:	4a59      	ldr	r2, [pc, #356]	; (90008744 <HAL_SPI_Init+0x1e8>)
900085de:	4293      	cmp	r3, r2
900085e0:	d004      	beq.n	900085ec <HAL_SPI_Init+0x90>
900085e2:	687b      	ldr	r3, [r7, #4]
900085e4:	681b      	ldr	r3, [r3, #0]
900085e6:	4a58      	ldr	r2, [pc, #352]	; (90008748 <HAL_SPI_Init+0x1ec>)
900085e8:	4293      	cmp	r3, r2
900085ea:	d104      	bne.n	900085f6 <HAL_SPI_Init+0x9a>
900085ec:	68bb      	ldr	r3, [r7, #8]
900085ee:	2b10      	cmp	r3, #16
900085f0:	d901      	bls.n	900085f6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
900085f2:	2301      	movs	r3, #1
900085f4:	e0a0      	b.n	90008738 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
900085f6:	687b      	ldr	r3, [r7, #4]
900085f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
900085fc:	b2db      	uxtb	r3, r3
900085fe:	2b00      	cmp	r3, #0
90008600:	d106      	bne.n	90008610 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
90008602:	687b      	ldr	r3, [r7, #4]
90008604:	2200      	movs	r2, #0
90008606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
9000860a:	6878      	ldr	r0, [r7, #4]
9000860c:	f7f9 f932 	bl	90001874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
90008610:	687b      	ldr	r3, [r7, #4]
90008612:	2202      	movs	r2, #2
90008614:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
90008618:	687b      	ldr	r3, [r7, #4]
9000861a:	681b      	ldr	r3, [r3, #0]
9000861c:	681a      	ldr	r2, [r3, #0]
9000861e:	687b      	ldr	r3, [r7, #4]
90008620:	681b      	ldr	r3, [r3, #0]
90008622:	f022 0201 	bic.w	r2, r2, #1
90008626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
90008628:	687b      	ldr	r3, [r7, #4]
9000862a:	699b      	ldr	r3, [r3, #24]
9000862c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90008630:	d110      	bne.n	90008654 <HAL_SPI_Init+0xf8>
90008632:	687b      	ldr	r3, [r7, #4]
90008634:	685b      	ldr	r3, [r3, #4]
90008636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000863a:	d10b      	bne.n	90008654 <HAL_SPI_Init+0xf8>
9000863c:	687b      	ldr	r3, [r7, #4]
9000863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90008640:	2b00      	cmp	r3, #0
90008642:	d107      	bne.n	90008654 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
90008644:	687b      	ldr	r3, [r7, #4]
90008646:	681b      	ldr	r3, [r3, #0]
90008648:	681a      	ldr	r2, [r3, #0]
9000864a:	687b      	ldr	r3, [r7, #4]
9000864c:	681b      	ldr	r3, [r3, #0]
9000864e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90008652:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
90008654:	687b      	ldr	r3, [r7, #4]
90008656:	69da      	ldr	r2, [r3, #28]
90008658:	687b      	ldr	r3, [r7, #4]
9000865a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000865c:	431a      	orrs	r2, r3
9000865e:	68fb      	ldr	r3, [r7, #12]
90008660:	431a      	orrs	r2, r3
90008662:	687b      	ldr	r3, [r7, #4]
90008664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90008666:	ea42 0103 	orr.w	r1, r2, r3
9000866a:	687b      	ldr	r3, [r7, #4]
9000866c:	68da      	ldr	r2, [r3, #12]
9000866e:	687b      	ldr	r3, [r7, #4]
90008670:	681b      	ldr	r3, [r3, #0]
90008672:	430a      	orrs	r2, r1
90008674:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
90008676:	687b      	ldr	r3, [r7, #4]
90008678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000867a:	687b      	ldr	r3, [r7, #4]
9000867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000867e:	431a      	orrs	r2, r3
90008680:	687b      	ldr	r3, [r7, #4]
90008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90008684:	431a      	orrs	r2, r3
90008686:	687b      	ldr	r3, [r7, #4]
90008688:	699b      	ldr	r3, [r3, #24]
9000868a:	431a      	orrs	r2, r3
9000868c:	687b      	ldr	r3, [r7, #4]
9000868e:	691b      	ldr	r3, [r3, #16]
90008690:	431a      	orrs	r2, r3
90008692:	687b      	ldr	r3, [r7, #4]
90008694:	695b      	ldr	r3, [r3, #20]
90008696:	431a      	orrs	r2, r3
90008698:	687b      	ldr	r3, [r7, #4]
9000869a:	6a1b      	ldr	r3, [r3, #32]
9000869c:	431a      	orrs	r2, r3
9000869e:	687b      	ldr	r3, [r7, #4]
900086a0:	685b      	ldr	r3, [r3, #4]
900086a2:	431a      	orrs	r2, r3
900086a4:	687b      	ldr	r3, [r7, #4]
900086a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900086a8:	431a      	orrs	r2, r3
900086aa:	687b      	ldr	r3, [r7, #4]
900086ac:	689b      	ldr	r3, [r3, #8]
900086ae:	431a      	orrs	r2, r3
900086b0:	687b      	ldr	r3, [r7, #4]
900086b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900086b4:	ea42 0103 	orr.w	r1, r2, r3
900086b8:	687b      	ldr	r3, [r7, #4]
900086ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
900086bc:	687b      	ldr	r3, [r7, #4]
900086be:	681b      	ldr	r3, [r3, #0]
900086c0:	430a      	orrs	r2, r1
900086c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
900086c4:	687b      	ldr	r3, [r7, #4]
900086c6:	685b      	ldr	r3, [r3, #4]
900086c8:	2b00      	cmp	r3, #0
900086ca:	d113      	bne.n	900086f4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
900086cc:	687b      	ldr	r3, [r7, #4]
900086ce:	681b      	ldr	r3, [r3, #0]
900086d0:	689b      	ldr	r3, [r3, #8]
900086d2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
900086d6:	687b      	ldr	r3, [r7, #4]
900086d8:	681b      	ldr	r3, [r3, #0]
900086da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
900086de:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
900086e0:	687b      	ldr	r3, [r7, #4]
900086e2:	681b      	ldr	r3, [r3, #0]
900086e4:	689b      	ldr	r3, [r3, #8]
900086e6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
900086ea:	687b      	ldr	r3, [r7, #4]
900086ec:	681b      	ldr	r3, [r3, #0]
900086ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
900086f2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
900086f4:	687b      	ldr	r3, [r7, #4]
900086f6:	681b      	ldr	r3, [r3, #0]
900086f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
900086fa:	687b      	ldr	r3, [r7, #4]
900086fc:	681b      	ldr	r3, [r3, #0]
900086fe:	f022 0201 	bic.w	r2, r2, #1
90008702:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
90008704:	687b      	ldr	r3, [r7, #4]
90008706:	685b      	ldr	r3, [r3, #4]
90008708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000870c:	2b00      	cmp	r3, #0
9000870e:	d00a      	beq.n	90008726 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
90008710:	687b      	ldr	r3, [r7, #4]
90008712:	681b      	ldr	r3, [r3, #0]
90008714:	68db      	ldr	r3, [r3, #12]
90008716:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
9000871a:	687b      	ldr	r3, [r7, #4]
9000871c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000871e:	687b      	ldr	r3, [r7, #4]
90008720:	681b      	ldr	r3, [r3, #0]
90008722:	430a      	orrs	r2, r1
90008724:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
90008726:	687b      	ldr	r3, [r7, #4]
90008728:	2200      	movs	r2, #0
9000872a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
9000872e:	687b      	ldr	r3, [r7, #4]
90008730:	2201      	movs	r2, #1
90008732:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
90008736:	2300      	movs	r3, #0
}
90008738:	4618      	mov	r0, r3
9000873a:	3710      	adds	r7, #16
9000873c:	46bd      	mov	sp, r7
9000873e:	bd80      	pop	{r7, pc}
90008740:	40013000 	.word	0x40013000
90008744:	40003800 	.word	0x40003800
90008748:	40003c00 	.word	0x40003c00

9000874c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
9000874c:	b480      	push	{r7}
9000874e:	b085      	sub	sp, #20
90008750:	af00      	add	r7, sp, #0
90008752:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
90008754:	687b      	ldr	r3, [r7, #4]
90008756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90008758:	095b      	lsrs	r3, r3, #5
9000875a:	3301      	adds	r3, #1
9000875c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
9000875e:	687b      	ldr	r3, [r7, #4]
90008760:	68db      	ldr	r3, [r3, #12]
90008762:	3301      	adds	r3, #1
90008764:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
90008766:	68bb      	ldr	r3, [r7, #8]
90008768:	3307      	adds	r3, #7
9000876a:	08db      	lsrs	r3, r3, #3
9000876c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
9000876e:	68bb      	ldr	r3, [r7, #8]
90008770:	68fa      	ldr	r2, [r7, #12]
90008772:	fb02 f303 	mul.w	r3, r2, r3
}
90008776:	4618      	mov	r0, r3
90008778:	3714      	adds	r7, #20
9000877a:	46bd      	mov	sp, r7
9000877c:	f85d 7b04 	ldr.w	r7, [sp], #4
90008780:	4770      	bx	lr

90008782 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
90008782:	b580      	push	{r7, lr}
90008784:	b082      	sub	sp, #8
90008786:	af00      	add	r7, sp, #0
90008788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000878a:	687b      	ldr	r3, [r7, #4]
9000878c:	2b00      	cmp	r3, #0
9000878e:	d101      	bne.n	90008794 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
90008790:	2301      	movs	r3, #1
90008792:	e049      	b.n	90008828 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90008794:	687b      	ldr	r3, [r7, #4]
90008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
9000879a:	b2db      	uxtb	r3, r3
9000879c:	2b00      	cmp	r3, #0
9000879e:	d106      	bne.n	900087ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
900087a0:	687b      	ldr	r3, [r7, #4]
900087a2:	2200      	movs	r2, #0
900087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
900087a8:	6878      	ldr	r0, [r7, #4]
900087aa:	f000 f841 	bl	90008830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900087ae:	687b      	ldr	r3, [r7, #4]
900087b0:	2202      	movs	r2, #2
900087b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900087b6:	687b      	ldr	r3, [r7, #4]
900087b8:	681a      	ldr	r2, [r3, #0]
900087ba:	687b      	ldr	r3, [r7, #4]
900087bc:	3304      	adds	r3, #4
900087be:	4619      	mov	r1, r3
900087c0:	4610      	mov	r0, r2
900087c2:	f000 f9bd 	bl	90008b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
900087c6:	687b      	ldr	r3, [r7, #4]
900087c8:	2201      	movs	r2, #1
900087ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900087ce:	687b      	ldr	r3, [r7, #4]
900087d0:	2201      	movs	r2, #1
900087d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
900087d6:	687b      	ldr	r3, [r7, #4]
900087d8:	2201      	movs	r2, #1
900087da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
900087de:	687b      	ldr	r3, [r7, #4]
900087e0:	2201      	movs	r2, #1
900087e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
900087e6:	687b      	ldr	r3, [r7, #4]
900087e8:	2201      	movs	r2, #1
900087ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
900087ee:	687b      	ldr	r3, [r7, #4]
900087f0:	2201      	movs	r2, #1
900087f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
900087f6:	687b      	ldr	r3, [r7, #4]
900087f8:	2201      	movs	r2, #1
900087fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900087fe:	687b      	ldr	r3, [r7, #4]
90008800:	2201      	movs	r2, #1
90008802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90008806:	687b      	ldr	r3, [r7, #4]
90008808:	2201      	movs	r2, #1
9000880a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
9000880e:	687b      	ldr	r3, [r7, #4]
90008810:	2201      	movs	r2, #1
90008812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
90008816:	687b      	ldr	r3, [r7, #4]
90008818:	2201      	movs	r2, #1
9000881a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
9000881e:	687b      	ldr	r3, [r7, #4]
90008820:	2201      	movs	r2, #1
90008822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
90008826:	2300      	movs	r3, #0
}
90008828:	4618      	mov	r0, r3
9000882a:	3708      	adds	r7, #8
9000882c:	46bd      	mov	sp, r7
9000882e:	bd80      	pop	{r7, pc}

90008830 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
90008830:	b480      	push	{r7}
90008832:	b083      	sub	sp, #12
90008834:	af00      	add	r7, sp, #0
90008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
90008838:	bf00      	nop
9000883a:	370c      	adds	r7, #12
9000883c:	46bd      	mov	sp, r7
9000883e:	f85d 7b04 	ldr.w	r7, [sp], #4
90008842:	4770      	bx	lr

90008844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
90008844:	b480      	push	{r7}
90008846:	b085      	sub	sp, #20
90008848:	af00      	add	r7, sp, #0
9000884a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
9000884c:	687b      	ldr	r3, [r7, #4]
9000884e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
90008852:	b2db      	uxtb	r3, r3
90008854:	2b01      	cmp	r3, #1
90008856:	d001      	beq.n	9000885c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
90008858:	2301      	movs	r3, #1
9000885a:	e021      	b.n	900088a0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000885c:	687b      	ldr	r3, [r7, #4]
9000885e:	2202      	movs	r2, #2
90008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
90008864:	687b      	ldr	r3, [r7, #4]
90008866:	681b      	ldr	r3, [r3, #0]
90008868:	68da      	ldr	r2, [r3, #12]
9000886a:	687b      	ldr	r3, [r7, #4]
9000886c:	681b      	ldr	r3, [r3, #0]
9000886e:	f042 0201 	orr.w	r2, r2, #1
90008872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
90008874:	687b      	ldr	r3, [r7, #4]
90008876:	681b      	ldr	r3, [r3, #0]
90008878:	689a      	ldr	r2, [r3, #8]
9000887a:	4b0c      	ldr	r3, [pc, #48]	; (900088ac <HAL_TIM_Base_Start_IT+0x68>)
9000887c:	4013      	ands	r3, r2
9000887e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90008880:	68fb      	ldr	r3, [r7, #12]
90008882:	2b06      	cmp	r3, #6
90008884:	d00b      	beq.n	9000889e <HAL_TIM_Base_Start_IT+0x5a>
90008886:	68fb      	ldr	r3, [r7, #12]
90008888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000888c:	d007      	beq.n	9000889e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
9000888e:	687b      	ldr	r3, [r7, #4]
90008890:	681b      	ldr	r3, [r3, #0]
90008892:	681a      	ldr	r2, [r3, #0]
90008894:	687b      	ldr	r3, [r7, #4]
90008896:	681b      	ldr	r3, [r3, #0]
90008898:	f042 0201 	orr.w	r2, r2, #1
9000889c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
9000889e:	2300      	movs	r3, #0
}
900088a0:	4618      	mov	r0, r3
900088a2:	3714      	adds	r7, #20
900088a4:	46bd      	mov	sp, r7
900088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900088aa:	4770      	bx	lr
900088ac:	00010007 	.word	0x00010007

900088b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
900088b0:	b580      	push	{r7, lr}
900088b2:	b082      	sub	sp, #8
900088b4:	af00      	add	r7, sp, #0
900088b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
900088b8:	687b      	ldr	r3, [r7, #4]
900088ba:	681b      	ldr	r3, [r3, #0]
900088bc:	691b      	ldr	r3, [r3, #16]
900088be:	f003 0302 	and.w	r3, r3, #2
900088c2:	2b02      	cmp	r3, #2
900088c4:	d122      	bne.n	9000890c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
900088c6:	687b      	ldr	r3, [r7, #4]
900088c8:	681b      	ldr	r3, [r3, #0]
900088ca:	68db      	ldr	r3, [r3, #12]
900088cc:	f003 0302 	and.w	r3, r3, #2
900088d0:	2b02      	cmp	r3, #2
900088d2:	d11b      	bne.n	9000890c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
900088d4:	687b      	ldr	r3, [r7, #4]
900088d6:	681b      	ldr	r3, [r3, #0]
900088d8:	f06f 0202 	mvn.w	r2, #2
900088dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
900088de:	687b      	ldr	r3, [r7, #4]
900088e0:	2201      	movs	r2, #1
900088e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
900088e4:	687b      	ldr	r3, [r7, #4]
900088e6:	681b      	ldr	r3, [r3, #0]
900088e8:	699b      	ldr	r3, [r3, #24]
900088ea:	f003 0303 	and.w	r3, r3, #3
900088ee:	2b00      	cmp	r3, #0
900088f0:	d003      	beq.n	900088fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
900088f2:	6878      	ldr	r0, [r7, #4]
900088f4:	f000 f905 	bl	90008b02 <HAL_TIM_IC_CaptureCallback>
900088f8:	e005      	b.n	90008906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
900088fa:	6878      	ldr	r0, [r7, #4]
900088fc:	f000 f8f7 	bl	90008aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
90008900:	6878      	ldr	r0, [r7, #4]
90008902:	f000 f908 	bl	90008b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90008906:	687b      	ldr	r3, [r7, #4]
90008908:	2200      	movs	r2, #0
9000890a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000890c:	687b      	ldr	r3, [r7, #4]
9000890e:	681b      	ldr	r3, [r3, #0]
90008910:	691b      	ldr	r3, [r3, #16]
90008912:	f003 0304 	and.w	r3, r3, #4
90008916:	2b04      	cmp	r3, #4
90008918:	d122      	bne.n	90008960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000891a:	687b      	ldr	r3, [r7, #4]
9000891c:	681b      	ldr	r3, [r3, #0]
9000891e:	68db      	ldr	r3, [r3, #12]
90008920:	f003 0304 	and.w	r3, r3, #4
90008924:	2b04      	cmp	r3, #4
90008926:	d11b      	bne.n	90008960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
90008928:	687b      	ldr	r3, [r7, #4]
9000892a:	681b      	ldr	r3, [r3, #0]
9000892c:	f06f 0204 	mvn.w	r2, #4
90008930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
90008932:	687b      	ldr	r3, [r7, #4]
90008934:	2202      	movs	r2, #2
90008936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
90008938:	687b      	ldr	r3, [r7, #4]
9000893a:	681b      	ldr	r3, [r3, #0]
9000893c:	699b      	ldr	r3, [r3, #24]
9000893e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90008942:	2b00      	cmp	r3, #0
90008944:	d003      	beq.n	9000894e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90008946:	6878      	ldr	r0, [r7, #4]
90008948:	f000 f8db 	bl	90008b02 <HAL_TIM_IC_CaptureCallback>
9000894c:	e005      	b.n	9000895a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000894e:	6878      	ldr	r0, [r7, #4]
90008950:	f000 f8cd 	bl	90008aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90008954:	6878      	ldr	r0, [r7, #4]
90008956:	f000 f8de 	bl	90008b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000895a:	687b      	ldr	r3, [r7, #4]
9000895c:	2200      	movs	r2, #0
9000895e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
90008960:	687b      	ldr	r3, [r7, #4]
90008962:	681b      	ldr	r3, [r3, #0]
90008964:	691b      	ldr	r3, [r3, #16]
90008966:	f003 0308 	and.w	r3, r3, #8
9000896a:	2b08      	cmp	r3, #8
9000896c:	d122      	bne.n	900089b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000896e:	687b      	ldr	r3, [r7, #4]
90008970:	681b      	ldr	r3, [r3, #0]
90008972:	68db      	ldr	r3, [r3, #12]
90008974:	f003 0308 	and.w	r3, r3, #8
90008978:	2b08      	cmp	r3, #8
9000897a:	d11b      	bne.n	900089b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000897c:	687b      	ldr	r3, [r7, #4]
9000897e:	681b      	ldr	r3, [r3, #0]
90008980:	f06f 0208 	mvn.w	r2, #8
90008984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
90008986:	687b      	ldr	r3, [r7, #4]
90008988:	2204      	movs	r2, #4
9000898a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000898c:	687b      	ldr	r3, [r7, #4]
9000898e:	681b      	ldr	r3, [r3, #0]
90008990:	69db      	ldr	r3, [r3, #28]
90008992:	f003 0303 	and.w	r3, r3, #3
90008996:	2b00      	cmp	r3, #0
90008998:	d003      	beq.n	900089a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
9000899a:	6878      	ldr	r0, [r7, #4]
9000899c:	f000 f8b1 	bl	90008b02 <HAL_TIM_IC_CaptureCallback>
900089a0:	e005      	b.n	900089ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
900089a2:	6878      	ldr	r0, [r7, #4]
900089a4:	f000 f8a3 	bl	90008aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
900089a8:	6878      	ldr	r0, [r7, #4]
900089aa:	f000 f8b4 	bl	90008b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
900089ae:	687b      	ldr	r3, [r7, #4]
900089b0:	2200      	movs	r2, #0
900089b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
900089b4:	687b      	ldr	r3, [r7, #4]
900089b6:	681b      	ldr	r3, [r3, #0]
900089b8:	691b      	ldr	r3, [r3, #16]
900089ba:	f003 0310 	and.w	r3, r3, #16
900089be:	2b10      	cmp	r3, #16
900089c0:	d122      	bne.n	90008a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
900089c2:	687b      	ldr	r3, [r7, #4]
900089c4:	681b      	ldr	r3, [r3, #0]
900089c6:	68db      	ldr	r3, [r3, #12]
900089c8:	f003 0310 	and.w	r3, r3, #16
900089cc:	2b10      	cmp	r3, #16
900089ce:	d11b      	bne.n	90008a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
900089d0:	687b      	ldr	r3, [r7, #4]
900089d2:	681b      	ldr	r3, [r3, #0]
900089d4:	f06f 0210 	mvn.w	r2, #16
900089d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
900089da:	687b      	ldr	r3, [r7, #4]
900089dc:	2208      	movs	r2, #8
900089de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
900089e0:	687b      	ldr	r3, [r7, #4]
900089e2:	681b      	ldr	r3, [r3, #0]
900089e4:	69db      	ldr	r3, [r3, #28]
900089e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
900089ea:	2b00      	cmp	r3, #0
900089ec:	d003      	beq.n	900089f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
900089ee:	6878      	ldr	r0, [r7, #4]
900089f0:	f000 f887 	bl	90008b02 <HAL_TIM_IC_CaptureCallback>
900089f4:	e005      	b.n	90008a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
900089f6:	6878      	ldr	r0, [r7, #4]
900089f8:	f000 f879 	bl	90008aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
900089fc:	6878      	ldr	r0, [r7, #4]
900089fe:	f000 f88a 	bl	90008b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90008a02:	687b      	ldr	r3, [r7, #4]
90008a04:	2200      	movs	r2, #0
90008a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
90008a08:	687b      	ldr	r3, [r7, #4]
90008a0a:	681b      	ldr	r3, [r3, #0]
90008a0c:	691b      	ldr	r3, [r3, #16]
90008a0e:	f003 0301 	and.w	r3, r3, #1
90008a12:	2b01      	cmp	r3, #1
90008a14:	d10e      	bne.n	90008a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
90008a16:	687b      	ldr	r3, [r7, #4]
90008a18:	681b      	ldr	r3, [r3, #0]
90008a1a:	68db      	ldr	r3, [r3, #12]
90008a1c:	f003 0301 	and.w	r3, r3, #1
90008a20:	2b01      	cmp	r3, #1
90008a22:	d107      	bne.n	90008a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
90008a24:	687b      	ldr	r3, [r7, #4]
90008a26:	681b      	ldr	r3, [r3, #0]
90008a28:	f06f 0201 	mvn.w	r2, #1
90008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
90008a2e:	6878      	ldr	r0, [r7, #4]
90008a30:	f7f8 fe16 	bl	90001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
90008a34:	687b      	ldr	r3, [r7, #4]
90008a36:	681b      	ldr	r3, [r3, #0]
90008a38:	691b      	ldr	r3, [r3, #16]
90008a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008a3e:	2b80      	cmp	r3, #128	; 0x80
90008a40:	d10e      	bne.n	90008a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
90008a42:	687b      	ldr	r3, [r7, #4]
90008a44:	681b      	ldr	r3, [r3, #0]
90008a46:	68db      	ldr	r3, [r3, #12]
90008a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008a4c:	2b80      	cmp	r3, #128	; 0x80
90008a4e:	d107      	bne.n	90008a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
90008a50:	687b      	ldr	r3, [r7, #4]
90008a52:	681b      	ldr	r3, [r3, #0]
90008a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
90008a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
90008a5a:	6878      	ldr	r0, [r7, #4]
90008a5c:	f000 f914 	bl	90008c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
90008a60:	687b      	ldr	r3, [r7, #4]
90008a62:	681b      	ldr	r3, [r3, #0]
90008a64:	691b      	ldr	r3, [r3, #16]
90008a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
90008a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008a6e:	d10e      	bne.n	90008a8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
90008a70:	687b      	ldr	r3, [r7, #4]
90008a72:	681b      	ldr	r3, [r3, #0]
90008a74:	68db      	ldr	r3, [r3, #12]
90008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008a7a:	2b80      	cmp	r3, #128	; 0x80
90008a7c:	d107      	bne.n	90008a8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
90008a7e:	687b      	ldr	r3, [r7, #4]
90008a80:	681b      	ldr	r3, [r3, #0]
90008a82:	f46f 7280 	mvn.w	r2, #256	; 0x100
90008a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
90008a88:	6878      	ldr	r0, [r7, #4]
90008a8a:	f000 f907 	bl	90008c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
90008a8e:	687b      	ldr	r3, [r7, #4]
90008a90:	681b      	ldr	r3, [r3, #0]
90008a92:	691b      	ldr	r3, [r3, #16]
90008a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
90008a98:	2b40      	cmp	r3, #64	; 0x40
90008a9a:	d10e      	bne.n	90008aba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
90008a9c:	687b      	ldr	r3, [r7, #4]
90008a9e:	681b      	ldr	r3, [r3, #0]
90008aa0:	68db      	ldr	r3, [r3, #12]
90008aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
90008aa6:	2b40      	cmp	r3, #64	; 0x40
90008aa8:	d107      	bne.n	90008aba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
90008aaa:	687b      	ldr	r3, [r7, #4]
90008aac:	681b      	ldr	r3, [r3, #0]
90008aae:	f06f 0240 	mvn.w	r2, #64	; 0x40
90008ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
90008ab4:	6878      	ldr	r0, [r7, #4]
90008ab6:	f000 f838 	bl	90008b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
90008aba:	687b      	ldr	r3, [r7, #4]
90008abc:	681b      	ldr	r3, [r3, #0]
90008abe:	691b      	ldr	r3, [r3, #16]
90008ac0:	f003 0320 	and.w	r3, r3, #32
90008ac4:	2b20      	cmp	r3, #32
90008ac6:	d10e      	bne.n	90008ae6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
90008ac8:	687b      	ldr	r3, [r7, #4]
90008aca:	681b      	ldr	r3, [r3, #0]
90008acc:	68db      	ldr	r3, [r3, #12]
90008ace:	f003 0320 	and.w	r3, r3, #32
90008ad2:	2b20      	cmp	r3, #32
90008ad4:	d107      	bne.n	90008ae6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
90008ad6:	687b      	ldr	r3, [r7, #4]
90008ad8:	681b      	ldr	r3, [r3, #0]
90008ada:	f06f 0220 	mvn.w	r2, #32
90008ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
90008ae0:	6878      	ldr	r0, [r7, #4]
90008ae2:	f000 f8c7 	bl	90008c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
90008ae6:	bf00      	nop
90008ae8:	3708      	adds	r7, #8
90008aea:	46bd      	mov	sp, r7
90008aec:	bd80      	pop	{r7, pc}

90008aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
90008aee:	b480      	push	{r7}
90008af0:	b083      	sub	sp, #12
90008af2:	af00      	add	r7, sp, #0
90008af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
90008af6:	bf00      	nop
90008af8:	370c      	adds	r7, #12
90008afa:	46bd      	mov	sp, r7
90008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b00:	4770      	bx	lr

90008b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
90008b02:	b480      	push	{r7}
90008b04:	b083      	sub	sp, #12
90008b06:	af00      	add	r7, sp, #0
90008b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
90008b0a:	bf00      	nop
90008b0c:	370c      	adds	r7, #12
90008b0e:	46bd      	mov	sp, r7
90008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b14:	4770      	bx	lr

90008b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
90008b16:	b480      	push	{r7}
90008b18:	b083      	sub	sp, #12
90008b1a:	af00      	add	r7, sp, #0
90008b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
90008b1e:	bf00      	nop
90008b20:	370c      	adds	r7, #12
90008b22:	46bd      	mov	sp, r7
90008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b28:	4770      	bx	lr

90008b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
90008b2a:	b480      	push	{r7}
90008b2c:	b083      	sub	sp, #12
90008b2e:	af00      	add	r7, sp, #0
90008b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
90008b32:	bf00      	nop
90008b34:	370c      	adds	r7, #12
90008b36:	46bd      	mov	sp, r7
90008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b3c:	4770      	bx	lr
	...

90008b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
90008b40:	b480      	push	{r7}
90008b42:	b085      	sub	sp, #20
90008b44:	af00      	add	r7, sp, #0
90008b46:	6078      	str	r0, [r7, #4]
90008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90008b4a:	687b      	ldr	r3, [r7, #4]
90008b4c:	681b      	ldr	r3, [r3, #0]
90008b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90008b50:	687b      	ldr	r3, [r7, #4]
90008b52:	4a40      	ldr	r2, [pc, #256]	; (90008c54 <TIM_Base_SetConfig+0x114>)
90008b54:	4293      	cmp	r3, r2
90008b56:	d013      	beq.n	90008b80 <TIM_Base_SetConfig+0x40>
90008b58:	687b      	ldr	r3, [r7, #4]
90008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90008b5e:	d00f      	beq.n	90008b80 <TIM_Base_SetConfig+0x40>
90008b60:	687b      	ldr	r3, [r7, #4]
90008b62:	4a3d      	ldr	r2, [pc, #244]	; (90008c58 <TIM_Base_SetConfig+0x118>)
90008b64:	4293      	cmp	r3, r2
90008b66:	d00b      	beq.n	90008b80 <TIM_Base_SetConfig+0x40>
90008b68:	687b      	ldr	r3, [r7, #4]
90008b6a:	4a3c      	ldr	r2, [pc, #240]	; (90008c5c <TIM_Base_SetConfig+0x11c>)
90008b6c:	4293      	cmp	r3, r2
90008b6e:	d007      	beq.n	90008b80 <TIM_Base_SetConfig+0x40>
90008b70:	687b      	ldr	r3, [r7, #4]
90008b72:	4a3b      	ldr	r2, [pc, #236]	; (90008c60 <TIM_Base_SetConfig+0x120>)
90008b74:	4293      	cmp	r3, r2
90008b76:	d003      	beq.n	90008b80 <TIM_Base_SetConfig+0x40>
90008b78:	687b      	ldr	r3, [r7, #4]
90008b7a:	4a3a      	ldr	r2, [pc, #232]	; (90008c64 <TIM_Base_SetConfig+0x124>)
90008b7c:	4293      	cmp	r3, r2
90008b7e:	d108      	bne.n	90008b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90008b80:	68fb      	ldr	r3, [r7, #12]
90008b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
90008b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90008b88:	683b      	ldr	r3, [r7, #0]
90008b8a:	685b      	ldr	r3, [r3, #4]
90008b8c:	68fa      	ldr	r2, [r7, #12]
90008b8e:	4313      	orrs	r3, r2
90008b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90008b92:	687b      	ldr	r3, [r7, #4]
90008b94:	4a2f      	ldr	r2, [pc, #188]	; (90008c54 <TIM_Base_SetConfig+0x114>)
90008b96:	4293      	cmp	r3, r2
90008b98:	d01f      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008b9a:	687b      	ldr	r3, [r7, #4]
90008b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90008ba0:	d01b      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008ba2:	687b      	ldr	r3, [r7, #4]
90008ba4:	4a2c      	ldr	r2, [pc, #176]	; (90008c58 <TIM_Base_SetConfig+0x118>)
90008ba6:	4293      	cmp	r3, r2
90008ba8:	d017      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008baa:	687b      	ldr	r3, [r7, #4]
90008bac:	4a2b      	ldr	r2, [pc, #172]	; (90008c5c <TIM_Base_SetConfig+0x11c>)
90008bae:	4293      	cmp	r3, r2
90008bb0:	d013      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008bb2:	687b      	ldr	r3, [r7, #4]
90008bb4:	4a2a      	ldr	r2, [pc, #168]	; (90008c60 <TIM_Base_SetConfig+0x120>)
90008bb6:	4293      	cmp	r3, r2
90008bb8:	d00f      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008bba:	687b      	ldr	r3, [r7, #4]
90008bbc:	4a29      	ldr	r2, [pc, #164]	; (90008c64 <TIM_Base_SetConfig+0x124>)
90008bbe:	4293      	cmp	r3, r2
90008bc0:	d00b      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008bc2:	687b      	ldr	r3, [r7, #4]
90008bc4:	4a28      	ldr	r2, [pc, #160]	; (90008c68 <TIM_Base_SetConfig+0x128>)
90008bc6:	4293      	cmp	r3, r2
90008bc8:	d007      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008bca:	687b      	ldr	r3, [r7, #4]
90008bcc:	4a27      	ldr	r2, [pc, #156]	; (90008c6c <TIM_Base_SetConfig+0x12c>)
90008bce:	4293      	cmp	r3, r2
90008bd0:	d003      	beq.n	90008bda <TIM_Base_SetConfig+0x9a>
90008bd2:	687b      	ldr	r3, [r7, #4]
90008bd4:	4a26      	ldr	r2, [pc, #152]	; (90008c70 <TIM_Base_SetConfig+0x130>)
90008bd6:	4293      	cmp	r3, r2
90008bd8:	d108      	bne.n	90008bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90008bda:	68fb      	ldr	r3, [r7, #12]
90008bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90008be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90008be2:	683b      	ldr	r3, [r7, #0]
90008be4:	68db      	ldr	r3, [r3, #12]
90008be6:	68fa      	ldr	r2, [r7, #12]
90008be8:	4313      	orrs	r3, r2
90008bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90008bec:	68fb      	ldr	r3, [r7, #12]
90008bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
90008bf2:	683b      	ldr	r3, [r7, #0]
90008bf4:	695b      	ldr	r3, [r3, #20]
90008bf6:	4313      	orrs	r3, r2
90008bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
90008bfa:	687b      	ldr	r3, [r7, #4]
90008bfc:	68fa      	ldr	r2, [r7, #12]
90008bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90008c00:	683b      	ldr	r3, [r7, #0]
90008c02:	689a      	ldr	r2, [r3, #8]
90008c04:	687b      	ldr	r3, [r7, #4]
90008c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90008c08:	683b      	ldr	r3, [r7, #0]
90008c0a:	681a      	ldr	r2, [r3, #0]
90008c0c:	687b      	ldr	r3, [r7, #4]
90008c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90008c10:	687b      	ldr	r3, [r7, #4]
90008c12:	4a10      	ldr	r2, [pc, #64]	; (90008c54 <TIM_Base_SetConfig+0x114>)
90008c14:	4293      	cmp	r3, r2
90008c16:	d00f      	beq.n	90008c38 <TIM_Base_SetConfig+0xf8>
90008c18:	687b      	ldr	r3, [r7, #4]
90008c1a:	4a12      	ldr	r2, [pc, #72]	; (90008c64 <TIM_Base_SetConfig+0x124>)
90008c1c:	4293      	cmp	r3, r2
90008c1e:	d00b      	beq.n	90008c38 <TIM_Base_SetConfig+0xf8>
90008c20:	687b      	ldr	r3, [r7, #4]
90008c22:	4a11      	ldr	r2, [pc, #68]	; (90008c68 <TIM_Base_SetConfig+0x128>)
90008c24:	4293      	cmp	r3, r2
90008c26:	d007      	beq.n	90008c38 <TIM_Base_SetConfig+0xf8>
90008c28:	687b      	ldr	r3, [r7, #4]
90008c2a:	4a10      	ldr	r2, [pc, #64]	; (90008c6c <TIM_Base_SetConfig+0x12c>)
90008c2c:	4293      	cmp	r3, r2
90008c2e:	d003      	beq.n	90008c38 <TIM_Base_SetConfig+0xf8>
90008c30:	687b      	ldr	r3, [r7, #4]
90008c32:	4a0f      	ldr	r2, [pc, #60]	; (90008c70 <TIM_Base_SetConfig+0x130>)
90008c34:	4293      	cmp	r3, r2
90008c36:	d103      	bne.n	90008c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90008c38:	683b      	ldr	r3, [r7, #0]
90008c3a:	691a      	ldr	r2, [r3, #16]
90008c3c:	687b      	ldr	r3, [r7, #4]
90008c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90008c40:	687b      	ldr	r3, [r7, #4]
90008c42:	2201      	movs	r2, #1
90008c44:	615a      	str	r2, [r3, #20]
}
90008c46:	bf00      	nop
90008c48:	3714      	adds	r7, #20
90008c4a:	46bd      	mov	sp, r7
90008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c50:	4770      	bx	lr
90008c52:	bf00      	nop
90008c54:	40010000 	.word	0x40010000
90008c58:	40000400 	.word	0x40000400
90008c5c:	40000800 	.word	0x40000800
90008c60:	40000c00 	.word	0x40000c00
90008c64:	40010400 	.word	0x40010400
90008c68:	40014000 	.word	0x40014000
90008c6c:	40014400 	.word	0x40014400
90008c70:	40014800 	.word	0x40014800

90008c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
90008c74:	b480      	push	{r7}
90008c76:	b083      	sub	sp, #12
90008c78:	af00      	add	r7, sp, #0
90008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
90008c7c:	bf00      	nop
90008c7e:	370c      	adds	r7, #12
90008c80:	46bd      	mov	sp, r7
90008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c86:	4770      	bx	lr

90008c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
90008c88:	b480      	push	{r7}
90008c8a:	b083      	sub	sp, #12
90008c8c:	af00      	add	r7, sp, #0
90008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
90008c90:	bf00      	nop
90008c92:	370c      	adds	r7, #12
90008c94:	46bd      	mov	sp, r7
90008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c9a:	4770      	bx	lr

90008c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
90008c9c:	b480      	push	{r7}
90008c9e:	b083      	sub	sp, #12
90008ca0:	af00      	add	r7, sp, #0
90008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
90008ca4:	bf00      	nop
90008ca6:	370c      	adds	r7, #12
90008ca8:	46bd      	mov	sp, r7
90008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
90008cae:	4770      	bx	lr

90008cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90008cb0:	b580      	push	{r7, lr}
90008cb2:	b082      	sub	sp, #8
90008cb4:	af00      	add	r7, sp, #0
90008cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90008cb8:	687b      	ldr	r3, [r7, #4]
90008cba:	2b00      	cmp	r3, #0
90008cbc:	d101      	bne.n	90008cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90008cbe:	2301      	movs	r3, #1
90008cc0:	e042      	b.n	90008d48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90008cc2:	687b      	ldr	r3, [r7, #4]
90008cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90008cc8:	2b00      	cmp	r3, #0
90008cca:	d106      	bne.n	90008cda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90008ccc:	687b      	ldr	r3, [r7, #4]
90008cce:	2200      	movs	r2, #0
90008cd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90008cd4:	6878      	ldr	r0, [r7, #4]
90008cd6:	f7f9 f8a9 	bl	90001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90008cda:	687b      	ldr	r3, [r7, #4]
90008cdc:	2224      	movs	r2, #36	; 0x24
90008cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
90008ce2:	687b      	ldr	r3, [r7, #4]
90008ce4:	681b      	ldr	r3, [r3, #0]
90008ce6:	681a      	ldr	r2, [r3, #0]
90008ce8:	687b      	ldr	r3, [r7, #4]
90008cea:	681b      	ldr	r3, [r3, #0]
90008cec:	f022 0201 	bic.w	r2, r2, #1
90008cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90008cf2:	6878      	ldr	r0, [r7, #4]
90008cf4:	f000 fa56 	bl	900091a4 <UART_SetConfig>
90008cf8:	4603      	mov	r3, r0
90008cfa:	2b01      	cmp	r3, #1
90008cfc:	d101      	bne.n	90008d02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
90008cfe:	2301      	movs	r3, #1
90008d00:	e022      	b.n	90008d48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90008d02:	687b      	ldr	r3, [r7, #4]
90008d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008d06:	2b00      	cmp	r3, #0
90008d08:	d002      	beq.n	90008d10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
90008d0a:	6878      	ldr	r0, [r7, #4]
90008d0c:	f000 fffa 	bl	90009d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90008d10:	687b      	ldr	r3, [r7, #4]
90008d12:	681b      	ldr	r3, [r3, #0]
90008d14:	685a      	ldr	r2, [r3, #4]
90008d16:	687b      	ldr	r3, [r7, #4]
90008d18:	681b      	ldr	r3, [r3, #0]
90008d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
90008d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90008d20:	687b      	ldr	r3, [r7, #4]
90008d22:	681b      	ldr	r3, [r3, #0]
90008d24:	689a      	ldr	r2, [r3, #8]
90008d26:	687b      	ldr	r3, [r7, #4]
90008d28:	681b      	ldr	r3, [r3, #0]
90008d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
90008d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90008d30:	687b      	ldr	r3, [r7, #4]
90008d32:	681b      	ldr	r3, [r3, #0]
90008d34:	681a      	ldr	r2, [r3, #0]
90008d36:	687b      	ldr	r3, [r7, #4]
90008d38:	681b      	ldr	r3, [r3, #0]
90008d3a:	f042 0201 	orr.w	r2, r2, #1
90008d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90008d40:	6878      	ldr	r0, [r7, #4]
90008d42:	f001 f881 	bl	90009e48 <UART_CheckIdleState>
90008d46:	4603      	mov	r3, r0
}
90008d48:	4618      	mov	r0, r3
90008d4a:	3708      	adds	r7, #8
90008d4c:	46bd      	mov	sp, r7
90008d4e:	bd80      	pop	{r7, pc}

90008d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90008d50:	b580      	push	{r7, lr}
90008d52:	b08a      	sub	sp, #40	; 0x28
90008d54:	af02      	add	r7, sp, #8
90008d56:	60f8      	str	r0, [r7, #12]
90008d58:	60b9      	str	r1, [r7, #8]
90008d5a:	603b      	str	r3, [r7, #0]
90008d5c:	4613      	mov	r3, r2
90008d5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90008d60:	68fb      	ldr	r3, [r7, #12]
90008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90008d66:	2b20      	cmp	r3, #32
90008d68:	f040 8083 	bne.w	90008e72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
90008d6c:	68bb      	ldr	r3, [r7, #8]
90008d6e:	2b00      	cmp	r3, #0
90008d70:	d002      	beq.n	90008d78 <HAL_UART_Transmit+0x28>
90008d72:	88fb      	ldrh	r3, [r7, #6]
90008d74:	2b00      	cmp	r3, #0
90008d76:	d101      	bne.n	90008d7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
90008d78:	2301      	movs	r3, #1
90008d7a:	e07b      	b.n	90008e74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
90008d7c:	68fb      	ldr	r3, [r7, #12]
90008d7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
90008d82:	2b01      	cmp	r3, #1
90008d84:	d101      	bne.n	90008d8a <HAL_UART_Transmit+0x3a>
90008d86:	2302      	movs	r3, #2
90008d88:	e074      	b.n	90008e74 <HAL_UART_Transmit+0x124>
90008d8a:	68fb      	ldr	r3, [r7, #12]
90008d8c:	2201      	movs	r2, #1
90008d8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90008d92:	68fb      	ldr	r3, [r7, #12]
90008d94:	2200      	movs	r2, #0
90008d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
90008d9a:	68fb      	ldr	r3, [r7, #12]
90008d9c:	2221      	movs	r2, #33	; 0x21
90008d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
90008da2:	f7f9 fa2d 	bl	90002200 <HAL_GetTick>
90008da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90008da8:	68fb      	ldr	r3, [r7, #12]
90008daa:	88fa      	ldrh	r2, [r7, #6]
90008dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
90008db0:	68fb      	ldr	r3, [r7, #12]
90008db2:	88fa      	ldrh	r2, [r7, #6]
90008db4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90008db8:	68fb      	ldr	r3, [r7, #12]
90008dba:	689b      	ldr	r3, [r3, #8]
90008dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90008dc0:	d108      	bne.n	90008dd4 <HAL_UART_Transmit+0x84>
90008dc2:	68fb      	ldr	r3, [r7, #12]
90008dc4:	691b      	ldr	r3, [r3, #16]
90008dc6:	2b00      	cmp	r3, #0
90008dc8:	d104      	bne.n	90008dd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
90008dca:	2300      	movs	r3, #0
90008dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
90008dce:	68bb      	ldr	r3, [r7, #8]
90008dd0:	61bb      	str	r3, [r7, #24]
90008dd2:	e003      	b.n	90008ddc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
90008dd4:	68bb      	ldr	r3, [r7, #8]
90008dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90008dd8:	2300      	movs	r3, #0
90008dda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
90008ddc:	68fb      	ldr	r3, [r7, #12]
90008dde:	2200      	movs	r2, #0
90008de0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
90008de4:	e02c      	b.n	90008e40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90008de6:	683b      	ldr	r3, [r7, #0]
90008de8:	9300      	str	r3, [sp, #0]
90008dea:	697b      	ldr	r3, [r7, #20]
90008dec:	2200      	movs	r2, #0
90008dee:	2180      	movs	r1, #128	; 0x80
90008df0:	68f8      	ldr	r0, [r7, #12]
90008df2:	f001 f871 	bl	90009ed8 <UART_WaitOnFlagUntilTimeout>
90008df6:	4603      	mov	r3, r0
90008df8:	2b00      	cmp	r3, #0
90008dfa:	d001      	beq.n	90008e00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
90008dfc:	2303      	movs	r3, #3
90008dfe:	e039      	b.n	90008e74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
90008e00:	69fb      	ldr	r3, [r7, #28]
90008e02:	2b00      	cmp	r3, #0
90008e04:	d10b      	bne.n	90008e1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90008e06:	69bb      	ldr	r3, [r7, #24]
90008e08:	881b      	ldrh	r3, [r3, #0]
90008e0a:	461a      	mov	r2, r3
90008e0c:	68fb      	ldr	r3, [r7, #12]
90008e0e:	681b      	ldr	r3, [r3, #0]
90008e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
90008e14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
90008e16:	69bb      	ldr	r3, [r7, #24]
90008e18:	3302      	adds	r3, #2
90008e1a:	61bb      	str	r3, [r7, #24]
90008e1c:	e007      	b.n	90008e2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90008e1e:	69fb      	ldr	r3, [r7, #28]
90008e20:	781a      	ldrb	r2, [r3, #0]
90008e22:	68fb      	ldr	r3, [r7, #12]
90008e24:	681b      	ldr	r3, [r3, #0]
90008e26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
90008e28:	69fb      	ldr	r3, [r7, #28]
90008e2a:	3301      	adds	r3, #1
90008e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90008e2e:	68fb      	ldr	r3, [r7, #12]
90008e30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
90008e34:	b29b      	uxth	r3, r3
90008e36:	3b01      	subs	r3, #1
90008e38:	b29a      	uxth	r2, r3
90008e3a:	68fb      	ldr	r3, [r7, #12]
90008e3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
90008e40:	68fb      	ldr	r3, [r7, #12]
90008e42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
90008e46:	b29b      	uxth	r3, r3
90008e48:	2b00      	cmp	r3, #0
90008e4a:	d1cc      	bne.n	90008de6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90008e4c:	683b      	ldr	r3, [r7, #0]
90008e4e:	9300      	str	r3, [sp, #0]
90008e50:	697b      	ldr	r3, [r7, #20]
90008e52:	2200      	movs	r2, #0
90008e54:	2140      	movs	r1, #64	; 0x40
90008e56:	68f8      	ldr	r0, [r7, #12]
90008e58:	f001 f83e 	bl	90009ed8 <UART_WaitOnFlagUntilTimeout>
90008e5c:	4603      	mov	r3, r0
90008e5e:	2b00      	cmp	r3, #0
90008e60:	d001      	beq.n	90008e66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
90008e62:	2303      	movs	r3, #3
90008e64:	e006      	b.n	90008e74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90008e66:	68fb      	ldr	r3, [r7, #12]
90008e68:	2220      	movs	r2, #32
90008e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
90008e6e:	2300      	movs	r3, #0
90008e70:	e000      	b.n	90008e74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
90008e72:	2302      	movs	r3, #2
  }
}
90008e74:	4618      	mov	r0, r3
90008e76:	3720      	adds	r7, #32
90008e78:	46bd      	mov	sp, r7
90008e7a:	bd80      	pop	{r7, pc}

90008e7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
90008e7c:	b580      	push	{r7, lr}
90008e7e:	b088      	sub	sp, #32
90008e80:	af00      	add	r7, sp, #0
90008e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
90008e84:	687b      	ldr	r3, [r7, #4]
90008e86:	681b      	ldr	r3, [r3, #0]
90008e88:	69db      	ldr	r3, [r3, #28]
90008e8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
90008e8c:	687b      	ldr	r3, [r7, #4]
90008e8e:	681b      	ldr	r3, [r3, #0]
90008e90:	681b      	ldr	r3, [r3, #0]
90008e92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
90008e94:	687b      	ldr	r3, [r7, #4]
90008e96:	681b      	ldr	r3, [r3, #0]
90008e98:	689b      	ldr	r3, [r3, #8]
90008e9a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
90008e9c:	69fa      	ldr	r2, [r7, #28]
90008e9e:	f640 030f 	movw	r3, #2063	; 0x80f
90008ea2:	4013      	ands	r3, r2
90008ea4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
90008ea6:	693b      	ldr	r3, [r7, #16]
90008ea8:	2b00      	cmp	r3, #0
90008eaa:	d118      	bne.n	90008ede <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
90008eac:	69fb      	ldr	r3, [r7, #28]
90008eae:	f003 0320 	and.w	r3, r3, #32
90008eb2:	2b00      	cmp	r3, #0
90008eb4:	d013      	beq.n	90008ede <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
90008eb6:	69bb      	ldr	r3, [r7, #24]
90008eb8:	f003 0320 	and.w	r3, r3, #32
90008ebc:	2b00      	cmp	r3, #0
90008ebe:	d104      	bne.n	90008eca <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
90008ec0:	697b      	ldr	r3, [r7, #20]
90008ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90008ec6:	2b00      	cmp	r3, #0
90008ec8:	d009      	beq.n	90008ede <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
90008eca:	687b      	ldr	r3, [r7, #4]
90008ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90008ece:	2b00      	cmp	r3, #0
90008ed0:	f000 8145 	beq.w	9000915e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
90008ed4:	687b      	ldr	r3, [r7, #4]
90008ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90008ed8:	6878      	ldr	r0, [r7, #4]
90008eda:	4798      	blx	r3
      }
      return;
90008edc:	e13f      	b.n	9000915e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
90008ede:	693b      	ldr	r3, [r7, #16]
90008ee0:	2b00      	cmp	r3, #0
90008ee2:	f000 80e8 	beq.w	900090b6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
90008ee6:	697a      	ldr	r2, [r7, #20]
90008ee8:	4ba1      	ldr	r3, [pc, #644]	; (90009170 <HAL_UART_IRQHandler+0x2f4>)
90008eea:	4013      	ands	r3, r2
90008eec:	2b00      	cmp	r3, #0
90008eee:	d105      	bne.n	90008efc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
90008ef0:	69ba      	ldr	r2, [r7, #24]
90008ef2:	4ba0      	ldr	r3, [pc, #640]	; (90009174 <HAL_UART_IRQHandler+0x2f8>)
90008ef4:	4013      	ands	r3, r2
90008ef6:	2b00      	cmp	r3, #0
90008ef8:	f000 80dd 	beq.w	900090b6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
90008efc:	69fb      	ldr	r3, [r7, #28]
90008efe:	f003 0301 	and.w	r3, r3, #1
90008f02:	2b00      	cmp	r3, #0
90008f04:	d010      	beq.n	90008f28 <HAL_UART_IRQHandler+0xac>
90008f06:	69bb      	ldr	r3, [r7, #24]
90008f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
90008f0c:	2b00      	cmp	r3, #0
90008f0e:	d00b      	beq.n	90008f28 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
90008f10:	687b      	ldr	r3, [r7, #4]
90008f12:	681b      	ldr	r3, [r3, #0]
90008f14:	2201      	movs	r2, #1
90008f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
90008f18:	687b      	ldr	r3, [r7, #4]
90008f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008f1e:	f043 0201 	orr.w	r2, r3, #1
90008f22:	687b      	ldr	r3, [r7, #4]
90008f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
90008f28:	69fb      	ldr	r3, [r7, #28]
90008f2a:	f003 0302 	and.w	r3, r3, #2
90008f2e:	2b00      	cmp	r3, #0
90008f30:	d010      	beq.n	90008f54 <HAL_UART_IRQHandler+0xd8>
90008f32:	697b      	ldr	r3, [r7, #20]
90008f34:	f003 0301 	and.w	r3, r3, #1
90008f38:	2b00      	cmp	r3, #0
90008f3a:	d00b      	beq.n	90008f54 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
90008f3c:	687b      	ldr	r3, [r7, #4]
90008f3e:	681b      	ldr	r3, [r3, #0]
90008f40:	2202      	movs	r2, #2
90008f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
90008f44:	687b      	ldr	r3, [r7, #4]
90008f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008f4a:	f043 0204 	orr.w	r2, r3, #4
90008f4e:	687b      	ldr	r3, [r7, #4]
90008f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
90008f54:	69fb      	ldr	r3, [r7, #28]
90008f56:	f003 0304 	and.w	r3, r3, #4
90008f5a:	2b00      	cmp	r3, #0
90008f5c:	d010      	beq.n	90008f80 <HAL_UART_IRQHandler+0x104>
90008f5e:	697b      	ldr	r3, [r7, #20]
90008f60:	f003 0301 	and.w	r3, r3, #1
90008f64:	2b00      	cmp	r3, #0
90008f66:	d00b      	beq.n	90008f80 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
90008f68:	687b      	ldr	r3, [r7, #4]
90008f6a:	681b      	ldr	r3, [r3, #0]
90008f6c:	2204      	movs	r2, #4
90008f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
90008f70:	687b      	ldr	r3, [r7, #4]
90008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008f76:	f043 0202 	orr.w	r2, r3, #2
90008f7a:	687b      	ldr	r3, [r7, #4]
90008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
90008f80:	69fb      	ldr	r3, [r7, #28]
90008f82:	f003 0308 	and.w	r3, r3, #8
90008f86:	2b00      	cmp	r3, #0
90008f88:	d015      	beq.n	90008fb6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
90008f8a:	69bb      	ldr	r3, [r7, #24]
90008f8c:	f003 0320 	and.w	r3, r3, #32
90008f90:	2b00      	cmp	r3, #0
90008f92:	d104      	bne.n	90008f9e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
90008f94:	697a      	ldr	r2, [r7, #20]
90008f96:	4b76      	ldr	r3, [pc, #472]	; (90009170 <HAL_UART_IRQHandler+0x2f4>)
90008f98:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
90008f9a:	2b00      	cmp	r3, #0
90008f9c:	d00b      	beq.n	90008fb6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
90008f9e:	687b      	ldr	r3, [r7, #4]
90008fa0:	681b      	ldr	r3, [r3, #0]
90008fa2:	2208      	movs	r2, #8
90008fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
90008fa6:	687b      	ldr	r3, [r7, #4]
90008fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008fac:	f043 0208 	orr.w	r2, r3, #8
90008fb0:	687b      	ldr	r3, [r7, #4]
90008fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
90008fb6:	69fb      	ldr	r3, [r7, #28]
90008fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90008fbc:	2b00      	cmp	r3, #0
90008fbe:	d011      	beq.n	90008fe4 <HAL_UART_IRQHandler+0x168>
90008fc0:	69bb      	ldr	r3, [r7, #24]
90008fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
90008fc6:	2b00      	cmp	r3, #0
90008fc8:	d00c      	beq.n	90008fe4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90008fca:	687b      	ldr	r3, [r7, #4]
90008fcc:	681b      	ldr	r3, [r3, #0]
90008fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
90008fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
90008fd4:	687b      	ldr	r3, [r7, #4]
90008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008fda:	f043 0220 	orr.w	r2, r3, #32
90008fde:	687b      	ldr	r3, [r7, #4]
90008fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
90008fe4:	687b      	ldr	r3, [r7, #4]
90008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008fea:	2b00      	cmp	r3, #0
90008fec:	f000 80b9 	beq.w	90009162 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
90008ff0:	69fb      	ldr	r3, [r7, #28]
90008ff2:	f003 0320 	and.w	r3, r3, #32
90008ff6:	2b00      	cmp	r3, #0
90008ff8:	d011      	beq.n	9000901e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
90008ffa:	69bb      	ldr	r3, [r7, #24]
90008ffc:	f003 0320 	and.w	r3, r3, #32
90009000:	2b00      	cmp	r3, #0
90009002:	d104      	bne.n	9000900e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
90009004:	697b      	ldr	r3, [r7, #20]
90009006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000900a:	2b00      	cmp	r3, #0
9000900c:	d007      	beq.n	9000901e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
9000900e:	687b      	ldr	r3, [r7, #4]
90009010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90009012:	2b00      	cmp	r3, #0
90009014:	d003      	beq.n	9000901e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
90009016:	687b      	ldr	r3, [r7, #4]
90009018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000901a:	6878      	ldr	r0, [r7, #4]
9000901c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
9000901e:	687b      	ldr	r3, [r7, #4]
90009020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90009024:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
90009026:	687b      	ldr	r3, [r7, #4]
90009028:	681b      	ldr	r3, [r3, #0]
9000902a:	689b      	ldr	r3, [r3, #8]
9000902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90009030:	2b40      	cmp	r3, #64	; 0x40
90009032:	d004      	beq.n	9000903e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
90009034:	68fb      	ldr	r3, [r7, #12]
90009036:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000903a:	2b00      	cmp	r3, #0
9000903c:	d031      	beq.n	900090a2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
9000903e:	6878      	ldr	r0, [r7, #4]
90009040:	f000 ffca 	bl	90009fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
90009044:	687b      	ldr	r3, [r7, #4]
90009046:	681b      	ldr	r3, [r3, #0]
90009048:	689b      	ldr	r3, [r3, #8]
9000904a:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000904e:	2b40      	cmp	r3, #64	; 0x40
90009050:	d123      	bne.n	9000909a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
90009052:	687b      	ldr	r3, [r7, #4]
90009054:	681b      	ldr	r3, [r3, #0]
90009056:	689a      	ldr	r2, [r3, #8]
90009058:	687b      	ldr	r3, [r7, #4]
9000905a:	681b      	ldr	r3, [r3, #0]
9000905c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
90009060:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
90009062:	687b      	ldr	r3, [r7, #4]
90009064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009066:	2b00      	cmp	r3, #0
90009068:	d013      	beq.n	90009092 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
9000906a:	687b      	ldr	r3, [r7, #4]
9000906c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000906e:	4a42      	ldr	r2, [pc, #264]	; (90009178 <HAL_UART_IRQHandler+0x2fc>)
90009070:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
90009072:	687b      	ldr	r3, [r7, #4]
90009074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009076:	4618      	mov	r0, r3
90009078:	f7f9 fac6 	bl	90002608 <HAL_DMA_Abort_IT>
9000907c:	4603      	mov	r3, r0
9000907e:	2b00      	cmp	r3, #0
90009080:	d017      	beq.n	900090b2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
90009082:	687b      	ldr	r3, [r7, #4]
90009084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90009088:	687a      	ldr	r2, [r7, #4]
9000908a:	6f92      	ldr	r2, [r2, #120]	; 0x78
9000908c:	4610      	mov	r0, r2
9000908e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
90009090:	e00f      	b.n	900090b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
90009092:	6878      	ldr	r0, [r7, #4]
90009094:	f000 f87c 	bl	90009190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
90009098:	e00b      	b.n	900090b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
9000909a:	6878      	ldr	r0, [r7, #4]
9000909c:	f000 f878 	bl	90009190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
900090a0:	e007      	b.n	900090b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
900090a2:	6878      	ldr	r0, [r7, #4]
900090a4:	f000 f874 	bl	90009190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
900090a8:	687b      	ldr	r3, [r7, #4]
900090aa:	2200      	movs	r2, #0
900090ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
900090b0:	e057      	b.n	90009162 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
900090b2:	bf00      	nop
    return;
900090b4:	e055      	b.n	90009162 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
900090b6:	69fb      	ldr	r3, [r7, #28]
900090b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900090bc:	2b00      	cmp	r3, #0
900090be:	d00d      	beq.n	900090dc <HAL_UART_IRQHandler+0x260>
900090c0:	697b      	ldr	r3, [r7, #20]
900090c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900090c6:	2b00      	cmp	r3, #0
900090c8:	d008      	beq.n	900090dc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
900090ca:	687b      	ldr	r3, [r7, #4]
900090cc:	681b      	ldr	r3, [r3, #0]
900090ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
900090d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
900090d4:	6878      	ldr	r0, [r7, #4]
900090d6:	f000 ffd3 	bl	9000a080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
900090da:	e045      	b.n	90009168 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
900090dc:	69fb      	ldr	r3, [r7, #28]
900090de:	f003 0380 	and.w	r3, r3, #128	; 0x80
900090e2:	2b00      	cmp	r3, #0
900090e4:	d012      	beq.n	9000910c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
900090e6:	69bb      	ldr	r3, [r7, #24]
900090e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900090ec:	2b00      	cmp	r3, #0
900090ee:	d104      	bne.n	900090fa <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
900090f0:	697b      	ldr	r3, [r7, #20]
900090f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900090f6:	2b00      	cmp	r3, #0
900090f8:	d008      	beq.n	9000910c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
900090fa:	687b      	ldr	r3, [r7, #4]
900090fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900090fe:	2b00      	cmp	r3, #0
90009100:	d031      	beq.n	90009166 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
90009102:	687b      	ldr	r3, [r7, #4]
90009104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90009106:	6878      	ldr	r0, [r7, #4]
90009108:	4798      	blx	r3
    }
    return;
9000910a:	e02c      	b.n	90009166 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
9000910c:	69fb      	ldr	r3, [r7, #28]
9000910e:	f003 0340 	and.w	r3, r3, #64	; 0x40
90009112:	2b00      	cmp	r3, #0
90009114:	d008      	beq.n	90009128 <HAL_UART_IRQHandler+0x2ac>
90009116:	69bb      	ldr	r3, [r7, #24]
90009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000911c:	2b00      	cmp	r3, #0
9000911e:	d003      	beq.n	90009128 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
90009120:	6878      	ldr	r0, [r7, #4]
90009122:	f000 ff93 	bl	9000a04c <UART_EndTransmit_IT>
    return;
90009126:	e01f      	b.n	90009168 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
90009128:	69fb      	ldr	r3, [r7, #28]
9000912a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000912e:	2b00      	cmp	r3, #0
90009130:	d008      	beq.n	90009144 <HAL_UART_IRQHandler+0x2c8>
90009132:	69bb      	ldr	r3, [r7, #24]
90009134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
90009138:	2b00      	cmp	r3, #0
9000913a:	d003      	beq.n	90009144 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
9000913c:	6878      	ldr	r0, [r7, #4]
9000913e:	f000 ffb3 	bl	9000a0a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
90009142:	e011      	b.n	90009168 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
90009144:	69fb      	ldr	r3, [r7, #28]
90009146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000914a:	2b00      	cmp	r3, #0
9000914c:	d00c      	beq.n	90009168 <HAL_UART_IRQHandler+0x2ec>
9000914e:	69bb      	ldr	r3, [r7, #24]
90009150:	2b00      	cmp	r3, #0
90009152:	da09      	bge.n	90009168 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
90009154:	6878      	ldr	r0, [r7, #4]
90009156:	f000 ff9d 	bl	9000a094 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
9000915a:	bf00      	nop
9000915c:	e004      	b.n	90009168 <HAL_UART_IRQHandler+0x2ec>
      return;
9000915e:	bf00      	nop
90009160:	e002      	b.n	90009168 <HAL_UART_IRQHandler+0x2ec>
    return;
90009162:	bf00      	nop
90009164:	e000      	b.n	90009168 <HAL_UART_IRQHandler+0x2ec>
    return;
90009166:	bf00      	nop
  }
}
90009168:	3720      	adds	r7, #32
9000916a:	46bd      	mov	sp, r7
9000916c:	bd80      	pop	{r7, pc}
9000916e:	bf00      	nop
90009170:	10000001 	.word	0x10000001
90009174:	04000120 	.word	0x04000120
90009178:	9000a021 	.word	0x9000a021

9000917c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
9000917c:	b480      	push	{r7}
9000917e:	b083      	sub	sp, #12
90009180:	af00      	add	r7, sp, #0
90009182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
90009184:	bf00      	nop
90009186:	370c      	adds	r7, #12
90009188:	46bd      	mov	sp, r7
9000918a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000918e:	4770      	bx	lr

90009190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
90009190:	b480      	push	{r7}
90009192:	b083      	sub	sp, #12
90009194:	af00      	add	r7, sp, #0
90009196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
90009198:	bf00      	nop
9000919a:	370c      	adds	r7, #12
9000919c:	46bd      	mov	sp, r7
9000919e:	f85d 7b04 	ldr.w	r7, [sp], #4
900091a2:	4770      	bx	lr

900091a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
900091a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
900091a8:	b08e      	sub	sp, #56	; 0x38
900091aa:	af00      	add	r7, sp, #0
900091ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
900091ae:	2300      	movs	r3, #0
900091b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
900091b4:	687b      	ldr	r3, [r7, #4]
900091b6:	689a      	ldr	r2, [r3, #8]
900091b8:	687b      	ldr	r3, [r7, #4]
900091ba:	691b      	ldr	r3, [r3, #16]
900091bc:	431a      	orrs	r2, r3
900091be:	687b      	ldr	r3, [r7, #4]
900091c0:	695b      	ldr	r3, [r3, #20]
900091c2:	431a      	orrs	r2, r3
900091c4:	687b      	ldr	r3, [r7, #4]
900091c6:	69db      	ldr	r3, [r3, #28]
900091c8:	4313      	orrs	r3, r2
900091ca:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
900091cc:	687b      	ldr	r3, [r7, #4]
900091ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900091d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
900091d2:	4313      	orrs	r3, r2
900091d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
900091d6:	687b      	ldr	r3, [r7, #4]
900091d8:	681b      	ldr	r3, [r3, #0]
900091da:	681a      	ldr	r2, [r3, #0]
900091dc:	4bc1      	ldr	r3, [pc, #772]	; (900094e4 <UART_SetConfig+0x340>)
900091de:	4013      	ands	r3, r2
900091e0:	687a      	ldr	r2, [r7, #4]
900091e2:	6812      	ldr	r2, [r2, #0]
900091e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
900091e6:	430b      	orrs	r3, r1
900091e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
900091ea:	687b      	ldr	r3, [r7, #4]
900091ec:	681b      	ldr	r3, [r3, #0]
900091ee:	685b      	ldr	r3, [r3, #4]
900091f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
900091f4:	687b      	ldr	r3, [r7, #4]
900091f6:	68da      	ldr	r2, [r3, #12]
900091f8:	687b      	ldr	r3, [r7, #4]
900091fa:	681b      	ldr	r3, [r3, #0]
900091fc:	430a      	orrs	r2, r1
900091fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009200:	687b      	ldr	r3, [r7, #4]
90009202:	699b      	ldr	r3, [r3, #24]
90009204:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009206:	687b      	ldr	r3, [r7, #4]
90009208:	681b      	ldr	r3, [r3, #0]
9000920a:	4ab7      	ldr	r2, [pc, #732]	; (900094e8 <UART_SetConfig+0x344>)
9000920c:	4293      	cmp	r3, r2
9000920e:	d004      	beq.n	9000921a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009210:	687b      	ldr	r3, [r7, #4]
90009212:	6a1b      	ldr	r3, [r3, #32]
90009214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90009216:	4313      	orrs	r3, r2
90009218:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000921a:	687b      	ldr	r3, [r7, #4]
9000921c:	681b      	ldr	r3, [r3, #0]
9000921e:	689a      	ldr	r2, [r3, #8]
90009220:	4bb2      	ldr	r3, [pc, #712]	; (900094ec <UART_SetConfig+0x348>)
90009222:	4013      	ands	r3, r2
90009224:	687a      	ldr	r2, [r7, #4]
90009226:	6812      	ldr	r2, [r2, #0]
90009228:	6b79      	ldr	r1, [r7, #52]	; 0x34
9000922a:	430b      	orrs	r3, r1
9000922c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000922e:	687b      	ldr	r3, [r7, #4]
90009230:	681b      	ldr	r3, [r3, #0]
90009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009234:	f023 010f 	bic.w	r1, r3, #15
90009238:	687b      	ldr	r3, [r7, #4]
9000923a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000923c:	687b      	ldr	r3, [r7, #4]
9000923e:	681b      	ldr	r3, [r3, #0]
90009240:	430a      	orrs	r2, r1
90009242:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009244:	687b      	ldr	r3, [r7, #4]
90009246:	681b      	ldr	r3, [r3, #0]
90009248:	4aa9      	ldr	r2, [pc, #676]	; (900094f0 <UART_SetConfig+0x34c>)
9000924a:	4293      	cmp	r3, r2
9000924c:	d177      	bne.n	9000933e <UART_SetConfig+0x19a>
9000924e:	4ba9      	ldr	r3, [pc, #676]	; (900094f4 <UART_SetConfig+0x350>)
90009250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009252:	f003 0338 	and.w	r3, r3, #56	; 0x38
90009256:	2b28      	cmp	r3, #40	; 0x28
90009258:	d86c      	bhi.n	90009334 <UART_SetConfig+0x190>
9000925a:	a201      	add	r2, pc, #4	; (adr r2, 90009260 <UART_SetConfig+0xbc>)
9000925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009260:	90009305 	.word	0x90009305
90009264:	90009335 	.word	0x90009335
90009268:	90009335 	.word	0x90009335
9000926c:	90009335 	.word	0x90009335
90009270:	90009335 	.word	0x90009335
90009274:	90009335 	.word	0x90009335
90009278:	90009335 	.word	0x90009335
9000927c:	90009335 	.word	0x90009335
90009280:	9000930d 	.word	0x9000930d
90009284:	90009335 	.word	0x90009335
90009288:	90009335 	.word	0x90009335
9000928c:	90009335 	.word	0x90009335
90009290:	90009335 	.word	0x90009335
90009294:	90009335 	.word	0x90009335
90009298:	90009335 	.word	0x90009335
9000929c:	90009335 	.word	0x90009335
900092a0:	90009315 	.word	0x90009315
900092a4:	90009335 	.word	0x90009335
900092a8:	90009335 	.word	0x90009335
900092ac:	90009335 	.word	0x90009335
900092b0:	90009335 	.word	0x90009335
900092b4:	90009335 	.word	0x90009335
900092b8:	90009335 	.word	0x90009335
900092bc:	90009335 	.word	0x90009335
900092c0:	9000931d 	.word	0x9000931d
900092c4:	90009335 	.word	0x90009335
900092c8:	90009335 	.word	0x90009335
900092cc:	90009335 	.word	0x90009335
900092d0:	90009335 	.word	0x90009335
900092d4:	90009335 	.word	0x90009335
900092d8:	90009335 	.word	0x90009335
900092dc:	90009335 	.word	0x90009335
900092e0:	90009325 	.word	0x90009325
900092e4:	90009335 	.word	0x90009335
900092e8:	90009335 	.word	0x90009335
900092ec:	90009335 	.word	0x90009335
900092f0:	90009335 	.word	0x90009335
900092f4:	90009335 	.word	0x90009335
900092f8:	90009335 	.word	0x90009335
900092fc:	90009335 	.word	0x90009335
90009300:	9000932d 	.word	0x9000932d
90009304:	2301      	movs	r3, #1
90009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000930a:	e233      	b.n	90009774 <UART_SetConfig+0x5d0>
9000930c:	2304      	movs	r3, #4
9000930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009312:	e22f      	b.n	90009774 <UART_SetConfig+0x5d0>
90009314:	2308      	movs	r3, #8
90009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000931a:	e22b      	b.n	90009774 <UART_SetConfig+0x5d0>
9000931c:	2310      	movs	r3, #16
9000931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009322:	e227      	b.n	90009774 <UART_SetConfig+0x5d0>
90009324:	2320      	movs	r3, #32
90009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000932a:	e223      	b.n	90009774 <UART_SetConfig+0x5d0>
9000932c:	2340      	movs	r3, #64	; 0x40
9000932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009332:	e21f      	b.n	90009774 <UART_SetConfig+0x5d0>
90009334:	2380      	movs	r3, #128	; 0x80
90009336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000933a:	bf00      	nop
9000933c:	e21a      	b.n	90009774 <UART_SetConfig+0x5d0>
9000933e:	687b      	ldr	r3, [r7, #4]
90009340:	681b      	ldr	r3, [r3, #0]
90009342:	4a6d      	ldr	r2, [pc, #436]	; (900094f8 <UART_SetConfig+0x354>)
90009344:	4293      	cmp	r3, r2
90009346:	d132      	bne.n	900093ae <UART_SetConfig+0x20a>
90009348:	4b6a      	ldr	r3, [pc, #424]	; (900094f4 <UART_SetConfig+0x350>)
9000934a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000934c:	f003 0307 	and.w	r3, r3, #7
90009350:	2b05      	cmp	r3, #5
90009352:	d827      	bhi.n	900093a4 <UART_SetConfig+0x200>
90009354:	a201      	add	r2, pc, #4	; (adr r2, 9000935c <UART_SetConfig+0x1b8>)
90009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000935a:	bf00      	nop
9000935c:	90009375 	.word	0x90009375
90009360:	9000937d 	.word	0x9000937d
90009364:	90009385 	.word	0x90009385
90009368:	9000938d 	.word	0x9000938d
9000936c:	90009395 	.word	0x90009395
90009370:	9000939d 	.word	0x9000939d
90009374:	2300      	movs	r3, #0
90009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000937a:	e1fb      	b.n	90009774 <UART_SetConfig+0x5d0>
9000937c:	2304      	movs	r3, #4
9000937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009382:	e1f7      	b.n	90009774 <UART_SetConfig+0x5d0>
90009384:	2308      	movs	r3, #8
90009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000938a:	e1f3      	b.n	90009774 <UART_SetConfig+0x5d0>
9000938c:	2310      	movs	r3, #16
9000938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009392:	e1ef      	b.n	90009774 <UART_SetConfig+0x5d0>
90009394:	2320      	movs	r3, #32
90009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000939a:	e1eb      	b.n	90009774 <UART_SetConfig+0x5d0>
9000939c:	2340      	movs	r3, #64	; 0x40
9000939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900093a2:	e1e7      	b.n	90009774 <UART_SetConfig+0x5d0>
900093a4:	2380      	movs	r3, #128	; 0x80
900093a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900093aa:	bf00      	nop
900093ac:	e1e2      	b.n	90009774 <UART_SetConfig+0x5d0>
900093ae:	687b      	ldr	r3, [r7, #4]
900093b0:	681b      	ldr	r3, [r3, #0]
900093b2:	4a52      	ldr	r2, [pc, #328]	; (900094fc <UART_SetConfig+0x358>)
900093b4:	4293      	cmp	r3, r2
900093b6:	d132      	bne.n	9000941e <UART_SetConfig+0x27a>
900093b8:	4b4e      	ldr	r3, [pc, #312]	; (900094f4 <UART_SetConfig+0x350>)
900093ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900093bc:	f003 0307 	and.w	r3, r3, #7
900093c0:	2b05      	cmp	r3, #5
900093c2:	d827      	bhi.n	90009414 <UART_SetConfig+0x270>
900093c4:	a201      	add	r2, pc, #4	; (adr r2, 900093cc <UART_SetConfig+0x228>)
900093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900093ca:	bf00      	nop
900093cc:	900093e5 	.word	0x900093e5
900093d0:	900093ed 	.word	0x900093ed
900093d4:	900093f5 	.word	0x900093f5
900093d8:	900093fd 	.word	0x900093fd
900093dc:	90009405 	.word	0x90009405
900093e0:	9000940d 	.word	0x9000940d
900093e4:	2300      	movs	r3, #0
900093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900093ea:	e1c3      	b.n	90009774 <UART_SetConfig+0x5d0>
900093ec:	2304      	movs	r3, #4
900093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900093f2:	e1bf      	b.n	90009774 <UART_SetConfig+0x5d0>
900093f4:	2308      	movs	r3, #8
900093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900093fa:	e1bb      	b.n	90009774 <UART_SetConfig+0x5d0>
900093fc:	2310      	movs	r3, #16
900093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009402:	e1b7      	b.n	90009774 <UART_SetConfig+0x5d0>
90009404:	2320      	movs	r3, #32
90009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000940a:	e1b3      	b.n	90009774 <UART_SetConfig+0x5d0>
9000940c:	2340      	movs	r3, #64	; 0x40
9000940e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009412:	e1af      	b.n	90009774 <UART_SetConfig+0x5d0>
90009414:	2380      	movs	r3, #128	; 0x80
90009416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000941a:	bf00      	nop
9000941c:	e1aa      	b.n	90009774 <UART_SetConfig+0x5d0>
9000941e:	687b      	ldr	r3, [r7, #4]
90009420:	681b      	ldr	r3, [r3, #0]
90009422:	4a37      	ldr	r2, [pc, #220]	; (90009500 <UART_SetConfig+0x35c>)
90009424:	4293      	cmp	r3, r2
90009426:	d132      	bne.n	9000948e <UART_SetConfig+0x2ea>
90009428:	4b32      	ldr	r3, [pc, #200]	; (900094f4 <UART_SetConfig+0x350>)
9000942a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000942c:	f003 0307 	and.w	r3, r3, #7
90009430:	2b05      	cmp	r3, #5
90009432:	d827      	bhi.n	90009484 <UART_SetConfig+0x2e0>
90009434:	a201      	add	r2, pc, #4	; (adr r2, 9000943c <UART_SetConfig+0x298>)
90009436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000943a:	bf00      	nop
9000943c:	90009455 	.word	0x90009455
90009440:	9000945d 	.word	0x9000945d
90009444:	90009465 	.word	0x90009465
90009448:	9000946d 	.word	0x9000946d
9000944c:	90009475 	.word	0x90009475
90009450:	9000947d 	.word	0x9000947d
90009454:	2300      	movs	r3, #0
90009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000945a:	e18b      	b.n	90009774 <UART_SetConfig+0x5d0>
9000945c:	2304      	movs	r3, #4
9000945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009462:	e187      	b.n	90009774 <UART_SetConfig+0x5d0>
90009464:	2308      	movs	r3, #8
90009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000946a:	e183      	b.n	90009774 <UART_SetConfig+0x5d0>
9000946c:	2310      	movs	r3, #16
9000946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009472:	e17f      	b.n	90009774 <UART_SetConfig+0x5d0>
90009474:	2320      	movs	r3, #32
90009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000947a:	e17b      	b.n	90009774 <UART_SetConfig+0x5d0>
9000947c:	2340      	movs	r3, #64	; 0x40
9000947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009482:	e177      	b.n	90009774 <UART_SetConfig+0x5d0>
90009484:	2380      	movs	r3, #128	; 0x80
90009486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000948a:	bf00      	nop
9000948c:	e172      	b.n	90009774 <UART_SetConfig+0x5d0>
9000948e:	687b      	ldr	r3, [r7, #4]
90009490:	681b      	ldr	r3, [r3, #0]
90009492:	4a1c      	ldr	r2, [pc, #112]	; (90009504 <UART_SetConfig+0x360>)
90009494:	4293      	cmp	r3, r2
90009496:	d144      	bne.n	90009522 <UART_SetConfig+0x37e>
90009498:	4b16      	ldr	r3, [pc, #88]	; (900094f4 <UART_SetConfig+0x350>)
9000949a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000949c:	f003 0307 	and.w	r3, r3, #7
900094a0:	2b05      	cmp	r3, #5
900094a2:	d839      	bhi.n	90009518 <UART_SetConfig+0x374>
900094a4:	a201      	add	r2, pc, #4	; (adr r2, 900094ac <UART_SetConfig+0x308>)
900094a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900094aa:	bf00      	nop
900094ac:	900094c5 	.word	0x900094c5
900094b0:	900094cd 	.word	0x900094cd
900094b4:	900094d5 	.word	0x900094d5
900094b8:	900094dd 	.word	0x900094dd
900094bc:	90009509 	.word	0x90009509
900094c0:	90009511 	.word	0x90009511
900094c4:	2300      	movs	r3, #0
900094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900094ca:	e153      	b.n	90009774 <UART_SetConfig+0x5d0>
900094cc:	2304      	movs	r3, #4
900094ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900094d2:	e14f      	b.n	90009774 <UART_SetConfig+0x5d0>
900094d4:	2308      	movs	r3, #8
900094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900094da:	e14b      	b.n	90009774 <UART_SetConfig+0x5d0>
900094dc:	2310      	movs	r3, #16
900094de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900094e2:	e147      	b.n	90009774 <UART_SetConfig+0x5d0>
900094e4:	cfff69f3 	.word	0xcfff69f3
900094e8:	58000c00 	.word	0x58000c00
900094ec:	11fff4ff 	.word	0x11fff4ff
900094f0:	40011000 	.word	0x40011000
900094f4:	58024400 	.word	0x58024400
900094f8:	40004400 	.word	0x40004400
900094fc:	40004800 	.word	0x40004800
90009500:	40004c00 	.word	0x40004c00
90009504:	40005000 	.word	0x40005000
90009508:	2320      	movs	r3, #32
9000950a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000950e:	e131      	b.n	90009774 <UART_SetConfig+0x5d0>
90009510:	2340      	movs	r3, #64	; 0x40
90009512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009516:	e12d      	b.n	90009774 <UART_SetConfig+0x5d0>
90009518:	2380      	movs	r3, #128	; 0x80
9000951a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000951e:	bf00      	nop
90009520:	e128      	b.n	90009774 <UART_SetConfig+0x5d0>
90009522:	687b      	ldr	r3, [r7, #4]
90009524:	681b      	ldr	r3, [r3, #0]
90009526:	4ab6      	ldr	r2, [pc, #728]	; (90009800 <UART_SetConfig+0x65c>)
90009528:	4293      	cmp	r3, r2
9000952a:	d178      	bne.n	9000961e <UART_SetConfig+0x47a>
9000952c:	4bb5      	ldr	r3, [pc, #724]	; (90009804 <UART_SetConfig+0x660>)
9000952e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009530:	f003 0338 	and.w	r3, r3, #56	; 0x38
90009534:	2b28      	cmp	r3, #40	; 0x28
90009536:	d86d      	bhi.n	90009614 <UART_SetConfig+0x470>
90009538:	a201      	add	r2, pc, #4	; (adr r2, 90009540 <UART_SetConfig+0x39c>)
9000953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000953e:	bf00      	nop
90009540:	900095e5 	.word	0x900095e5
90009544:	90009615 	.word	0x90009615
90009548:	90009615 	.word	0x90009615
9000954c:	90009615 	.word	0x90009615
90009550:	90009615 	.word	0x90009615
90009554:	90009615 	.word	0x90009615
90009558:	90009615 	.word	0x90009615
9000955c:	90009615 	.word	0x90009615
90009560:	900095ed 	.word	0x900095ed
90009564:	90009615 	.word	0x90009615
90009568:	90009615 	.word	0x90009615
9000956c:	90009615 	.word	0x90009615
90009570:	90009615 	.word	0x90009615
90009574:	90009615 	.word	0x90009615
90009578:	90009615 	.word	0x90009615
9000957c:	90009615 	.word	0x90009615
90009580:	900095f5 	.word	0x900095f5
90009584:	90009615 	.word	0x90009615
90009588:	90009615 	.word	0x90009615
9000958c:	90009615 	.word	0x90009615
90009590:	90009615 	.word	0x90009615
90009594:	90009615 	.word	0x90009615
90009598:	90009615 	.word	0x90009615
9000959c:	90009615 	.word	0x90009615
900095a0:	900095fd 	.word	0x900095fd
900095a4:	90009615 	.word	0x90009615
900095a8:	90009615 	.word	0x90009615
900095ac:	90009615 	.word	0x90009615
900095b0:	90009615 	.word	0x90009615
900095b4:	90009615 	.word	0x90009615
900095b8:	90009615 	.word	0x90009615
900095bc:	90009615 	.word	0x90009615
900095c0:	90009605 	.word	0x90009605
900095c4:	90009615 	.word	0x90009615
900095c8:	90009615 	.word	0x90009615
900095cc:	90009615 	.word	0x90009615
900095d0:	90009615 	.word	0x90009615
900095d4:	90009615 	.word	0x90009615
900095d8:	90009615 	.word	0x90009615
900095dc:	90009615 	.word	0x90009615
900095e0:	9000960d 	.word	0x9000960d
900095e4:	2301      	movs	r3, #1
900095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900095ea:	e0c3      	b.n	90009774 <UART_SetConfig+0x5d0>
900095ec:	2304      	movs	r3, #4
900095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900095f2:	e0bf      	b.n	90009774 <UART_SetConfig+0x5d0>
900095f4:	2308      	movs	r3, #8
900095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900095fa:	e0bb      	b.n	90009774 <UART_SetConfig+0x5d0>
900095fc:	2310      	movs	r3, #16
900095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009602:	e0b7      	b.n	90009774 <UART_SetConfig+0x5d0>
90009604:	2320      	movs	r3, #32
90009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000960a:	e0b3      	b.n	90009774 <UART_SetConfig+0x5d0>
9000960c:	2340      	movs	r3, #64	; 0x40
9000960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009612:	e0af      	b.n	90009774 <UART_SetConfig+0x5d0>
90009614:	2380      	movs	r3, #128	; 0x80
90009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000961a:	bf00      	nop
9000961c:	e0aa      	b.n	90009774 <UART_SetConfig+0x5d0>
9000961e:	687b      	ldr	r3, [r7, #4]
90009620:	681b      	ldr	r3, [r3, #0]
90009622:	4a79      	ldr	r2, [pc, #484]	; (90009808 <UART_SetConfig+0x664>)
90009624:	4293      	cmp	r3, r2
90009626:	d132      	bne.n	9000968e <UART_SetConfig+0x4ea>
90009628:	4b76      	ldr	r3, [pc, #472]	; (90009804 <UART_SetConfig+0x660>)
9000962a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000962c:	f003 0307 	and.w	r3, r3, #7
90009630:	2b05      	cmp	r3, #5
90009632:	d827      	bhi.n	90009684 <UART_SetConfig+0x4e0>
90009634:	a201      	add	r2, pc, #4	; (adr r2, 9000963c <UART_SetConfig+0x498>)
90009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000963a:	bf00      	nop
9000963c:	90009655 	.word	0x90009655
90009640:	9000965d 	.word	0x9000965d
90009644:	90009665 	.word	0x90009665
90009648:	9000966d 	.word	0x9000966d
9000964c:	90009675 	.word	0x90009675
90009650:	9000967d 	.word	0x9000967d
90009654:	2300      	movs	r3, #0
90009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000965a:	e08b      	b.n	90009774 <UART_SetConfig+0x5d0>
9000965c:	2304      	movs	r3, #4
9000965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009662:	e087      	b.n	90009774 <UART_SetConfig+0x5d0>
90009664:	2308      	movs	r3, #8
90009666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000966a:	e083      	b.n	90009774 <UART_SetConfig+0x5d0>
9000966c:	2310      	movs	r3, #16
9000966e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009672:	e07f      	b.n	90009774 <UART_SetConfig+0x5d0>
90009674:	2320      	movs	r3, #32
90009676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000967a:	e07b      	b.n	90009774 <UART_SetConfig+0x5d0>
9000967c:	2340      	movs	r3, #64	; 0x40
9000967e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009682:	e077      	b.n	90009774 <UART_SetConfig+0x5d0>
90009684:	2380      	movs	r3, #128	; 0x80
90009686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000968a:	bf00      	nop
9000968c:	e072      	b.n	90009774 <UART_SetConfig+0x5d0>
9000968e:	687b      	ldr	r3, [r7, #4]
90009690:	681b      	ldr	r3, [r3, #0]
90009692:	4a5e      	ldr	r2, [pc, #376]	; (9000980c <UART_SetConfig+0x668>)
90009694:	4293      	cmp	r3, r2
90009696:	d132      	bne.n	900096fe <UART_SetConfig+0x55a>
90009698:	4b5a      	ldr	r3, [pc, #360]	; (90009804 <UART_SetConfig+0x660>)
9000969a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000969c:	f003 0307 	and.w	r3, r3, #7
900096a0:	2b05      	cmp	r3, #5
900096a2:	d827      	bhi.n	900096f4 <UART_SetConfig+0x550>
900096a4:	a201      	add	r2, pc, #4	; (adr r2, 900096ac <UART_SetConfig+0x508>)
900096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900096aa:	bf00      	nop
900096ac:	900096c5 	.word	0x900096c5
900096b0:	900096cd 	.word	0x900096cd
900096b4:	900096d5 	.word	0x900096d5
900096b8:	900096dd 	.word	0x900096dd
900096bc:	900096e5 	.word	0x900096e5
900096c0:	900096ed 	.word	0x900096ed
900096c4:	2300      	movs	r3, #0
900096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900096ca:	e053      	b.n	90009774 <UART_SetConfig+0x5d0>
900096cc:	2304      	movs	r3, #4
900096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900096d2:	e04f      	b.n	90009774 <UART_SetConfig+0x5d0>
900096d4:	2308      	movs	r3, #8
900096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900096da:	e04b      	b.n	90009774 <UART_SetConfig+0x5d0>
900096dc:	2310      	movs	r3, #16
900096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900096e2:	e047      	b.n	90009774 <UART_SetConfig+0x5d0>
900096e4:	2320      	movs	r3, #32
900096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900096ea:	e043      	b.n	90009774 <UART_SetConfig+0x5d0>
900096ec:	2340      	movs	r3, #64	; 0x40
900096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900096f2:	e03f      	b.n	90009774 <UART_SetConfig+0x5d0>
900096f4:	2380      	movs	r3, #128	; 0x80
900096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
900096fa:	bf00      	nop
900096fc:	e03a      	b.n	90009774 <UART_SetConfig+0x5d0>
900096fe:	687b      	ldr	r3, [r7, #4]
90009700:	681b      	ldr	r3, [r3, #0]
90009702:	4a43      	ldr	r2, [pc, #268]	; (90009810 <UART_SetConfig+0x66c>)
90009704:	4293      	cmp	r3, r2
90009706:	d132      	bne.n	9000976e <UART_SetConfig+0x5ca>
90009708:	4b3e      	ldr	r3, [pc, #248]	; (90009804 <UART_SetConfig+0x660>)
9000970a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000970c:	f003 0307 	and.w	r3, r3, #7
90009710:	2b05      	cmp	r3, #5
90009712:	d827      	bhi.n	90009764 <UART_SetConfig+0x5c0>
90009714:	a201      	add	r2, pc, #4	; (adr r2, 9000971c <UART_SetConfig+0x578>)
90009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000971a:	bf00      	nop
9000971c:	90009735 	.word	0x90009735
90009720:	9000973d 	.word	0x9000973d
90009724:	90009745 	.word	0x90009745
90009728:	9000974d 	.word	0x9000974d
9000972c:	90009755 	.word	0x90009755
90009730:	9000975d 	.word	0x9000975d
90009734:	2302      	movs	r3, #2
90009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000973a:	e01b      	b.n	90009774 <UART_SetConfig+0x5d0>
9000973c:	2304      	movs	r3, #4
9000973e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009742:	e017      	b.n	90009774 <UART_SetConfig+0x5d0>
90009744:	2308      	movs	r3, #8
90009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000974a:	e013      	b.n	90009774 <UART_SetConfig+0x5d0>
9000974c:	2310      	movs	r3, #16
9000974e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009752:	e00f      	b.n	90009774 <UART_SetConfig+0x5d0>
90009754:	2320      	movs	r3, #32
90009756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000975a:	e00b      	b.n	90009774 <UART_SetConfig+0x5d0>
9000975c:	2340      	movs	r3, #64	; 0x40
9000975e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
90009762:	e007      	b.n	90009774 <UART_SetConfig+0x5d0>
90009764:	2380      	movs	r3, #128	; 0x80
90009766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
9000976a:	bf00      	nop
9000976c:	e002      	b.n	90009774 <UART_SetConfig+0x5d0>
9000976e:	2380      	movs	r3, #128	; 0x80
90009770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
90009774:	687b      	ldr	r3, [r7, #4]
90009776:	681b      	ldr	r3, [r3, #0]
90009778:	4a25      	ldr	r2, [pc, #148]	; (90009810 <UART_SetConfig+0x66c>)
9000977a:	4293      	cmp	r3, r2
9000977c:	f040 80b8 	bne.w	900098f0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
90009780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
90009784:	2b08      	cmp	r3, #8
90009786:	d019      	beq.n	900097bc <UART_SetConfig+0x618>
90009788:	2b08      	cmp	r3, #8
9000978a:	dc04      	bgt.n	90009796 <UART_SetConfig+0x5f2>
9000978c:	2b02      	cmp	r3, #2
9000978e:	d009      	beq.n	900097a4 <UART_SetConfig+0x600>
90009790:	2b04      	cmp	r3, #4
90009792:	d00b      	beq.n	900097ac <UART_SetConfig+0x608>
90009794:	e042      	b.n	9000981c <UART_SetConfig+0x678>
90009796:	2b20      	cmp	r3, #32
90009798:	d02b      	beq.n	900097f2 <UART_SetConfig+0x64e>
9000979a:	2b40      	cmp	r3, #64	; 0x40
9000979c:	d02c      	beq.n	900097f8 <UART_SetConfig+0x654>
9000979e:	2b10      	cmp	r3, #16
900097a0:	d014      	beq.n	900097cc <UART_SetConfig+0x628>
900097a2:	e03b      	b.n	9000981c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
900097a4:	f7fc fdde 	bl	90006364 <HAL_RCCEx_GetD3PCLK1Freq>
900097a8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
900097aa:	e03d      	b.n	90009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900097ac:	f107 0314 	add.w	r3, r7, #20
900097b0:	4618      	mov	r0, r3
900097b2:	f7fc fded 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
900097b6:	69bb      	ldr	r3, [r7, #24]
900097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
900097ba:	e035      	b.n	90009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900097bc:	f107 0308 	add.w	r3, r7, #8
900097c0:	4618      	mov	r0, r3
900097c2:	f7fc ff31 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
900097c6:	68fb      	ldr	r3, [r7, #12]
900097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
900097ca:	e02d      	b.n	90009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900097cc:	4b0d      	ldr	r3, [pc, #52]	; (90009804 <UART_SetConfig+0x660>)
900097ce:	681b      	ldr	r3, [r3, #0]
900097d0:	f003 0320 	and.w	r3, r3, #32
900097d4:	2b00      	cmp	r3, #0
900097d6:	d009      	beq.n	900097ec <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
900097d8:	4b0a      	ldr	r3, [pc, #40]	; (90009804 <UART_SetConfig+0x660>)
900097da:	681b      	ldr	r3, [r3, #0]
900097dc:	08db      	lsrs	r3, r3, #3
900097de:	f003 0303 	and.w	r3, r3, #3
900097e2:	4a0c      	ldr	r2, [pc, #48]	; (90009814 <UART_SetConfig+0x670>)
900097e4:	fa22 f303 	lsr.w	r3, r2, r3
900097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
900097ea:	e01d      	b.n	90009828 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
900097ec:	4b09      	ldr	r3, [pc, #36]	; (90009814 <UART_SetConfig+0x670>)
900097ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
900097f0:	e01a      	b.n	90009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
900097f2:	4b09      	ldr	r3, [pc, #36]	; (90009818 <UART_SetConfig+0x674>)
900097f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
900097f6:	e017      	b.n	90009828 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
900097f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
900097fe:	e013      	b.n	90009828 <UART_SetConfig+0x684>
90009800:	40011400 	.word	0x40011400
90009804:	58024400 	.word	0x58024400
90009808:	40007800 	.word	0x40007800
9000980c:	40007c00 	.word	0x40007c00
90009810:	58000c00 	.word	0x58000c00
90009814:	03d09000 	.word	0x03d09000
90009818:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
9000981c:	2300      	movs	r3, #0
9000981e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
90009820:	2301      	movs	r3, #1
90009822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
90009826:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
90009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000982a:	2b00      	cmp	r3, #0
9000982c:	f000 824d 	beq.w	90009cca <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
90009830:	687b      	ldr	r3, [r7, #4]
90009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009834:	4aad      	ldr	r2, [pc, #692]	; (90009aec <UART_SetConfig+0x948>)
90009836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000983a:	461a      	mov	r2, r3
9000983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000983e:	fbb3 f3f2 	udiv	r3, r3, r2
90009842:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90009844:	687b      	ldr	r3, [r7, #4]
90009846:	685a      	ldr	r2, [r3, #4]
90009848:	4613      	mov	r3, r2
9000984a:	005b      	lsls	r3, r3, #1
9000984c:	4413      	add	r3, r2
9000984e:	6a3a      	ldr	r2, [r7, #32]
90009850:	429a      	cmp	r2, r3
90009852:	d305      	bcc.n	90009860 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
90009854:	687b      	ldr	r3, [r7, #4]
90009856:	685b      	ldr	r3, [r3, #4]
90009858:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000985a:	6a3a      	ldr	r2, [r7, #32]
9000985c:	429a      	cmp	r2, r3
9000985e:	d903      	bls.n	90009868 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
90009860:	2301      	movs	r3, #1
90009862:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
90009866:	e230      	b.n	90009cca <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
90009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000986a:	4618      	mov	r0, r3
9000986c:	f04f 0100 	mov.w	r1, #0
90009870:	687b      	ldr	r3, [r7, #4]
90009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009874:	4a9d      	ldr	r2, [pc, #628]	; (90009aec <UART_SetConfig+0x948>)
90009876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000987a:	b29b      	uxth	r3, r3
9000987c:	f04f 0400 	mov.w	r4, #0
90009880:	461a      	mov	r2, r3
90009882:	4623      	mov	r3, r4
90009884:	f7f6 fea4 	bl	900005d0 <__aeabi_uldivmod>
90009888:	4603      	mov	r3, r0
9000988a:	460c      	mov	r4, r1
9000988c:	4619      	mov	r1, r3
9000988e:	4622      	mov	r2, r4
90009890:	f04f 0300 	mov.w	r3, #0
90009894:	f04f 0400 	mov.w	r4, #0
90009898:	0214      	lsls	r4, r2, #8
9000989a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
9000989e:	020b      	lsls	r3, r1, #8
900098a0:	687a      	ldr	r2, [r7, #4]
900098a2:	6852      	ldr	r2, [r2, #4]
900098a4:	0852      	lsrs	r2, r2, #1
900098a6:	4611      	mov	r1, r2
900098a8:	f04f 0200 	mov.w	r2, #0
900098ac:	eb13 0b01 	adds.w	fp, r3, r1
900098b0:	eb44 0c02 	adc.w	ip, r4, r2
900098b4:	4658      	mov	r0, fp
900098b6:	4661      	mov	r1, ip
900098b8:	687b      	ldr	r3, [r7, #4]
900098ba:	685b      	ldr	r3, [r3, #4]
900098bc:	f04f 0400 	mov.w	r4, #0
900098c0:	461a      	mov	r2, r3
900098c2:	4623      	mov	r3, r4
900098c4:	f7f6 fe84 	bl	900005d0 <__aeabi_uldivmod>
900098c8:	4603      	mov	r3, r0
900098ca:	460c      	mov	r4, r1
900098cc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
900098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
900098d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900098d4:	d308      	bcc.n	900098e8 <UART_SetConfig+0x744>
900098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900098d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900098dc:	d204      	bcs.n	900098e8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
900098de:	687b      	ldr	r3, [r7, #4]
900098e0:	681b      	ldr	r3, [r3, #0]
900098e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
900098e4:	60da      	str	r2, [r3, #12]
900098e6:	e1f0      	b.n	90009cca <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
900098e8:	2301      	movs	r3, #1
900098ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
900098ee:	e1ec      	b.n	90009cca <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
900098f0:	687b      	ldr	r3, [r7, #4]
900098f2:	69db      	ldr	r3, [r3, #28]
900098f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
900098f8:	f040 8100 	bne.w	90009afc <UART_SetConfig+0x958>
  {
    switch (clocksource)
900098fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
90009900:	2b40      	cmp	r3, #64	; 0x40
90009902:	f200 80b7 	bhi.w	90009a74 <UART_SetConfig+0x8d0>
90009906:	a201      	add	r2, pc, #4	; (adr r2, 9000990c <UART_SetConfig+0x768>)
90009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000990c:	90009a11 	.word	0x90009a11
90009910:	90009a19 	.word	0x90009a19
90009914:	90009a75 	.word	0x90009a75
90009918:	90009a75 	.word	0x90009a75
9000991c:	90009a21 	.word	0x90009a21
90009920:	90009a75 	.word	0x90009a75
90009924:	90009a75 	.word	0x90009a75
90009928:	90009a75 	.word	0x90009a75
9000992c:	90009a31 	.word	0x90009a31
90009930:	90009a75 	.word	0x90009a75
90009934:	90009a75 	.word	0x90009a75
90009938:	90009a75 	.word	0x90009a75
9000993c:	90009a75 	.word	0x90009a75
90009940:	90009a75 	.word	0x90009a75
90009944:	90009a75 	.word	0x90009a75
90009948:	90009a75 	.word	0x90009a75
9000994c:	90009a41 	.word	0x90009a41
90009950:	90009a75 	.word	0x90009a75
90009954:	90009a75 	.word	0x90009a75
90009958:	90009a75 	.word	0x90009a75
9000995c:	90009a75 	.word	0x90009a75
90009960:	90009a75 	.word	0x90009a75
90009964:	90009a75 	.word	0x90009a75
90009968:	90009a75 	.word	0x90009a75
9000996c:	90009a75 	.word	0x90009a75
90009970:	90009a75 	.word	0x90009a75
90009974:	90009a75 	.word	0x90009a75
90009978:	90009a75 	.word	0x90009a75
9000997c:	90009a75 	.word	0x90009a75
90009980:	90009a75 	.word	0x90009a75
90009984:	90009a75 	.word	0x90009a75
90009988:	90009a75 	.word	0x90009a75
9000998c:	90009a67 	.word	0x90009a67
90009990:	90009a75 	.word	0x90009a75
90009994:	90009a75 	.word	0x90009a75
90009998:	90009a75 	.word	0x90009a75
9000999c:	90009a75 	.word	0x90009a75
900099a0:	90009a75 	.word	0x90009a75
900099a4:	90009a75 	.word	0x90009a75
900099a8:	90009a75 	.word	0x90009a75
900099ac:	90009a75 	.word	0x90009a75
900099b0:	90009a75 	.word	0x90009a75
900099b4:	90009a75 	.word	0x90009a75
900099b8:	90009a75 	.word	0x90009a75
900099bc:	90009a75 	.word	0x90009a75
900099c0:	90009a75 	.word	0x90009a75
900099c4:	90009a75 	.word	0x90009a75
900099c8:	90009a75 	.word	0x90009a75
900099cc:	90009a75 	.word	0x90009a75
900099d0:	90009a75 	.word	0x90009a75
900099d4:	90009a75 	.word	0x90009a75
900099d8:	90009a75 	.word	0x90009a75
900099dc:	90009a75 	.word	0x90009a75
900099e0:	90009a75 	.word	0x90009a75
900099e4:	90009a75 	.word	0x90009a75
900099e8:	90009a75 	.word	0x90009a75
900099ec:	90009a75 	.word	0x90009a75
900099f0:	90009a75 	.word	0x90009a75
900099f4:	90009a75 	.word	0x90009a75
900099f8:	90009a75 	.word	0x90009a75
900099fc:	90009a75 	.word	0x90009a75
90009a00:	90009a75 	.word	0x90009a75
90009a04:	90009a75 	.word	0x90009a75
90009a08:	90009a75 	.word	0x90009a75
90009a0c:	90009a6d 	.word	0x90009a6d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90009a10:	f7fb fad4 	bl	90004fbc <HAL_RCC_GetPCLK1Freq>
90009a14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
90009a16:	e033      	b.n	90009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90009a18:	f7fb fae6 	bl	90004fe8 <HAL_RCC_GetPCLK2Freq>
90009a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
90009a1e:	e02f      	b.n	90009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90009a20:	f107 0314 	add.w	r3, r7, #20
90009a24:	4618      	mov	r0, r3
90009a26:	f7fc fcb3 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90009a2a:	69bb      	ldr	r3, [r7, #24]
90009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009a2e:	e027      	b.n	90009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90009a30:	f107 0308 	add.w	r3, r7, #8
90009a34:	4618      	mov	r0, r3
90009a36:	f7fc fdf7 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90009a3a:	68fb      	ldr	r3, [r7, #12]
90009a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009a3e:	e01f      	b.n	90009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009a40:	4b2b      	ldr	r3, [pc, #172]	; (90009af0 <UART_SetConfig+0x94c>)
90009a42:	681b      	ldr	r3, [r3, #0]
90009a44:	f003 0320 	and.w	r3, r3, #32
90009a48:	2b00      	cmp	r3, #0
90009a4a:	d009      	beq.n	90009a60 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90009a4c:	4b28      	ldr	r3, [pc, #160]	; (90009af0 <UART_SetConfig+0x94c>)
90009a4e:	681b      	ldr	r3, [r3, #0]
90009a50:	08db      	lsrs	r3, r3, #3
90009a52:	f003 0303 	and.w	r3, r3, #3
90009a56:	4a27      	ldr	r2, [pc, #156]	; (90009af4 <UART_SetConfig+0x950>)
90009a58:	fa22 f303 	lsr.w	r3, r2, r3
90009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90009a5e:	e00f      	b.n	90009a80 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
90009a60:	4b24      	ldr	r3, [pc, #144]	; (90009af4 <UART_SetConfig+0x950>)
90009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009a64:	e00c      	b.n	90009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90009a66:	4b24      	ldr	r3, [pc, #144]	; (90009af8 <UART_SetConfig+0x954>)
90009a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009a6a:	e009      	b.n	90009a80 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90009a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90009a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009a72:	e005      	b.n	90009a80 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
90009a74:	2300      	movs	r3, #0
90009a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
90009a78:	2301      	movs	r3, #1
90009a7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
90009a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
90009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009a82:	2b00      	cmp	r3, #0
90009a84:	f000 8121 	beq.w	90009cca <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90009a88:	687b      	ldr	r3, [r7, #4]
90009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009a8c:	4a17      	ldr	r2, [pc, #92]	; (90009aec <UART_SetConfig+0x948>)
90009a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90009a92:	461a      	mov	r2, r3
90009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009a96:	fbb3 f3f2 	udiv	r3, r3, r2
90009a9a:	005a      	lsls	r2, r3, #1
90009a9c:	687b      	ldr	r3, [r7, #4]
90009a9e:	685b      	ldr	r3, [r3, #4]
90009aa0:	085b      	lsrs	r3, r3, #1
90009aa2:	441a      	add	r2, r3
90009aa4:	687b      	ldr	r3, [r7, #4]
90009aa6:	685b      	ldr	r3, [r3, #4]
90009aa8:	fbb2 f3f3 	udiv	r3, r2, r3
90009aac:	b29b      	uxth	r3, r3
90009aae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009ab2:	2b0f      	cmp	r3, #15
90009ab4:	d916      	bls.n	90009ae4 <UART_SetConfig+0x940>
90009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009abc:	d212      	bcs.n	90009ae4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009ac0:	b29b      	uxth	r3, r3
90009ac2:	f023 030f 	bic.w	r3, r3, #15
90009ac6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
90009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009aca:	085b      	lsrs	r3, r3, #1
90009acc:	b29b      	uxth	r3, r3
90009ace:	f003 0307 	and.w	r3, r3, #7
90009ad2:	b29a      	uxth	r2, r3
90009ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
90009ad6:	4313      	orrs	r3, r2
90009ad8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
90009ada:	687b      	ldr	r3, [r7, #4]
90009adc:	681b      	ldr	r3, [r3, #0]
90009ade:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
90009ae0:	60da      	str	r2, [r3, #12]
90009ae2:	e0f2      	b.n	90009cca <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
90009ae4:	2301      	movs	r3, #1
90009ae6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
90009aea:	e0ee      	b.n	90009cca <UART_SetConfig+0xb26>
90009aec:	9000f014 	.word	0x9000f014
90009af0:	58024400 	.word	0x58024400
90009af4:	03d09000 	.word	0x03d09000
90009af8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
90009afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
90009b00:	2b40      	cmp	r3, #64	; 0x40
90009b02:	f200 80b7 	bhi.w	90009c74 <UART_SetConfig+0xad0>
90009b06:	a201      	add	r2, pc, #4	; (adr r2, 90009b0c <UART_SetConfig+0x968>)
90009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009b0c:	90009c11 	.word	0x90009c11
90009b10:	90009c19 	.word	0x90009c19
90009b14:	90009c75 	.word	0x90009c75
90009b18:	90009c75 	.word	0x90009c75
90009b1c:	90009c21 	.word	0x90009c21
90009b20:	90009c75 	.word	0x90009c75
90009b24:	90009c75 	.word	0x90009c75
90009b28:	90009c75 	.word	0x90009c75
90009b2c:	90009c31 	.word	0x90009c31
90009b30:	90009c75 	.word	0x90009c75
90009b34:	90009c75 	.word	0x90009c75
90009b38:	90009c75 	.word	0x90009c75
90009b3c:	90009c75 	.word	0x90009c75
90009b40:	90009c75 	.word	0x90009c75
90009b44:	90009c75 	.word	0x90009c75
90009b48:	90009c75 	.word	0x90009c75
90009b4c:	90009c41 	.word	0x90009c41
90009b50:	90009c75 	.word	0x90009c75
90009b54:	90009c75 	.word	0x90009c75
90009b58:	90009c75 	.word	0x90009c75
90009b5c:	90009c75 	.word	0x90009c75
90009b60:	90009c75 	.word	0x90009c75
90009b64:	90009c75 	.word	0x90009c75
90009b68:	90009c75 	.word	0x90009c75
90009b6c:	90009c75 	.word	0x90009c75
90009b70:	90009c75 	.word	0x90009c75
90009b74:	90009c75 	.word	0x90009c75
90009b78:	90009c75 	.word	0x90009c75
90009b7c:	90009c75 	.word	0x90009c75
90009b80:	90009c75 	.word	0x90009c75
90009b84:	90009c75 	.word	0x90009c75
90009b88:	90009c75 	.word	0x90009c75
90009b8c:	90009c67 	.word	0x90009c67
90009b90:	90009c75 	.word	0x90009c75
90009b94:	90009c75 	.word	0x90009c75
90009b98:	90009c75 	.word	0x90009c75
90009b9c:	90009c75 	.word	0x90009c75
90009ba0:	90009c75 	.word	0x90009c75
90009ba4:	90009c75 	.word	0x90009c75
90009ba8:	90009c75 	.word	0x90009c75
90009bac:	90009c75 	.word	0x90009c75
90009bb0:	90009c75 	.word	0x90009c75
90009bb4:	90009c75 	.word	0x90009c75
90009bb8:	90009c75 	.word	0x90009c75
90009bbc:	90009c75 	.word	0x90009c75
90009bc0:	90009c75 	.word	0x90009c75
90009bc4:	90009c75 	.word	0x90009c75
90009bc8:	90009c75 	.word	0x90009c75
90009bcc:	90009c75 	.word	0x90009c75
90009bd0:	90009c75 	.word	0x90009c75
90009bd4:	90009c75 	.word	0x90009c75
90009bd8:	90009c75 	.word	0x90009c75
90009bdc:	90009c75 	.word	0x90009c75
90009be0:	90009c75 	.word	0x90009c75
90009be4:	90009c75 	.word	0x90009c75
90009be8:	90009c75 	.word	0x90009c75
90009bec:	90009c75 	.word	0x90009c75
90009bf0:	90009c75 	.word	0x90009c75
90009bf4:	90009c75 	.word	0x90009c75
90009bf8:	90009c75 	.word	0x90009c75
90009bfc:	90009c75 	.word	0x90009c75
90009c00:	90009c75 	.word	0x90009c75
90009c04:	90009c75 	.word	0x90009c75
90009c08:	90009c75 	.word	0x90009c75
90009c0c:	90009c6d 	.word	0x90009c6d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90009c10:	f7fb f9d4 	bl	90004fbc <HAL_RCC_GetPCLK1Freq>
90009c14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
90009c16:	e033      	b.n	90009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90009c18:	f7fb f9e6 	bl	90004fe8 <HAL_RCC_GetPCLK2Freq>
90009c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
90009c1e:	e02f      	b.n	90009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90009c20:	f107 0314 	add.w	r3, r7, #20
90009c24:	4618      	mov	r0, r3
90009c26:	f7fc fbb3 	bl	90006390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90009c2a:	69bb      	ldr	r3, [r7, #24]
90009c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009c2e:	e027      	b.n	90009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90009c30:	f107 0308 	add.w	r3, r7, #8
90009c34:	4618      	mov	r0, r3
90009c36:	f7fc fcf7 	bl	90006628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90009c3a:	68fb      	ldr	r3, [r7, #12]
90009c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009c3e:	e01f      	b.n	90009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009c40:	4b2c      	ldr	r3, [pc, #176]	; (90009cf4 <UART_SetConfig+0xb50>)
90009c42:	681b      	ldr	r3, [r3, #0]
90009c44:	f003 0320 	and.w	r3, r3, #32
90009c48:	2b00      	cmp	r3, #0
90009c4a:	d009      	beq.n	90009c60 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90009c4c:	4b29      	ldr	r3, [pc, #164]	; (90009cf4 <UART_SetConfig+0xb50>)
90009c4e:	681b      	ldr	r3, [r3, #0]
90009c50:	08db      	lsrs	r3, r3, #3
90009c52:	f003 0303 	and.w	r3, r3, #3
90009c56:	4a28      	ldr	r2, [pc, #160]	; (90009cf8 <UART_SetConfig+0xb54>)
90009c58:	fa22 f303 	lsr.w	r3, r2, r3
90009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90009c5e:	e00f      	b.n	90009c80 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
90009c60:	4b25      	ldr	r3, [pc, #148]	; (90009cf8 <UART_SetConfig+0xb54>)
90009c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009c64:	e00c      	b.n	90009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90009c66:	4b25      	ldr	r3, [pc, #148]	; (90009cfc <UART_SetConfig+0xb58>)
90009c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009c6a:	e009      	b.n	90009c80 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90009c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90009c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
90009c72:	e005      	b.n	90009c80 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
90009c74:	2300      	movs	r3, #0
90009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
90009c78:	2301      	movs	r3, #1
90009c7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
90009c7e:	bf00      	nop
    }

    if (pclk != 0U)
90009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009c82:	2b00      	cmp	r3, #0
90009c84:	d021      	beq.n	90009cca <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90009c86:	687b      	ldr	r3, [r7, #4]
90009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009c8a:	4a1d      	ldr	r2, [pc, #116]	; (90009d00 <UART_SetConfig+0xb5c>)
90009c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90009c90:	461a      	mov	r2, r3
90009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009c94:	fbb3 f2f2 	udiv	r2, r3, r2
90009c98:	687b      	ldr	r3, [r7, #4]
90009c9a:	685b      	ldr	r3, [r3, #4]
90009c9c:	085b      	lsrs	r3, r3, #1
90009c9e:	441a      	add	r2, r3
90009ca0:	687b      	ldr	r3, [r7, #4]
90009ca2:	685b      	ldr	r3, [r3, #4]
90009ca4:	fbb2 f3f3 	udiv	r3, r2, r3
90009ca8:	b29b      	uxth	r3, r3
90009caa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009cae:	2b0f      	cmp	r3, #15
90009cb0:	d908      	bls.n	90009cc4 <UART_SetConfig+0xb20>
90009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009cb8:	d204      	bcs.n	90009cc4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
90009cba:	687b      	ldr	r3, [r7, #4]
90009cbc:	681b      	ldr	r3, [r3, #0]
90009cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
90009cc0:	60da      	str	r2, [r3, #12]
90009cc2:	e002      	b.n	90009cca <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
90009cc4:	2301      	movs	r3, #1
90009cc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
90009cca:	687b      	ldr	r3, [r7, #4]
90009ccc:	2201      	movs	r2, #1
90009cce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
90009cd2:	687b      	ldr	r3, [r7, #4]
90009cd4:	2201      	movs	r2, #1
90009cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
90009cda:	687b      	ldr	r3, [r7, #4]
90009cdc:	2200      	movs	r2, #0
90009cde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
90009ce0:	687b      	ldr	r3, [r7, #4]
90009ce2:	2200      	movs	r2, #0
90009ce4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
90009ce6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
90009cea:	4618      	mov	r0, r3
90009cec:	3738      	adds	r7, #56	; 0x38
90009cee:	46bd      	mov	sp, r7
90009cf0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
90009cf4:	58024400 	.word	0x58024400
90009cf8:	03d09000 	.word	0x03d09000
90009cfc:	003d0900 	.word	0x003d0900
90009d00:	9000f014 	.word	0x9000f014

90009d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
90009d04:	b480      	push	{r7}
90009d06:	b083      	sub	sp, #12
90009d08:	af00      	add	r7, sp, #0
90009d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90009d0c:	687b      	ldr	r3, [r7, #4]
90009d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009d10:	f003 0301 	and.w	r3, r3, #1
90009d14:	2b00      	cmp	r3, #0
90009d16:	d00a      	beq.n	90009d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
90009d18:	687b      	ldr	r3, [r7, #4]
90009d1a:	681b      	ldr	r3, [r3, #0]
90009d1c:	685b      	ldr	r3, [r3, #4]
90009d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
90009d22:	687b      	ldr	r3, [r7, #4]
90009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90009d26:	687b      	ldr	r3, [r7, #4]
90009d28:	681b      	ldr	r3, [r3, #0]
90009d2a:	430a      	orrs	r2, r1
90009d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
90009d2e:	687b      	ldr	r3, [r7, #4]
90009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009d32:	f003 0302 	and.w	r3, r3, #2
90009d36:	2b00      	cmp	r3, #0
90009d38:	d00a      	beq.n	90009d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
90009d3a:	687b      	ldr	r3, [r7, #4]
90009d3c:	681b      	ldr	r3, [r3, #0]
90009d3e:	685b      	ldr	r3, [r3, #4]
90009d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
90009d44:	687b      	ldr	r3, [r7, #4]
90009d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009d48:	687b      	ldr	r3, [r7, #4]
90009d4a:	681b      	ldr	r3, [r3, #0]
90009d4c:	430a      	orrs	r2, r1
90009d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
90009d50:	687b      	ldr	r3, [r7, #4]
90009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009d54:	f003 0304 	and.w	r3, r3, #4
90009d58:	2b00      	cmp	r3, #0
90009d5a:	d00a      	beq.n	90009d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90009d5c:	687b      	ldr	r3, [r7, #4]
90009d5e:	681b      	ldr	r3, [r3, #0]
90009d60:	685b      	ldr	r3, [r3, #4]
90009d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
90009d66:	687b      	ldr	r3, [r7, #4]
90009d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009d6a:	687b      	ldr	r3, [r7, #4]
90009d6c:	681b      	ldr	r3, [r3, #0]
90009d6e:	430a      	orrs	r2, r1
90009d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90009d72:	687b      	ldr	r3, [r7, #4]
90009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009d76:	f003 0308 	and.w	r3, r3, #8
90009d7a:	2b00      	cmp	r3, #0
90009d7c:	d00a      	beq.n	90009d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
90009d7e:	687b      	ldr	r3, [r7, #4]
90009d80:	681b      	ldr	r3, [r3, #0]
90009d82:	685b      	ldr	r3, [r3, #4]
90009d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
90009d88:	687b      	ldr	r3, [r7, #4]
90009d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009d8c:	687b      	ldr	r3, [r7, #4]
90009d8e:	681b      	ldr	r3, [r3, #0]
90009d90:	430a      	orrs	r2, r1
90009d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90009d94:	687b      	ldr	r3, [r7, #4]
90009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009d98:	f003 0310 	and.w	r3, r3, #16
90009d9c:	2b00      	cmp	r3, #0
90009d9e:	d00a      	beq.n	90009db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90009da0:	687b      	ldr	r3, [r7, #4]
90009da2:	681b      	ldr	r3, [r3, #0]
90009da4:	689b      	ldr	r3, [r3, #8]
90009da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
90009daa:	687b      	ldr	r3, [r7, #4]
90009dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90009dae:	687b      	ldr	r3, [r7, #4]
90009db0:	681b      	ldr	r3, [r3, #0]
90009db2:	430a      	orrs	r2, r1
90009db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
90009db6:	687b      	ldr	r3, [r7, #4]
90009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009dba:	f003 0320 	and.w	r3, r3, #32
90009dbe:	2b00      	cmp	r3, #0
90009dc0:	d00a      	beq.n	90009dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
90009dc2:	687b      	ldr	r3, [r7, #4]
90009dc4:	681b      	ldr	r3, [r3, #0]
90009dc6:	689b      	ldr	r3, [r3, #8]
90009dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
90009dcc:	687b      	ldr	r3, [r7, #4]
90009dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90009dd0:	687b      	ldr	r3, [r7, #4]
90009dd2:	681b      	ldr	r3, [r3, #0]
90009dd4:	430a      	orrs	r2, r1
90009dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
90009dd8:	687b      	ldr	r3, [r7, #4]
90009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
90009de0:	2b00      	cmp	r3, #0
90009de2:	d01a      	beq.n	90009e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90009de4:	687b      	ldr	r3, [r7, #4]
90009de6:	681b      	ldr	r3, [r3, #0]
90009de8:	685b      	ldr	r3, [r3, #4]
90009dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
90009dee:	687b      	ldr	r3, [r7, #4]
90009df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90009df2:	687b      	ldr	r3, [r7, #4]
90009df4:	681b      	ldr	r3, [r3, #0]
90009df6:	430a      	orrs	r2, r1
90009df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
90009dfa:	687b      	ldr	r3, [r7, #4]
90009dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90009dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90009e02:	d10a      	bne.n	90009e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
90009e04:	687b      	ldr	r3, [r7, #4]
90009e06:	681b      	ldr	r3, [r3, #0]
90009e08:	685b      	ldr	r3, [r3, #4]
90009e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
90009e0e:	687b      	ldr	r3, [r7, #4]
90009e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
90009e12:	687b      	ldr	r3, [r7, #4]
90009e14:	681b      	ldr	r3, [r3, #0]
90009e16:	430a      	orrs	r2, r1
90009e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
90009e1a:	687b      	ldr	r3, [r7, #4]
90009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90009e22:	2b00      	cmp	r3, #0
90009e24:	d00a      	beq.n	90009e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
90009e26:	687b      	ldr	r3, [r7, #4]
90009e28:	681b      	ldr	r3, [r3, #0]
90009e2a:	685b      	ldr	r3, [r3, #4]
90009e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
90009e30:	687b      	ldr	r3, [r7, #4]
90009e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
90009e34:	687b      	ldr	r3, [r7, #4]
90009e36:	681b      	ldr	r3, [r3, #0]
90009e38:	430a      	orrs	r2, r1
90009e3a:	605a      	str	r2, [r3, #4]
  }
}
90009e3c:	bf00      	nop
90009e3e:	370c      	adds	r7, #12
90009e40:	46bd      	mov	sp, r7
90009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
90009e46:	4770      	bx	lr

90009e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
90009e48:	b580      	push	{r7, lr}
90009e4a:	b086      	sub	sp, #24
90009e4c:	af02      	add	r7, sp, #8
90009e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
90009e50:	687b      	ldr	r3, [r7, #4]
90009e52:	2200      	movs	r2, #0
90009e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
90009e58:	f7f8 f9d2 	bl	90002200 <HAL_GetTick>
90009e5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
90009e5e:	687b      	ldr	r3, [r7, #4]
90009e60:	681b      	ldr	r3, [r3, #0]
90009e62:	681b      	ldr	r3, [r3, #0]
90009e64:	f003 0308 	and.w	r3, r3, #8
90009e68:	2b08      	cmp	r3, #8
90009e6a:	d10e      	bne.n	90009e8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90009e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90009e70:	9300      	str	r3, [sp, #0]
90009e72:	68fb      	ldr	r3, [r7, #12]
90009e74:	2200      	movs	r2, #0
90009e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
90009e7a:	6878      	ldr	r0, [r7, #4]
90009e7c:	f000 f82c 	bl	90009ed8 <UART_WaitOnFlagUntilTimeout>
90009e80:	4603      	mov	r3, r0
90009e82:	2b00      	cmp	r3, #0
90009e84:	d001      	beq.n	90009e8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90009e86:	2303      	movs	r3, #3
90009e88:	e022      	b.n	90009ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
90009e8a:	687b      	ldr	r3, [r7, #4]
90009e8c:	681b      	ldr	r3, [r3, #0]
90009e8e:	681b      	ldr	r3, [r3, #0]
90009e90:	f003 0304 	and.w	r3, r3, #4
90009e94:	2b04      	cmp	r3, #4
90009e96:	d10e      	bne.n	90009eb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90009e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90009e9c:	9300      	str	r3, [sp, #0]
90009e9e:	68fb      	ldr	r3, [r7, #12]
90009ea0:	2200      	movs	r2, #0
90009ea2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
90009ea6:	6878      	ldr	r0, [r7, #4]
90009ea8:	f000 f816 	bl	90009ed8 <UART_WaitOnFlagUntilTimeout>
90009eac:	4603      	mov	r3, r0
90009eae:	2b00      	cmp	r3, #0
90009eb0:	d001      	beq.n	90009eb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90009eb2:	2303      	movs	r3, #3
90009eb4:	e00c      	b.n	90009ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
90009eb6:	687b      	ldr	r3, [r7, #4]
90009eb8:	2220      	movs	r2, #32
90009eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
90009ebe:	687b      	ldr	r3, [r7, #4]
90009ec0:	2220      	movs	r2, #32
90009ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
90009ec6:	687b      	ldr	r3, [r7, #4]
90009ec8:	2200      	movs	r2, #0
90009eca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
90009ece:	2300      	movs	r3, #0
}
90009ed0:	4618      	mov	r0, r3
90009ed2:	3710      	adds	r7, #16
90009ed4:	46bd      	mov	sp, r7
90009ed6:	bd80      	pop	{r7, pc}

90009ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90009ed8:	b580      	push	{r7, lr}
90009eda:	b084      	sub	sp, #16
90009edc:	af00      	add	r7, sp, #0
90009ede:	60f8      	str	r0, [r7, #12]
90009ee0:	60b9      	str	r1, [r7, #8]
90009ee2:	603b      	str	r3, [r7, #0]
90009ee4:	4613      	mov	r3, r2
90009ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90009ee8:	e062      	b.n	90009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90009eea:	69bb      	ldr	r3, [r7, #24]
90009eec:	f1b3 3fff 	cmp.w	r3, #4294967295
90009ef0:	d05e      	beq.n	90009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009ef2:	f7f8 f985 	bl	90002200 <HAL_GetTick>
90009ef6:	4602      	mov	r2, r0
90009ef8:	683b      	ldr	r3, [r7, #0]
90009efa:	1ad3      	subs	r3, r2, r3
90009efc:	69ba      	ldr	r2, [r7, #24]
90009efe:	429a      	cmp	r2, r3
90009f00:	d302      	bcc.n	90009f08 <UART_WaitOnFlagUntilTimeout+0x30>
90009f02:	69bb      	ldr	r3, [r7, #24]
90009f04:	2b00      	cmp	r3, #0
90009f06:	d11d      	bne.n	90009f44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
90009f08:	68fb      	ldr	r3, [r7, #12]
90009f0a:	681b      	ldr	r3, [r3, #0]
90009f0c:	681a      	ldr	r2, [r3, #0]
90009f0e:	68fb      	ldr	r3, [r7, #12]
90009f10:	681b      	ldr	r3, [r3, #0]
90009f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
90009f16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90009f18:	68fb      	ldr	r3, [r7, #12]
90009f1a:	681b      	ldr	r3, [r3, #0]
90009f1c:	689a      	ldr	r2, [r3, #8]
90009f1e:	68fb      	ldr	r3, [r7, #12]
90009f20:	681b      	ldr	r3, [r3, #0]
90009f22:	f022 0201 	bic.w	r2, r2, #1
90009f26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
90009f28:	68fb      	ldr	r3, [r7, #12]
90009f2a:	2220      	movs	r2, #32
90009f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
90009f30:	68fb      	ldr	r3, [r7, #12]
90009f32:	2220      	movs	r2, #32
90009f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
90009f38:	68fb      	ldr	r3, [r7, #12]
90009f3a:	2200      	movs	r2, #0
90009f3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
90009f40:	2303      	movs	r3, #3
90009f42:	e045      	b.n	90009fd0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
90009f44:	68fb      	ldr	r3, [r7, #12]
90009f46:	681b      	ldr	r3, [r3, #0]
90009f48:	681b      	ldr	r3, [r3, #0]
90009f4a:	f003 0304 	and.w	r3, r3, #4
90009f4e:	2b00      	cmp	r3, #0
90009f50:	d02e      	beq.n	90009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90009f52:	68fb      	ldr	r3, [r7, #12]
90009f54:	681b      	ldr	r3, [r3, #0]
90009f56:	69db      	ldr	r3, [r3, #28]
90009f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90009f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90009f60:	d126      	bne.n	90009fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90009f62:	68fb      	ldr	r3, [r7, #12]
90009f64:	681b      	ldr	r3, [r3, #0]
90009f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
90009f6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
90009f6c:	68fb      	ldr	r3, [r7, #12]
90009f6e:	681b      	ldr	r3, [r3, #0]
90009f70:	681a      	ldr	r2, [r3, #0]
90009f72:	68fb      	ldr	r3, [r7, #12]
90009f74:	681b      	ldr	r3, [r3, #0]
90009f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
90009f7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90009f7c:	68fb      	ldr	r3, [r7, #12]
90009f7e:	681b      	ldr	r3, [r3, #0]
90009f80:	689a      	ldr	r2, [r3, #8]
90009f82:	68fb      	ldr	r3, [r7, #12]
90009f84:	681b      	ldr	r3, [r3, #0]
90009f86:	f022 0201 	bic.w	r2, r2, #1
90009f8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
90009f8c:	68fb      	ldr	r3, [r7, #12]
90009f8e:	2220      	movs	r2, #32
90009f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
90009f94:	68fb      	ldr	r3, [r7, #12]
90009f96:	2220      	movs	r2, #32
90009f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
90009f9c:	68fb      	ldr	r3, [r7, #12]
90009f9e:	2220      	movs	r2, #32
90009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
90009fa4:	68fb      	ldr	r3, [r7, #12]
90009fa6:	2200      	movs	r2, #0
90009fa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
90009fac:	2303      	movs	r3, #3
90009fae:	e00f      	b.n	90009fd0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90009fb0:	68fb      	ldr	r3, [r7, #12]
90009fb2:	681b      	ldr	r3, [r3, #0]
90009fb4:	69da      	ldr	r2, [r3, #28]
90009fb6:	68bb      	ldr	r3, [r7, #8]
90009fb8:	4013      	ands	r3, r2
90009fba:	68ba      	ldr	r2, [r7, #8]
90009fbc:	429a      	cmp	r2, r3
90009fbe:	bf0c      	ite	eq
90009fc0:	2301      	moveq	r3, #1
90009fc2:	2300      	movne	r3, #0
90009fc4:	b2db      	uxtb	r3, r3
90009fc6:	461a      	mov	r2, r3
90009fc8:	79fb      	ldrb	r3, [r7, #7]
90009fca:	429a      	cmp	r2, r3
90009fcc:	d08d      	beq.n	90009eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90009fce:	2300      	movs	r3, #0
}
90009fd0:	4618      	mov	r0, r3
90009fd2:	3710      	adds	r7, #16
90009fd4:	46bd      	mov	sp, r7
90009fd6:	bd80      	pop	{r7, pc}

90009fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
90009fd8:	b480      	push	{r7}
90009fda:	b083      	sub	sp, #12
90009fdc:	af00      	add	r7, sp, #0
90009fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
90009fe0:	687b      	ldr	r3, [r7, #4]
90009fe2:	681b      	ldr	r3, [r3, #0]
90009fe4:	681a      	ldr	r2, [r3, #0]
90009fe6:	687b      	ldr	r3, [r7, #4]
90009fe8:	681b      	ldr	r3, [r3, #0]
90009fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
90009fee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
90009ff0:	687b      	ldr	r3, [r7, #4]
90009ff2:	681b      	ldr	r3, [r3, #0]
90009ff4:	6899      	ldr	r1, [r3, #8]
90009ff6:	687b      	ldr	r3, [r7, #4]
90009ff8:	681a      	ldr	r2, [r3, #0]
90009ffa:	4b08      	ldr	r3, [pc, #32]	; (9000a01c <UART_EndRxTransfer+0x44>)
90009ffc:	400b      	ands	r3, r1
90009ffe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000a000:	687b      	ldr	r3, [r7, #4]
9000a002:	2220      	movs	r2, #32
9000a004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000a008:	687b      	ldr	r3, [r7, #4]
9000a00a:	2200      	movs	r2, #0
9000a00c:	66da      	str	r2, [r3, #108]	; 0x6c
}
9000a00e:	bf00      	nop
9000a010:	370c      	adds	r7, #12
9000a012:	46bd      	mov	sp, r7
9000a014:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a018:	4770      	bx	lr
9000a01a:	bf00      	nop
9000a01c:	effffffe 	.word	0xeffffffe

9000a020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
9000a020:	b580      	push	{r7, lr}
9000a022:	b084      	sub	sp, #16
9000a024:	af00      	add	r7, sp, #0
9000a026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
9000a028:	687b      	ldr	r3, [r7, #4]
9000a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a02c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
9000a02e:	68fb      	ldr	r3, [r7, #12]
9000a030:	2200      	movs	r2, #0
9000a032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
9000a036:	68fb      	ldr	r3, [r7, #12]
9000a038:	2200      	movs	r2, #0
9000a03a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
9000a03e:	68f8      	ldr	r0, [r7, #12]
9000a040:	f7ff f8a6 	bl	90009190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
9000a044:	bf00      	nop
9000a046:	3710      	adds	r7, #16
9000a048:	46bd      	mov	sp, r7
9000a04a:	bd80      	pop	{r7, pc}

9000a04c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
9000a04c:	b580      	push	{r7, lr}
9000a04e:	b082      	sub	sp, #8
9000a050:	af00      	add	r7, sp, #0
9000a052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
9000a054:	687b      	ldr	r3, [r7, #4]
9000a056:	681b      	ldr	r3, [r3, #0]
9000a058:	681a      	ldr	r2, [r3, #0]
9000a05a:	687b      	ldr	r3, [r7, #4]
9000a05c:	681b      	ldr	r3, [r3, #0]
9000a05e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000a062:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
9000a064:	687b      	ldr	r3, [r7, #4]
9000a066:	2220      	movs	r2, #32
9000a068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
9000a06c:	687b      	ldr	r3, [r7, #4]
9000a06e:	2200      	movs	r2, #0
9000a070:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
9000a072:	6878      	ldr	r0, [r7, #4]
9000a074:	f7ff f882 	bl	9000917c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
9000a078:	bf00      	nop
9000a07a:	3708      	adds	r7, #8
9000a07c:	46bd      	mov	sp, r7
9000a07e:	bd80      	pop	{r7, pc}

9000a080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
9000a080:	b480      	push	{r7}
9000a082:	b083      	sub	sp, #12
9000a084:	af00      	add	r7, sp, #0
9000a086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
9000a088:	bf00      	nop
9000a08a:	370c      	adds	r7, #12
9000a08c:	46bd      	mov	sp, r7
9000a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a092:	4770      	bx	lr

9000a094 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
9000a094:	b480      	push	{r7}
9000a096:	b083      	sub	sp, #12
9000a098:	af00      	add	r7, sp, #0
9000a09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
9000a09c:	bf00      	nop
9000a09e:	370c      	adds	r7, #12
9000a0a0:	46bd      	mov	sp, r7
9000a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a0a6:	4770      	bx	lr

9000a0a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
9000a0a8:	b480      	push	{r7}
9000a0aa:	b083      	sub	sp, #12
9000a0ac:	af00      	add	r7, sp, #0
9000a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
9000a0b0:	bf00      	nop
9000a0b2:	370c      	adds	r7, #12
9000a0b4:	46bd      	mov	sp, r7
9000a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a0ba:	4770      	bx	lr

9000a0bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000a0bc:	b480      	push	{r7}
9000a0be:	b085      	sub	sp, #20
9000a0c0:	af00      	add	r7, sp, #0
9000a0c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000a0c4:	687b      	ldr	r3, [r7, #4]
9000a0c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
9000a0ca:	2b01      	cmp	r3, #1
9000a0cc:	d101      	bne.n	9000a0d2 <HAL_UARTEx_DisableFifoMode+0x16>
9000a0ce:	2302      	movs	r3, #2
9000a0d0:	e027      	b.n	9000a122 <HAL_UARTEx_DisableFifoMode+0x66>
9000a0d2:	687b      	ldr	r3, [r7, #4]
9000a0d4:	2201      	movs	r2, #1
9000a0d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
9000a0da:	687b      	ldr	r3, [r7, #4]
9000a0dc:	2224      	movs	r2, #36	; 0x24
9000a0de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000a0e2:	687b      	ldr	r3, [r7, #4]
9000a0e4:	681b      	ldr	r3, [r3, #0]
9000a0e6:	681b      	ldr	r3, [r3, #0]
9000a0e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000a0ea:	687b      	ldr	r3, [r7, #4]
9000a0ec:	681b      	ldr	r3, [r3, #0]
9000a0ee:	681a      	ldr	r2, [r3, #0]
9000a0f0:	687b      	ldr	r3, [r7, #4]
9000a0f2:	681b      	ldr	r3, [r3, #0]
9000a0f4:	f022 0201 	bic.w	r2, r2, #1
9000a0f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000a0fa:	68fb      	ldr	r3, [r7, #12]
9000a0fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
9000a100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000a102:	687b      	ldr	r3, [r7, #4]
9000a104:	2200      	movs	r2, #0
9000a106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000a108:	687b      	ldr	r3, [r7, #4]
9000a10a:	681b      	ldr	r3, [r3, #0]
9000a10c:	68fa      	ldr	r2, [r7, #12]
9000a10e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000a110:	687b      	ldr	r3, [r7, #4]
9000a112:	2220      	movs	r2, #32
9000a114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000a118:	687b      	ldr	r3, [r7, #4]
9000a11a:	2200      	movs	r2, #0
9000a11c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
9000a120:	2300      	movs	r3, #0
}
9000a122:	4618      	mov	r0, r3
9000a124:	3714      	adds	r7, #20
9000a126:	46bd      	mov	sp, r7
9000a128:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a12c:	4770      	bx	lr

9000a12e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000a12e:	b580      	push	{r7, lr}
9000a130:	b084      	sub	sp, #16
9000a132:	af00      	add	r7, sp, #0
9000a134:	6078      	str	r0, [r7, #4]
9000a136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000a138:	687b      	ldr	r3, [r7, #4]
9000a13a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
9000a13e:	2b01      	cmp	r3, #1
9000a140:	d101      	bne.n	9000a146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000a142:	2302      	movs	r3, #2
9000a144:	e02d      	b.n	9000a1a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000a146:	687b      	ldr	r3, [r7, #4]
9000a148:	2201      	movs	r2, #1
9000a14a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
9000a14e:	687b      	ldr	r3, [r7, #4]
9000a150:	2224      	movs	r2, #36	; 0x24
9000a152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000a156:	687b      	ldr	r3, [r7, #4]
9000a158:	681b      	ldr	r3, [r3, #0]
9000a15a:	681b      	ldr	r3, [r3, #0]
9000a15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000a15e:	687b      	ldr	r3, [r7, #4]
9000a160:	681b      	ldr	r3, [r3, #0]
9000a162:	681a      	ldr	r2, [r3, #0]
9000a164:	687b      	ldr	r3, [r7, #4]
9000a166:	681b      	ldr	r3, [r3, #0]
9000a168:	f022 0201 	bic.w	r2, r2, #1
9000a16c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000a16e:	687b      	ldr	r3, [r7, #4]
9000a170:	681b      	ldr	r3, [r3, #0]
9000a172:	689b      	ldr	r3, [r3, #8]
9000a174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
9000a178:	687b      	ldr	r3, [r7, #4]
9000a17a:	681b      	ldr	r3, [r3, #0]
9000a17c:	683a      	ldr	r2, [r7, #0]
9000a17e:	430a      	orrs	r2, r1
9000a180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000a182:	6878      	ldr	r0, [r7, #4]
9000a184:	f000 f850 	bl	9000a228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000a188:	687b      	ldr	r3, [r7, #4]
9000a18a:	681b      	ldr	r3, [r3, #0]
9000a18c:	68fa      	ldr	r2, [r7, #12]
9000a18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000a190:	687b      	ldr	r3, [r7, #4]
9000a192:	2220      	movs	r2, #32
9000a194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000a198:	687b      	ldr	r3, [r7, #4]
9000a19a:	2200      	movs	r2, #0
9000a19c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
9000a1a0:	2300      	movs	r3, #0
}
9000a1a2:	4618      	mov	r0, r3
9000a1a4:	3710      	adds	r7, #16
9000a1a6:	46bd      	mov	sp, r7
9000a1a8:	bd80      	pop	{r7, pc}

9000a1aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000a1aa:	b580      	push	{r7, lr}
9000a1ac:	b084      	sub	sp, #16
9000a1ae:	af00      	add	r7, sp, #0
9000a1b0:	6078      	str	r0, [r7, #4]
9000a1b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000a1b4:	687b      	ldr	r3, [r7, #4]
9000a1b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
9000a1ba:	2b01      	cmp	r3, #1
9000a1bc:	d101      	bne.n	9000a1c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000a1be:	2302      	movs	r3, #2
9000a1c0:	e02d      	b.n	9000a21e <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000a1c2:	687b      	ldr	r3, [r7, #4]
9000a1c4:	2201      	movs	r2, #1
9000a1c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
9000a1ca:	687b      	ldr	r3, [r7, #4]
9000a1cc:	2224      	movs	r2, #36	; 0x24
9000a1ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000a1d2:	687b      	ldr	r3, [r7, #4]
9000a1d4:	681b      	ldr	r3, [r3, #0]
9000a1d6:	681b      	ldr	r3, [r3, #0]
9000a1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000a1da:	687b      	ldr	r3, [r7, #4]
9000a1dc:	681b      	ldr	r3, [r3, #0]
9000a1de:	681a      	ldr	r2, [r3, #0]
9000a1e0:	687b      	ldr	r3, [r7, #4]
9000a1e2:	681b      	ldr	r3, [r3, #0]
9000a1e4:	f022 0201 	bic.w	r2, r2, #1
9000a1e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000a1ea:	687b      	ldr	r3, [r7, #4]
9000a1ec:	681b      	ldr	r3, [r3, #0]
9000a1ee:	689b      	ldr	r3, [r3, #8]
9000a1f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
9000a1f4:	687b      	ldr	r3, [r7, #4]
9000a1f6:	681b      	ldr	r3, [r3, #0]
9000a1f8:	683a      	ldr	r2, [r7, #0]
9000a1fa:	430a      	orrs	r2, r1
9000a1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000a1fe:	6878      	ldr	r0, [r7, #4]
9000a200:	f000 f812 	bl	9000a228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000a204:	687b      	ldr	r3, [r7, #4]
9000a206:	681b      	ldr	r3, [r3, #0]
9000a208:	68fa      	ldr	r2, [r7, #12]
9000a20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000a20c:	687b      	ldr	r3, [r7, #4]
9000a20e:	2220      	movs	r2, #32
9000a210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000a214:	687b      	ldr	r3, [r7, #4]
9000a216:	2200      	movs	r2, #0
9000a218:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
9000a21c:	2300      	movs	r3, #0
}
9000a21e:	4618      	mov	r0, r3
9000a220:	3710      	adds	r7, #16
9000a222:	46bd      	mov	sp, r7
9000a224:	bd80      	pop	{r7, pc}
	...

9000a228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000a228:	b480      	push	{r7}
9000a22a:	b089      	sub	sp, #36	; 0x24
9000a22c:	af00      	add	r7, sp, #0
9000a22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
9000a230:	4a2f      	ldr	r2, [pc, #188]	; (9000a2f0 <UARTEx_SetNbDataToProcess+0xc8>)
9000a232:	f107 0314 	add.w	r3, r7, #20
9000a236:	e892 0003 	ldmia.w	r2, {r0, r1}
9000a23a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
9000a23e:	4a2d      	ldr	r2, [pc, #180]	; (9000a2f4 <UARTEx_SetNbDataToProcess+0xcc>)
9000a240:	f107 030c 	add.w	r3, r7, #12
9000a244:	e892 0003 	ldmia.w	r2, {r0, r1}
9000a248:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000a24c:	687b      	ldr	r3, [r7, #4]
9000a24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000a250:	2b00      	cmp	r3, #0
9000a252:	d108      	bne.n	9000a266 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
9000a254:	687b      	ldr	r3, [r7, #4]
9000a256:	2201      	movs	r2, #1
9000a258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
9000a25c:	687b      	ldr	r3, [r7, #4]
9000a25e:	2201      	movs	r2, #1
9000a260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000a264:	e03d      	b.n	9000a2e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000a266:	2310      	movs	r3, #16
9000a268:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000a26a:	2310      	movs	r3, #16
9000a26c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000a26e:	687b      	ldr	r3, [r7, #4]
9000a270:	681b      	ldr	r3, [r3, #0]
9000a272:	689b      	ldr	r3, [r3, #8]
9000a274:	0e5b      	lsrs	r3, r3, #25
9000a276:	b2db      	uxtb	r3, r3
9000a278:	f003 0307 	and.w	r3, r3, #7
9000a27c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000a27e:	687b      	ldr	r3, [r7, #4]
9000a280:	681b      	ldr	r3, [r3, #0]
9000a282:	689b      	ldr	r3, [r3, #8]
9000a284:	0f5b      	lsrs	r3, r3, #29
9000a286:	b2db      	uxtb	r3, r3
9000a288:	f003 0307 	and.w	r3, r3, #7
9000a28c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
9000a28e:	7fbb      	ldrb	r3, [r7, #30]
9000a290:	7f3a      	ldrb	r2, [r7, #28]
9000a292:	f107 0120 	add.w	r1, r7, #32
9000a296:	440a      	add	r2, r1
9000a298:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
9000a29c:	fb02 f303 	mul.w	r3, r2, r3
9000a2a0:	7f3a      	ldrb	r2, [r7, #28]
9000a2a2:	f107 0120 	add.w	r1, r7, #32
9000a2a6:	440a      	add	r2, r1
9000a2a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
9000a2ac:	fb93 f3f2 	sdiv	r3, r3, r2
9000a2b0:	b29a      	uxth	r2, r3
9000a2b2:	687b      	ldr	r3, [r7, #4]
9000a2b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
9000a2b8:	7ffb      	ldrb	r3, [r7, #31]
9000a2ba:	7f7a      	ldrb	r2, [r7, #29]
9000a2bc:	f107 0120 	add.w	r1, r7, #32
9000a2c0:	440a      	add	r2, r1
9000a2c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
9000a2c6:	fb02 f303 	mul.w	r3, r2, r3
9000a2ca:	7f7a      	ldrb	r2, [r7, #29]
9000a2cc:	f107 0120 	add.w	r1, r7, #32
9000a2d0:	440a      	add	r2, r1
9000a2d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
9000a2d6:	fb93 f3f2 	sdiv	r3, r3, r2
9000a2da:	b29a      	uxth	r2, r3
9000a2dc:	687b      	ldr	r3, [r7, #4]
9000a2de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
9000a2e2:	bf00      	nop
9000a2e4:	3724      	adds	r7, #36	; 0x24
9000a2e6:	46bd      	mov	sp, r7
9000a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a2ec:	4770      	bx	lr
9000a2ee:	bf00      	nop
9000a2f0:	9000efe0 	.word	0x9000efe0
9000a2f4:	9000efe8 	.word	0x9000efe8

9000a2f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
9000a2f8:	b480      	push	{r7}
9000a2fa:	b083      	sub	sp, #12
9000a2fc:	af00      	add	r7, sp, #0
9000a2fe:	6078      	str	r0, [r7, #4]
9000a300:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000a302:	683b      	ldr	r3, [r7, #0]
9000a304:	681b      	ldr	r3, [r3, #0]
9000a306:	2b00      	cmp	r3, #0
9000a308:	d121      	bne.n	9000a34e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000a30a:	687b      	ldr	r3, [r7, #4]
9000a30c:	681a      	ldr	r2, [r3, #0]
9000a30e:	4b27      	ldr	r3, [pc, #156]	; (9000a3ac <FMC_SDRAM_Init+0xb4>)
9000a310:	4013      	ands	r3, r2
9000a312:	683a      	ldr	r2, [r7, #0]
9000a314:	6851      	ldr	r1, [r2, #4]
9000a316:	683a      	ldr	r2, [r7, #0]
9000a318:	6892      	ldr	r2, [r2, #8]
9000a31a:	4311      	orrs	r1, r2
9000a31c:	683a      	ldr	r2, [r7, #0]
9000a31e:	68d2      	ldr	r2, [r2, #12]
9000a320:	4311      	orrs	r1, r2
9000a322:	683a      	ldr	r2, [r7, #0]
9000a324:	6912      	ldr	r2, [r2, #16]
9000a326:	4311      	orrs	r1, r2
9000a328:	683a      	ldr	r2, [r7, #0]
9000a32a:	6952      	ldr	r2, [r2, #20]
9000a32c:	4311      	orrs	r1, r2
9000a32e:	683a      	ldr	r2, [r7, #0]
9000a330:	6992      	ldr	r2, [r2, #24]
9000a332:	4311      	orrs	r1, r2
9000a334:	683a      	ldr	r2, [r7, #0]
9000a336:	69d2      	ldr	r2, [r2, #28]
9000a338:	4311      	orrs	r1, r2
9000a33a:	683a      	ldr	r2, [r7, #0]
9000a33c:	6a12      	ldr	r2, [r2, #32]
9000a33e:	4311      	orrs	r1, r2
9000a340:	683a      	ldr	r2, [r7, #0]
9000a342:	6a52      	ldr	r2, [r2, #36]	; 0x24
9000a344:	430a      	orrs	r2, r1
9000a346:	431a      	orrs	r2, r3
9000a348:	687b      	ldr	r3, [r7, #4]
9000a34a:	601a      	str	r2, [r3, #0]
9000a34c:	e026      	b.n	9000a39c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000a34e:	687b      	ldr	r3, [r7, #4]
9000a350:	681b      	ldr	r3, [r3, #0]
9000a352:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
9000a356:	683b      	ldr	r3, [r7, #0]
9000a358:	69d9      	ldr	r1, [r3, #28]
9000a35a:	683b      	ldr	r3, [r7, #0]
9000a35c:	6a1b      	ldr	r3, [r3, #32]
9000a35e:	4319      	orrs	r1, r3
9000a360:	683b      	ldr	r3, [r7, #0]
9000a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a364:	430b      	orrs	r3, r1
9000a366:	431a      	orrs	r2, r3
9000a368:	687b      	ldr	r3, [r7, #4]
9000a36a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000a36c:	687b      	ldr	r3, [r7, #4]
9000a36e:	685a      	ldr	r2, [r3, #4]
9000a370:	4b0e      	ldr	r3, [pc, #56]	; (9000a3ac <FMC_SDRAM_Init+0xb4>)
9000a372:	4013      	ands	r3, r2
9000a374:	683a      	ldr	r2, [r7, #0]
9000a376:	6851      	ldr	r1, [r2, #4]
9000a378:	683a      	ldr	r2, [r7, #0]
9000a37a:	6892      	ldr	r2, [r2, #8]
9000a37c:	4311      	orrs	r1, r2
9000a37e:	683a      	ldr	r2, [r7, #0]
9000a380:	68d2      	ldr	r2, [r2, #12]
9000a382:	4311      	orrs	r1, r2
9000a384:	683a      	ldr	r2, [r7, #0]
9000a386:	6912      	ldr	r2, [r2, #16]
9000a388:	4311      	orrs	r1, r2
9000a38a:	683a      	ldr	r2, [r7, #0]
9000a38c:	6952      	ldr	r2, [r2, #20]
9000a38e:	4311      	orrs	r1, r2
9000a390:	683a      	ldr	r2, [r7, #0]
9000a392:	6992      	ldr	r2, [r2, #24]
9000a394:	430a      	orrs	r2, r1
9000a396:	431a      	orrs	r2, r3
9000a398:	687b      	ldr	r3, [r7, #4]
9000a39a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000a39c:	2300      	movs	r3, #0
}
9000a39e:	4618      	mov	r0, r3
9000a3a0:	370c      	adds	r7, #12
9000a3a2:	46bd      	mov	sp, r7
9000a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a3a8:	4770      	bx	lr
9000a3aa:	bf00      	nop
9000a3ac:	ffff8000 	.word	0xffff8000

9000a3b0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000a3b0:	b480      	push	{r7}
9000a3b2:	b085      	sub	sp, #20
9000a3b4:	af00      	add	r7, sp, #0
9000a3b6:	60f8      	str	r0, [r7, #12]
9000a3b8:	60b9      	str	r1, [r7, #8]
9000a3ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000a3bc:	687b      	ldr	r3, [r7, #4]
9000a3be:	2b00      	cmp	r3, #0
9000a3c0:	d128      	bne.n	9000a414 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000a3c2:	68fb      	ldr	r3, [r7, #12]
9000a3c4:	689b      	ldr	r3, [r3, #8]
9000a3c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
9000a3ca:	68bb      	ldr	r3, [r7, #8]
9000a3cc:	681b      	ldr	r3, [r3, #0]
9000a3ce:	1e59      	subs	r1, r3, #1
9000a3d0:	68bb      	ldr	r3, [r7, #8]
9000a3d2:	685b      	ldr	r3, [r3, #4]
9000a3d4:	3b01      	subs	r3, #1
9000a3d6:	011b      	lsls	r3, r3, #4
9000a3d8:	4319      	orrs	r1, r3
9000a3da:	68bb      	ldr	r3, [r7, #8]
9000a3dc:	689b      	ldr	r3, [r3, #8]
9000a3de:	3b01      	subs	r3, #1
9000a3e0:	021b      	lsls	r3, r3, #8
9000a3e2:	4319      	orrs	r1, r3
9000a3e4:	68bb      	ldr	r3, [r7, #8]
9000a3e6:	68db      	ldr	r3, [r3, #12]
9000a3e8:	3b01      	subs	r3, #1
9000a3ea:	031b      	lsls	r3, r3, #12
9000a3ec:	4319      	orrs	r1, r3
9000a3ee:	68bb      	ldr	r3, [r7, #8]
9000a3f0:	691b      	ldr	r3, [r3, #16]
9000a3f2:	3b01      	subs	r3, #1
9000a3f4:	041b      	lsls	r3, r3, #16
9000a3f6:	4319      	orrs	r1, r3
9000a3f8:	68bb      	ldr	r3, [r7, #8]
9000a3fa:	695b      	ldr	r3, [r3, #20]
9000a3fc:	3b01      	subs	r3, #1
9000a3fe:	051b      	lsls	r3, r3, #20
9000a400:	4319      	orrs	r1, r3
9000a402:	68bb      	ldr	r3, [r7, #8]
9000a404:	699b      	ldr	r3, [r3, #24]
9000a406:	3b01      	subs	r3, #1
9000a408:	061b      	lsls	r3, r3, #24
9000a40a:	430b      	orrs	r3, r1
9000a40c:	431a      	orrs	r2, r3
9000a40e:	68fb      	ldr	r3, [r7, #12]
9000a410:	609a      	str	r2, [r3, #8]
9000a412:	e02d      	b.n	9000a470 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000a414:	68fb      	ldr	r3, [r7, #12]
9000a416:	689a      	ldr	r2, [r3, #8]
9000a418:	4b19      	ldr	r3, [pc, #100]	; (9000a480 <FMC_SDRAM_Timing_Init+0xd0>)
9000a41a:	4013      	ands	r3, r2
9000a41c:	68ba      	ldr	r2, [r7, #8]
9000a41e:	68d2      	ldr	r2, [r2, #12]
9000a420:	3a01      	subs	r2, #1
9000a422:	0311      	lsls	r1, r2, #12
9000a424:	68ba      	ldr	r2, [r7, #8]
9000a426:	6952      	ldr	r2, [r2, #20]
9000a428:	3a01      	subs	r2, #1
9000a42a:	0512      	lsls	r2, r2, #20
9000a42c:	430a      	orrs	r2, r1
9000a42e:	431a      	orrs	r2, r3
9000a430:	68fb      	ldr	r3, [r7, #12]
9000a432:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000a434:	68fb      	ldr	r3, [r7, #12]
9000a436:	68db      	ldr	r3, [r3, #12]
9000a438:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
9000a43c:	68bb      	ldr	r3, [r7, #8]
9000a43e:	681b      	ldr	r3, [r3, #0]
9000a440:	1e59      	subs	r1, r3, #1
9000a442:	68bb      	ldr	r3, [r7, #8]
9000a444:	685b      	ldr	r3, [r3, #4]
9000a446:	3b01      	subs	r3, #1
9000a448:	011b      	lsls	r3, r3, #4
9000a44a:	4319      	orrs	r1, r3
9000a44c:	68bb      	ldr	r3, [r7, #8]
9000a44e:	689b      	ldr	r3, [r3, #8]
9000a450:	3b01      	subs	r3, #1
9000a452:	021b      	lsls	r3, r3, #8
9000a454:	4319      	orrs	r1, r3
9000a456:	68bb      	ldr	r3, [r7, #8]
9000a458:	691b      	ldr	r3, [r3, #16]
9000a45a:	3b01      	subs	r3, #1
9000a45c:	041b      	lsls	r3, r3, #16
9000a45e:	4319      	orrs	r1, r3
9000a460:	68bb      	ldr	r3, [r7, #8]
9000a462:	699b      	ldr	r3, [r3, #24]
9000a464:	3b01      	subs	r3, #1
9000a466:	061b      	lsls	r3, r3, #24
9000a468:	430b      	orrs	r3, r1
9000a46a:	431a      	orrs	r2, r3
9000a46c:	68fb      	ldr	r3, [r7, #12]
9000a46e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000a470:	2300      	movs	r3, #0
}
9000a472:	4618      	mov	r0, r3
9000a474:	3714      	adds	r7, #20
9000a476:	46bd      	mov	sp, r7
9000a478:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a47c:	4770      	bx	lr
9000a47e:	bf00      	nop
9000a480:	ff0f0fff 	.word	0xff0f0fff

9000a484 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000a484:	b480      	push	{r7}
9000a486:	b085      	sub	sp, #20
9000a488:	af00      	add	r7, sp, #0
9000a48a:	60f8      	str	r0, [r7, #12]
9000a48c:	60b9      	str	r1, [r7, #8]
9000a48e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
9000a490:	68fb      	ldr	r3, [r7, #12]
9000a492:	691a      	ldr	r2, [r3, #16]
9000a494:	68bb      	ldr	r3, [r7, #8]
9000a496:	6819      	ldr	r1, [r3, #0]
9000a498:	68bb      	ldr	r3, [r7, #8]
9000a49a:	685b      	ldr	r3, [r3, #4]
9000a49c:	4319      	orrs	r1, r3
9000a49e:	68bb      	ldr	r3, [r7, #8]
9000a4a0:	689b      	ldr	r3, [r3, #8]
9000a4a2:	3b01      	subs	r3, #1
9000a4a4:	015b      	lsls	r3, r3, #5
9000a4a6:	4319      	orrs	r1, r3
9000a4a8:	68bb      	ldr	r3, [r7, #8]
9000a4aa:	68db      	ldr	r3, [r3, #12]
9000a4ac:	025b      	lsls	r3, r3, #9
9000a4ae:	430b      	orrs	r3, r1
9000a4b0:	431a      	orrs	r2, r3
9000a4b2:	68fb      	ldr	r3, [r7, #12]
9000a4b4:	611a      	str	r2, [r3, #16]
                          (Command->CommandTarget)                                               |
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000a4b6:	2300      	movs	r3, #0
}
9000a4b8:	4618      	mov	r0, r3
9000a4ba:	3714      	adds	r7, #20
9000a4bc:	46bd      	mov	sp, r7
9000a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a4c2:	4770      	bx	lr

9000a4c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000a4c4:	b480      	push	{r7}
9000a4c6:	b083      	sub	sp, #12
9000a4c8:	af00      	add	r7, sp, #0
9000a4ca:	6078      	str	r0, [r7, #4]
9000a4cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000a4ce:	687b      	ldr	r3, [r7, #4]
9000a4d0:	695a      	ldr	r2, [r3, #20]
9000a4d2:	4b07      	ldr	r3, [pc, #28]	; (9000a4f0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000a4d4:	4013      	ands	r3, r2
9000a4d6:	683a      	ldr	r2, [r7, #0]
9000a4d8:	0052      	lsls	r2, r2, #1
9000a4da:	431a      	orrs	r2, r3
9000a4dc:	687b      	ldr	r3, [r7, #4]
9000a4de:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000a4e0:	2300      	movs	r3, #0
}
9000a4e2:	4618      	mov	r0, r3
9000a4e4:	370c      	adds	r7, #12
9000a4e6:	46bd      	mov	sp, r7
9000a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a4ec:	4770      	bx	lr
9000a4ee:	bf00      	nop
9000a4f0:	ffffc001 	.word	0xffffc001

9000a4f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
9000a4f4:	b084      	sub	sp, #16
9000a4f6:	b480      	push	{r7}
9000a4f8:	b085      	sub	sp, #20
9000a4fa:	af00      	add	r7, sp, #0
9000a4fc:	6078      	str	r0, [r7, #4]
9000a4fe:	f107 001c 	add.w	r0, r7, #28
9000a502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
9000a506:	2300      	movs	r3, #0
9000a508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
9000a50a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
9000a50c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
9000a50e:	431a      	orrs	r2, r3
             Init.BusWide             |\
9000a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
9000a512:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
9000a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
9000a516:	431a      	orrs	r2, r3
             Init.ClockDiv
9000a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
9000a51a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
9000a51c:	68fa      	ldr	r2, [r7, #12]
9000a51e:	4313      	orrs	r3, r2
9000a520:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
9000a522:	687b      	ldr	r3, [r7, #4]
9000a524:	685a      	ldr	r2, [r3, #4]
9000a526:	4b07      	ldr	r3, [pc, #28]	; (9000a544 <SDMMC_Init+0x50>)
9000a528:	4013      	ands	r3, r2
9000a52a:	68fa      	ldr	r2, [r7, #12]
9000a52c:	431a      	orrs	r2, r3
9000a52e:	687b      	ldr	r3, [r7, #4]
9000a530:	605a      	str	r2, [r3, #4]

  return HAL_OK;
9000a532:	2300      	movs	r3, #0
}
9000a534:	4618      	mov	r0, r3
9000a536:	3714      	adds	r7, #20
9000a538:	46bd      	mov	sp, r7
9000a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a53e:	b004      	add	sp, #16
9000a540:	4770      	bx	lr
9000a542:	bf00      	nop
9000a544:	ffc02c00 	.word	0xffc02c00

9000a548 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
9000a548:	b480      	push	{r7}
9000a54a:	b083      	sub	sp, #12
9000a54c:	af00      	add	r7, sp, #0
9000a54e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
9000a550:	687b      	ldr	r3, [r7, #4]
9000a552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
9000a556:	4618      	mov	r0, r3
9000a558:	370c      	adds	r7, #12
9000a55a:	46bd      	mov	sp, r7
9000a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a560:	4770      	bx	lr

9000a562 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
9000a562:	b480      	push	{r7}
9000a564:	b083      	sub	sp, #12
9000a566:	af00      	add	r7, sp, #0
9000a568:	6078      	str	r0, [r7, #4]
9000a56a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
9000a56c:	683b      	ldr	r3, [r7, #0]
9000a56e:	681a      	ldr	r2, [r3, #0]
9000a570:	687b      	ldr	r3, [r7, #4]
9000a572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
9000a576:	2300      	movs	r3, #0
}
9000a578:	4618      	mov	r0, r3
9000a57a:	370c      	adds	r7, #12
9000a57c:	46bd      	mov	sp, r7
9000a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a582:	4770      	bx	lr

9000a584 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
9000a584:	b480      	push	{r7}
9000a586:	b083      	sub	sp, #12
9000a588:	af00      	add	r7, sp, #0
9000a58a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
9000a58c:	687b      	ldr	r3, [r7, #4]
9000a58e:	681b      	ldr	r3, [r3, #0]
9000a590:	f043 0203 	orr.w	r2, r3, #3
9000a594:	687b      	ldr	r3, [r7, #4]
9000a596:	601a      	str	r2, [r3, #0]

  return HAL_OK;
9000a598:	2300      	movs	r3, #0
}
9000a59a:	4618      	mov	r0, r3
9000a59c:	370c      	adds	r7, #12
9000a59e:	46bd      	mov	sp, r7
9000a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a5a4:	4770      	bx	lr

9000a5a6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
9000a5a6:	b480      	push	{r7}
9000a5a8:	b083      	sub	sp, #12
9000a5aa:	af00      	add	r7, sp, #0
9000a5ac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
9000a5ae:	687b      	ldr	r3, [r7, #4]
9000a5b0:	681b      	ldr	r3, [r3, #0]
9000a5b2:	f003 0303 	and.w	r3, r3, #3
}
9000a5b6:	4618      	mov	r0, r3
9000a5b8:	370c      	adds	r7, #12
9000a5ba:	46bd      	mov	sp, r7
9000a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a5c0:	4770      	bx	lr
	...

9000a5c4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
9000a5c4:	b480      	push	{r7}
9000a5c6:	b085      	sub	sp, #20
9000a5c8:	af00      	add	r7, sp, #0
9000a5ca:	6078      	str	r0, [r7, #4]
9000a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
9000a5ce:	2300      	movs	r3, #0
9000a5d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
9000a5d2:	683b      	ldr	r3, [r7, #0]
9000a5d4:	681a      	ldr	r2, [r3, #0]
9000a5d6:	687b      	ldr	r3, [r7, #4]
9000a5d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
9000a5da:	683b      	ldr	r3, [r7, #0]
9000a5dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
9000a5de:	683b      	ldr	r3, [r7, #0]
9000a5e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
9000a5e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
9000a5e4:	683b      	ldr	r3, [r7, #0]
9000a5e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
9000a5e8:	431a      	orrs	r2, r3
                       Command->CPSM);
9000a5ea:	683b      	ldr	r3, [r7, #0]
9000a5ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
9000a5ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
9000a5f0:	68fa      	ldr	r2, [r7, #12]
9000a5f2:	4313      	orrs	r3, r2
9000a5f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
9000a5f6:	687b      	ldr	r3, [r7, #4]
9000a5f8:	68da      	ldr	r2, [r3, #12]
9000a5fa:	4b06      	ldr	r3, [pc, #24]	; (9000a614 <SDMMC_SendCommand+0x50>)
9000a5fc:	4013      	ands	r3, r2
9000a5fe:	68fa      	ldr	r2, [r7, #12]
9000a600:	431a      	orrs	r2, r3
9000a602:	687b      	ldr	r3, [r7, #4]
9000a604:	60da      	str	r2, [r3, #12]

  return HAL_OK;
9000a606:	2300      	movs	r3, #0
}
9000a608:	4618      	mov	r0, r3
9000a60a:	3714      	adds	r7, #20
9000a60c:	46bd      	mov	sp, r7
9000a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a612:	4770      	bx	lr
9000a614:	fffee0c0 	.word	0xfffee0c0

9000a618 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
9000a618:	b480      	push	{r7}
9000a61a:	b083      	sub	sp, #12
9000a61c:	af00      	add	r7, sp, #0
9000a61e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
9000a620:	687b      	ldr	r3, [r7, #4]
9000a622:	691b      	ldr	r3, [r3, #16]
9000a624:	b2db      	uxtb	r3, r3
}
9000a626:	4618      	mov	r0, r3
9000a628:	370c      	adds	r7, #12
9000a62a:	46bd      	mov	sp, r7
9000a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a630:	4770      	bx	lr

9000a632 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
9000a632:	b480      	push	{r7}
9000a634:	b085      	sub	sp, #20
9000a636:	af00      	add	r7, sp, #0
9000a638:	6078      	str	r0, [r7, #4]
9000a63a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
9000a63c:	687b      	ldr	r3, [r7, #4]
9000a63e:	3314      	adds	r3, #20
9000a640:	461a      	mov	r2, r3
9000a642:	683b      	ldr	r3, [r7, #0]
9000a644:	4413      	add	r3, r2
9000a646:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
9000a648:	68fb      	ldr	r3, [r7, #12]
9000a64a:	681b      	ldr	r3, [r3, #0]
}
9000a64c:	4618      	mov	r0, r3
9000a64e:	3714      	adds	r7, #20
9000a650:	46bd      	mov	sp, r7
9000a652:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a656:	4770      	bx	lr

9000a658 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
9000a658:	b480      	push	{r7}
9000a65a:	b085      	sub	sp, #20
9000a65c:	af00      	add	r7, sp, #0
9000a65e:	6078      	str	r0, [r7, #4]
9000a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
9000a662:	2300      	movs	r3, #0
9000a664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
9000a666:	683b      	ldr	r3, [r7, #0]
9000a668:	681a      	ldr	r2, [r3, #0]
9000a66a:	687b      	ldr	r3, [r7, #4]
9000a66c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
9000a66e:	683b      	ldr	r3, [r7, #0]
9000a670:	685a      	ldr	r2, [r3, #4]
9000a672:	687b      	ldr	r3, [r7, #4]
9000a674:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
9000a676:	683b      	ldr	r3, [r7, #0]
9000a678:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
9000a67a:	683b      	ldr	r3, [r7, #0]
9000a67c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
9000a67e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
9000a680:	683b      	ldr	r3, [r7, #0]
9000a682:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
9000a684:	431a      	orrs	r2, r3
                       Data->DPSM);
9000a686:	683b      	ldr	r3, [r7, #0]
9000a688:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
9000a68a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
9000a68c:	68fa      	ldr	r2, [r7, #12]
9000a68e:	4313      	orrs	r3, r2
9000a690:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
9000a692:	687b      	ldr	r3, [r7, #4]
9000a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a696:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
9000a69a:	68fb      	ldr	r3, [r7, #12]
9000a69c:	431a      	orrs	r2, r3
9000a69e:	687b      	ldr	r3, [r7, #4]
9000a6a0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
9000a6a2:	2300      	movs	r3, #0

}
9000a6a4:	4618      	mov	r0, r3
9000a6a6:	3714      	adds	r7, #20
9000a6a8:	46bd      	mov	sp, r7
9000a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a6ae:	4770      	bx	lr

9000a6b0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
9000a6b0:	b580      	push	{r7, lr}
9000a6b2:	b088      	sub	sp, #32
9000a6b4:	af00      	add	r7, sp, #0
9000a6b6:	6078      	str	r0, [r7, #4]
9000a6b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
9000a6ba:	683b      	ldr	r3, [r7, #0]
9000a6bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
9000a6be:	2310      	movs	r3, #16
9000a6c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a6c2:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a6c8:	2300      	movs	r3, #0
9000a6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a6cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a6d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a6d2:	f107 0308 	add.w	r3, r7, #8
9000a6d6:	4619      	mov	r1, r3
9000a6d8:	6878      	ldr	r0, [r7, #4]
9000a6da:	f7ff ff73 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
9000a6de:	f241 3288 	movw	r2, #5000	; 0x1388
9000a6e2:	2110      	movs	r1, #16
9000a6e4:	6878      	ldr	r0, [r7, #4]
9000a6e6:	f000 fa23 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000a6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a6ec:	69fb      	ldr	r3, [r7, #28]
}
9000a6ee:	4618      	mov	r0, r3
9000a6f0:	3720      	adds	r7, #32
9000a6f2:	46bd      	mov	sp, r7
9000a6f4:	bd80      	pop	{r7, pc}
	...

9000a6f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
9000a6f8:	b580      	push	{r7, lr}
9000a6fa:	b088      	sub	sp, #32
9000a6fc:	af00      	add	r7, sp, #0
9000a6fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
9000a700:	2300      	movs	r3, #0
9000a702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
9000a704:	230c      	movs	r3, #12
9000a706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a708:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a70c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a70e:	2300      	movs	r3, #0
9000a710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a716:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
9000a718:	687b      	ldr	r3, [r7, #4]
9000a71a:	68db      	ldr	r3, [r3, #12]
9000a71c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
9000a720:	687b      	ldr	r3, [r7, #4]
9000a722:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
9000a724:	687b      	ldr	r3, [r7, #4]
9000a726:	68db      	ldr	r3, [r3, #12]
9000a728:	f023 0240 	bic.w	r2, r3, #64	; 0x40
9000a72c:	687b      	ldr	r3, [r7, #4]
9000a72e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a730:	f107 0308 	add.w	r3, r7, #8
9000a734:	4619      	mov	r1, r3
9000a736:	6878      	ldr	r0, [r7, #4]
9000a738:	f7ff ff44 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
9000a73c:	4a0b      	ldr	r2, [pc, #44]	; (9000a76c <SDMMC_CmdStopTransfer+0x74>)
9000a73e:	210c      	movs	r1, #12
9000a740:	6878      	ldr	r0, [r7, #4]
9000a742:	f000 f9f5 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000a746:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
9000a748:	687b      	ldr	r3, [r7, #4]
9000a74a:	68db      	ldr	r3, [r3, #12]
9000a74c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
9000a750:	687b      	ldr	r3, [r7, #4]
9000a752:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
9000a754:	69fb      	ldr	r3, [r7, #28]
9000a756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000a75a:	d101      	bne.n	9000a760 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
9000a75c:	2300      	movs	r3, #0
9000a75e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
9000a760:	69fb      	ldr	r3, [r7, #28]
}
9000a762:	4618      	mov	r0, r3
9000a764:	3720      	adds	r7, #32
9000a766:	46bd      	mov	sp, r7
9000a768:	bd80      	pop	{r7, pc}
9000a76a:	bf00      	nop
9000a76c:	05f5e100 	.word	0x05f5e100

9000a770 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
9000a770:	b580      	push	{r7, lr}
9000a772:	b08a      	sub	sp, #40	; 0x28
9000a774:	af00      	add	r7, sp, #0
9000a776:	60f8      	str	r0, [r7, #12]
9000a778:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
9000a77c:	683b      	ldr	r3, [r7, #0]
9000a77e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
9000a780:	2307      	movs	r3, #7
9000a782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a784:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a788:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a78a:	2300      	movs	r3, #0
9000a78c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a792:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a794:	f107 0310 	add.w	r3, r7, #16
9000a798:	4619      	mov	r1, r3
9000a79a:	68f8      	ldr	r0, [r7, #12]
9000a79c:	f7ff ff12 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
9000a7a0:	f241 3288 	movw	r2, #5000	; 0x1388
9000a7a4:	2107      	movs	r1, #7
9000a7a6:	68f8      	ldr	r0, [r7, #12]
9000a7a8:	f000 f9c2 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000a7ac:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
9000a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000a7b0:	4618      	mov	r0, r3
9000a7b2:	3728      	adds	r7, #40	; 0x28
9000a7b4:	46bd      	mov	sp, r7
9000a7b6:	bd80      	pop	{r7, pc}

9000a7b8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
9000a7b8:	b580      	push	{r7, lr}
9000a7ba:	b088      	sub	sp, #32
9000a7bc:	af00      	add	r7, sp, #0
9000a7be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
9000a7c0:	2300      	movs	r3, #0
9000a7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
9000a7c4:	2300      	movs	r3, #0
9000a7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
9000a7c8:	2300      	movs	r3, #0
9000a7ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a7cc:	2300      	movs	r3, #0
9000a7ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a7d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a7d6:	f107 0308 	add.w	r3, r7, #8
9000a7da:	4619      	mov	r1, r3
9000a7dc:	6878      	ldr	r0, [r7, #4]
9000a7de:	f7ff fef1 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
9000a7e2:	6878      	ldr	r0, [r7, #4]
9000a7e4:	f000 f976 	bl	9000aad4 <SDMMC_GetCmdError>
9000a7e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a7ea:	69fb      	ldr	r3, [r7, #28]
}
9000a7ec:	4618      	mov	r0, r3
9000a7ee:	3720      	adds	r7, #32
9000a7f0:	46bd      	mov	sp, r7
9000a7f2:	bd80      	pop	{r7, pc}

9000a7f4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
9000a7f4:	b580      	push	{r7, lr}
9000a7f6:	b088      	sub	sp, #32
9000a7f8:	af00      	add	r7, sp, #0
9000a7fa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
9000a7fc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
9000a800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
9000a802:	2308      	movs	r3, #8
9000a804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a806:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a80c:	2300      	movs	r3, #0
9000a80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a816:	f107 0308 	add.w	r3, r7, #8
9000a81a:	4619      	mov	r1, r3
9000a81c:	6878      	ldr	r0, [r7, #4]
9000a81e:	f7ff fed1 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
9000a822:	6878      	ldr	r0, [r7, #4]
9000a824:	f000 fb78 	bl	9000af18 <SDMMC_GetCmdResp7>
9000a828:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a82a:	69fb      	ldr	r3, [r7, #28]
}
9000a82c:	4618      	mov	r0, r3
9000a82e:	3720      	adds	r7, #32
9000a830:	46bd      	mov	sp, r7
9000a832:	bd80      	pop	{r7, pc}

9000a834 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
9000a834:	b580      	push	{r7, lr}
9000a836:	b088      	sub	sp, #32
9000a838:	af00      	add	r7, sp, #0
9000a83a:	6078      	str	r0, [r7, #4]
9000a83c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
9000a83e:	683b      	ldr	r3, [r7, #0]
9000a840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
9000a842:	2337      	movs	r3, #55	; 0x37
9000a844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a846:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a84a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a84c:	2300      	movs	r3, #0
9000a84e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a854:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a856:	f107 0308 	add.w	r3, r7, #8
9000a85a:	4619      	mov	r1, r3
9000a85c:	6878      	ldr	r0, [r7, #4]
9000a85e:	f7ff feb1 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
9000a862:	f241 3288 	movw	r2, #5000	; 0x1388
9000a866:	2137      	movs	r1, #55	; 0x37
9000a868:	6878      	ldr	r0, [r7, #4]
9000a86a:	f000 f961 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000a86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a870:	69fb      	ldr	r3, [r7, #28]
}
9000a872:	4618      	mov	r0, r3
9000a874:	3720      	adds	r7, #32
9000a876:	46bd      	mov	sp, r7
9000a878:	bd80      	pop	{r7, pc}

9000a87a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
9000a87a:	b580      	push	{r7, lr}
9000a87c:	b088      	sub	sp, #32
9000a87e:	af00      	add	r7, sp, #0
9000a880:	6078      	str	r0, [r7, #4]
9000a882:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
9000a884:	683b      	ldr	r3, [r7, #0]
9000a886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
9000a888:	2329      	movs	r3, #41	; 0x29
9000a88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a88c:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a892:	2300      	movs	r3, #0
9000a894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a89c:	f107 0308 	add.w	r3, r7, #8
9000a8a0:	4619      	mov	r1, r3
9000a8a2:	6878      	ldr	r0, [r7, #4]
9000a8a4:	f7ff fe8e 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
9000a8a8:	6878      	ldr	r0, [r7, #4]
9000a8aa:	f000 fa7d 	bl	9000ada8 <SDMMC_GetCmdResp3>
9000a8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a8b0:	69fb      	ldr	r3, [r7, #28]
}
9000a8b2:	4618      	mov	r0, r3
9000a8b4:	3720      	adds	r7, #32
9000a8b6:	46bd      	mov	sp, r7
9000a8b8:	bd80      	pop	{r7, pc}

9000a8ba <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
9000a8ba:	b580      	push	{r7, lr}
9000a8bc:	b088      	sub	sp, #32
9000a8be:	af00      	add	r7, sp, #0
9000a8c0:	6078      	str	r0, [r7, #4]
9000a8c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
9000a8c4:	683b      	ldr	r3, [r7, #0]
9000a8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
9000a8c8:	2306      	movs	r3, #6
9000a8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a8cc:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a8d2:	2300      	movs	r3, #0
9000a8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a8d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a8da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a8dc:	f107 0308 	add.w	r3, r7, #8
9000a8e0:	4619      	mov	r1, r3
9000a8e2:	6878      	ldr	r0, [r7, #4]
9000a8e4:	f7ff fe6e 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
9000a8e8:	f241 3288 	movw	r2, #5000	; 0x1388
9000a8ec:	2106      	movs	r1, #6
9000a8ee:	6878      	ldr	r0, [r7, #4]
9000a8f0:	f000 f91e 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000a8f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a8f6:	69fb      	ldr	r3, [r7, #28]
}
9000a8f8:	4618      	mov	r0, r3
9000a8fa:	3720      	adds	r7, #32
9000a8fc:	46bd      	mov	sp, r7
9000a8fe:	bd80      	pop	{r7, pc}

9000a900 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
9000a900:	b580      	push	{r7, lr}
9000a902:	b088      	sub	sp, #32
9000a904:	af00      	add	r7, sp, #0
9000a906:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
9000a908:	2300      	movs	r3, #0
9000a90a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
9000a90c:	2333      	movs	r3, #51	; 0x33
9000a90e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a910:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a916:	2300      	movs	r3, #0
9000a918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a91a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a91e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a920:	f107 0308 	add.w	r3, r7, #8
9000a924:	4619      	mov	r1, r3
9000a926:	6878      	ldr	r0, [r7, #4]
9000a928:	f7ff fe4c 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
9000a92c:	f241 3288 	movw	r2, #5000	; 0x1388
9000a930:	2133      	movs	r1, #51	; 0x33
9000a932:	6878      	ldr	r0, [r7, #4]
9000a934:	f000 f8fc 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000a938:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a93a:	69fb      	ldr	r3, [r7, #28]
}
9000a93c:	4618      	mov	r0, r3
9000a93e:	3720      	adds	r7, #32
9000a940:	46bd      	mov	sp, r7
9000a942:	bd80      	pop	{r7, pc}

9000a944 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
9000a944:	b580      	push	{r7, lr}
9000a946:	b088      	sub	sp, #32
9000a948:	af00      	add	r7, sp, #0
9000a94a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
9000a94c:	2300      	movs	r3, #0
9000a94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
9000a950:	2302      	movs	r3, #2
9000a952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
9000a954:	f44f 7340 	mov.w	r3, #768	; 0x300
9000a958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a95a:	2300      	movs	r3, #0
9000a95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a964:	f107 0308 	add.w	r3, r7, #8
9000a968:	4619      	mov	r1, r3
9000a96a:	6878      	ldr	r0, [r7, #4]
9000a96c:	f7ff fe2a 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
9000a970:	6878      	ldr	r0, [r7, #4]
9000a972:	f000 f9cf 	bl	9000ad14 <SDMMC_GetCmdResp2>
9000a976:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a978:	69fb      	ldr	r3, [r7, #28]
}
9000a97a:	4618      	mov	r0, r3
9000a97c:	3720      	adds	r7, #32
9000a97e:	46bd      	mov	sp, r7
9000a980:	bd80      	pop	{r7, pc}

9000a982 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
9000a982:	b580      	push	{r7, lr}
9000a984:	b088      	sub	sp, #32
9000a986:	af00      	add	r7, sp, #0
9000a988:	6078      	str	r0, [r7, #4]
9000a98a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
9000a98c:	683b      	ldr	r3, [r7, #0]
9000a98e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
9000a990:	2309      	movs	r3, #9
9000a992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
9000a994:	f44f 7340 	mov.w	r3, #768	; 0x300
9000a998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a99a:	2300      	movs	r3, #0
9000a99c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a99e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a9a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a9a4:	f107 0308 	add.w	r3, r7, #8
9000a9a8:	4619      	mov	r1, r3
9000a9aa:	6878      	ldr	r0, [r7, #4]
9000a9ac:	f7ff fe0a 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
9000a9b0:	6878      	ldr	r0, [r7, #4]
9000a9b2:	f000 f9af 	bl	9000ad14 <SDMMC_GetCmdResp2>
9000a9b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a9b8:	69fb      	ldr	r3, [r7, #28]
}
9000a9ba:	4618      	mov	r0, r3
9000a9bc:	3720      	adds	r7, #32
9000a9be:	46bd      	mov	sp, r7
9000a9c0:	bd80      	pop	{r7, pc}

9000a9c2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
9000a9c2:	b580      	push	{r7, lr}
9000a9c4:	b088      	sub	sp, #32
9000a9c6:	af00      	add	r7, sp, #0
9000a9c8:	6078      	str	r0, [r7, #4]
9000a9ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
9000a9cc:	2300      	movs	r3, #0
9000a9ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
9000a9d0:	2303      	movs	r3, #3
9000a9d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000a9d4:	f44f 7380 	mov.w	r3, #256	; 0x100
9000a9d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000a9da:	2300      	movs	r3, #0
9000a9dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000a9de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000a9e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000a9e4:	f107 0308 	add.w	r3, r7, #8
9000a9e8:	4619      	mov	r1, r3
9000a9ea:	6878      	ldr	r0, [r7, #4]
9000a9ec:	f7ff fdea 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
9000a9f0:	683a      	ldr	r2, [r7, #0]
9000a9f2:	2103      	movs	r1, #3
9000a9f4:	6878      	ldr	r0, [r7, #4]
9000a9f6:	f000 fa17 	bl	9000ae28 <SDMMC_GetCmdResp6>
9000a9fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000a9fc:	69fb      	ldr	r3, [r7, #28]
}
9000a9fe:	4618      	mov	r0, r3
9000aa00:	3720      	adds	r7, #32
9000aa02:	46bd      	mov	sp, r7
9000aa04:	bd80      	pop	{r7, pc}

9000aa06 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
9000aa06:	b580      	push	{r7, lr}
9000aa08:	b088      	sub	sp, #32
9000aa0a:	af00      	add	r7, sp, #0
9000aa0c:	6078      	str	r0, [r7, #4]
9000aa0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
9000aa10:	683b      	ldr	r3, [r7, #0]
9000aa12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
9000aa14:	230d      	movs	r3, #13
9000aa16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000aa18:	f44f 7380 	mov.w	r3, #256	; 0x100
9000aa1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000aa1e:	2300      	movs	r3, #0
9000aa20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000aa22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000aa26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000aa28:	f107 0308 	add.w	r3, r7, #8
9000aa2c:	4619      	mov	r1, r3
9000aa2e:	6878      	ldr	r0, [r7, #4]
9000aa30:	f7ff fdc8 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
9000aa34:	f241 3288 	movw	r2, #5000	; 0x1388
9000aa38:	210d      	movs	r1, #13
9000aa3a:	6878      	ldr	r0, [r7, #4]
9000aa3c:	f000 f878 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000aa40:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000aa42:	69fb      	ldr	r3, [r7, #28]
}
9000aa44:	4618      	mov	r0, r3
9000aa46:	3720      	adds	r7, #32
9000aa48:	46bd      	mov	sp, r7
9000aa4a:	bd80      	pop	{r7, pc}

9000aa4c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
9000aa4c:	b580      	push	{r7, lr}
9000aa4e:	b088      	sub	sp, #32
9000aa50:	af00      	add	r7, sp, #0
9000aa52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
9000aa54:	2300      	movs	r3, #0
9000aa56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
9000aa58:	230d      	movs	r3, #13
9000aa5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000aa5c:	f44f 7380 	mov.w	r3, #256	; 0x100
9000aa60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000aa62:	2300      	movs	r3, #0
9000aa64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000aa66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000aa6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000aa6c:	f107 0308 	add.w	r3, r7, #8
9000aa70:	4619      	mov	r1, r3
9000aa72:	6878      	ldr	r0, [r7, #4]
9000aa74:	f7ff fda6 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
9000aa78:	f241 3288 	movw	r2, #5000	; 0x1388
9000aa7c:	210d      	movs	r1, #13
9000aa7e:	6878      	ldr	r0, [r7, #4]
9000aa80:	f000 f856 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000aa84:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000aa86:	69fb      	ldr	r3, [r7, #28]
}
9000aa88:	4618      	mov	r0, r3
9000aa8a:	3720      	adds	r7, #32
9000aa8c:	46bd      	mov	sp, r7
9000aa8e:	bd80      	pop	{r7, pc}

9000aa90 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
9000aa90:	b580      	push	{r7, lr}
9000aa92:	b088      	sub	sp, #32
9000aa94:	af00      	add	r7, sp, #0
9000aa96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
9000aa98:	2300      	movs	r3, #0
9000aa9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
9000aa9c:	230b      	movs	r3, #11
9000aa9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
9000aaa0:	f44f 7380 	mov.w	r3, #256	; 0x100
9000aaa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
9000aaa6:	2300      	movs	r3, #0
9000aaa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
9000aaaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000aaae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
9000aab0:	f107 0308 	add.w	r3, r7, #8
9000aab4:	4619      	mov	r1, r3
9000aab6:	6878      	ldr	r0, [r7, #4]
9000aab8:	f7ff fd84 	bl	9000a5c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
9000aabc:	f241 3288 	movw	r2, #5000	; 0x1388
9000aac0:	210b      	movs	r1, #11
9000aac2:	6878      	ldr	r0, [r7, #4]
9000aac4:	f000 f834 	bl	9000ab30 <SDMMC_GetCmdResp1>
9000aac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
9000aaca:	69fb      	ldr	r3, [r7, #28]
}
9000aacc:	4618      	mov	r0, r3
9000aace:	3720      	adds	r7, #32
9000aad0:	46bd      	mov	sp, r7
9000aad2:	bd80      	pop	{r7, pc}

9000aad4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
9000aad4:	b480      	push	{r7}
9000aad6:	b085      	sub	sp, #20
9000aad8:	af00      	add	r7, sp, #0
9000aada:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
9000aadc:	4b11      	ldr	r3, [pc, #68]	; (9000ab24 <SDMMC_GetCmdError+0x50>)
9000aade:	681b      	ldr	r3, [r3, #0]
9000aae0:	4a11      	ldr	r2, [pc, #68]	; (9000ab28 <SDMMC_GetCmdError+0x54>)
9000aae2:	fba2 2303 	umull	r2, r3, r2, r3
9000aae6:	0a5b      	lsrs	r3, r3, #9
9000aae8:	f241 3288 	movw	r2, #5000	; 0x1388
9000aaec:	fb02 f303 	mul.w	r3, r2, r3
9000aaf0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
9000aaf2:	68fb      	ldr	r3, [r7, #12]
9000aaf4:	1e5a      	subs	r2, r3, #1
9000aaf6:	60fa      	str	r2, [r7, #12]
9000aaf8:	2b00      	cmp	r3, #0
9000aafa:	d102      	bne.n	9000ab02 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
9000aafc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
9000ab00:	e009      	b.n	9000ab16 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
9000ab02:	687b      	ldr	r3, [r7, #4]
9000ab04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ab06:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000ab0a:	2b00      	cmp	r3, #0
9000ab0c:	d0f1      	beq.n	9000aaf2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
9000ab0e:	687b      	ldr	r3, [r7, #4]
9000ab10:	4a06      	ldr	r2, [pc, #24]	; (9000ab2c <SDMMC_GetCmdError+0x58>)
9000ab12:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
9000ab14:	2300      	movs	r3, #0
}
9000ab16:	4618      	mov	r0, r3
9000ab18:	3714      	adds	r7, #20
9000ab1a:	46bd      	mov	sp, r7
9000ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ab20:	4770      	bx	lr
9000ab22:	bf00      	nop
9000ab24:	2400a000 	.word	0x2400a000
9000ab28:	10624dd3 	.word	0x10624dd3
9000ab2c:	002000c5 	.word	0x002000c5

9000ab30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
9000ab30:	b580      	push	{r7, lr}
9000ab32:	b088      	sub	sp, #32
9000ab34:	af00      	add	r7, sp, #0
9000ab36:	60f8      	str	r0, [r7, #12]
9000ab38:	460b      	mov	r3, r1
9000ab3a:	607a      	str	r2, [r7, #4]
9000ab3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
9000ab3e:	4b70      	ldr	r3, [pc, #448]	; (9000ad00 <SDMMC_GetCmdResp1+0x1d0>)
9000ab40:	681b      	ldr	r3, [r3, #0]
9000ab42:	4a70      	ldr	r2, [pc, #448]	; (9000ad04 <SDMMC_GetCmdResp1+0x1d4>)
9000ab44:	fba2 2303 	umull	r2, r3, r2, r3
9000ab48:	0a5a      	lsrs	r2, r3, #9
9000ab4a:	687b      	ldr	r3, [r7, #4]
9000ab4c:	fb02 f303 	mul.w	r3, r2, r3
9000ab50:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
9000ab52:	69fb      	ldr	r3, [r7, #28]
9000ab54:	1e5a      	subs	r2, r3, #1
9000ab56:	61fa      	str	r2, [r7, #28]
9000ab58:	2b00      	cmp	r3, #0
9000ab5a:	d102      	bne.n	9000ab62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
9000ab5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
9000ab60:	e0c9      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
9000ab62:	68fb      	ldr	r3, [r7, #12]
9000ab64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ab66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
9000ab68:	69ba      	ldr	r2, [r7, #24]
9000ab6a:	4b67      	ldr	r3, [pc, #412]	; (9000ad08 <SDMMC_GetCmdResp1+0x1d8>)
9000ab6c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
9000ab6e:	2b00      	cmp	r3, #0
9000ab70:	d0ef      	beq.n	9000ab52 <SDMMC_GetCmdResp1+0x22>
9000ab72:	69bb      	ldr	r3, [r7, #24]
9000ab74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
9000ab78:	2b00      	cmp	r3, #0
9000ab7a:	d1ea      	bne.n	9000ab52 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
9000ab7c:	68fb      	ldr	r3, [r7, #12]
9000ab7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ab80:	f003 0304 	and.w	r3, r3, #4
9000ab84:	2b00      	cmp	r3, #0
9000ab86:	d004      	beq.n	9000ab92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
9000ab88:	68fb      	ldr	r3, [r7, #12]
9000ab8a:	2204      	movs	r2, #4
9000ab8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
9000ab8e:	2304      	movs	r3, #4
9000ab90:	e0b1      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
9000ab92:	68fb      	ldr	r3, [r7, #12]
9000ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ab96:	f003 0301 	and.w	r3, r3, #1
9000ab9a:	2b00      	cmp	r3, #0
9000ab9c:	d004      	beq.n	9000aba8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
9000ab9e:	68fb      	ldr	r3, [r7, #12]
9000aba0:	2201      	movs	r2, #1
9000aba2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
9000aba4:	2301      	movs	r3, #1
9000aba6:	e0a6      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
9000aba8:	68fb      	ldr	r3, [r7, #12]
9000abaa:	4a58      	ldr	r2, [pc, #352]	; (9000ad0c <SDMMC_GetCmdResp1+0x1dc>)
9000abac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
9000abae:	68f8      	ldr	r0, [r7, #12]
9000abb0:	f7ff fd32 	bl	9000a618 <SDMMC_GetCommandResponse>
9000abb4:	4603      	mov	r3, r0
9000abb6:	461a      	mov	r2, r3
9000abb8:	7afb      	ldrb	r3, [r7, #11]
9000abba:	4293      	cmp	r3, r2
9000abbc:	d001      	beq.n	9000abc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
9000abbe:	2301      	movs	r3, #1
9000abc0:	e099      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
9000abc2:	2100      	movs	r1, #0
9000abc4:	68f8      	ldr	r0, [r7, #12]
9000abc6:	f7ff fd34 	bl	9000a632 <SDMMC_GetResponse>
9000abca:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
9000abcc:	697a      	ldr	r2, [r7, #20]
9000abce:	4b50      	ldr	r3, [pc, #320]	; (9000ad10 <SDMMC_GetCmdResp1+0x1e0>)
9000abd0:	4013      	ands	r3, r2
9000abd2:	2b00      	cmp	r3, #0
9000abd4:	d101      	bne.n	9000abda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
9000abd6:	2300      	movs	r3, #0
9000abd8:	e08d      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
9000abda:	697b      	ldr	r3, [r7, #20]
9000abdc:	2b00      	cmp	r3, #0
9000abde:	da02      	bge.n	9000abe6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
9000abe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000abe4:	e087      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
9000abe6:	697b      	ldr	r3, [r7, #20]
9000abe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
9000abec:	2b00      	cmp	r3, #0
9000abee:	d001      	beq.n	9000abf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
9000abf0:	2340      	movs	r3, #64	; 0x40
9000abf2:	e080      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
9000abf4:	697b      	ldr	r3, [r7, #20]
9000abf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000abfa:	2b00      	cmp	r3, #0
9000abfc:	d001      	beq.n	9000ac02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
9000abfe:	2380      	movs	r3, #128	; 0x80
9000ac00:	e079      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
9000ac02:	697b      	ldr	r3, [r7, #20]
9000ac04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000ac08:	2b00      	cmp	r3, #0
9000ac0a:	d002      	beq.n	9000ac12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
9000ac0c:	f44f 7380 	mov.w	r3, #256	; 0x100
9000ac10:	e071      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
9000ac12:	697b      	ldr	r3, [r7, #20]
9000ac14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000ac18:	2b00      	cmp	r3, #0
9000ac1a:	d002      	beq.n	9000ac22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
9000ac1c:	f44f 7300 	mov.w	r3, #512	; 0x200
9000ac20:	e069      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
9000ac22:	697b      	ldr	r3, [r7, #20]
9000ac24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
9000ac28:	2b00      	cmp	r3, #0
9000ac2a:	d002      	beq.n	9000ac32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
9000ac2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000ac30:	e061      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
9000ac32:	697b      	ldr	r3, [r7, #20]
9000ac34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000ac38:	2b00      	cmp	r3, #0
9000ac3a:	d002      	beq.n	9000ac42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
9000ac3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
9000ac40:	e059      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
9000ac42:	697b      	ldr	r3, [r7, #20]
9000ac44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000ac48:	2b00      	cmp	r3, #0
9000ac4a:	d002      	beq.n	9000ac52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
9000ac4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000ac50:	e051      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
9000ac52:	697b      	ldr	r3, [r7, #20]
9000ac54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000ac58:	2b00      	cmp	r3, #0
9000ac5a:	d002      	beq.n	9000ac62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
9000ac5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
9000ac60:	e049      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
9000ac62:	697b      	ldr	r3, [r7, #20]
9000ac64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
9000ac68:	2b00      	cmp	r3, #0
9000ac6a:	d002      	beq.n	9000ac72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
9000ac6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
9000ac70:	e041      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
9000ac72:	697b      	ldr	r3, [r7, #20]
9000ac74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
9000ac78:	2b00      	cmp	r3, #0
9000ac7a:	d002      	beq.n	9000ac82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
9000ac7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000ac80:	e039      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
9000ac82:	697b      	ldr	r3, [r7, #20]
9000ac84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
9000ac88:	2b00      	cmp	r3, #0
9000ac8a:	d002      	beq.n	9000ac92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
9000ac8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
9000ac90:	e031      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
9000ac92:	697b      	ldr	r3, [r7, #20]
9000ac94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000ac98:	2b00      	cmp	r3, #0
9000ac9a:	d002      	beq.n	9000aca2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
9000ac9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
9000aca0:	e029      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
9000aca2:	697b      	ldr	r3, [r7, #20]
9000aca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000aca8:	2b00      	cmp	r3, #0
9000acaa:	d002      	beq.n	9000acb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
9000acac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
9000acb0:	e021      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
9000acb2:	697b      	ldr	r3, [r7, #20]
9000acb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000acb8:	2b00      	cmp	r3, #0
9000acba:	d002      	beq.n	9000acc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
9000acbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
9000acc0:	e019      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
9000acc2:	697b      	ldr	r3, [r7, #20]
9000acc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000acc8:	2b00      	cmp	r3, #0
9000acca:	d002      	beq.n	9000acd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
9000accc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
9000acd0:	e011      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
9000acd2:	697b      	ldr	r3, [r7, #20]
9000acd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
9000acd8:	2b00      	cmp	r3, #0
9000acda:	d002      	beq.n	9000ace2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
9000acdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
9000ace0:	e009      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
9000ace2:	697b      	ldr	r3, [r7, #20]
9000ace4:	f003 0308 	and.w	r3, r3, #8
9000ace8:	2b00      	cmp	r3, #0
9000acea:	d002      	beq.n	9000acf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
9000acec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
9000acf0:	e001      	b.n	9000acf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
9000acf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
9000acf6:	4618      	mov	r0, r3
9000acf8:	3720      	adds	r7, #32
9000acfa:	46bd      	mov	sp, r7
9000acfc:	bd80      	pop	{r7, pc}
9000acfe:	bf00      	nop
9000ad00:	2400a000 	.word	0x2400a000
9000ad04:	10624dd3 	.word	0x10624dd3
9000ad08:	00200045 	.word	0x00200045
9000ad0c:	002000c5 	.word	0x002000c5
9000ad10:	fdffe008 	.word	0xfdffe008

9000ad14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
9000ad14:	b480      	push	{r7}
9000ad16:	b085      	sub	sp, #20
9000ad18:	af00      	add	r7, sp, #0
9000ad1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
9000ad1c:	4b1f      	ldr	r3, [pc, #124]	; (9000ad9c <SDMMC_GetCmdResp2+0x88>)
9000ad1e:	681b      	ldr	r3, [r3, #0]
9000ad20:	4a1f      	ldr	r2, [pc, #124]	; (9000ada0 <SDMMC_GetCmdResp2+0x8c>)
9000ad22:	fba2 2303 	umull	r2, r3, r2, r3
9000ad26:	0a5b      	lsrs	r3, r3, #9
9000ad28:	f241 3288 	movw	r2, #5000	; 0x1388
9000ad2c:	fb02 f303 	mul.w	r3, r2, r3
9000ad30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
9000ad32:	68fb      	ldr	r3, [r7, #12]
9000ad34:	1e5a      	subs	r2, r3, #1
9000ad36:	60fa      	str	r2, [r7, #12]
9000ad38:	2b00      	cmp	r3, #0
9000ad3a:	d102      	bne.n	9000ad42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
9000ad3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
9000ad40:	e026      	b.n	9000ad90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
9000ad42:	687b      	ldr	r3, [r7, #4]
9000ad44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ad46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000ad48:	68bb      	ldr	r3, [r7, #8]
9000ad4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
9000ad4e:	2b00      	cmp	r3, #0
9000ad50:	d0ef      	beq.n	9000ad32 <SDMMC_GetCmdResp2+0x1e>
9000ad52:	68bb      	ldr	r3, [r7, #8]
9000ad54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000ad58:	2b00      	cmp	r3, #0
9000ad5a:	d1ea      	bne.n	9000ad32 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
9000ad5c:	687b      	ldr	r3, [r7, #4]
9000ad5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ad60:	f003 0304 	and.w	r3, r3, #4
9000ad64:	2b00      	cmp	r3, #0
9000ad66:	d004      	beq.n	9000ad72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
9000ad68:	687b      	ldr	r3, [r7, #4]
9000ad6a:	2204      	movs	r2, #4
9000ad6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
9000ad6e:	2304      	movs	r3, #4
9000ad70:	e00e      	b.n	9000ad90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
9000ad72:	687b      	ldr	r3, [r7, #4]
9000ad74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ad76:	f003 0301 	and.w	r3, r3, #1
9000ad7a:	2b00      	cmp	r3, #0
9000ad7c:	d004      	beq.n	9000ad88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
9000ad7e:	687b      	ldr	r3, [r7, #4]
9000ad80:	2201      	movs	r2, #1
9000ad82:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
9000ad84:	2301      	movs	r3, #1
9000ad86:	e003      	b.n	9000ad90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
9000ad88:	687b      	ldr	r3, [r7, #4]
9000ad8a:	4a06      	ldr	r2, [pc, #24]	; (9000ada4 <SDMMC_GetCmdResp2+0x90>)
9000ad8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
9000ad8e:	2300      	movs	r3, #0
}
9000ad90:	4618      	mov	r0, r3
9000ad92:	3714      	adds	r7, #20
9000ad94:	46bd      	mov	sp, r7
9000ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad9a:	4770      	bx	lr
9000ad9c:	2400a000 	.word	0x2400a000
9000ada0:	10624dd3 	.word	0x10624dd3
9000ada4:	002000c5 	.word	0x002000c5

9000ada8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
9000ada8:	b480      	push	{r7}
9000adaa:	b085      	sub	sp, #20
9000adac:	af00      	add	r7, sp, #0
9000adae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
9000adb0:	4b1a      	ldr	r3, [pc, #104]	; (9000ae1c <SDMMC_GetCmdResp3+0x74>)
9000adb2:	681b      	ldr	r3, [r3, #0]
9000adb4:	4a1a      	ldr	r2, [pc, #104]	; (9000ae20 <SDMMC_GetCmdResp3+0x78>)
9000adb6:	fba2 2303 	umull	r2, r3, r2, r3
9000adba:	0a5b      	lsrs	r3, r3, #9
9000adbc:	f241 3288 	movw	r2, #5000	; 0x1388
9000adc0:	fb02 f303 	mul.w	r3, r2, r3
9000adc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
9000adc6:	68fb      	ldr	r3, [r7, #12]
9000adc8:	1e5a      	subs	r2, r3, #1
9000adca:	60fa      	str	r2, [r7, #12]
9000adcc:	2b00      	cmp	r3, #0
9000adce:	d102      	bne.n	9000add6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
9000add0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
9000add4:	e01b      	b.n	9000ae0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
9000add6:	687b      	ldr	r3, [r7, #4]
9000add8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000adda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000addc:	68bb      	ldr	r3, [r7, #8]
9000adde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
9000ade2:	2b00      	cmp	r3, #0
9000ade4:	d0ef      	beq.n	9000adc6 <SDMMC_GetCmdResp3+0x1e>
9000ade6:	68bb      	ldr	r3, [r7, #8]
9000ade8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000adec:	2b00      	cmp	r3, #0
9000adee:	d1ea      	bne.n	9000adc6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
9000adf0:	687b      	ldr	r3, [r7, #4]
9000adf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000adf4:	f003 0304 	and.w	r3, r3, #4
9000adf8:	2b00      	cmp	r3, #0
9000adfa:	d004      	beq.n	9000ae06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
9000adfc:	687b      	ldr	r3, [r7, #4]
9000adfe:	2204      	movs	r2, #4
9000ae00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
9000ae02:	2304      	movs	r3, #4
9000ae04:	e003      	b.n	9000ae0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
9000ae06:	687b      	ldr	r3, [r7, #4]
9000ae08:	4a06      	ldr	r2, [pc, #24]	; (9000ae24 <SDMMC_GetCmdResp3+0x7c>)
9000ae0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
9000ae0c:	2300      	movs	r3, #0
}
9000ae0e:	4618      	mov	r0, r3
9000ae10:	3714      	adds	r7, #20
9000ae12:	46bd      	mov	sp, r7
9000ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae18:	4770      	bx	lr
9000ae1a:	bf00      	nop
9000ae1c:	2400a000 	.word	0x2400a000
9000ae20:	10624dd3 	.word	0x10624dd3
9000ae24:	002000c5 	.word	0x002000c5

9000ae28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
9000ae28:	b580      	push	{r7, lr}
9000ae2a:	b088      	sub	sp, #32
9000ae2c:	af00      	add	r7, sp, #0
9000ae2e:	60f8      	str	r0, [r7, #12]
9000ae30:	460b      	mov	r3, r1
9000ae32:	607a      	str	r2, [r7, #4]
9000ae34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
9000ae36:	4b35      	ldr	r3, [pc, #212]	; (9000af0c <SDMMC_GetCmdResp6+0xe4>)
9000ae38:	681b      	ldr	r3, [r3, #0]
9000ae3a:	4a35      	ldr	r2, [pc, #212]	; (9000af10 <SDMMC_GetCmdResp6+0xe8>)
9000ae3c:	fba2 2303 	umull	r2, r3, r2, r3
9000ae40:	0a5b      	lsrs	r3, r3, #9
9000ae42:	f241 3288 	movw	r2, #5000	; 0x1388
9000ae46:	fb02 f303 	mul.w	r3, r2, r3
9000ae4a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
9000ae4c:	69fb      	ldr	r3, [r7, #28]
9000ae4e:	1e5a      	subs	r2, r3, #1
9000ae50:	61fa      	str	r2, [r7, #28]
9000ae52:	2b00      	cmp	r3, #0
9000ae54:	d102      	bne.n	9000ae5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
9000ae56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
9000ae5a:	e052      	b.n	9000af02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
9000ae5c:	68fb      	ldr	r3, [r7, #12]
9000ae5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ae60:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000ae62:	69bb      	ldr	r3, [r7, #24]
9000ae64:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
9000ae68:	2b00      	cmp	r3, #0
9000ae6a:	d0ef      	beq.n	9000ae4c <SDMMC_GetCmdResp6+0x24>
9000ae6c:	69bb      	ldr	r3, [r7, #24]
9000ae6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000ae72:	2b00      	cmp	r3, #0
9000ae74:	d1ea      	bne.n	9000ae4c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
9000ae76:	68fb      	ldr	r3, [r7, #12]
9000ae78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ae7a:	f003 0304 	and.w	r3, r3, #4
9000ae7e:	2b00      	cmp	r3, #0
9000ae80:	d004      	beq.n	9000ae8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
9000ae82:	68fb      	ldr	r3, [r7, #12]
9000ae84:	2204      	movs	r2, #4
9000ae86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
9000ae88:	2304      	movs	r3, #4
9000ae8a:	e03a      	b.n	9000af02 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
9000ae8c:	68fb      	ldr	r3, [r7, #12]
9000ae8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ae90:	f003 0301 	and.w	r3, r3, #1
9000ae94:	2b00      	cmp	r3, #0
9000ae96:	d004      	beq.n	9000aea2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
9000ae98:	68fb      	ldr	r3, [r7, #12]
9000ae9a:	2201      	movs	r2, #1
9000ae9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
9000ae9e:	2301      	movs	r3, #1
9000aea0:	e02f      	b.n	9000af02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
9000aea2:	68f8      	ldr	r0, [r7, #12]
9000aea4:	f7ff fbb8 	bl	9000a618 <SDMMC_GetCommandResponse>
9000aea8:	4603      	mov	r3, r0
9000aeaa:	461a      	mov	r2, r3
9000aeac:	7afb      	ldrb	r3, [r7, #11]
9000aeae:	4293      	cmp	r3, r2
9000aeb0:	d001      	beq.n	9000aeb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
9000aeb2:	2301      	movs	r3, #1
9000aeb4:	e025      	b.n	9000af02 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
9000aeb6:	68fb      	ldr	r3, [r7, #12]
9000aeb8:	4a16      	ldr	r2, [pc, #88]	; (9000af14 <SDMMC_GetCmdResp6+0xec>)
9000aeba:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
9000aebc:	2100      	movs	r1, #0
9000aebe:	68f8      	ldr	r0, [r7, #12]
9000aec0:	f7ff fbb7 	bl	9000a632 <SDMMC_GetResponse>
9000aec4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
9000aec6:	697b      	ldr	r3, [r7, #20]
9000aec8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
9000aecc:	2b00      	cmp	r3, #0
9000aece:	d106      	bne.n	9000aede <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
9000aed0:	697b      	ldr	r3, [r7, #20]
9000aed2:	0c1b      	lsrs	r3, r3, #16
9000aed4:	b29a      	uxth	r2, r3
9000aed6:	687b      	ldr	r3, [r7, #4]
9000aed8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
9000aeda:	2300      	movs	r3, #0
9000aedc:	e011      	b.n	9000af02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
9000aede:	697b      	ldr	r3, [r7, #20]
9000aee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000aee4:	2b00      	cmp	r3, #0
9000aee6:	d002      	beq.n	9000aeee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
9000aee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
9000aeec:	e009      	b.n	9000af02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
9000aeee:	697b      	ldr	r3, [r7, #20]
9000aef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000aef4:	2b00      	cmp	r3, #0
9000aef6:	d002      	beq.n	9000aefe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
9000aef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000aefc:	e001      	b.n	9000af02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
9000aefe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
9000af02:	4618      	mov	r0, r3
9000af04:	3720      	adds	r7, #32
9000af06:	46bd      	mov	sp, r7
9000af08:	bd80      	pop	{r7, pc}
9000af0a:	bf00      	nop
9000af0c:	2400a000 	.word	0x2400a000
9000af10:	10624dd3 	.word	0x10624dd3
9000af14:	002000c5 	.word	0x002000c5

9000af18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
9000af18:	b480      	push	{r7}
9000af1a:	b085      	sub	sp, #20
9000af1c:	af00      	add	r7, sp, #0
9000af1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
9000af20:	4b22      	ldr	r3, [pc, #136]	; (9000afac <SDMMC_GetCmdResp7+0x94>)
9000af22:	681b      	ldr	r3, [r3, #0]
9000af24:	4a22      	ldr	r2, [pc, #136]	; (9000afb0 <SDMMC_GetCmdResp7+0x98>)
9000af26:	fba2 2303 	umull	r2, r3, r2, r3
9000af2a:	0a5b      	lsrs	r3, r3, #9
9000af2c:	f241 3288 	movw	r2, #5000	; 0x1388
9000af30:	fb02 f303 	mul.w	r3, r2, r3
9000af34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
9000af36:	68fb      	ldr	r3, [r7, #12]
9000af38:	1e5a      	subs	r2, r3, #1
9000af3a:	60fa      	str	r2, [r7, #12]
9000af3c:	2b00      	cmp	r3, #0
9000af3e:	d102      	bne.n	9000af46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
9000af40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
9000af44:	e02c      	b.n	9000afa0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
9000af46:	687b      	ldr	r3, [r7, #4]
9000af48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000af4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000af4c:	68bb      	ldr	r3, [r7, #8]
9000af4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
9000af52:	2b00      	cmp	r3, #0
9000af54:	d0ef      	beq.n	9000af36 <SDMMC_GetCmdResp7+0x1e>
9000af56:	68bb      	ldr	r3, [r7, #8]
9000af58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
9000af5c:	2b00      	cmp	r3, #0
9000af5e:	d1ea      	bne.n	9000af36 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
9000af60:	687b      	ldr	r3, [r7, #4]
9000af62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000af64:	f003 0304 	and.w	r3, r3, #4
9000af68:	2b00      	cmp	r3, #0
9000af6a:	d004      	beq.n	9000af76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
9000af6c:	687b      	ldr	r3, [r7, #4]
9000af6e:	2204      	movs	r2, #4
9000af70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
9000af72:	2304      	movs	r3, #4
9000af74:	e014      	b.n	9000afa0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
9000af76:	687b      	ldr	r3, [r7, #4]
9000af78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000af7a:	f003 0301 	and.w	r3, r3, #1
9000af7e:	2b00      	cmp	r3, #0
9000af80:	d004      	beq.n	9000af8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
9000af82:	687b      	ldr	r3, [r7, #4]
9000af84:	2201      	movs	r2, #1
9000af86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
9000af88:	2301      	movs	r3, #1
9000af8a:	e009      	b.n	9000afa0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
9000af8c:	687b      	ldr	r3, [r7, #4]
9000af8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000af90:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000af94:	2b00      	cmp	r3, #0
9000af96:	d002      	beq.n	9000af9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
9000af98:	687b      	ldr	r3, [r7, #4]
9000af9a:	2240      	movs	r2, #64	; 0x40
9000af9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
9000af9e:	2300      	movs	r3, #0

}
9000afa0:	4618      	mov	r0, r3
9000afa2:	3714      	adds	r7, #20
9000afa4:	46bd      	mov	sp, r7
9000afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000afaa:	4770      	bx	lr
9000afac:	2400a000 	.word	0x2400a000
9000afb0:	10624dd3 	.word	0x10624dd3

9000afb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
9000afb4:	b084      	sub	sp, #16
9000afb6:	b580      	push	{r7, lr}
9000afb8:	b084      	sub	sp, #16
9000afba:	af00      	add	r7, sp, #0
9000afbc:	6078      	str	r0, [r7, #4]
9000afbe:	f107 001c 	add.w	r0, r7, #28
9000afc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
9000afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000afc8:	2b01      	cmp	r3, #1
9000afca:	d120      	bne.n	9000b00e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
9000afcc:	687b      	ldr	r3, [r7, #4]
9000afce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000afd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
9000afd4:	687b      	ldr	r3, [r7, #4]
9000afd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
9000afd8:	687b      	ldr	r3, [r7, #4]
9000afda:	68da      	ldr	r2, [r3, #12]
9000afdc:	4b25      	ldr	r3, [pc, #148]	; (9000b074 <USB_CoreInit+0xc0>)
9000afde:	4013      	ands	r3, r2
9000afe0:	687a      	ldr	r2, [r7, #4]
9000afe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
9000afe4:	687b      	ldr	r3, [r7, #4]
9000afe6:	68db      	ldr	r3, [r3, #12]
9000afe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
9000afec:	687b      	ldr	r3, [r7, #4]
9000afee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
9000aff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000aff2:	2b01      	cmp	r3, #1
9000aff4:	d105      	bne.n	9000b002 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
9000aff6:	687b      	ldr	r3, [r7, #4]
9000aff8:	68db      	ldr	r3, [r3, #12]
9000affa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
9000affe:	687b      	ldr	r3, [r7, #4]
9000b000:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
9000b002:	6878      	ldr	r0, [r7, #4]
9000b004:	f000 fa4c 	bl	9000b4a0 <USB_CoreReset>
9000b008:	4603      	mov	r3, r0
9000b00a:	73fb      	strb	r3, [r7, #15]
9000b00c:	e01a      	b.n	9000b044 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
9000b00e:	687b      	ldr	r3, [r7, #4]
9000b010:	68db      	ldr	r3, [r3, #12]
9000b012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
9000b016:	687b      	ldr	r3, [r7, #4]
9000b018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
9000b01a:	6878      	ldr	r0, [r7, #4]
9000b01c:	f000 fa40 	bl	9000b4a0 <USB_CoreReset>
9000b020:	4603      	mov	r3, r0
9000b022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
9000b024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000b026:	2b00      	cmp	r3, #0
9000b028:	d106      	bne.n	9000b038 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
9000b02a:	687b      	ldr	r3, [r7, #4]
9000b02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000b02e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
9000b032:	687b      	ldr	r3, [r7, #4]
9000b034:	639a      	str	r2, [r3, #56]	; 0x38
9000b036:	e005      	b.n	9000b044 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
9000b038:	687b      	ldr	r3, [r7, #4]
9000b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000b03c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
9000b040:	687b      	ldr	r3, [r7, #4]
9000b042:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
9000b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b046:	2b01      	cmp	r3, #1
9000b048:	d10b      	bne.n	9000b062 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
9000b04a:	687b      	ldr	r3, [r7, #4]
9000b04c:	689b      	ldr	r3, [r3, #8]
9000b04e:	f043 0206 	orr.w	r2, r3, #6
9000b052:	687b      	ldr	r3, [r7, #4]
9000b054:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
9000b056:	687b      	ldr	r3, [r7, #4]
9000b058:	689b      	ldr	r3, [r3, #8]
9000b05a:	f043 0220 	orr.w	r2, r3, #32
9000b05e:	687b      	ldr	r3, [r7, #4]
9000b060:	609a      	str	r2, [r3, #8]
  }

  return ret;
9000b062:	7bfb      	ldrb	r3, [r7, #15]
}
9000b064:	4618      	mov	r0, r3
9000b066:	3710      	adds	r7, #16
9000b068:	46bd      	mov	sp, r7
9000b06a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
9000b06e:	b004      	add	sp, #16
9000b070:	4770      	bx	lr
9000b072:	bf00      	nop
9000b074:	ffbdffbf 	.word	0xffbdffbf

9000b078 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b078:	b480      	push	{r7}
9000b07a:	b083      	sub	sp, #12
9000b07c:	af00      	add	r7, sp, #0
9000b07e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000b080:	687b      	ldr	r3, [r7, #4]
9000b082:	689b      	ldr	r3, [r3, #8]
9000b084:	f023 0201 	bic.w	r2, r3, #1
9000b088:	687b      	ldr	r3, [r7, #4]
9000b08a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b08c:	2300      	movs	r3, #0
}
9000b08e:	4618      	mov	r0, r3
9000b090:	370c      	adds	r7, #12
9000b092:	46bd      	mov	sp, r7
9000b094:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b098:	4770      	bx	lr

9000b09a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
9000b09a:	b580      	push	{r7, lr}
9000b09c:	b082      	sub	sp, #8
9000b09e:	af00      	add	r7, sp, #0
9000b0a0:	6078      	str	r0, [r7, #4]
9000b0a2:	460b      	mov	r3, r1
9000b0a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
9000b0a6:	687b      	ldr	r3, [r7, #4]
9000b0a8:	68db      	ldr	r3, [r3, #12]
9000b0aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
9000b0ae:	687b      	ldr	r3, [r7, #4]
9000b0b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
9000b0b2:	78fb      	ldrb	r3, [r7, #3]
9000b0b4:	2b01      	cmp	r3, #1
9000b0b6:	d106      	bne.n	9000b0c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
9000b0b8:	687b      	ldr	r3, [r7, #4]
9000b0ba:	68db      	ldr	r3, [r3, #12]
9000b0bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
9000b0c0:	687b      	ldr	r3, [r7, #4]
9000b0c2:	60da      	str	r2, [r3, #12]
9000b0c4:	e00b      	b.n	9000b0de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
9000b0c6:	78fb      	ldrb	r3, [r7, #3]
9000b0c8:	2b00      	cmp	r3, #0
9000b0ca:	d106      	bne.n	9000b0da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
9000b0cc:	687b      	ldr	r3, [r7, #4]
9000b0ce:	68db      	ldr	r3, [r3, #12]
9000b0d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
9000b0d4:	687b      	ldr	r3, [r7, #4]
9000b0d6:	60da      	str	r2, [r3, #12]
9000b0d8:	e001      	b.n	9000b0de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
9000b0da:	2301      	movs	r3, #1
9000b0dc:	e003      	b.n	9000b0e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
9000b0de:	2032      	movs	r0, #50	; 0x32
9000b0e0:	f7f7 f89a 	bl	90002218 <HAL_Delay>

  return HAL_OK;
9000b0e4:	2300      	movs	r3, #0
}
9000b0e6:	4618      	mov	r0, r3
9000b0e8:	3708      	adds	r7, #8
9000b0ea:	46bd      	mov	sp, r7
9000b0ec:	bd80      	pop	{r7, pc}
	...

9000b0f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
9000b0f0:	b084      	sub	sp, #16
9000b0f2:	b580      	push	{r7, lr}
9000b0f4:	b086      	sub	sp, #24
9000b0f6:	af00      	add	r7, sp, #0
9000b0f8:	6078      	str	r0, [r7, #4]
9000b0fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
9000b0fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
9000b102:	2300      	movs	r3, #0
9000b104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b106:	687b      	ldr	r3, [r7, #4]
9000b108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
9000b10a:	2300      	movs	r3, #0
9000b10c:	613b      	str	r3, [r7, #16]
9000b10e:	e009      	b.n	9000b124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
9000b110:	687a      	ldr	r2, [r7, #4]
9000b112:	693b      	ldr	r3, [r7, #16]
9000b114:	3340      	adds	r3, #64	; 0x40
9000b116:	009b      	lsls	r3, r3, #2
9000b118:	4413      	add	r3, r2
9000b11a:	2200      	movs	r2, #0
9000b11c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
9000b11e:	693b      	ldr	r3, [r7, #16]
9000b120:	3301      	adds	r3, #1
9000b122:	613b      	str	r3, [r7, #16]
9000b124:	693b      	ldr	r3, [r7, #16]
9000b126:	2b0e      	cmp	r3, #14
9000b128:	d9f2      	bls.n	9000b110 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
9000b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b12c:	2b00      	cmp	r3, #0
9000b12e:	d11c      	bne.n	9000b16a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
9000b130:	68fb      	ldr	r3, [r7, #12]
9000b132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b136:	685b      	ldr	r3, [r3, #4]
9000b138:	68fa      	ldr	r2, [r7, #12]
9000b13a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
9000b13e:	f043 0302 	orr.w	r3, r3, #2
9000b142:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
9000b144:	687b      	ldr	r3, [r7, #4]
9000b146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000b148:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
9000b14c:	687b      	ldr	r3, [r7, #4]
9000b14e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
9000b150:	687b      	ldr	r3, [r7, #4]
9000b152:	681b      	ldr	r3, [r3, #0]
9000b154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
9000b158:	687b      	ldr	r3, [r7, #4]
9000b15a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
9000b15c:	687b      	ldr	r3, [r7, #4]
9000b15e:	681b      	ldr	r3, [r3, #0]
9000b160:	f043 0280 	orr.w	r2, r3, #128	; 0x80
9000b164:	687b      	ldr	r3, [r7, #4]
9000b166:	601a      	str	r2, [r3, #0]
9000b168:	e005      	b.n	9000b176 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
9000b16a:	687b      	ldr	r3, [r7, #4]
9000b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000b16e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
9000b172:	687b      	ldr	r3, [r7, #4]
9000b174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
9000b176:	68fb      	ldr	r3, [r7, #12]
9000b178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
9000b17c:	461a      	mov	r2, r3
9000b17e:	2300      	movs	r3, #0
9000b180:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
9000b182:	68fb      	ldr	r3, [r7, #12]
9000b184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b188:	4619      	mov	r1, r3
9000b18a:	68fb      	ldr	r3, [r7, #12]
9000b18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b190:	461a      	mov	r2, r3
9000b192:	680b      	ldr	r3, [r1, #0]
9000b194:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
9000b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b198:	2b01      	cmp	r3, #1
9000b19a:	d10c      	bne.n	9000b1b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
9000b19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b19e:	2b00      	cmp	r3, #0
9000b1a0:	d104      	bne.n	9000b1ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
9000b1a2:	2100      	movs	r1, #0
9000b1a4:	6878      	ldr	r0, [r7, #4]
9000b1a6:	f000 f949 	bl	9000b43c <USB_SetDevSpeed>
9000b1aa:	e008      	b.n	9000b1be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
9000b1ac:	2101      	movs	r1, #1
9000b1ae:	6878      	ldr	r0, [r7, #4]
9000b1b0:	f000 f944 	bl	9000b43c <USB_SetDevSpeed>
9000b1b4:	e003      	b.n	9000b1be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
9000b1b6:	2103      	movs	r1, #3
9000b1b8:	6878      	ldr	r0, [r7, #4]
9000b1ba:	f000 f93f 	bl	9000b43c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b1be:	2110      	movs	r1, #16
9000b1c0:	6878      	ldr	r0, [r7, #4]
9000b1c2:	f000 f8f3 	bl	9000b3ac <USB_FlushTxFifo>
9000b1c6:	4603      	mov	r3, r0
9000b1c8:	2b00      	cmp	r3, #0
9000b1ca:	d001      	beq.n	9000b1d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
9000b1cc:	2301      	movs	r3, #1
9000b1ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b1d0:	6878      	ldr	r0, [r7, #4]
9000b1d2:	f000 f911 	bl	9000b3f8 <USB_FlushRxFifo>
9000b1d6:	4603      	mov	r3, r0
9000b1d8:	2b00      	cmp	r3, #0
9000b1da:	d001      	beq.n	9000b1e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
9000b1dc:	2301      	movs	r3, #1
9000b1de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
9000b1e0:	68fb      	ldr	r3, [r7, #12]
9000b1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b1e6:	461a      	mov	r2, r3
9000b1e8:	2300      	movs	r3, #0
9000b1ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
9000b1ec:	68fb      	ldr	r3, [r7, #12]
9000b1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b1f2:	461a      	mov	r2, r3
9000b1f4:	2300      	movs	r3, #0
9000b1f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
9000b1f8:	68fb      	ldr	r3, [r7, #12]
9000b1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b1fe:	461a      	mov	r2, r3
9000b200:	2300      	movs	r3, #0
9000b202:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
9000b204:	2300      	movs	r3, #0
9000b206:	613b      	str	r3, [r7, #16]
9000b208:	e043      	b.n	9000b292 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
9000b20a:	693b      	ldr	r3, [r7, #16]
9000b20c:	015a      	lsls	r2, r3, #5
9000b20e:	68fb      	ldr	r3, [r7, #12]
9000b210:	4413      	add	r3, r2
9000b212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
9000b216:	681b      	ldr	r3, [r3, #0]
9000b218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
9000b21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
9000b220:	d118      	bne.n	9000b254 <USB_DevInit+0x164>
    {
      if (i == 0U)
9000b222:	693b      	ldr	r3, [r7, #16]
9000b224:	2b00      	cmp	r3, #0
9000b226:	d10a      	bne.n	9000b23e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
9000b228:	693b      	ldr	r3, [r7, #16]
9000b22a:	015a      	lsls	r2, r3, #5
9000b22c:	68fb      	ldr	r3, [r7, #12]
9000b22e:	4413      	add	r3, r2
9000b230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
9000b234:	461a      	mov	r2, r3
9000b236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
9000b23a:	6013      	str	r3, [r2, #0]
9000b23c:	e013      	b.n	9000b266 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
9000b23e:	693b      	ldr	r3, [r7, #16]
9000b240:	015a      	lsls	r2, r3, #5
9000b242:	68fb      	ldr	r3, [r7, #12]
9000b244:	4413      	add	r3, r2
9000b246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
9000b24a:	461a      	mov	r2, r3
9000b24c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
9000b250:	6013      	str	r3, [r2, #0]
9000b252:	e008      	b.n	9000b266 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
9000b254:	693b      	ldr	r3, [r7, #16]
9000b256:	015a      	lsls	r2, r3, #5
9000b258:	68fb      	ldr	r3, [r7, #12]
9000b25a:	4413      	add	r3, r2
9000b25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
9000b260:	461a      	mov	r2, r3
9000b262:	2300      	movs	r3, #0
9000b264:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
9000b266:	693b      	ldr	r3, [r7, #16]
9000b268:	015a      	lsls	r2, r3, #5
9000b26a:	68fb      	ldr	r3, [r7, #12]
9000b26c:	4413      	add	r3, r2
9000b26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
9000b272:	461a      	mov	r2, r3
9000b274:	2300      	movs	r3, #0
9000b276:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
9000b278:	693b      	ldr	r3, [r7, #16]
9000b27a:	015a      	lsls	r2, r3, #5
9000b27c:	68fb      	ldr	r3, [r7, #12]
9000b27e:	4413      	add	r3, r2
9000b280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
9000b284:	461a      	mov	r2, r3
9000b286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
9000b28a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
9000b28c:	693b      	ldr	r3, [r7, #16]
9000b28e:	3301      	adds	r3, #1
9000b290:	613b      	str	r3, [r7, #16]
9000b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b294:	693a      	ldr	r2, [r7, #16]
9000b296:	429a      	cmp	r2, r3
9000b298:	d3b7      	bcc.n	9000b20a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
9000b29a:	2300      	movs	r3, #0
9000b29c:	613b      	str	r3, [r7, #16]
9000b29e:	e043      	b.n	9000b328 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
9000b2a0:	693b      	ldr	r3, [r7, #16]
9000b2a2:	015a      	lsls	r2, r3, #5
9000b2a4:	68fb      	ldr	r3, [r7, #12]
9000b2a6:	4413      	add	r3, r2
9000b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
9000b2ac:	681b      	ldr	r3, [r3, #0]
9000b2ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
9000b2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
9000b2b6:	d118      	bne.n	9000b2ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
9000b2b8:	693b      	ldr	r3, [r7, #16]
9000b2ba:	2b00      	cmp	r3, #0
9000b2bc:	d10a      	bne.n	9000b2d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
9000b2be:	693b      	ldr	r3, [r7, #16]
9000b2c0:	015a      	lsls	r2, r3, #5
9000b2c2:	68fb      	ldr	r3, [r7, #12]
9000b2c4:	4413      	add	r3, r2
9000b2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
9000b2ca:	461a      	mov	r2, r3
9000b2cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
9000b2d0:	6013      	str	r3, [r2, #0]
9000b2d2:	e013      	b.n	9000b2fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
9000b2d4:	693b      	ldr	r3, [r7, #16]
9000b2d6:	015a      	lsls	r2, r3, #5
9000b2d8:	68fb      	ldr	r3, [r7, #12]
9000b2da:	4413      	add	r3, r2
9000b2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
9000b2e0:	461a      	mov	r2, r3
9000b2e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
9000b2e6:	6013      	str	r3, [r2, #0]
9000b2e8:	e008      	b.n	9000b2fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
9000b2ea:	693b      	ldr	r3, [r7, #16]
9000b2ec:	015a      	lsls	r2, r3, #5
9000b2ee:	68fb      	ldr	r3, [r7, #12]
9000b2f0:	4413      	add	r3, r2
9000b2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
9000b2f6:	461a      	mov	r2, r3
9000b2f8:	2300      	movs	r3, #0
9000b2fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
9000b2fc:	693b      	ldr	r3, [r7, #16]
9000b2fe:	015a      	lsls	r2, r3, #5
9000b300:	68fb      	ldr	r3, [r7, #12]
9000b302:	4413      	add	r3, r2
9000b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
9000b308:	461a      	mov	r2, r3
9000b30a:	2300      	movs	r3, #0
9000b30c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
9000b30e:	693b      	ldr	r3, [r7, #16]
9000b310:	015a      	lsls	r2, r3, #5
9000b312:	68fb      	ldr	r3, [r7, #12]
9000b314:	4413      	add	r3, r2
9000b316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
9000b31a:	461a      	mov	r2, r3
9000b31c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
9000b320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
9000b322:	693b      	ldr	r3, [r7, #16]
9000b324:	3301      	adds	r3, #1
9000b326:	613b      	str	r3, [r7, #16]
9000b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b32a:	693a      	ldr	r2, [r7, #16]
9000b32c:	429a      	cmp	r2, r3
9000b32e:	d3b7      	bcc.n	9000b2a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
9000b330:	68fb      	ldr	r3, [r7, #12]
9000b332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b336:	691b      	ldr	r3, [r3, #16]
9000b338:	68fa      	ldr	r2, [r7, #12]
9000b33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
9000b33e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
9000b342:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
9000b344:	687b      	ldr	r3, [r7, #4]
9000b346:	2200      	movs	r2, #0
9000b348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
9000b34a:	687b      	ldr	r3, [r7, #4]
9000b34c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
9000b350:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
9000b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000b354:	2b00      	cmp	r3, #0
9000b356:	d105      	bne.n	9000b364 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
9000b358:	687b      	ldr	r3, [r7, #4]
9000b35a:	699b      	ldr	r3, [r3, #24]
9000b35c:	f043 0210 	orr.w	r2, r3, #16
9000b360:	687b      	ldr	r3, [r7, #4]
9000b362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
9000b364:	687b      	ldr	r3, [r7, #4]
9000b366:	699a      	ldr	r2, [r3, #24]
9000b368:	4b0e      	ldr	r3, [pc, #56]	; (9000b3a4 <USB_DevInit+0x2b4>)
9000b36a:	4313      	orrs	r3, r2
9000b36c:	687a      	ldr	r2, [r7, #4]
9000b36e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
9000b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b372:	2b00      	cmp	r3, #0
9000b374:	d005      	beq.n	9000b382 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
9000b376:	687b      	ldr	r3, [r7, #4]
9000b378:	699b      	ldr	r3, [r3, #24]
9000b37a:	f043 0208 	orr.w	r2, r3, #8
9000b37e:	687b      	ldr	r3, [r7, #4]
9000b380:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
9000b382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b384:	2b01      	cmp	r3, #1
9000b386:	d105      	bne.n	9000b394 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
9000b388:	687b      	ldr	r3, [r7, #4]
9000b38a:	699a      	ldr	r2, [r3, #24]
9000b38c:	4b06      	ldr	r3, [pc, #24]	; (9000b3a8 <USB_DevInit+0x2b8>)
9000b38e:	4313      	orrs	r3, r2
9000b390:	687a      	ldr	r2, [r7, #4]
9000b392:	6193      	str	r3, [r2, #24]
  }

  return ret;
9000b394:	7dfb      	ldrb	r3, [r7, #23]
}
9000b396:	4618      	mov	r0, r3
9000b398:	3718      	adds	r7, #24
9000b39a:	46bd      	mov	sp, r7
9000b39c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
9000b3a0:	b004      	add	sp, #16
9000b3a2:	4770      	bx	lr
9000b3a4:	803c3800 	.word	0x803c3800
9000b3a8:	40000004 	.word	0x40000004

9000b3ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000b3ac:	b480      	push	{r7}
9000b3ae:	b085      	sub	sp, #20
9000b3b0:	af00      	add	r7, sp, #0
9000b3b2:	6078      	str	r0, [r7, #4]
9000b3b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
9000b3b6:	2300      	movs	r3, #0
9000b3b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000b3ba:	683b      	ldr	r3, [r7, #0]
9000b3bc:	019b      	lsls	r3, r3, #6
9000b3be:	f043 0220 	orr.w	r2, r3, #32
9000b3c2:	687b      	ldr	r3, [r7, #4]
9000b3c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
9000b3c6:	68fb      	ldr	r3, [r7, #12]
9000b3c8:	3301      	adds	r3, #1
9000b3ca:	60fb      	str	r3, [r7, #12]
9000b3cc:	68fb      	ldr	r3, [r7, #12]
9000b3ce:	4a09      	ldr	r2, [pc, #36]	; (9000b3f4 <USB_FlushTxFifo+0x48>)
9000b3d0:	4293      	cmp	r3, r2
9000b3d2:	d901      	bls.n	9000b3d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
9000b3d4:	2303      	movs	r3, #3
9000b3d6:	e006      	b.n	9000b3e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000b3d8:	687b      	ldr	r3, [r7, #4]
9000b3da:	691b      	ldr	r3, [r3, #16]
9000b3dc:	f003 0320 	and.w	r3, r3, #32
9000b3e0:	2b20      	cmp	r3, #32
9000b3e2:	d0f0      	beq.n	9000b3c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
9000b3e4:	2300      	movs	r3, #0
}
9000b3e6:	4618      	mov	r0, r3
9000b3e8:	3714      	adds	r7, #20
9000b3ea:	46bd      	mov	sp, r7
9000b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b3f0:	4770      	bx	lr
9000b3f2:	bf00      	nop
9000b3f4:	00030d40 	.word	0x00030d40

9000b3f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000b3f8:	b480      	push	{r7}
9000b3fa:	b085      	sub	sp, #20
9000b3fc:	af00      	add	r7, sp, #0
9000b3fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
9000b400:	2300      	movs	r3, #0
9000b402:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000b404:	687b      	ldr	r3, [r7, #4]
9000b406:	2210      	movs	r2, #16
9000b408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
9000b40a:	68fb      	ldr	r3, [r7, #12]
9000b40c:	3301      	adds	r3, #1
9000b40e:	60fb      	str	r3, [r7, #12]
9000b410:	68fb      	ldr	r3, [r7, #12]
9000b412:	4a09      	ldr	r2, [pc, #36]	; (9000b438 <USB_FlushRxFifo+0x40>)
9000b414:	4293      	cmp	r3, r2
9000b416:	d901      	bls.n	9000b41c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
9000b418:	2303      	movs	r3, #3
9000b41a:	e006      	b.n	9000b42a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b41c:	687b      	ldr	r3, [r7, #4]
9000b41e:	691b      	ldr	r3, [r3, #16]
9000b420:	f003 0310 	and.w	r3, r3, #16
9000b424:	2b10      	cmp	r3, #16
9000b426:	d0f0      	beq.n	9000b40a <USB_FlushRxFifo+0x12>

  return HAL_OK;
9000b428:	2300      	movs	r3, #0
}
9000b42a:	4618      	mov	r0, r3
9000b42c:	3714      	adds	r7, #20
9000b42e:	46bd      	mov	sp, r7
9000b430:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b434:	4770      	bx	lr
9000b436:	bf00      	nop
9000b438:	00030d40 	.word	0x00030d40

9000b43c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
9000b43c:	b480      	push	{r7}
9000b43e:	b085      	sub	sp, #20
9000b440:	af00      	add	r7, sp, #0
9000b442:	6078      	str	r0, [r7, #4]
9000b444:	460b      	mov	r3, r1
9000b446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b448:	687b      	ldr	r3, [r7, #4]
9000b44a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
9000b44c:	68fb      	ldr	r3, [r7, #12]
9000b44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b452:	681a      	ldr	r2, [r3, #0]
9000b454:	78fb      	ldrb	r3, [r7, #3]
9000b456:	68f9      	ldr	r1, [r7, #12]
9000b458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
9000b45c:	4313      	orrs	r3, r2
9000b45e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
9000b460:	2300      	movs	r3, #0
}
9000b462:	4618      	mov	r0, r3
9000b464:	3714      	adds	r7, #20
9000b466:	46bd      	mov	sp, r7
9000b468:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b46c:	4770      	bx	lr

9000b46e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
9000b46e:	b580      	push	{r7, lr}
9000b470:	b084      	sub	sp, #16
9000b472:	af00      	add	r7, sp, #0
9000b474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b476:	687b      	ldr	r3, [r7, #4]
9000b478:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
9000b47a:	68fb      	ldr	r3, [r7, #12]
9000b47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000b480:	685b      	ldr	r3, [r3, #4]
9000b482:	68fa      	ldr	r2, [r7, #12]
9000b484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
9000b488:	f043 0302 	orr.w	r3, r3, #2
9000b48c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
9000b48e:	2003      	movs	r0, #3
9000b490:	f7f6 fec2 	bl	90002218 <HAL_Delay>

  return HAL_OK;
9000b494:	2300      	movs	r3, #0
}
9000b496:	4618      	mov	r0, r3
9000b498:	3710      	adds	r7, #16
9000b49a:	46bd      	mov	sp, r7
9000b49c:	bd80      	pop	{r7, pc}
	...

9000b4a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
9000b4a0:	b480      	push	{r7}
9000b4a2:	b085      	sub	sp, #20
9000b4a4:	af00      	add	r7, sp, #0
9000b4a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
9000b4a8:	2300      	movs	r3, #0
9000b4aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
9000b4ac:	68fb      	ldr	r3, [r7, #12]
9000b4ae:	3301      	adds	r3, #1
9000b4b0:	60fb      	str	r3, [r7, #12]
9000b4b2:	68fb      	ldr	r3, [r7, #12]
9000b4b4:	4a13      	ldr	r2, [pc, #76]	; (9000b504 <USB_CoreReset+0x64>)
9000b4b6:	4293      	cmp	r3, r2
9000b4b8:	d901      	bls.n	9000b4be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
9000b4ba:	2303      	movs	r3, #3
9000b4bc:	e01b      	b.n	9000b4f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b4be:	687b      	ldr	r3, [r7, #4]
9000b4c0:	691b      	ldr	r3, [r3, #16]
9000b4c2:	2b00      	cmp	r3, #0
9000b4c4:	daf2      	bge.n	9000b4ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
9000b4c6:	2300      	movs	r3, #0
9000b4c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
9000b4ca:	687b      	ldr	r3, [r7, #4]
9000b4cc:	691b      	ldr	r3, [r3, #16]
9000b4ce:	f043 0201 	orr.w	r2, r3, #1
9000b4d2:	687b      	ldr	r3, [r7, #4]
9000b4d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
9000b4d6:	68fb      	ldr	r3, [r7, #12]
9000b4d8:	3301      	adds	r3, #1
9000b4da:	60fb      	str	r3, [r7, #12]
9000b4dc:	68fb      	ldr	r3, [r7, #12]
9000b4de:	4a09      	ldr	r2, [pc, #36]	; (9000b504 <USB_CoreReset+0x64>)
9000b4e0:	4293      	cmp	r3, r2
9000b4e2:	d901      	bls.n	9000b4e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
9000b4e4:	2303      	movs	r3, #3
9000b4e6:	e006      	b.n	9000b4f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
9000b4e8:	687b      	ldr	r3, [r7, #4]
9000b4ea:	691b      	ldr	r3, [r3, #16]
9000b4ec:	f003 0301 	and.w	r3, r3, #1
9000b4f0:	2b01      	cmp	r3, #1
9000b4f2:	d0f0      	beq.n	9000b4d6 <USB_CoreReset+0x36>

  return HAL_OK;
9000b4f4:	2300      	movs	r3, #0
}
9000b4f6:	4618      	mov	r0, r3
9000b4f8:	3714      	adds	r7, #20
9000b4fa:	46bd      	mov	sp, r7
9000b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b500:	4770      	bx	lr
9000b502:	bf00      	nop
9000b504:	00030d40 	.word	0x00030d40

9000b508 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
9000b508:	b580      	push	{r7, lr}
9000b50a:	b09a      	sub	sp, #104	; 0x68
9000b50c:	af00      	add	r7, sp, #0
9000b50e:	60f8      	str	r0, [r7, #12]
9000b510:	60b9      	str	r1, [r7, #8]
9000b512:	607a      	str	r2, [r7, #4]
9000b514:	603b      	str	r3, [r7, #0]
TX_THREAD                   *next_thread;
TX_THREAD                   *previous_thread;
UINT                        finished;
#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
9000b516:	2300      	movs	r3, #0
9000b518:	65bb      	str	r3, [r7, #88]	; 0x58
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
9000b51a:	687b      	ldr	r3, [r7, #4]
9000b51c:	3303      	adds	r3, #3
9000b51e:	f023 0303 	bic.w	r3, r3, #3
9000b522:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000b524:	f3ef 8310 	mrs	r3, PRIMASK
9000b528:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
9000b52a:	b672      	cpsid	i
    return(primask_value);
9000b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
9000b52e:	667b      	str	r3, [r7, #100]	; 0x64

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
9000b530:	4b7a      	ldr	r3, [pc, #488]	; (9000b71c <_tx_byte_allocate+0x214>)
9000b532:	681b      	ldr	r3, [r3, #0]
9000b534:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
9000b536:	4b7a      	ldr	r3, [pc, #488]	; (9000b720 <_tx_byte_allocate+0x218>)
9000b538:	681b      	ldr	r3, [r3, #0]
9000b53a:	64bb      	str	r3, [r7, #72]	; 0x48

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_ALLOCATE, pool_ptr, 0, memory_size, wait_option, TX_TRACE_BYTE_POOL_EVENTS)
9000b53c:	4b78      	ldr	r3, [pc, #480]	; (9000b720 <_tx_byte_allocate+0x218>)
9000b53e:	681b      	ldr	r3, [r3, #0]
9000b540:	647b      	str	r3, [r7, #68]	; 0x44
9000b542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b544:	2b00      	cmp	r3, #0
9000b546:	d06b      	beq.n	9000b620 <_tx_byte_allocate+0x118>
9000b548:	4b76      	ldr	r3, [pc, #472]	; (9000b724 <_tx_byte_allocate+0x21c>)
9000b54a:	681b      	ldr	r3, [r3, #0]
9000b54c:	f003 0304 	and.w	r3, r3, #4
9000b550:	2b00      	cmp	r3, #0
9000b552:	d065      	beq.n	9000b620 <_tx_byte_allocate+0x118>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000b554:	f3ef 8305 	mrs	r3, IPSR
9000b558:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
9000b55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000b55c:	4b72      	ldr	r3, [pc, #456]	; (9000b728 <_tx_byte_allocate+0x220>)
9000b55e:	681b      	ldr	r3, [r3, #0]
9000b560:	4313      	orrs	r3, r2
9000b562:	643b      	str	r3, [r7, #64]	; 0x40
9000b564:	4b6d      	ldr	r3, [pc, #436]	; (9000b71c <_tx_byte_allocate+0x214>)
9000b566:	681b      	ldr	r3, [r3, #0]
9000b568:	653b      	str	r3, [r7, #80]	; 0x50
9000b56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000b56c:	2b00      	cmp	r3, #0
9000b56e:	d10b      	bne.n	9000b588 <_tx_byte_allocate+0x80>
9000b570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000b574:	657b      	str	r3, [r7, #84]	; 0x54
9000b576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000b578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000b57a:	041a      	lsls	r2, r3, #16
9000b57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000b57e:	4313      	orrs	r3, r2
9000b580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000b584:	657b      	str	r3, [r7, #84]	; 0x54
9000b586:	e00e      	b.n	9000b5a6 <_tx_byte_allocate+0x9e>
9000b588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000b58a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000b58e:	d205      	bcs.n	9000b59c <_tx_byte_allocate+0x94>
9000b590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000b592:	657b      	str	r3, [r7, #84]	; 0x54
9000b594:	f04f 33ff 	mov.w	r3, #4294967295
9000b598:	653b      	str	r3, [r7, #80]	; 0x50
9000b59a:	e004      	b.n	9000b5a6 <_tx_byte_allocate+0x9e>
9000b59c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000b5a0:	653b      	str	r3, [r7, #80]	; 0x50
9000b5a2:	2300      	movs	r3, #0
9000b5a4:	657b      	str	r3, [r7, #84]	; 0x54
9000b5a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000b5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5aa:	601a      	str	r2, [r3, #0]
9000b5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
9000b5b0:	605a      	str	r2, [r3, #4]
9000b5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5b4:	2214      	movs	r2, #20
9000b5b6:	609a      	str	r2, [r3, #8]
9000b5b8:	4b5c      	ldr	r3, [pc, #368]	; (9000b72c <_tx_byte_allocate+0x224>)
9000b5ba:	681a      	ldr	r2, [r3, #0]
9000b5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5be:	60da      	str	r2, [r3, #12]
9000b5c0:	68fa      	ldr	r2, [r7, #12]
9000b5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5c4:	611a      	str	r2, [r3, #16]
9000b5c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5c8:	2200      	movs	r2, #0
9000b5ca:	615a      	str	r2, [r3, #20]
9000b5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5ce:	687a      	ldr	r2, [r7, #4]
9000b5d0:	619a      	str	r2, [r3, #24]
9000b5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5d4:	683a      	ldr	r2, [r7, #0]
9000b5d6:	61da      	str	r2, [r3, #28]
9000b5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5da:	3320      	adds	r3, #32
9000b5dc:	647b      	str	r3, [r7, #68]	; 0x44
9000b5de:	4b54      	ldr	r3, [pc, #336]	; (9000b730 <_tx_byte_allocate+0x228>)
9000b5e0:	681b      	ldr	r3, [r3, #0]
9000b5e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000b5e4:	429a      	cmp	r2, r3
9000b5e6:	d314      	bcc.n	9000b612 <_tx_byte_allocate+0x10a>
9000b5e8:	4b52      	ldr	r3, [pc, #328]	; (9000b734 <_tx_byte_allocate+0x22c>)
9000b5ea:	681b      	ldr	r3, [r3, #0]
9000b5ec:	647b      	str	r3, [r7, #68]	; 0x44
9000b5ee:	4a4c      	ldr	r2, [pc, #304]	; (9000b720 <_tx_byte_allocate+0x218>)
9000b5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b5f2:	6013      	str	r3, [r2, #0]
9000b5f4:	4b50      	ldr	r3, [pc, #320]	; (9000b738 <_tx_byte_allocate+0x230>)
9000b5f6:	681b      	ldr	r3, [r3, #0]
9000b5f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000b5fa:	621a      	str	r2, [r3, #32]
9000b5fc:	4b4f      	ldr	r3, [pc, #316]	; (9000b73c <_tx_byte_allocate+0x234>)
9000b5fe:	681b      	ldr	r3, [r3, #0]
9000b600:	2b00      	cmp	r3, #0
9000b602:	d00d      	beq.n	9000b620 <_tx_byte_allocate+0x118>
9000b604:	4b4d      	ldr	r3, [pc, #308]	; (9000b73c <_tx_byte_allocate+0x234>)
9000b606:	681b      	ldr	r3, [r3, #0]
9000b608:	4a4b      	ldr	r2, [pc, #300]	; (9000b738 <_tx_byte_allocate+0x230>)
9000b60a:	6812      	ldr	r2, [r2, #0]
9000b60c:	4610      	mov	r0, r2
9000b60e:	4798      	blx	r3
9000b610:	e006      	b.n	9000b620 <_tx_byte_allocate+0x118>
9000b612:	4a43      	ldr	r2, [pc, #268]	; (9000b720 <_tx_byte_allocate+0x218>)
9000b614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000b616:	6013      	str	r3, [r2, #0]
9000b618:	4b47      	ldr	r3, [pc, #284]	; (9000b738 <_tx_byte_allocate+0x230>)
9000b61a:	681b      	ldr	r3, [r3, #0]
9000b61c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000b61e:	621a      	str	r2, [r3, #32]

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time the allocate
       call succeeds.  */
    if (entry_ptr != TX_NULL)
9000b620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b622:	2b00      	cmp	r3, #0
9000b624:	d002      	beq.n	9000b62c <_tx_byte_allocate+0x124>
    {

        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
9000b626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b628:	68db      	ldr	r3, [r3, #12]
9000b62a:	65bb      	str	r3, [r7, #88]	; 0x58
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
9000b62c:	2300      	movs	r3, #0
9000b62e:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
9000b630:	68fb      	ldr	r3, [r7, #12]
9000b632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000b634:	621a      	str	r2, [r3, #32]
9000b636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000b638:	623b      	str	r3, [r7, #32]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000b63a:	6a3b      	ldr	r3, [r7, #32]
9000b63c:	f383 8810 	msr	PRIMASK, r3
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
9000b640:	6879      	ldr	r1, [r7, #4]
9000b642:	68f8      	ldr	r0, [r7, #12]
9000b644:	f000 fa5e 	bl	9000bb04 <_tx_byte_pool_search>
9000b648:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000b64a:	f3ef 8310 	mrs	r3, PRIMASK
9000b64e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
9000b650:	b672      	cpsid	i
    return(primask_value);
9000b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
9000b654:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
9000b656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b658:	2b00      	cmp	r3, #0
9000b65a:	d002      	beq.n	9000b662 <_tx_byte_allocate+0x15a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
9000b65c:	2301      	movs	r3, #1
9000b65e:	65fb      	str	r3, [r7, #92]	; 0x5c
9000b660:	e006      	b.n	9000b670 <_tx_byte_allocate+0x168>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
9000b662:	68fb      	ldr	r3, [r7, #12]
9000b664:	6a1b      	ldr	r3, [r3, #32]
9000b666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000b668:	429a      	cmp	r2, r3
9000b66a:	d101      	bne.n	9000b670 <_tx_byte_allocate+0x168>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
9000b66c:	2301      	movs	r3, #1
9000b66e:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

    } while (finished == TX_FALSE);
9000b670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000b672:	2b00      	cmp	r3, #0
9000b674:	d0dc      	beq.n	9000b630 <_tx_byte_allocate+0x128>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
9000b676:	68bb      	ldr	r3, [r7, #8]
9000b678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000b67a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
9000b67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b67e:	2b00      	cmp	r3, #0
9000b680:	d014      	beq.n	9000b6ac <_tx_byte_allocate+0x1a4>
#ifdef TX_ENABLE_EVENT_TRACE

        /* Check that the event time stamp is unchanged.  A different
           timestamp means that a later event wrote over the byte
           allocate event.  In that case, do nothing here.  */
        if (entry_ptr != TX_NULL)
9000b682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b684:	2b00      	cmp	r3, #0
9000b686:	d009      	beq.n	9000b69c <_tx_byte_allocate+0x194>
        {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
9000b688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b68a:	68db      	ldr	r3, [r3, #12]
9000b68c:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000b68e:	429a      	cmp	r2, r3
9000b690:	d104      	bne.n	9000b69c <_tx_byte_allocate+0x194>
            
                /* Timestamp is the same, update the entry with the address.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
9000b692:	68bb      	ldr	r3, [r7, #8]
9000b694:	681b      	ldr	r3, [r3, #0]
9000b696:	461a      	mov	r2, r3
9000b698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b69a:	615a      	str	r2, [r3, #20]
9000b69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000b69e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000b6a0:	69fb      	ldr	r3, [r7, #28]
9000b6a2:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
9000b6a6:	2300      	movs	r3, #0
9000b6a8:	663b      	str	r3, [r7, #96]	; 0x60
9000b6aa:	e08e      	b.n	9000b7ca <_tx_byte_allocate+0x2c2>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
9000b6ac:	683b      	ldr	r3, [r7, #0]
9000b6ae:	2b00      	cmp	r3, #0
9000b6b0:	f000 8084 	beq.w	9000b7bc <_tx_byte_allocate+0x2b4>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
9000b6b4:	4b22      	ldr	r3, [pc, #136]	; (9000b740 <_tx_byte_allocate+0x238>)
9000b6b6:	681b      	ldr	r3, [r3, #0]
9000b6b8:	2b00      	cmp	r3, #0
9000b6ba:	d007      	beq.n	9000b6cc <_tx_byte_allocate+0x1c4>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
9000b6bc:	2310      	movs	r3, #16
9000b6be:	663b      	str	r3, [r7, #96]	; 0x60
9000b6c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000b6c2:	61bb      	str	r3, [r7, #24]
9000b6c4:	69bb      	ldr	r3, [r7, #24]
9000b6c6:	f383 8810 	msr	PRIMASK, r3
9000b6ca:	e07e      	b.n	9000b7ca <_tx_byte_allocate+0x2c2>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
9000b6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b6ce:	4a1d      	ldr	r2, [pc, #116]	; (9000b744 <_tx_byte_allocate+0x23c>)
9000b6d0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
9000b6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b6d4:	68fa      	ldr	r2, [r7, #12]
9000b6d6:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
9000b6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b6da:	68ba      	ldr	r2, [r7, #8]
9000b6dc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
9000b6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b6e0:	687a      	ldr	r2, [r7, #4]
9000b6e2:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
9000b6e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b6e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000b6ea:	1c5a      	adds	r2, r3, #1
9000b6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b6ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
9000b6f2:	68fb      	ldr	r3, [r7, #12]
9000b6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000b6f6:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
9000b6f8:	68fb      	ldr	r3, [r7, #12]
9000b6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000b6fc:	1c5a      	adds	r2, r3, #1
9000b6fe:	68fb      	ldr	r3, [r7, #12]
9000b700:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
9000b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b704:	2b00      	cmp	r3, #0
9000b706:	d11f      	bne.n	9000b748 <_tx_byte_allocate+0x240>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
9000b708:	68fb      	ldr	r3, [r7, #12]
9000b70a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000b70c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
9000b70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000b712:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
9000b714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000b718:	675a      	str	r2, [r3, #116]	; 0x74
9000b71a:	e027      	b.n	9000b76c <_tx_byte_allocate+0x264>
9000b71c:	2401c86c 	.word	0x2401c86c
9000b720:	2401cdf4 	.word	0x2401cdf4
9000b724:	2401ce00 	.word	0x2401ce00
9000b728:	2400a010 	.word	0x2400a010
9000b72c:	e0001004 	.word	0xe0001004
9000b730:	2401cdec 	.word	0x2401cdec
9000b734:	2401ce08 	.word	0x2401ce08
9000b738:	2401cdfc 	.word	0x2401cdfc
9000b73c:	2401cdf8 	.word	0x2401cdf8
9000b740:	2401c868 	.word	0x2401c868
9000b744:	9000b7d9 	.word	0x9000b7d9
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
9000b748:	68fb      	ldr	r3, [r7, #12]
9000b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b74c:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
9000b74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000b752:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
9000b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b758:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
9000b75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000b75e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
9000b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000b762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000b764:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
9000b766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b768:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000b76a:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
9000b76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b76e:	2209      	movs	r2, #9
9000b770:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
9000b772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b774:	2201      	movs	r2, #1
9000b776:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
9000b778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b77a:	683a      	ldr	r2, [r7, #0]
9000b77c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
9000b77e:	4b15      	ldr	r3, [pc, #84]	; (9000b7d4 <_tx_byte_allocate+0x2cc>)
9000b780:	681b      	ldr	r3, [r3, #0]
9000b782:	3301      	adds	r3, #1
9000b784:	4a13      	ldr	r2, [pc, #76]	; (9000b7d4 <_tx_byte_allocate+0x2cc>)
9000b786:	6013      	str	r3, [r2, #0]
9000b788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000b78a:	617b      	str	r3, [r7, #20]
9000b78c:	697b      	ldr	r3, [r7, #20]
9000b78e:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
9000b792:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
9000b794:	f001 f81e 	bl	9000c7d4 <_tx_thread_system_suspend>
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the byte
                   allocate event.  In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
9000b798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b79a:	2b00      	cmp	r3, #0
9000b79c:	d009      	beq.n	9000b7b2 <_tx_byte_allocate+0x2aa>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
9000b79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b7a0:	68db      	ldr	r3, [r3, #12]
9000b7a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000b7a4:	429a      	cmp	r2, r3
9000b7a6:	d104      	bne.n	9000b7b2 <_tx_byte_allocate+0x2aa>
                
                        /* Timestamp is the same, update the entry with the address.  */
#ifdef TX_MISRA_ENABLE
                        entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
#else
                       entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
9000b7a8:	68bb      	ldr	r3, [r7, #8]
9000b7aa:	681b      	ldr	r3, [r3, #0]
9000b7ac:	461a      	mov	r2, r3
9000b7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000b7b0:	615a      	str	r2, [r3, #20]
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
9000b7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000b7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000b7b8:	663b      	str	r3, [r7, #96]	; 0x60
9000b7ba:	e006      	b.n	9000b7ca <_tx_byte_allocate+0x2c2>
9000b7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000b7be:	613b      	str	r3, [r7, #16]
9000b7c0:	693b      	ldr	r3, [r7, #16]
9000b7c2:	f383 8810 	msr	PRIMASK, r3
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
9000b7c6:	2310      	movs	r3, #16
9000b7c8:	663b      	str	r3, [r7, #96]	; 0x60
        }
    }

    /* Return completion status.  */
    return(status);
9000b7ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
9000b7cc:	4618      	mov	r0, r3
9000b7ce:	3768      	adds	r7, #104	; 0x68
9000b7d0:	46bd      	mov	sp, r7
9000b7d2:	bd80      	pop	{r7, pc}
9000b7d4:	2401c868 	.word	0x2401c868

9000b7d8 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
9000b7d8:	b580      	push	{r7, lr}
9000b7da:	b08c      	sub	sp, #48	; 0x30
9000b7dc:	af00      	add	r7, sp, #0
9000b7de:	6078      	str	r0, [r7, #4]
9000b7e0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000b7e2:	f3ef 8310 	mrs	r3, PRIMASK
9000b7e6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000b7e8:	b672      	cpsid	i
    return(primask_value);
9000b7ea:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
9000b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
9000b7ee:	687b      	ldr	r3, [r7, #4]
9000b7f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000b7f2:	4a31      	ldr	r2, [pc, #196]	; (9000b8b8 <_tx_byte_pool_cleanup+0xe0>)
9000b7f4:	4293      	cmp	r3, r2
9000b7f6:	d155      	bne.n	9000b8a4 <_tx_byte_pool_cleanup+0xcc>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
9000b7f8:	687b      	ldr	r3, [r7, #4]
9000b7fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000b7fe:	683a      	ldr	r2, [r7, #0]
9000b800:	429a      	cmp	r2, r3
9000b802:	d14f      	bne.n	9000b8a4 <_tx_byte_pool_cleanup+0xcc>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
9000b804:	687b      	ldr	r3, [r7, #4]
9000b806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000b808:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
9000b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b80c:	2b00      	cmp	r3, #0
9000b80e:	d049      	beq.n	9000b8a4 <_tx_byte_pool_cleanup+0xcc>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
9000b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b812:	681b      	ldr	r3, [r3, #0]
9000b814:	4a29      	ldr	r2, [pc, #164]	; (9000b8bc <_tx_byte_pool_cleanup+0xe4>)
9000b816:	4293      	cmp	r3, r2
9000b818:	d144      	bne.n	9000b8a4 <_tx_byte_pool_cleanup+0xcc>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
9000b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000b81e:	2b00      	cmp	r3, #0
9000b820:	d040      	beq.n	9000b8a4 <_tx_byte_pool_cleanup+0xcc>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
9000b822:	687b      	ldr	r3, [r7, #4]
9000b824:	2200      	movs	r2, #0
9000b826:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
9000b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000b82c:	1e5a      	subs	r2, r3, #1
9000b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b830:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
9000b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000b836:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
9000b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b83a:	2b00      	cmp	r3, #0
9000b83c:	d103      	bne.n	9000b846 <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
9000b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b840:	2200      	movs	r2, #0
9000b842:	625a      	str	r2, [r3, #36]	; 0x24
9000b844:	e013      	b.n	9000b86e <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
9000b846:	687b      	ldr	r3, [r7, #4]
9000b848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000b84a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
9000b84c:	687b      	ldr	r3, [r7, #4]
9000b84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b850:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
9000b852:	6a3b      	ldr	r3, [r7, #32]
9000b854:	69fa      	ldr	r2, [r7, #28]
9000b856:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
9000b858:	69fb      	ldr	r3, [r7, #28]
9000b85a:	6a3a      	ldr	r2, [r7, #32]
9000b85c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
9000b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b862:	687a      	ldr	r2, [r7, #4]
9000b864:	429a      	cmp	r2, r3
9000b866:	d102      	bne.n	9000b86e <_tx_byte_pool_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
9000b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b86a:	6a3a      	ldr	r2, [r7, #32]
9000b86c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
9000b86e:	687b      	ldr	r3, [r7, #4]
9000b870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000b872:	2b09      	cmp	r3, #9
9000b874:	d116      	bne.n	9000b8a4 <_tx_byte_pool_cleanup+0xcc>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
9000b876:	687b      	ldr	r3, [r7, #4]
9000b878:	2210      	movs	r2, #16
9000b87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
9000b87e:	4b10      	ldr	r3, [pc, #64]	; (9000b8c0 <_tx_byte_pool_cleanup+0xe8>)
9000b880:	681b      	ldr	r3, [r3, #0]
9000b882:	3301      	adds	r3, #1
9000b884:	4a0e      	ldr	r2, [pc, #56]	; (9000b8c0 <_tx_byte_pool_cleanup+0xe8>)
9000b886:	6013      	str	r3, [r2, #0]
9000b888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b88a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000b88c:	693b      	ldr	r3, [r7, #16]
9000b88e:	f383 8810 	msr	PRIMASK, r3

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
9000b892:	6878      	ldr	r0, [r7, #4]
9000b894:	f000 fdde 	bl	9000c454 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000b898:	f3ef 8310 	mrs	r3, PRIMASK
9000b89c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000b89e:	b672      	cpsid	i
    return(primask_value);
9000b8a0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
9000b8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
9000b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b8a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000b8a8:	68fb      	ldr	r3, [r7, #12]
9000b8aa:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
9000b8ae:	bf00      	nop
9000b8b0:	3730      	adds	r7, #48	; 0x30
9000b8b2:	46bd      	mov	sp, r7
9000b8b4:	bd80      	pop	{r7, pc}
9000b8b6:	bf00      	nop
9000b8b8:	9000b7d9 	.word	0x9000b7d9
9000b8bc:	42595445 	.word	0x42595445
9000b8c0:	2401c868 	.word	0x2401c868

9000b8c4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
9000b8c4:	b580      	push	{r7, lr}
9000b8c6:	b094      	sub	sp, #80	; 0x50
9000b8c8:	af02      	add	r7, sp, #8
9000b8ca:	60f8      	str	r0, [r7, #12]
9000b8cc:	60b9      	str	r1, [r7, #8]
9000b8ce:	607a      	str	r2, [r7, #4]
9000b8d0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
9000b8d2:	2234      	movs	r2, #52	; 0x34
9000b8d4:	2100      	movs	r1, #0
9000b8d6:	68f8      	ldr	r0, [r7, #12]
9000b8d8:	f002 fb60 	bl	9000df9c <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
9000b8dc:	683b      	ldr	r3, [r7, #0]
9000b8de:	f023 0303 	bic.w	r3, r3, #3
9000b8e2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
9000b8e4:	68fb      	ldr	r3, [r7, #12]
9000b8e6:	68ba      	ldr	r2, [r7, #8]
9000b8e8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
9000b8ea:	68fb      	ldr	r3, [r7, #12]
9000b8ec:	687a      	ldr	r2, [r7, #4]
9000b8ee:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
9000b8f0:	68fb      	ldr	r3, [r7, #12]
9000b8f2:	683a      	ldr	r2, [r7, #0]
9000b8f4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
9000b8f6:	68fb      	ldr	r3, [r7, #12]
9000b8f8:	687a      	ldr	r2, [r7, #4]
9000b8fa:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
9000b8fc:	68fb      	ldr	r3, [r7, #12]
9000b8fe:	687a      	ldr	r2, [r7, #4]
9000b900:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
9000b902:	683b      	ldr	r3, [r7, #0]
9000b904:	f1a3 0208 	sub.w	r2, r3, #8
9000b908:	68fb      	ldr	r3, [r7, #12]
9000b90a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
9000b90c:	68fb      	ldr	r3, [r7, #12]
9000b90e:	2202      	movs	r2, #2
9000b910:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
9000b912:	687b      	ldr	r3, [r7, #4]
9000b914:	613b      	str	r3, [r7, #16]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
9000b916:	693a      	ldr	r2, [r7, #16]
9000b918:	683b      	ldr	r3, [r7, #0]
9000b91a:	4413      	add	r3, r2
9000b91c:	613b      	str	r3, [r7, #16]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
9000b91e:	693b      	ldr	r3, [r7, #16]
9000b920:	3b04      	subs	r3, #4
9000b922:	613b      	str	r3, [r7, #16]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
9000b924:	68fb      	ldr	r3, [r7, #12]
9000b926:	63fb      	str	r3, [r7, #60]	; 0x3c
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
9000b928:	693b      	ldr	r3, [r7, #16]
9000b92a:	63bb      	str	r3, [r7, #56]	; 0x38
    *block_indirect_ptr =  temp_ptr;
9000b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b92e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000b930:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
9000b932:	693b      	ldr	r3, [r7, #16]
9000b934:	3b04      	subs	r3, #4
9000b936:	613b      	str	r3, [r7, #16]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
9000b938:	693b      	ldr	r3, [r7, #16]
9000b93a:	63bb      	str	r3, [r7, #56]	; 0x38
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
9000b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b93e:	687a      	ldr	r2, [r7, #4]
9000b940:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
9000b942:	687b      	ldr	r3, [r7, #4]
9000b944:	63fb      	str	r3, [r7, #60]	; 0x3c
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
9000b946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b948:	63bb      	str	r3, [r7, #56]	; 0x38
    *block_indirect_ptr =  block_ptr;
9000b94a:	693a      	ldr	r2, [r7, #16]
9000b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b94e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
9000b950:	687b      	ldr	r3, [r7, #4]
9000b952:	613b      	str	r3, [r7, #16]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
9000b954:	693b      	ldr	r3, [r7, #16]
9000b956:	3304      	adds	r3, #4
9000b958:	613b      	str	r3, [r7, #16]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
9000b95a:	693b      	ldr	r3, [r7, #16]
9000b95c:	637b      	str	r3, [r7, #52]	; 0x34
    *free_ptr =            TX_BYTE_BLOCK_FREE;
9000b95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b960:	4a5b      	ldr	r2, [pc, #364]	; (9000bad0 <_tx_byte_pool_create+0x20c>)
9000b962:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
9000b964:	68fb      	ldr	r3, [r7, #12]
9000b966:	2200      	movs	r2, #0
9000b968:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000b96a:	f3ef 8310 	mrs	r3, PRIMASK
9000b96e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000b970:	b672      	cpsid	i
    return(primask_value);
9000b972:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
9000b974:	633b      	str	r3, [r7, #48]	; 0x30

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
9000b976:	68fb      	ldr	r3, [r7, #12]
9000b978:	4a56      	ldr	r2, [pc, #344]	; (9000bad4 <_tx_byte_pool_create+0x210>)
9000b97a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
9000b97c:	4b56      	ldr	r3, [pc, #344]	; (9000bad8 <_tx_byte_pool_create+0x214>)
9000b97e:	681b      	ldr	r3, [r3, #0]
9000b980:	2b00      	cmp	r3, #0
9000b982:	d109      	bne.n	9000b998 <_tx_byte_pool_create+0xd4>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
9000b984:	4a55      	ldr	r2, [pc, #340]	; (9000badc <_tx_byte_pool_create+0x218>)
9000b986:	68fb      	ldr	r3, [r7, #12]
9000b988:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
9000b98a:	68fb      	ldr	r3, [r7, #12]
9000b98c:	68fa      	ldr	r2, [r7, #12]
9000b98e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
9000b990:	68fb      	ldr	r3, [r7, #12]
9000b992:	68fa      	ldr	r2, [r7, #12]
9000b994:	631a      	str	r2, [r3, #48]	; 0x30
9000b996:	e011      	b.n	9000b9bc <_tx_byte_pool_create+0xf8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
9000b998:	4b50      	ldr	r3, [pc, #320]	; (9000badc <_tx_byte_pool_create+0x218>)
9000b99a:	681b      	ldr	r3, [r3, #0]
9000b99c:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
9000b99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000b9a2:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
9000b9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b9a6:	68fa      	ldr	r2, [r7, #12]
9000b9a8:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
9000b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b9ac:	68fa      	ldr	r2, [r7, #12]
9000b9ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
9000b9b0:	68fb      	ldr	r3, [r7, #12]
9000b9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000b9b4:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
9000b9b6:	68fb      	ldr	r3, [r7, #12]
9000b9b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b9ba:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
9000b9bc:	4b46      	ldr	r3, [pc, #280]	; (9000bad8 <_tx_byte_pool_create+0x214>)
9000b9be:	681b      	ldr	r3, [r3, #0]
9000b9c0:	3301      	adds	r3, #1
9000b9c2:	4a45      	ldr	r2, [pc, #276]	; (9000bad8 <_tx_byte_pool_create+0x214>)
9000b9c4:	6013      	str	r3, [r2, #0]
    
    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
9000b9c6:	2300      	movs	r3, #0
9000b9c8:	9300      	str	r3, [sp, #0]
9000b9ca:	683b      	ldr	r3, [r7, #0]
9000b9cc:	68ba      	ldr	r2, [r7, #8]
9000b9ce:	68f9      	ldr	r1, [r7, #12]
9000b9d0:	2008      	movs	r0, #8
9000b9d2:	f001 ffd3 	bl	9000d97c <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
9000b9d6:	4b42      	ldr	r3, [pc, #264]	; (9000bae0 <_tx_byte_pool_create+0x21c>)
9000b9d8:	681b      	ldr	r3, [r3, #0]
9000b9da:	627b      	str	r3, [r7, #36]	; 0x24
9000b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b9de:	2b00      	cmp	r3, #0
9000b9e0:	d06c      	beq.n	9000babc <_tx_byte_pool_create+0x1f8>
9000b9e2:	4b40      	ldr	r3, [pc, #256]	; (9000bae4 <_tx_byte_pool_create+0x220>)
9000b9e4:	681b      	ldr	r3, [r3, #0]
9000b9e6:	f003 0304 	and.w	r3, r3, #4
9000b9ea:	2b00      	cmp	r3, #0
9000b9ec:	d066      	beq.n	9000babc <_tx_byte_pool_create+0x1f8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000b9ee:	f3ef 8305 	mrs	r3, IPSR
9000b9f2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
9000b9f4:	69ba      	ldr	r2, [r7, #24]
9000b9f6:	4b3c      	ldr	r3, [pc, #240]	; (9000bae8 <_tx_byte_pool_create+0x224>)
9000b9f8:	681b      	ldr	r3, [r3, #0]
9000b9fa:	4313      	orrs	r3, r2
9000b9fc:	623b      	str	r3, [r7, #32]
9000b9fe:	4b3b      	ldr	r3, [pc, #236]	; (9000baec <_tx_byte_pool_create+0x228>)
9000ba00:	681b      	ldr	r3, [r3, #0]
9000ba02:	643b      	str	r3, [r7, #64]	; 0x40
9000ba04:	6a3b      	ldr	r3, [r7, #32]
9000ba06:	2b00      	cmp	r3, #0
9000ba08:	d10b      	bne.n	9000ba22 <_tx_byte_pool_create+0x15e>
9000ba0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ba0e:	647b      	str	r3, [r7, #68]	; 0x44
9000ba10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000ba12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000ba14:	041a      	lsls	r2, r3, #16
9000ba16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000ba18:	4313      	orrs	r3, r2
9000ba1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000ba1e:	647b      	str	r3, [r7, #68]	; 0x44
9000ba20:	e00e      	b.n	9000ba40 <_tx_byte_pool_create+0x17c>
9000ba22:	6a3b      	ldr	r3, [r7, #32]
9000ba24:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000ba28:	d205      	bcs.n	9000ba36 <_tx_byte_pool_create+0x172>
9000ba2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000ba2c:	647b      	str	r3, [r7, #68]	; 0x44
9000ba2e:	f04f 33ff 	mov.w	r3, #4294967295
9000ba32:	643b      	str	r3, [r7, #64]	; 0x40
9000ba34:	e004      	b.n	9000ba40 <_tx_byte_pool_create+0x17c>
9000ba36:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000ba3a:	643b      	str	r3, [r7, #64]	; 0x40
9000ba3c:	2300      	movs	r3, #0
9000ba3e:	647b      	str	r3, [r7, #68]	; 0x44
9000ba40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
9000ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba44:	601a      	str	r2, [r3, #0]
9000ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000ba4a:	605a      	str	r2, [r3, #4]
9000ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba4e:	2215      	movs	r2, #21
9000ba50:	609a      	str	r2, [r3, #8]
9000ba52:	4b27      	ldr	r3, [pc, #156]	; (9000baf0 <_tx_byte_pool_create+0x22c>)
9000ba54:	681a      	ldr	r2, [r3, #0]
9000ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba58:	60da      	str	r2, [r3, #12]
9000ba5a:	68fa      	ldr	r2, [r7, #12]
9000ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba5e:	611a      	str	r2, [r3, #16]
9000ba60:	687a      	ldr	r2, [r7, #4]
9000ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba64:	615a      	str	r2, [r3, #20]
9000ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba68:	683a      	ldr	r2, [r7, #0]
9000ba6a:	619a      	str	r2, [r3, #24]
9000ba6c:	f107 0210 	add.w	r2, r7, #16
9000ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba72:	61da      	str	r2, [r3, #28]
9000ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba76:	3320      	adds	r3, #32
9000ba78:	627b      	str	r3, [r7, #36]	; 0x24
9000ba7a:	4b1e      	ldr	r3, [pc, #120]	; (9000baf4 <_tx_byte_pool_create+0x230>)
9000ba7c:	681b      	ldr	r3, [r3, #0]
9000ba7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000ba80:	429a      	cmp	r2, r3
9000ba82:	d314      	bcc.n	9000baae <_tx_byte_pool_create+0x1ea>
9000ba84:	4b1c      	ldr	r3, [pc, #112]	; (9000baf8 <_tx_byte_pool_create+0x234>)
9000ba86:	681b      	ldr	r3, [r3, #0]
9000ba88:	627b      	str	r3, [r7, #36]	; 0x24
9000ba8a:	4a15      	ldr	r2, [pc, #84]	; (9000bae0 <_tx_byte_pool_create+0x21c>)
9000ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ba8e:	6013      	str	r3, [r2, #0]
9000ba90:	4b1a      	ldr	r3, [pc, #104]	; (9000bafc <_tx_byte_pool_create+0x238>)
9000ba92:	681b      	ldr	r3, [r3, #0]
9000ba94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000ba96:	621a      	str	r2, [r3, #32]
9000ba98:	4b19      	ldr	r3, [pc, #100]	; (9000bb00 <_tx_byte_pool_create+0x23c>)
9000ba9a:	681b      	ldr	r3, [r3, #0]
9000ba9c:	2b00      	cmp	r3, #0
9000ba9e:	d00d      	beq.n	9000babc <_tx_byte_pool_create+0x1f8>
9000baa0:	4b17      	ldr	r3, [pc, #92]	; (9000bb00 <_tx_byte_pool_create+0x23c>)
9000baa2:	681b      	ldr	r3, [r3, #0]
9000baa4:	4a15      	ldr	r2, [pc, #84]	; (9000bafc <_tx_byte_pool_create+0x238>)
9000baa6:	6812      	ldr	r2, [r2, #0]
9000baa8:	4610      	mov	r0, r2
9000baaa:	4798      	blx	r3
9000baac:	e006      	b.n	9000babc <_tx_byte_pool_create+0x1f8>
9000baae:	4a0c      	ldr	r2, [pc, #48]	; (9000bae0 <_tx_byte_pool_create+0x21c>)
9000bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bab2:	6013      	str	r3, [r2, #0]
9000bab4:	4b11      	ldr	r3, [pc, #68]	; (9000bafc <_tx_byte_pool_create+0x238>)
9000bab6:	681b      	ldr	r3, [r3, #0]
9000bab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000baba:	621a      	str	r2, [r3, #32]
9000babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000babe:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000bac0:	697b      	ldr	r3, [r7, #20]
9000bac2:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
9000bac6:	2300      	movs	r3, #0
}
9000bac8:	4618      	mov	r0, r3
9000baca:	3748      	adds	r7, #72	; 0x48
9000bacc:	46bd      	mov	sp, r7
9000bace:	bd80      	pop	{r7, pc}
9000bad0:	ffffeeee 	.word	0xffffeeee
9000bad4:	42595445 	.word	0x42595445
9000bad8:	2401c7cc 	.word	0x2401c7cc
9000badc:	2401c7b0 	.word	0x2401c7b0
9000bae0:	2401cdf4 	.word	0x2401cdf4
9000bae4:	2401ce00 	.word	0x2401ce00
9000bae8:	2400a010 	.word	0x2400a010
9000baec:	2401c86c 	.word	0x2401c86c
9000baf0:	e0001004 	.word	0xe0001004
9000baf4:	2401cdec 	.word	0x2401cdec
9000baf8:	2401ce08 	.word	0x2401ce08
9000bafc:	2401cdfc 	.word	0x2401cdfc
9000bb00:	2401cdf8 	.word	0x2401cdf8

9000bb04 <_tx_byte_pool_search>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
9000bb04:	b480      	push	{r7}
9000bb06:	b095      	sub	sp, #84	; 0x54
9000bb08:	af00      	add	r7, sp, #0
9000bb0a:	6078      	str	r0, [r7, #4]
9000bb0c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
9000bb0e:	2300      	movs	r3, #0
9000bb10:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000bb12:	f3ef 8310 	mrs	r3, PRIMASK
9000bb16:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000bb18:	b672      	cpsid	i
    return(primask_value);
9000bb1a:	6a3b      	ldr	r3, [r7, #32]
ALIGN_TYPE      *free_ptr;
UCHAR           *work_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
9000bb1c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    if (memory_size >= pool_ptr -> tx_byte_pool_available)
9000bb1e:	687b      	ldr	r3, [r7, #4]
9000bb20:	689b      	ldr	r3, [r3, #8]
9000bb22:	683a      	ldr	r2, [r7, #0]
9000bb24:	429a      	cmp	r2, r3
9000bb26:	d307      	bcc.n	9000bb38 <_tx_byte_pool_search+0x34>
9000bb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000bb2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000bb2c:	69fb      	ldr	r3, [r7, #28]
9000bb2e:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
9000bb32:	2300      	movs	r3, #0
9000bb34:	64bb      	str	r3, [r7, #72]	; 0x48
9000bb36:	e0d8      	b.n	9000bcea <_tx_byte_pool_search+0x1e6>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
9000bb38:	4b6f      	ldr	r3, [pc, #444]	; (9000bcf8 <_tx_byte_pool_search+0x1f4>)
9000bb3a:	681b      	ldr	r3, [r3, #0]
9000bb3c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
9000bb3e:	687b      	ldr	r3, [r7, #4]
9000bb40:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000bb42:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
9000bb44:	687b      	ldr	r3, [r7, #4]
9000bb46:	695b      	ldr	r3, [r3, #20]
9000bb48:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
9000bb4a:	687b      	ldr	r3, [r7, #4]
9000bb4c:	68db      	ldr	r3, [r3, #12]
9000bb4e:	3301      	adds	r3, #1
9000bb50:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
9000bb52:	2300      	movs	r3, #0
9000bb54:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
9000bb56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bb58:	3304      	adds	r3, #4
9000bb5a:	637b      	str	r3, [r7, #52]	; 0x34
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
9000bb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bb5e:	633b      	str	r3, [r7, #48]	; 0x30
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
9000bb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000bb62:	681b      	ldr	r3, [r3, #0]
9000bb64:	4a65      	ldr	r2, [pc, #404]	; (9000bcfc <_tx_byte_pool_search+0x1f8>)
9000bb66:	4293      	cmp	r3, r2
9000bb68:	d143      	bne.n	9000bbf2 <_tx_byte_pool_search+0xee>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
9000bb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000bb6c:	2b00      	cmp	r3, #0
9000bb6e:	d104      	bne.n	9000bb7a <_tx_byte_pool_search+0x76>
                {

                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
9000bb70:	687b      	ldr	r3, [r7, #4]
9000bb72:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000bb74:	615a      	str	r2, [r3, #20]
                
                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
9000bb76:	2301      	movs	r3, #1
9000bb78:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
9000bb7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_ptr =             *this_block_link_ptr;
9000bb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000bb80:	681b      	ldr	r3, [r3, #0]
9000bb82:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
9000bb84:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000bb86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bb88:	1ad3      	subs	r3, r2, r3
9000bb8a:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
9000bb8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000bb8e:	3b08      	subs	r3, #8
9000bb90:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
9000bb92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000bb94:	683b      	ldr	r3, [r7, #0]
9000bb96:	429a      	cmp	r2, r3
9000bb98:	d254      	bcs.n	9000bc44 <_tx_byte_pool_search+0x140>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
9000bb9a:	2300      	movs	r3, #0
9000bb9c:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is 
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
9000bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000bba0:	3304      	adds	r3, #4
9000bba2:	637b      	str	r3, [r7, #52]	; 0x34
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
9000bba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bba6:	633b      	str	r3, [r7, #48]	; 0x30
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
9000bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000bbaa:	681b      	ldr	r3, [r3, #0]
9000bbac:	4a53      	ldr	r2, [pc, #332]	; (9000bcfc <_tx_byte_pool_search+0x1f8>)
9000bbae:	4293      	cmp	r3, r2
9000bbb0:	d113      	bne.n	9000bbda <_tx_byte_pool_search+0xd6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
9000bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000bbb4:	627b      	str	r3, [r7, #36]	; 0x24
                        *this_block_link_ptr =  *next_block_link_ptr;
9000bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bbb8:	681a      	ldr	r2, [r3, #0]
9000bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000bbbc:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
9000bbbe:	687b      	ldr	r3, [r7, #4]
9000bbc0:	68db      	ldr	r3, [r3, #12]
9000bbc2:	1e5a      	subs	r2, r3, #1
9000bbc4:	687b      	ldr	r3, [r7, #4]
9000bbc6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
9000bbc8:	687b      	ldr	r3, [r7, #4]
9000bbca:	695b      	ldr	r3, [r3, #20]
9000bbcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000bbce:	429a      	cmp	r2, r3
9000bbd0:	d114      	bne.n	9000bbfc <_tx_byte_pool_search+0xf8>
                        {
                    
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
9000bbd2:	687b      	ldr	r3, [r7, #4]
9000bbd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000bbd6:	615a      	str	r2, [r3, #20]
9000bbd8:	e010      	b.n	9000bbfc <_tx_byte_pool_search+0xf8>
                    }
                    else
                    {

                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
9000bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000bbdc:	627b      	str	r3, [r7, #36]	; 0x24
                        current_ptr =  *next_block_link_ptr;
9000bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bbe0:	681b      	ldr	r3, [r3, #0]
9000bbe2:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
9000bbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000bbe6:	2b00      	cmp	r3, #0
9000bbe8:	d008      	beq.n	9000bbfc <_tx_byte_pool_search+0xf8>
                        {

                            examine_blocks--;
9000bbea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000bbec:	3b01      	subs	r3, #1
9000bbee:	643b      	str	r3, [r7, #64]	; 0x40
9000bbf0:	e004      	b.n	9000bbfc <_tx_byte_pool_search+0xf8>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
9000bbf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
                current_ptr =  *this_block_link_ptr;
9000bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000bbf8:	681b      	ldr	r3, [r3, #0]
9000bbfa:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
9000bbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000bbfe:	2b00      	cmp	r3, #0
9000bc00:	d002      	beq.n	9000bc08 <_tx_byte_pool_search+0x104>
            {

                examine_blocks--;
9000bc02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000bc04:	3b01      	subs	r3, #1
9000bc06:	643b      	str	r3, [r7, #64]	; 0x40
9000bc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000bc0a:	617b      	str	r3, [r7, #20]
9000bc0c:	697b      	ldr	r3, [r7, #20]
9000bc0e:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000bc12:	f3ef 8310 	mrs	r3, PRIMASK
9000bc16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000bc18:	b672      	cpsid	i
    return(primask_value);
9000bc1a:	69bb      	ldr	r3, [r7, #24]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
9000bc1c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
9000bc1e:	687b      	ldr	r3, [r7, #4]
9000bc20:	6a1b      	ldr	r3, [r3, #32]
9000bc22:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000bc24:	429a      	cmp	r2, r3
9000bc26:	d009      	beq.n	9000bc3c <_tx_byte_pool_search+0x138>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
9000bc28:	687b      	ldr	r3, [r7, #4]
9000bc2a:	695b      	ldr	r3, [r3, #20]
9000bc2c:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
9000bc2e:	687b      	ldr	r3, [r7, #4]
9000bc30:	68db      	ldr	r3, [r3, #12]
9000bc32:	3301      	adds	r3, #1
9000bc34:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
9000bc36:	687b      	ldr	r3, [r7, #4]
9000bc38:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000bc3a:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
9000bc3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000bc3e:	2b00      	cmp	r3, #0
9000bc40:	d189      	bne.n	9000bb56 <_tx_byte_pool_search+0x52>
9000bc42:	e000      	b.n	9000bc46 <_tx_byte_pool_search+0x142>
                    break;
9000bc44:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
9000bc46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000bc48:	2b00      	cmp	r3, #0
9000bc4a:	d047      	beq.n	9000bcdc <_tx_byte_pool_search+0x1d8>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
9000bc4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000bc4e:	683b      	ldr	r3, [r7, #0]
9000bc50:	1ad3      	subs	r3, r2, r3
9000bc52:	2b13      	cmp	r3, #19
9000bc54:	d91e      	bls.n	9000bc94 <_tx_byte_pool_search+0x190>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
9000bc56:	683b      	ldr	r3, [r7, #0]
9000bc58:	3308      	adds	r3, #8
9000bc5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000bc5c:	4413      	add	r3, r2
9000bc5e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
9000bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000bc62:	627b      	str	r3, [r7, #36]	; 0x24
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
9000bc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
                *next_block_link_ptr =  *this_block_link_ptr;
9000bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000bc6a:	681a      	ldr	r2, [r3, #0]
9000bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bc6e:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
9000bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000bc72:	3304      	adds	r3, #4
9000bc74:	637b      	str	r3, [r7, #52]	; 0x34
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
9000bc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bc78:	633b      	str	r3, [r7, #48]	; 0x30
                *free_ptr =             TX_BYTE_BLOCK_FREE;
9000bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000bc7c:	4a1f      	ldr	r2, [pc, #124]	; (9000bcfc <_tx_byte_pool_search+0x1f8>)
9000bc7e:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
9000bc80:	687b      	ldr	r3, [r7, #4]
9000bc82:	68db      	ldr	r3, [r3, #12]
9000bc84:	1c5a      	adds	r2, r3, #1
9000bc86:	687b      	ldr	r3, [r7, #4]
9000bc88:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
9000bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000bc8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000bc8e:	601a      	str	r2, [r3, #0]
    
                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
9000bc90:	683b      	ldr	r3, [r7, #0]
9000bc92:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
9000bc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bc96:	3304      	adds	r3, #4
9000bc98:	637b      	str	r3, [r7, #52]	; 0x34
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
9000bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
9000bc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000bca0:	687a      	ldr	r2, [r7, #4]
9000bca2:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
9000bca4:	687b      	ldr	r3, [r7, #4]
9000bca6:	689a      	ldr	r2, [r3, #8]
9000bca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000bcaa:	1ad3      	subs	r3, r2, r3
9000bcac:	f1a3 0208 	sub.w	r2, r3, #8
9000bcb0:	687b      	ldr	r3, [r7, #4]
9000bcb2:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
9000bcb4:	687b      	ldr	r3, [r7, #4]
9000bcb6:	695b      	ldr	r3, [r3, #20]
9000bcb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000bcba:	429a      	cmp	r2, r3
9000bcbc:	d105      	bne.n	9000bcca <_tx_byte_pool_search+0x1c6>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
9000bcbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bcc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
9000bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000bcc4:	681a      	ldr	r2, [r3, #0]
9000bcc6:	687b      	ldr	r3, [r7, #4]
9000bcc8:	615a      	str	r2, [r3, #20]
9000bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000bccc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000bcce:	693b      	ldr	r3, [r7, #16]
9000bcd0:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
9000bcd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bcd6:	3308      	adds	r3, #8
9000bcd8:	64bb      	str	r3, [r7, #72]	; 0x48
9000bcda:	e006      	b.n	9000bcea <_tx_byte_pool_search+0x1e6>
9000bcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000bcde:	60fb      	str	r3, [r7, #12]
9000bce0:	68fb      	ldr	r3, [r7, #12]
9000bce2:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
9000bce6:	2300      	movs	r3, #0
9000bce8:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
9000bcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
9000bcec:	4618      	mov	r0, r3
9000bcee:	3754      	adds	r7, #84	; 0x54
9000bcf0:	46bd      	mov	sp, r7
9000bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcf6:	4770      	bx	lr
9000bcf8:	2401c86c 	.word	0x2401c86c
9000bcfc:	ffffeeee 	.word	0xffffeeee

9000bd00 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
9000bd00:	b580      	push	{r7, lr}
9000bd02:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
9000bd04:	f001 fe14 	bl	9000d930 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
9000bd08:	f000 f9d8 	bl	9000c0bc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
9000bd0c:	f001 f8e8 	bl	9000cee0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
9000bd10:	4b12      	ldr	r3, [pc, #72]	; (9000bd5c <_tx_initialize_high_level+0x5c>)
9000bd12:	2200      	movs	r2, #0
9000bd14:	601a      	str	r2, [r3, #0]
9000bd16:	4b12      	ldr	r3, [pc, #72]	; (9000bd60 <_tx_initialize_high_level+0x60>)
9000bd18:	2200      	movs	r2, #0
9000bd1a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
9000bd1c:	4b11      	ldr	r3, [pc, #68]	; (9000bd64 <_tx_initialize_high_level+0x64>)
9000bd1e:	2200      	movs	r2, #0
9000bd20:	601a      	str	r2, [r3, #0]
9000bd22:	4b11      	ldr	r3, [pc, #68]	; (9000bd68 <_tx_initialize_high_level+0x68>)
9000bd24:	2200      	movs	r2, #0
9000bd26:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
9000bd28:	4b10      	ldr	r3, [pc, #64]	; (9000bd6c <_tx_initialize_high_level+0x6c>)
9000bd2a:	2200      	movs	r2, #0
9000bd2c:	601a      	str	r2, [r3, #0]
9000bd2e:	4b10      	ldr	r3, [pc, #64]	; (9000bd70 <_tx_initialize_high_level+0x70>)
9000bd30:	2200      	movs	r2, #0
9000bd32:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
9000bd34:	4b0f      	ldr	r3, [pc, #60]	; (9000bd74 <_tx_initialize_high_level+0x74>)
9000bd36:	2200      	movs	r2, #0
9000bd38:	601a      	str	r2, [r3, #0]
9000bd3a:	4b0f      	ldr	r3, [pc, #60]	; (9000bd78 <_tx_initialize_high_level+0x78>)
9000bd3c:	2200      	movs	r2, #0
9000bd3e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
9000bd40:	4b0e      	ldr	r3, [pc, #56]	; (9000bd7c <_tx_initialize_high_level+0x7c>)
9000bd42:	2200      	movs	r2, #0
9000bd44:	601a      	str	r2, [r3, #0]
9000bd46:	4b0e      	ldr	r3, [pc, #56]	; (9000bd80 <_tx_initialize_high_level+0x80>)
9000bd48:	2200      	movs	r2, #0
9000bd4a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
9000bd4c:	4b0d      	ldr	r3, [pc, #52]	; (9000bd84 <_tx_initialize_high_level+0x84>)
9000bd4e:	2200      	movs	r2, #0
9000bd50:	601a      	str	r2, [r3, #0]
9000bd52:	4b0d      	ldr	r3, [pc, #52]	; (9000bd88 <_tx_initialize_high_level+0x88>)
9000bd54:	2200      	movs	r2, #0
9000bd56:	601a      	str	r2, [r3, #0]
#endif
}
9000bd58:	bf00      	nop
9000bd5a:	bd80      	pop	{r7, pc}
9000bd5c:	2401c7ac 	.word	0x2401c7ac
9000bd60:	2401c7bc 	.word	0x2401c7bc
9000bd64:	2401c7c8 	.word	0x2401c7c8
9000bd68:	2401c7a8 	.word	0x2401c7a8
9000bd6c:	2401c79c 	.word	0x2401c79c
9000bd70:	2401c7c0 	.word	0x2401c7c0
9000bd74:	2401c7c4 	.word	0x2401c7c4
9000bd78:	2401c7b8 	.word	0x2401c7b8
9000bd7c:	2401c7b0 	.word	0x2401c7b0
9000bd80:	2401c7cc 	.word	0x2401c7cc
9000bd84:	2401c7a4 	.word	0x2401c7a4
9000bd88:	2401c7a0 	.word	0x2401c7a0

9000bd8c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
9000bd8c:	b580      	push	{r7, lr}
9000bd8e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
9000bd90:	4b10      	ldr	r3, [pc, #64]	; (9000bdd4 <_tx_initialize_kernel_enter+0x48>)
9000bd92:	681b      	ldr	r3, [r3, #0]
9000bd94:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
9000bd98:	d00c      	beq.n	9000bdb4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
9000bd9a:	4b0e      	ldr	r3, [pc, #56]	; (9000bdd4 <_tx_initialize_kernel_enter+0x48>)
9000bd9c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
9000bda0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
9000bda2:	f7f4 fa9d 	bl	900002e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
9000bda6:	f7ff ffab 	bl	9000bd00 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
9000bdaa:	4b0b      	ldr	r3, [pc, #44]	; (9000bdd8 <_tx_initialize_kernel_enter+0x4c>)
9000bdac:	681b      	ldr	r3, [r3, #0]
9000bdae:	3301      	adds	r3, #1
9000bdb0:	4a09      	ldr	r2, [pc, #36]	; (9000bdd8 <_tx_initialize_kernel_enter+0x4c>)
9000bdb2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
9000bdb4:	4b07      	ldr	r3, [pc, #28]	; (9000bdd4 <_tx_initialize_kernel_enter+0x48>)
9000bdb6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
9000bdba:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
9000bdbc:	4b07      	ldr	r3, [pc, #28]	; (9000bddc <_tx_initialize_kernel_enter+0x50>)
9000bdbe:	681b      	ldr	r3, [r3, #0]
9000bdc0:	4618      	mov	r0, r3
9000bdc2:	f7f4 fd8d 	bl	900008e0 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
9000bdc6:	4b03      	ldr	r3, [pc, #12]	; (9000bdd4 <_tx_initialize_kernel_enter+0x48>)
9000bdc8:	2200      	movs	r2, #0
9000bdca:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
9000bdcc:	f7f4 fad8 	bl	90000380 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
9000bdd0:	bf00      	nop
9000bdd2:	bd80      	pop	{r7, pc}
9000bdd4:	2400a010 	.word	0x2400a010
9000bdd8:	2401c868 	.word	0x2401c868
9000bddc:	2401c7b4 	.word	0x2401c7b4

9000bde0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
9000bde0:	b580      	push	{r7, lr}
9000bde2:	b098      	sub	sp, #96	; 0x60
9000bde4:	af02      	add	r7, sp, #8
9000bde6:	60f8      	str	r0, [r7, #12]
9000bde8:	60b9      	str	r1, [r7, #8]
9000bdea:	607a      	str	r2, [r7, #4]
9000bdec:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
9000bdee:	2300      	movs	r3, #0
9000bdf0:	653b      	str	r3, [r7, #80]	; 0x50
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
9000bdf2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000bdf4:	21ef      	movs	r1, #239	; 0xef
9000bdf6:	6e38      	ldr	r0, [r7, #96]	; 0x60
9000bdf8:	f002 f8d0 	bl	9000df9c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
9000bdfc:	22b4      	movs	r2, #180	; 0xb4
9000bdfe:	2100      	movs	r1, #0
9000be00:	68f8      	ldr	r0, [r7, #12]
9000be02:	f002 f8cb 	bl	9000df9c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
9000be06:	68fb      	ldr	r3, [r7, #12]
9000be08:	68ba      	ldr	r2, [r7, #8]
9000be0a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
9000be0c:	68fb      	ldr	r3, [r7, #12]
9000be0e:	687a      	ldr	r2, [r7, #4]
9000be10:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
9000be12:	68fb      	ldr	r3, [r7, #12]
9000be14:	683a      	ldr	r2, [r7, #0]
9000be16:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
9000be18:	68fb      	ldr	r3, [r7, #12]
9000be1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
9000be1c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
9000be1e:	68fb      	ldr	r3, [r7, #12]
9000be20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000be22:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
9000be24:	68fb      	ldr	r3, [r7, #12]
9000be26:	6eba      	ldr	r2, [r7, #104]	; 0x68
9000be28:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
9000be2a:	68fb      	ldr	r3, [r7, #12]
9000be2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
9000be2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
9000be32:	68fb      	ldr	r3, [r7, #12]
9000be34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
9000be36:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
9000be38:	68fb      	ldr	r3, [r7, #12]
9000be3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
9000be3c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
9000be3e:	68fb      	ldr	r3, [r7, #12]
9000be40:	2220      	movs	r2, #32
9000be42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
9000be46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000be48:	647b      	str	r3, [r7, #68]	; 0x44
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
9000be4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000be4c:	3b01      	subs	r3, #1
9000be4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000be50:	4413      	add	r3, r2
9000be52:	647b      	str	r3, [r7, #68]	; 0x44
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
9000be54:	68fb      	ldr	r3, [r7, #12]
9000be56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000be58:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
9000be5a:	68fb      	ldr	r3, [r7, #12]
9000be5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
9000be5e:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
9000be60:	68fb      	ldr	r3, [r7, #12]
9000be62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
9000be64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
9000be68:	68fb      	ldr	r3, [r7, #12]
9000be6a:	2203      	movs	r2, #3
9000be6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
9000be6e:	68fb      	ldr	r3, [r7, #12]
9000be70:	4a82      	ldr	r2, [pc, #520]	; (9000c07c <_tx_thread_create+0x29c>)
9000be72:	655a      	str	r2, [r3, #84]	; 0x54
9000be74:	68fa      	ldr	r2, [r7, #12]
9000be76:	68fb      	ldr	r3, [r7, #12]
9000be78:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
9000be7a:	4981      	ldr	r1, [pc, #516]	; (9000c080 <_tx_thread_create+0x2a0>)
9000be7c:	68f8      	ldr	r0, [r7, #12]
9000be7e:	f7f4 facf 	bl	90000420 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000be82:	f3ef 8310 	mrs	r3, PRIMASK
9000be86:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
9000be88:	b672      	cpsid	i
    return(primask_value);
9000be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
9000be8c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
9000be8e:	68fb      	ldr	r3, [r7, #12]
9000be90:	4a7c      	ldr	r2, [pc, #496]	; (9000c084 <_tx_thread_create+0x2a4>)
9000be92:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
9000be94:	4b7c      	ldr	r3, [pc, #496]	; (9000c088 <_tx_thread_create+0x2a8>)
9000be96:	681b      	ldr	r3, [r3, #0]
9000be98:	2b00      	cmp	r3, #0
9000be9a:	d10b      	bne.n	9000beb4 <_tx_thread_create+0xd4>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
9000be9c:	4a7b      	ldr	r2, [pc, #492]	; (9000c08c <_tx_thread_create+0x2ac>)
9000be9e:	68fb      	ldr	r3, [r7, #12]
9000bea0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
9000bea2:	68fb      	ldr	r3, [r7, #12]
9000bea4:	68fa      	ldr	r2, [r7, #12]
9000bea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
9000beaa:	68fb      	ldr	r3, [r7, #12]
9000beac:	68fa      	ldr	r2, [r7, #12]
9000beae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
9000beb2:	e016      	b.n	9000bee2 <_tx_thread_create+0x102>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
9000beb4:	4b75      	ldr	r3, [pc, #468]	; (9000c08c <_tx_thread_create+0x2ac>)
9000beb6:	681b      	ldr	r3, [r3, #0]
9000beb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        previous_thread =  next_thread -> tx_thread_created_previous;
9000beba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000bebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000bec0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
9000bec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000bec4:	68fa      	ldr	r2, [r7, #12]
9000bec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
9000beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000becc:	68fa      	ldr	r2, [r7, #12]
9000bece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
9000bed2:	68fb      	ldr	r3, [r7, #12]
9000bed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000bed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
9000beda:	68fb      	ldr	r3, [r7, #12]
9000bedc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000bede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
9000bee2:	4b69      	ldr	r3, [pc, #420]	; (9000c088 <_tx_thread_create+0x2a8>)
9000bee4:	681b      	ldr	r3, [r3, #0]
9000bee6:	3301      	adds	r3, #1
9000bee8:	4a67      	ldr	r2, [pc, #412]	; (9000c088 <_tx_thread_create+0x2a8>)
9000beea:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
9000beec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
9000beee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000bef0:	9300      	str	r3, [sp, #0]
9000bef2:	4613      	mov	r3, r2
9000bef4:	68ba      	ldr	r2, [r7, #8]
9000bef6:	68f9      	ldr	r1, [r7, #12]
9000bef8:	2001      	movs	r0, #1
9000befa:	f001 fd3f 	bl	9000d97c <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
9000befe:	4b64      	ldr	r3, [pc, #400]	; (9000c090 <_tx_thread_create+0x2b0>)
9000bf00:	681b      	ldr	r3, [r3, #0]
9000bf02:	637b      	str	r3, [r7, #52]	; 0x34
9000bf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf06:	2b00      	cmp	r3, #0
9000bf08:	d06b      	beq.n	9000bfe2 <_tx_thread_create+0x202>
9000bf0a:	4b62      	ldr	r3, [pc, #392]	; (9000c094 <_tx_thread_create+0x2b4>)
9000bf0c:	681b      	ldr	r3, [r3, #0]
9000bf0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000bf12:	2b00      	cmp	r3, #0
9000bf14:	d065      	beq.n	9000bfe2 <_tx_thread_create+0x202>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000bf16:	f3ef 8305 	mrs	r3, IPSR
9000bf1a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
9000bf1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000bf1e:	4b5e      	ldr	r3, [pc, #376]	; (9000c098 <_tx_thread_create+0x2b8>)
9000bf20:	681b      	ldr	r3, [r3, #0]
9000bf22:	4313      	orrs	r3, r2
9000bf24:	633b      	str	r3, [r7, #48]	; 0x30
9000bf26:	4b5d      	ldr	r3, [pc, #372]	; (9000c09c <_tx_thread_create+0x2bc>)
9000bf28:	681b      	ldr	r3, [r3, #0]
9000bf2a:	64bb      	str	r3, [r7, #72]	; 0x48
9000bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000bf2e:	2b00      	cmp	r3, #0
9000bf30:	d10b      	bne.n	9000bf4a <_tx_thread_create+0x16a>
9000bf32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000bf36:	64fb      	str	r3, [r7, #76]	; 0x4c
9000bf38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bf3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000bf3c:	041a      	lsls	r2, r3, #16
9000bf3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000bf40:	4313      	orrs	r3, r2
9000bf42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000bf46:	64fb      	str	r3, [r7, #76]	; 0x4c
9000bf48:	e00e      	b.n	9000bf68 <_tx_thread_create+0x188>
9000bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000bf4c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000bf50:	d205      	bcs.n	9000bf5e <_tx_thread_create+0x17e>
9000bf52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000bf54:	64fb      	str	r3, [r7, #76]	; 0x4c
9000bf56:	f04f 33ff 	mov.w	r3, #4294967295
9000bf5a:	64bb      	str	r3, [r7, #72]	; 0x48
9000bf5c:	e004      	b.n	9000bf68 <_tx_thread_create+0x188>
9000bf5e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000bf62:	64bb      	str	r3, [r7, #72]	; 0x48
9000bf64:	2300      	movs	r3, #0
9000bf66:	64fb      	str	r3, [r7, #76]	; 0x4c
9000bf68:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000bf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf6c:	601a      	str	r2, [r3, #0]
9000bf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000bf72:	605a      	str	r2, [r3, #4]
9000bf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf76:	2264      	movs	r2, #100	; 0x64
9000bf78:	609a      	str	r2, [r3, #8]
9000bf7a:	4b49      	ldr	r3, [pc, #292]	; (9000c0a0 <_tx_thread_create+0x2c0>)
9000bf7c:	681a      	ldr	r2, [r3, #0]
9000bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf80:	60da      	str	r2, [r3, #12]
9000bf82:	68fa      	ldr	r2, [r7, #12]
9000bf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf86:	611a      	str	r2, [r3, #16]
9000bf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
9000bf8c:	615a      	str	r2, [r3, #20]
9000bf8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
9000bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf92:	619a      	str	r2, [r3, #24]
9000bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000bf98:	61da      	str	r2, [r3, #28]
9000bf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bf9c:	3320      	adds	r3, #32
9000bf9e:	637b      	str	r3, [r7, #52]	; 0x34
9000bfa0:	4b40      	ldr	r3, [pc, #256]	; (9000c0a4 <_tx_thread_create+0x2c4>)
9000bfa2:	681b      	ldr	r3, [r3, #0]
9000bfa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000bfa6:	429a      	cmp	r2, r3
9000bfa8:	d314      	bcc.n	9000bfd4 <_tx_thread_create+0x1f4>
9000bfaa:	4b3f      	ldr	r3, [pc, #252]	; (9000c0a8 <_tx_thread_create+0x2c8>)
9000bfac:	681b      	ldr	r3, [r3, #0]
9000bfae:	637b      	str	r3, [r7, #52]	; 0x34
9000bfb0:	4a37      	ldr	r2, [pc, #220]	; (9000c090 <_tx_thread_create+0x2b0>)
9000bfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bfb4:	6013      	str	r3, [r2, #0]
9000bfb6:	4b3d      	ldr	r3, [pc, #244]	; (9000c0ac <_tx_thread_create+0x2cc>)
9000bfb8:	681b      	ldr	r3, [r3, #0]
9000bfba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000bfbc:	621a      	str	r2, [r3, #32]
9000bfbe:	4b3c      	ldr	r3, [pc, #240]	; (9000c0b0 <_tx_thread_create+0x2d0>)
9000bfc0:	681b      	ldr	r3, [r3, #0]
9000bfc2:	2b00      	cmp	r3, #0
9000bfc4:	d00d      	beq.n	9000bfe2 <_tx_thread_create+0x202>
9000bfc6:	4b3a      	ldr	r3, [pc, #232]	; (9000c0b0 <_tx_thread_create+0x2d0>)
9000bfc8:	681b      	ldr	r3, [r3, #0]
9000bfca:	4a38      	ldr	r2, [pc, #224]	; (9000c0ac <_tx_thread_create+0x2cc>)
9000bfcc:	6812      	ldr	r2, [r2, #0]
9000bfce:	4610      	mov	r0, r2
9000bfd0:	4798      	blx	r3
9000bfd2:	e006      	b.n	9000bfe2 <_tx_thread_create+0x202>
9000bfd4:	4a2e      	ldr	r2, [pc, #184]	; (9000c090 <_tx_thread_create+0x2b0>)
9000bfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000bfd8:	6013      	str	r3, [r2, #0]
9000bfda:	4b34      	ldr	r3, [pc, #208]	; (9000c0ac <_tx_thread_create+0x2cc>)
9000bfdc:	681b      	ldr	r3, [r3, #0]
9000bfde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000bfe0:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
9000bfe2:	4b34      	ldr	r3, [pc, #208]	; (9000c0b4 <_tx_thread_create+0x2d4>)
9000bfe4:	681b      	ldr	r3, [r3, #0]
9000bfe6:	3301      	adds	r3, #1
9000bfe8:	4a32      	ldr	r2, [pc, #200]	; (9000c0b4 <_tx_thread_create+0x2d4>)
9000bfea:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
9000bfec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
9000bfee:	2b01      	cmp	r3, #1
9000bff0:	d128      	bne.n	9000c044 <_tx_thread_create+0x264>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000bff2:	f3ef 8305 	mrs	r3, IPSR
9000bff6:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
9000bff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
9000bffa:	4b27      	ldr	r3, [pc, #156]	; (9000c098 <_tx_thread_create+0x2b8>)
9000bffc:	681b      	ldr	r3, [r3, #0]
9000bffe:	4313      	orrs	r3, r2
9000c000:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000c004:	d30d      	bcc.n	9000c022 <_tx_thread_create+0x242>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
9000c006:	4b2c      	ldr	r3, [pc, #176]	; (9000c0b8 <_tx_thread_create+0x2d8>)
9000c008:	681b      	ldr	r3, [r3, #0]
9000c00a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
9000c00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c00e:	2b00      	cmp	r3, #0
9000c010:	d009      	beq.n	9000c026 <_tx_thread_create+0x246>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
9000c012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000c016:	653b      	str	r3, [r7, #80]	; 0x50

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
9000c018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000c01c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c01e:	63da      	str	r2, [r3, #60]	; 0x3c
9000c020:	e001      	b.n	9000c026 <_tx_thread_create+0x246>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
9000c022:	2300      	movs	r3, #0
9000c024:	657b      	str	r3, [r7, #84]	; 0x54
9000c026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c028:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c02a:	6a3b      	ldr	r3, [r7, #32]
9000c02c:	f383 8810 	msr	PRIMASK, r3

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
9000c030:	68f8      	ldr	r0, [r7, #12]
9000c032:	f000 fa0f 	bl	9000c454 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
9000c036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c038:	2b00      	cmp	r3, #0
9000c03a:	d01a      	beq.n	9000c072 <_tx_thread_create+0x292>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
9000c03c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c03e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000c040:	63da      	str	r2, [r3, #60]	; 0x3c
9000c042:	e016      	b.n	9000c072 <_tx_thread_create+0x292>
9000c044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c046:	617b      	str	r3, [r7, #20]
9000c048:	697b      	ldr	r3, [r7, #20]
9000c04a:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c04e:	f3ef 8310 	mrs	r3, PRIMASK
9000c052:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000c054:	b672      	cpsid	i
    return(primask_value);
9000c056:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
9000c058:	643b      	str	r3, [r7, #64]	; 0x40

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
9000c05a:	4b16      	ldr	r3, [pc, #88]	; (9000c0b4 <_tx_thread_create+0x2d4>)
9000c05c:	681b      	ldr	r3, [r3, #0]
9000c05e:	3b01      	subs	r3, #1
9000c060:	4a14      	ldr	r2, [pc, #80]	; (9000c0b4 <_tx_thread_create+0x2d4>)
9000c062:	6013      	str	r3, [r2, #0]
9000c064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c066:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c068:	69fb      	ldr	r3, [r7, #28]
9000c06a:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
9000c06e:	f000 f9bb 	bl	9000c3e8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
9000c072:	2300      	movs	r3, #0
}
9000c074:	4618      	mov	r0, r3
9000c076:	3758      	adds	r7, #88	; 0x58
9000c078:	46bd      	mov	sp, r7
9000c07a:	bd80      	pop	{r7, pc}
9000c07c:	9000ce35 	.word	0x9000ce35
9000c080:	9000c13d 	.word	0x9000c13d
9000c084:	54485244 	.word	0x54485244
9000c088:	2401c860 	.word	0x2401c860
9000c08c:	2401c858 	.word	0x2401c858
9000c090:	2401cdf4 	.word	0x2401cdf4
9000c094:	2401ce00 	.word	0x2401ce00
9000c098:	2400a010 	.word	0x2400a010
9000c09c:	2401c86c 	.word	0x2401c86c
9000c0a0:	e0001004 	.word	0xe0001004
9000c0a4:	2401cdec 	.word	0x2401cdec
9000c0a8:	2401ce08 	.word	0x2401ce08
9000c0ac:	2401cdfc 	.word	0x2401cdfc
9000c0b0:	2401cdf8 	.word	0x2401cdf8
9000c0b4:	2401c868 	.word	0x2401c868
9000c0b8:	2401c870 	.word	0x2401c870

9000c0bc <_tx_thread_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
9000c0bc:	b580      	push	{r7, lr}
9000c0be:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
9000c0c0:	4b13      	ldr	r3, [pc, #76]	; (9000c110 <_tx_thread_initialize+0x54>)
9000c0c2:	2200      	movs	r2, #0
9000c0c4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
9000c0c6:	4b13      	ldr	r3, [pc, #76]	; (9000c114 <_tx_thread_initialize+0x58>)
9000c0c8:	2200      	movs	r2, #0
9000c0ca:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
9000c0cc:	4b12      	ldr	r3, [pc, #72]	; (9000c118 <_tx_thread_initialize+0x5c>)
9000c0ce:	2200      	movs	r2, #0
9000c0d0:	601a      	str	r2, [r3, #0]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
9000c0d2:	4b12      	ldr	r3, [pc, #72]	; (9000c11c <_tx_thread_initialize+0x60>)
9000c0d4:	2200      	movs	r2, #0
9000c0d6:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
9000c0d8:	4b11      	ldr	r3, [pc, #68]	; (9000c120 <_tx_thread_initialize+0x64>)
9000c0da:	2220      	movs	r2, #32
9000c0dc:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
9000c0de:	2280      	movs	r2, #128	; 0x80
9000c0e0:	2100      	movs	r1, #0
9000c0e2:	4810      	ldr	r0, [pc, #64]	; (9000c124 <_tx_thread_initialize+0x68>)
9000c0e4:	f001 ff5a 	bl	9000df9c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
9000c0e8:	4b0f      	ldr	r3, [pc, #60]	; (9000c128 <_tx_thread_initialize+0x6c>)
9000c0ea:	2200      	movs	r2, #0
9000c0ec:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
9000c0ee:	4b0f      	ldr	r3, [pc, #60]	; (9000c12c <_tx_thread_initialize+0x70>)
9000c0f0:	2200      	movs	r2, #0
9000c0f2:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
9000c0f4:	4b0e      	ldr	r3, [pc, #56]	; (9000c130 <_tx_thread_initialize+0x74>)
9000c0f6:	2200      	movs	r2, #0
9000c0f8:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
9000c0fa:	4b0e      	ldr	r3, [pc, #56]	; (9000c134 <_tx_thread_initialize+0x78>)
9000c0fc:	2200      	movs	r2, #0
9000c0fe:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
9000c100:	4b0d      	ldr	r3, [pc, #52]	; (9000c138 <_tx_thread_initialize+0x7c>)
9000c102:	681b      	ldr	r3, [r3, #0]
9000c104:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
    _tx_build_options =  _tx_build_options 
9000c108:	4a0b      	ldr	r2, [pc, #44]	; (9000c138 <_tx_thread_initialize+0x7c>)
9000c10a:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
9000c10c:	bf00      	nop
9000c10e:	bd80      	pop	{r7, pc}
9000c110:	2401c86c 	.word	0x2401c86c
9000c114:	2401c870 	.word	0x2401c870
9000c118:	2401c854 	.word	0x2401c854
9000c11c:	2401c878 	.word	0x2401c878
9000c120:	2401c874 	.word	0x2401c874
9000c124:	2401c7d0 	.word	0x2401c7d0
9000c128:	2401c858 	.word	0x2401c858
9000c12c:	2401c860 	.word	0x2401c860
9000c130:	2401c868 	.word	0x2401c868
9000c134:	2401c850 	.word	0x2401c850
9000c138:	2401c85c 	.word	0x2401c85c

9000c13c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
9000c13c:	b580      	push	{r7, lr}
9000c13e:	b088      	sub	sp, #32
9000c140:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
9000c142:	4b29      	ldr	r3, [pc, #164]	; (9000c1e8 <_tx_thread_shell_entry+0xac>)
9000c144:	681b      	ldr	r3, [r3, #0]
9000c146:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c148:	f3ef 8310 	mrs	r3, PRIMASK
9000c14c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000c14e:	b672      	cpsid	i
    return(primask_value);
9000c150:	68fb      	ldr	r3, [r7, #12]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
9000c152:	61bb      	str	r3, [r7, #24]

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
9000c154:	69fb      	ldr	r3, [r7, #28]
9000c156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
9000c15a:	617b      	str	r3, [r7, #20]
9000c15c:	69bb      	ldr	r3, [r7, #24]
9000c15e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c160:	693b      	ldr	r3, [r7, #16]
9000c162:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
9000c166:	697b      	ldr	r3, [r7, #20]
9000c168:	2b00      	cmp	r3, #0
9000c16a:	d003      	beq.n	9000c174 <_tx_thread_shell_entry+0x38>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
9000c16c:	697b      	ldr	r3, [r7, #20]
9000c16e:	2100      	movs	r1, #0
9000c170:	69f8      	ldr	r0, [r7, #28]
9000c172:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
9000c174:	69fb      	ldr	r3, [r7, #28]
9000c176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000c178:	69fa      	ldr	r2, [r7, #28]
9000c17a:	6c92      	ldr	r2, [r2, #72]	; 0x48
9000c17c:	4610      	mov	r0, r2
9000c17e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
9000c180:	4b1a      	ldr	r3, [pc, #104]	; (9000c1ec <_tx_thread_shell_entry+0xb0>)
9000c182:	681b      	ldr	r3, [r3, #0]
9000c184:	2b00      	cmp	r3, #0
9000c186:	d003      	beq.n	9000c190 <_tx_thread_shell_entry+0x54>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
9000c188:	4b18      	ldr	r3, [pc, #96]	; (9000c1ec <_tx_thread_shell_entry+0xb0>)
9000c18a:	681b      	ldr	r3, [r3, #0]
9000c18c:	69f8      	ldr	r0, [r7, #28]
9000c18e:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c190:	f3ef 8310 	mrs	r3, PRIMASK
9000c194:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000c196:	b672      	cpsid	i
    return(primask_value);
9000c198:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
9000c19a:	61bb      	str	r3, [r7, #24]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
9000c19c:	69fb      	ldr	r3, [r7, #28]
9000c19e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
9000c1a2:	617b      	str	r3, [r7, #20]
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
9000c1a4:	69fb      	ldr	r3, [r7, #28]
9000c1a6:	2201      	movs	r2, #1
9000c1a8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
9000c1aa:	69fb      	ldr	r3, [r7, #28]
9000c1ac:	2201      	movs	r2, #1
9000c1ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
9000c1b0:	69fb      	ldr	r3, [r7, #28]
9000c1b2:	2200      	movs	r2, #0
9000c1b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
9000c1b6:	4b0e      	ldr	r3, [pc, #56]	; (9000c1f0 <_tx_thread_shell_entry+0xb4>)
9000c1b8:	681b      	ldr	r3, [r3, #0]
9000c1ba:	3301      	adds	r3, #1
9000c1bc:	4a0c      	ldr	r2, [pc, #48]	; (9000c1f0 <_tx_thread_shell_entry+0xb4>)
9000c1be:	6013      	str	r3, [r2, #0]
9000c1c0:	69bb      	ldr	r3, [r7, #24]
9000c1c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c1c4:	68bb      	ldr	r3, [r7, #8]
9000c1c6:	f383 8810 	msr	PRIMASK, r3
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
9000c1ca:	697b      	ldr	r3, [r7, #20]
9000c1cc:	2b00      	cmp	r3, #0
9000c1ce:	d003      	beq.n	9000c1d8 <_tx_thread_shell_entry+0x9c>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
9000c1d0:	697b      	ldr	r3, [r7, #20]
9000c1d2:	2101      	movs	r1, #1
9000c1d4:	69f8      	ldr	r0, [r7, #28]
9000c1d6:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
9000c1d8:	69f8      	ldr	r0, [r7, #28]
9000c1da:	f000 fafb 	bl	9000c7d4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
9000c1de:	bf00      	nop
9000c1e0:	3720      	adds	r7, #32
9000c1e2:	46bd      	mov	sp, r7
9000c1e4:	bd80      	pop	{r7, pc}
9000c1e6:	bf00      	nop
9000c1e8:	2401c86c 	.word	0x2401c86c
9000c1ec:	2401c850 	.word	0x2401c850
9000c1f0:	2401c868 	.word	0x2401c868

9000c1f4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
9000c1f4:	b580      	push	{r7, lr}
9000c1f6:	b092      	sub	sp, #72	; 0x48
9000c1f8:	af00      	add	r7, sp, #0
9000c1fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c1fc:	f3ef 8310 	mrs	r3, PRIMASK
9000c200:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
9000c202:	b672      	cpsid	i
    return(primask_value);
9000c204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
9000c206:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
9000c208:	4b6c      	ldr	r3, [pc, #432]	; (9000c3bc <_tx_thread_sleep+0x1c8>)
9000c20a:	681b      	ldr	r3, [r3, #0]
9000c20c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
9000c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c210:	2b00      	cmp	r3, #0
9000c212:	d107      	bne.n	9000c224 <_tx_thread_sleep+0x30>
9000c214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000c216:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c21a:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
9000c21e:	2313      	movs	r3, #19
9000c220:	60bb      	str	r3, [r7, #8]
9000c222:	e0c5      	b.n	9000c3b0 <_tx_thread_sleep+0x1bc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000c224:	f3ef 8305 	mrs	r3, IPSR
9000c228:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
9000c22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
9000c22c:	4b64      	ldr	r3, [pc, #400]	; (9000c3c0 <_tx_thread_sleep+0x1cc>)
9000c22e:	681b      	ldr	r3, [r3, #0]
9000c230:	4313      	orrs	r3, r2
9000c232:	2b00      	cmp	r3, #0
9000c234:	d007      	beq.n	9000c246 <_tx_thread_sleep+0x52>
9000c236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000c238:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c23a:	6a3b      	ldr	r3, [r7, #32]
9000c23c:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
9000c240:	2313      	movs	r3, #19
9000c242:	60bb      	str	r3, [r7, #8]
9000c244:	e0b4      	b.n	9000c3b0 <_tx_thread_sleep+0x1bc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
9000c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c248:	4a5e      	ldr	r2, [pc, #376]	; (9000c3c4 <_tx_thread_sleep+0x1d0>)
9000c24a:	4293      	cmp	r3, r2
9000c24c:	d107      	bne.n	9000c25e <_tx_thread_sleep+0x6a>
9000c24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000c250:	61fb      	str	r3, [r7, #28]
9000c252:	69fb      	ldr	r3, [r7, #28]
9000c254:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
9000c258:	2313      	movs	r3, #19
9000c25a:	60bb      	str	r3, [r7, #8]
9000c25c:	e0a8      	b.n	9000c3b0 <_tx_thread_sleep+0x1bc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
9000c25e:	687b      	ldr	r3, [r7, #4]
9000c260:	2b00      	cmp	r3, #0
9000c262:	d107      	bne.n	9000c274 <_tx_thread_sleep+0x80>
9000c264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000c266:	61bb      	str	r3, [r7, #24]
9000c268:	69bb      	ldr	r3, [r7, #24]
9000c26a:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
9000c26e:	2300      	movs	r3, #0
9000c270:	60bb      	str	r3, [r7, #8]
9000c272:	e09d      	b.n	9000c3b0 <_tx_thread_sleep+0x1bc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
9000c274:	4b54      	ldr	r3, [pc, #336]	; (9000c3c8 <_tx_thread_sleep+0x1d4>)
9000c276:	681b      	ldr	r3, [r3, #0]
9000c278:	2b00      	cmp	r3, #0
9000c27a:	d007      	beq.n	9000c28c <_tx_thread_sleep+0x98>
9000c27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000c27e:	617b      	str	r3, [r7, #20]
9000c280:	697b      	ldr	r3, [r7, #20]
9000c282:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
9000c286:	2313      	movs	r3, #19
9000c288:	60bb      	str	r3, [r7, #8]
9000c28a:	e091      	b.n	9000c3b0 <_tx_thread_sleep+0x1bc>
        }
        else
        {
        
            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
9000c28c:	4b4f      	ldr	r3, [pc, #316]	; (9000c3cc <_tx_thread_sleep+0x1d8>)
9000c28e:	681b      	ldr	r3, [r3, #0]
9000c290:	637b      	str	r3, [r7, #52]	; 0x34
9000c292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c294:	2b00      	cmp	r3, #0
9000c296:	d06d      	beq.n	9000c374 <_tx_thread_sleep+0x180>
9000c298:	4b4d      	ldr	r3, [pc, #308]	; (9000c3d0 <_tx_thread_sleep+0x1dc>)
9000c29a:	681b      	ldr	r3, [r3, #0]
9000c29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000c2a0:	2b00      	cmp	r3, #0
9000c2a2:	d067      	beq.n	9000c374 <_tx_thread_sleep+0x180>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000c2a4:	f3ef 8305 	mrs	r3, IPSR
9000c2a8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
9000c2aa:	693a      	ldr	r2, [r7, #16]
9000c2ac:	4b44      	ldr	r3, [pc, #272]	; (9000c3c0 <_tx_thread_sleep+0x1cc>)
9000c2ae:	681b      	ldr	r3, [r3, #0]
9000c2b0:	4313      	orrs	r3, r2
9000c2b2:	633b      	str	r3, [r7, #48]	; 0x30
9000c2b4:	4b41      	ldr	r3, [pc, #260]	; (9000c3bc <_tx_thread_sleep+0x1c8>)
9000c2b6:	681b      	ldr	r3, [r3, #0]
9000c2b8:	643b      	str	r3, [r7, #64]	; 0x40
9000c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000c2bc:	2b00      	cmp	r3, #0
9000c2be:	d10b      	bne.n	9000c2d8 <_tx_thread_sleep+0xe4>
9000c2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c2c4:	647b      	str	r3, [r7, #68]	; 0x44
9000c2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000c2ca:	041a      	lsls	r2, r3, #16
9000c2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000c2ce:	4313      	orrs	r3, r2
9000c2d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000c2d4:	647b      	str	r3, [r7, #68]	; 0x44
9000c2d6:	e00e      	b.n	9000c2f6 <_tx_thread_sleep+0x102>
9000c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000c2da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000c2de:	d205      	bcs.n	9000c2ec <_tx_thread_sleep+0xf8>
9000c2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c2e2:	647b      	str	r3, [r7, #68]	; 0x44
9000c2e4:	f04f 33ff 	mov.w	r3, #4294967295
9000c2e8:	643b      	str	r3, [r7, #64]	; 0x40
9000c2ea:	e004      	b.n	9000c2f6 <_tx_thread_sleep+0x102>
9000c2ec:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000c2f0:	643b      	str	r3, [r7, #64]	; 0x40
9000c2f2:	2300      	movs	r3, #0
9000c2f4:	647b      	str	r3, [r7, #68]	; 0x44
9000c2f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
9000c2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c2fa:	601a      	str	r2, [r3, #0]
9000c2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c2fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000c300:	605a      	str	r2, [r3, #4]
9000c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c304:	2270      	movs	r2, #112	; 0x70
9000c306:	609a      	str	r2, [r3, #8]
9000c308:	4b32      	ldr	r3, [pc, #200]	; (9000c3d4 <_tx_thread_sleep+0x1e0>)
9000c30a:	681a      	ldr	r2, [r3, #0]
9000c30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c30e:	60da      	str	r2, [r3, #12]
9000c310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c312:	687a      	ldr	r2, [r7, #4]
9000c314:	611a      	str	r2, [r3, #16]
9000c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c31c:	615a      	str	r2, [r3, #20]
9000c31e:	f107 0208 	add.w	r2, r7, #8
9000c322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c324:	619a      	str	r2, [r3, #24]
9000c326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c328:	2200      	movs	r2, #0
9000c32a:	61da      	str	r2, [r3, #28]
9000c32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c32e:	3320      	adds	r3, #32
9000c330:	637b      	str	r3, [r7, #52]	; 0x34
9000c332:	4b29      	ldr	r3, [pc, #164]	; (9000c3d8 <_tx_thread_sleep+0x1e4>)
9000c334:	681b      	ldr	r3, [r3, #0]
9000c336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000c338:	429a      	cmp	r2, r3
9000c33a:	d314      	bcc.n	9000c366 <_tx_thread_sleep+0x172>
9000c33c:	4b27      	ldr	r3, [pc, #156]	; (9000c3dc <_tx_thread_sleep+0x1e8>)
9000c33e:	681b      	ldr	r3, [r3, #0]
9000c340:	637b      	str	r3, [r7, #52]	; 0x34
9000c342:	4a22      	ldr	r2, [pc, #136]	; (9000c3cc <_tx_thread_sleep+0x1d8>)
9000c344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c346:	6013      	str	r3, [r2, #0]
9000c348:	4b25      	ldr	r3, [pc, #148]	; (9000c3e0 <_tx_thread_sleep+0x1ec>)
9000c34a:	681b      	ldr	r3, [r3, #0]
9000c34c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000c34e:	621a      	str	r2, [r3, #32]
9000c350:	4b24      	ldr	r3, [pc, #144]	; (9000c3e4 <_tx_thread_sleep+0x1f0>)
9000c352:	681b      	ldr	r3, [r3, #0]
9000c354:	2b00      	cmp	r3, #0
9000c356:	d00d      	beq.n	9000c374 <_tx_thread_sleep+0x180>
9000c358:	4b22      	ldr	r3, [pc, #136]	; (9000c3e4 <_tx_thread_sleep+0x1f0>)
9000c35a:	681b      	ldr	r3, [r3, #0]
9000c35c:	4a20      	ldr	r2, [pc, #128]	; (9000c3e0 <_tx_thread_sleep+0x1ec>)
9000c35e:	6812      	ldr	r2, [r2, #0]
9000c360:	4610      	mov	r0, r2
9000c362:	4798      	blx	r3
9000c364:	e006      	b.n	9000c374 <_tx_thread_sleep+0x180>
9000c366:	4a19      	ldr	r2, [pc, #100]	; (9000c3cc <_tx_thread_sleep+0x1d8>)
9000c368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c36a:	6013      	str	r3, [r2, #0]
9000c36c:	4b1c      	ldr	r3, [pc, #112]	; (9000c3e0 <_tx_thread_sleep+0x1ec>)
9000c36e:	681b      	ldr	r3, [r3, #0]
9000c370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000c372:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
9000c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c376:	2204      	movs	r2, #4
9000c378:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
9000c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c37c:	2201      	movs	r2, #1
9000c37e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
9000c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c382:	2200      	movs	r2, #0
9000c384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
9000c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c38a:	687a      	ldr	r2, [r7, #4]
9000c38c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
9000c38e:	4b0e      	ldr	r3, [pc, #56]	; (9000c3c8 <_tx_thread_sleep+0x1d4>)
9000c390:	681b      	ldr	r3, [r3, #0]
9000c392:	3301      	adds	r3, #1
9000c394:	4a0c      	ldr	r2, [pc, #48]	; (9000c3c8 <_tx_thread_sleep+0x1d4>)
9000c396:	6013      	str	r3, [r2, #0]
9000c398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000c39a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c39c:	68fb      	ldr	r3, [r7, #12]
9000c39e:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
9000c3a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
9000c3a4:	f000 fa16 	bl	9000c7d4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
9000c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000c3ae:	60bb      	str	r3, [r7, #8]
        }
    }
    
    /* Return completion status.  */
    return(status);
9000c3b0:	68bb      	ldr	r3, [r7, #8]
}
9000c3b2:	4618      	mov	r0, r3
9000c3b4:	3748      	adds	r7, #72	; 0x48
9000c3b6:	46bd      	mov	sp, r7
9000c3b8:	bd80      	pop	{r7, pc}
9000c3ba:	bf00      	nop
9000c3bc:	2401c86c 	.word	0x2401c86c
9000c3c0:	2400a010 	.word	0x2400a010
9000c3c4:	2401c910 	.word	0x2401c910
9000c3c8:	2401c868 	.word	0x2401c868
9000c3cc:	2401cdf4 	.word	0x2401cdf4
9000c3d0:	2401ce00 	.word	0x2401ce00
9000c3d4:	e0001004 	.word	0xe0001004
9000c3d8:	2401cdec 	.word	0x2401cdec
9000c3dc:	2401ce08 	.word	0x2401ce08
9000c3e0:	2401cdfc 	.word	0x2401cdfc
9000c3e4:	2401cdf8 	.word	0x2401cdf8

9000c3e8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
9000c3e8:	b480      	push	{r7}
9000c3ea:	b089      	sub	sp, #36	; 0x24
9000c3ec:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
9000c3ee:	4b15      	ldr	r3, [pc, #84]	; (9000c444 <_tx_thread_system_preempt_check+0x5c>)
9000c3f0:	681b      	ldr	r3, [r3, #0]
9000c3f2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
9000c3f4:	69fb      	ldr	r3, [r7, #28]
9000c3f6:	2b00      	cmp	r3, #0
9000c3f8:	d11e      	bne.n	9000c438 <_tx_thread_system_preempt_check+0x50>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
9000c3fa:	4b13      	ldr	r3, [pc, #76]	; (9000c448 <_tx_thread_system_preempt_check+0x60>)
9000c3fc:	681b      	ldr	r3, [r3, #0]
9000c3fe:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
9000c400:	4b12      	ldr	r3, [pc, #72]	; (9000c44c <_tx_thread_system_preempt_check+0x64>)
9000c402:	681b      	ldr	r3, [r3, #0]
9000c404:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
9000c406:	69ba      	ldr	r2, [r7, #24]
9000c408:	697b      	ldr	r3, [r7, #20]
9000c40a:	429a      	cmp	r2, r3
9000c40c:	d014      	beq.n	9000c438 <_tx_thread_system_preempt_check+0x50>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
9000c40e:	4b10      	ldr	r3, [pc, #64]	; (9000c450 <_tx_thread_system_preempt_check+0x68>)
9000c410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c414:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000c416:	f3ef 8305 	mrs	r3, IPSR
9000c41a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
9000c41c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
9000c41e:	2b00      	cmp	r3, #0
9000c420:	d10a      	bne.n	9000c438 <_tx_thread_system_preempt_check+0x50>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c422:	f3ef 8310 	mrs	r3, PRIMASK
9000c426:	60fb      	str	r3, [r7, #12]
    return(primask_value);
9000c428:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
9000c42a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
9000c42c:	b662      	cpsie	i
9000c42e:	68bb      	ldr	r3, [r7, #8]
9000c430:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c432:	687b      	ldr	r3, [r7, #4]
9000c434:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
9000c438:	bf00      	nop
9000c43a:	3724      	adds	r7, #36	; 0x24
9000c43c:	46bd      	mov	sp, r7
9000c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c442:	4770      	bx	lr
9000c444:	2401c868 	.word	0x2401c868
9000c448:	2401c86c 	.word	0x2401c86c
9000c44c:	2401c870 	.word	0x2401c870
9000c450:	e000ed04 	.word	0xe000ed04

9000c454 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
9000c454:	b580      	push	{r7, lr}
9000c456:	b09c      	sub	sp, #112	; 0x70
9000c458:	af00      	add	r7, sp, #0
9000c45a:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
9000c45c:	2300      	movs	r3, #0
9000c45e:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c460:	f3ef 8310 	mrs	r3, PRIMASK
9000c464:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" CPSID i" : : : "memory" );
9000c466:	b672      	cpsid	i
    return(primask_value);
9000c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
9000c46a:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
9000c46c:	687b      	ldr	r3, [r7, #4]
9000c46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000c470:	2b00      	cmp	r3, #0
9000c472:	d005      	beq.n	9000c480 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
9000c474:	687b      	ldr	r3, [r7, #4]
9000c476:	334c      	adds	r3, #76	; 0x4c
9000c478:	4618      	mov	r0, r3
9000c47a:	f000 fe0f 	bl	9000d09c <_tx_timer_system_deactivate>
9000c47e:	e002      	b.n	9000c486 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
9000c480:	687b      	ldr	r3, [r7, #4]
9000c482:	2200      	movs	r2, #0
9000c484:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
9000c486:	4b92      	ldr	r3, [pc, #584]	; (9000c6d0 <_tx_thread_system_resume+0x27c>)
9000c488:	681b      	ldr	r3, [r3, #0]
9000c48a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
9000c48c:	4b90      	ldr	r3, [pc, #576]	; (9000c6d0 <_tx_thread_system_resume+0x27c>)
9000c48e:	681b      	ldr	r3, [r3, #0]
9000c490:	65bb      	str	r3, [r7, #88]	; 0x58
9000c492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c494:	2b00      	cmp	r3, #0
9000c496:	d06f      	beq.n	9000c578 <_tx_thread_system_resume+0x124>
9000c498:	4b8e      	ldr	r3, [pc, #568]	; (9000c6d4 <_tx_thread_system_resume+0x280>)
9000c49a:	681b      	ldr	r3, [r3, #0]
9000c49c:	f003 0301 	and.w	r3, r3, #1
9000c4a0:	2b00      	cmp	r3, #0
9000c4a2:	d069      	beq.n	9000c578 <_tx_thread_system_resume+0x124>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000c4a4:	f3ef 8305 	mrs	r3, IPSR
9000c4a8:	637b      	str	r3, [r7, #52]	; 0x34
    return(ipsr_value);
9000c4aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000c4ac:	4b8a      	ldr	r3, [pc, #552]	; (9000c6d8 <_tx_thread_system_resume+0x284>)
9000c4ae:	681b      	ldr	r3, [r3, #0]
9000c4b0:	4313      	orrs	r3, r2
9000c4b2:	657b      	str	r3, [r7, #84]	; 0x54
9000c4b4:	4b89      	ldr	r3, [pc, #548]	; (9000c6dc <_tx_thread_system_resume+0x288>)
9000c4b6:	681b      	ldr	r3, [r3, #0]
9000c4b8:	667b      	str	r3, [r7, #100]	; 0x64
9000c4ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c4bc:	2b00      	cmp	r3, #0
9000c4be:	d10b      	bne.n	9000c4d8 <_tx_thread_system_resume+0x84>
9000c4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c4c4:	66bb      	str	r3, [r7, #104]	; 0x68
9000c4c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000c4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000c4ca:	041a      	lsls	r2, r3, #16
9000c4cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
9000c4ce:	4313      	orrs	r3, r2
9000c4d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000c4d4:	66bb      	str	r3, [r7, #104]	; 0x68
9000c4d6:	e00e      	b.n	9000c4f6 <_tx_thread_system_resume+0xa2>
9000c4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c4da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000c4de:	d205      	bcs.n	9000c4ec <_tx_thread_system_resume+0x98>
9000c4e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000c4e2:	66bb      	str	r3, [r7, #104]	; 0x68
9000c4e4:	f04f 33ff 	mov.w	r3, #4294967295
9000c4e8:	667b      	str	r3, [r7, #100]	; 0x64
9000c4ea:	e004      	b.n	9000c4f6 <_tx_thread_system_resume+0xa2>
9000c4ec:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000c4f0:	667b      	str	r3, [r7, #100]	; 0x64
9000c4f2:	2300      	movs	r3, #0
9000c4f4:	66bb      	str	r3, [r7, #104]	; 0x68
9000c4f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000c4f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c4fa:	601a      	str	r2, [r3, #0]
9000c4fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c4fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
9000c500:	605a      	str	r2, [r3, #4]
9000c502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c504:	2201      	movs	r2, #1
9000c506:	609a      	str	r2, [r3, #8]
9000c508:	4b75      	ldr	r3, [pc, #468]	; (9000c6e0 <_tx_thread_system_resume+0x28c>)
9000c50a:	681a      	ldr	r2, [r3, #0]
9000c50c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c50e:	60da      	str	r2, [r3, #12]
9000c510:	687a      	ldr	r2, [r7, #4]
9000c512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c514:	611a      	str	r2, [r3, #16]
9000c516:	687b      	ldr	r3, [r7, #4]
9000c518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c51a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c51c:	615a      	str	r2, [r3, #20]
9000c51e:	f107 0208 	add.w	r2, r7, #8
9000c522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c524:	619a      	str	r2, [r3, #24]
9000c526:	4b6f      	ldr	r3, [pc, #444]	; (9000c6e4 <_tx_thread_system_resume+0x290>)
9000c528:	681b      	ldr	r3, [r3, #0]
9000c52a:	461a      	mov	r2, r3
9000c52c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c52e:	61da      	str	r2, [r3, #28]
9000c530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c532:	3320      	adds	r3, #32
9000c534:	65bb      	str	r3, [r7, #88]	; 0x58
9000c536:	4b6c      	ldr	r3, [pc, #432]	; (9000c6e8 <_tx_thread_system_resume+0x294>)
9000c538:	681b      	ldr	r3, [r3, #0]
9000c53a:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000c53c:	429a      	cmp	r2, r3
9000c53e:	d314      	bcc.n	9000c56a <_tx_thread_system_resume+0x116>
9000c540:	4b6a      	ldr	r3, [pc, #424]	; (9000c6ec <_tx_thread_system_resume+0x298>)
9000c542:	681b      	ldr	r3, [r3, #0]
9000c544:	65bb      	str	r3, [r7, #88]	; 0x58
9000c546:	4a62      	ldr	r2, [pc, #392]	; (9000c6d0 <_tx_thread_system_resume+0x27c>)
9000c548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c54a:	6013      	str	r3, [r2, #0]
9000c54c:	4b68      	ldr	r3, [pc, #416]	; (9000c6f0 <_tx_thread_system_resume+0x29c>)
9000c54e:	681b      	ldr	r3, [r3, #0]
9000c550:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000c552:	621a      	str	r2, [r3, #32]
9000c554:	4b67      	ldr	r3, [pc, #412]	; (9000c6f4 <_tx_thread_system_resume+0x2a0>)
9000c556:	681b      	ldr	r3, [r3, #0]
9000c558:	2b00      	cmp	r3, #0
9000c55a:	d00d      	beq.n	9000c578 <_tx_thread_system_resume+0x124>
9000c55c:	4b65      	ldr	r3, [pc, #404]	; (9000c6f4 <_tx_thread_system_resume+0x2a0>)
9000c55e:	681b      	ldr	r3, [r3, #0]
9000c560:	4a63      	ldr	r2, [pc, #396]	; (9000c6f0 <_tx_thread_system_resume+0x29c>)
9000c562:	6812      	ldr	r2, [r2, #0]
9000c564:	4610      	mov	r0, r2
9000c566:	4798      	blx	r3
9000c568:	e006      	b.n	9000c578 <_tx_thread_system_resume+0x124>
9000c56a:	4a59      	ldr	r2, [pc, #356]	; (9000c6d0 <_tx_thread_system_resume+0x27c>)
9000c56c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000c56e:	6013      	str	r3, [r2, #0]
9000c570:	4b5f      	ldr	r3, [pc, #380]	; (9000c6f0 <_tx_thread_system_resume+0x29c>)
9000c572:	681b      	ldr	r3, [r3, #0]
9000c574:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000c576:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have 
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
9000c578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c57a:	2b00      	cmp	r3, #0
9000c57c:	d002      	beq.n	9000c584 <_tx_thread_system_resume+0x130>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
9000c57e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c580:	68db      	ldr	r3, [r3, #12]
9000c582:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
9000c584:	4b5c      	ldr	r3, [pc, #368]	; (9000c6f8 <_tx_thread_system_resume+0x2a4>)
9000c586:	681b      	ldr	r3, [r3, #0]
9000c588:	3b01      	subs	r3, #1
9000c58a:	4a5b      	ldr	r2, [pc, #364]	; (9000c6f8 <_tx_thread_system_resume+0x2a4>)
9000c58c:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
9000c58e:	687b      	ldr	r3, [r7, #4]
9000c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000c592:	2b00      	cmp	r3, #0
9000c594:	f040 80c3 	bne.w	9000c71e <_tx_thread_system_resume+0x2ca>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
9000c598:	687b      	ldr	r3, [r7, #4]
9000c59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c59c:	2b00      	cmp	r3, #0
9000c59e:	f000 80d7 	beq.w	9000c750 <_tx_thread_system_resume+0x2fc>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
9000c5a2:	687b      	ldr	r3, [r7, #4]
9000c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000c5a6:	2b00      	cmp	r3, #0
9000c5a8:	f040 80b2 	bne.w	9000c710 <_tx_thread_system_resume+0x2bc>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
9000c5ac:	687b      	ldr	r3, [r7, #4]
9000c5ae:	2200      	movs	r2, #0
9000c5b0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
9000c5b2:	687b      	ldr	r3, [r7, #4]
9000c5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c5b6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
9000c5b8:	4a50      	ldr	r2, [pc, #320]	; (9000c6fc <_tx_thread_system_resume+0x2a8>)
9000c5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000c5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
9000c5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c5c4:	2b00      	cmp	r3, #0
9000c5c6:	d173      	bne.n	9000c6b0 <_tx_thread_system_resume+0x25c>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
9000c5c8:	494c      	ldr	r1, [pc, #304]	; (9000c6fc <_tx_thread_system_resume+0x2a8>)
9000c5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c5cc:	687a      	ldr	r2, [r7, #4]
9000c5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
9000c5d2:	687b      	ldr	r3, [r7, #4]
9000c5d4:	687a      	ldr	r2, [r7, #4]
9000c5d6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
9000c5d8:	687b      	ldr	r3, [r7, #4]
9000c5da:	687a      	ldr	r2, [r7, #4]
9000c5dc:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
9000c5de:	2201      	movs	r2, #1
9000c5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c5e2:	fa02 f303 	lsl.w	r3, r2, r3
9000c5e6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
9000c5e8:	4b45      	ldr	r3, [pc, #276]	; (9000c700 <_tx_thread_system_resume+0x2ac>)
9000c5ea:	681a      	ldr	r2, [r3, #0]
9000c5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000c5ee:	4313      	orrs	r3, r2
9000c5f0:	4a43      	ldr	r2, [pc, #268]	; (9000c700 <_tx_thread_system_resume+0x2ac>)
9000c5f2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
9000c5f4:	4b43      	ldr	r3, [pc, #268]	; (9000c704 <_tx_thread_system_resume+0x2b0>)
9000c5f6:	681b      	ldr	r3, [r3, #0]
9000c5f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000c5fa:	429a      	cmp	r2, r3
9000c5fc:	f080 80a8 	bcs.w	9000c750 <_tx_thread_system_resume+0x2fc>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
9000c600:	4a40      	ldr	r2, [pc, #256]	; (9000c704 <_tx_thread_system_resume+0x2b0>)
9000c602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c604:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
9000c606:	4b37      	ldr	r3, [pc, #220]	; (9000c6e4 <_tx_thread_system_resume+0x290>)
9000c608:	681b      	ldr	r3, [r3, #0]
9000c60a:	60bb      	str	r3, [r7, #8]
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
9000c60c:	68bb      	ldr	r3, [r7, #8]
9000c60e:	2b00      	cmp	r3, #0
9000c610:	d103      	bne.n	9000c61a <_tx_thread_system_resume+0x1c6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
9000c612:	4a34      	ldr	r2, [pc, #208]	; (9000c6e4 <_tx_thread_system_resume+0x290>)
9000c614:	687b      	ldr	r3, [r7, #4]
9000c616:	6013      	str	r3, [r2, #0]
9000c618:	e09a      	b.n	9000c750 <_tx_thread_system_resume+0x2fc>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
9000c61a:	68bb      	ldr	r3, [r7, #8]
9000c61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000c61e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000c620:	429a      	cmp	r2, r3
9000c622:	f080 8095 	bcs.w	9000c750 <_tx_thread_system_resume+0x2fc>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
9000c626:	68bb      	ldr	r3, [r7, #8]
9000c628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000c62a:	68bb      	ldr	r3, [r7, #8]
9000c62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c62e:	429a      	cmp	r2, r3
9000c630:	d00b      	beq.n	9000c64a <_tx_thread_system_resume+0x1f6>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
9000c632:	68bb      	ldr	r3, [r7, #8]
9000c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c636:	2201      	movs	r2, #1
9000c638:	fa02 f303 	lsl.w	r3, r2, r3
9000c63c:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
9000c63e:	4b32      	ldr	r3, [pc, #200]	; (9000c708 <_tx_thread_system_resume+0x2b4>)
9000c640:	681a      	ldr	r2, [r3, #0]
9000c642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000c644:	4313      	orrs	r3, r2
9000c646:	4a30      	ldr	r2, [pc, #192]	; (9000c708 <_tx_thread_system_resume+0x2b4>)
9000c648:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
9000c64a:	4a26      	ldr	r2, [pc, #152]	; (9000c6e4 <_tx_thread_system_resume+0x290>)
9000c64c:	687b      	ldr	r3, [r7, #4]
9000c64e:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
9000c650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c652:	2b00      	cmp	r3, #0
9000c654:	d009      	beq.n	9000c66a <_tx_thread_system_resume+0x216>
                                {
    
                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
9000c656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c658:	68db      	ldr	r3, [r3, #12]
9000c65a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
9000c65c:	429a      	cmp	r2, r3
9000c65e:	d104      	bne.n	9000c66a <_tx_thread_system_resume+0x216>
                                    {
        
                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
9000c660:	4b20      	ldr	r3, [pc, #128]	; (9000c6e4 <_tx_thread_system_resume+0x290>)
9000c662:	681b      	ldr	r3, [r3, #0]
9000c664:	461a      	mov	r2, r3
9000c666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c668:	61da      	str	r2, [r3, #28]
9000c66a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000c66c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000c670:	f383 8810 	msr	PRIMASK, r3
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
9000c674:	4b20      	ldr	r3, [pc, #128]	; (9000c6f8 <_tx_thread_system_resume+0x2a4>)
9000c676:	681b      	ldr	r3, [r3, #0]
9000c678:	643b      	str	r3, [r7, #64]	; 0x40
                                if (combined_flags == ((ULONG) 0))
9000c67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c67c:	2b00      	cmp	r3, #0
9000c67e:	f040 809d 	bne.w	9000c7bc <_tx_thread_system_resume+0x368>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
9000c682:	4b22      	ldr	r3, [pc, #136]	; (9000c70c <_tx_thread_system_resume+0x2b8>)
9000c684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c688:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000c68a:	f3ef 8305 	mrs	r3, IPSR
9000c68e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
9000c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
9000c692:	2b00      	cmp	r3, #0
9000c694:	f040 8092 	bne.w	9000c7bc <_tx_thread_system_resume+0x368>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c698:	f3ef 8310 	mrs	r3, PRIMASK
9000c69c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
9000c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
9000c6a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
9000c6a2:	b662      	cpsie	i
9000c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000c6a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c6a8:	6a3b      	ldr	r3, [r7, #32]
9000c6aa:	f383 8810 	msr	PRIMASK, r3
9000c6ae:	e086      	b.n	9000c7be <_tx_thread_system_resume+0x36a>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
9000c6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000c6b4:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
9000c6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000c6b8:	687a      	ldr	r2, [r7, #4]
9000c6ba:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
9000c6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c6be:	687a      	ldr	r2, [r7, #4]
9000c6c0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
9000c6c2:	687b      	ldr	r3, [r7, #4]
9000c6c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000c6c6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
9000c6c8:	687b      	ldr	r3, [r7, #4]
9000c6ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000c6cc:	621a      	str	r2, [r3, #32]
9000c6ce:	e03f      	b.n	9000c750 <_tx_thread_system_resume+0x2fc>
9000c6d0:	2401cdf4 	.word	0x2401cdf4
9000c6d4:	2401ce00 	.word	0x2401ce00
9000c6d8:	2400a010 	.word	0x2400a010
9000c6dc:	2401c86c 	.word	0x2401c86c
9000c6e0:	e0001004 	.word	0xe0001004
9000c6e4:	2401c870 	.word	0x2401c870
9000c6e8:	2401cdec 	.word	0x2401cdec
9000c6ec:	2401ce08 	.word	0x2401ce08
9000c6f0:	2401cdfc 	.word	0x2401cdfc
9000c6f4:	2401cdf8 	.word	0x2401cdf8
9000c6f8:	2401c868 	.word	0x2401c868
9000c6fc:	2401c7d0 	.word	0x2401c7d0
9000c700:	2401c854 	.word	0x2401c854
9000c704:	2401c874 	.word	0x2401c874
9000c708:	2401c878 	.word	0x2401c878
9000c70c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
9000c710:	687b      	ldr	r3, [r7, #4]
9000c712:	2200      	movs	r2, #0
9000c714:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
9000c716:	687b      	ldr	r3, [r7, #4]
9000c718:	2203      	movs	r2, #3
9000c71a:	631a      	str	r2, [r3, #48]	; 0x30
9000c71c:	e018      	b.n	9000c750 <_tx_thread_system_resume+0x2fc>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
9000c71e:	687b      	ldr	r3, [r7, #4]
9000c720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c722:	2b01      	cmp	r3, #1
9000c724:	d014      	beq.n	9000c750 <_tx_thread_system_resume+0x2fc>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
9000c726:	687b      	ldr	r3, [r7, #4]
9000c728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c72a:	2b02      	cmp	r3, #2
9000c72c:	d010      	beq.n	9000c750 <_tx_thread_system_resume+0x2fc>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
9000c72e:	687b      	ldr	r3, [r7, #4]
9000c730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000c732:	2b00      	cmp	r3, #0
9000c734:	d106      	bne.n	9000c744 <_tx_thread_system_resume+0x2f0>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
9000c736:	687b      	ldr	r3, [r7, #4]
9000c738:	2200      	movs	r2, #0
9000c73a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
9000c73c:	687b      	ldr	r3, [r7, #4]
9000c73e:	2200      	movs	r2, #0
9000c740:	631a      	str	r2, [r3, #48]	; 0x30
9000c742:	e005      	b.n	9000c750 <_tx_thread_system_resume+0x2fc>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
9000c744:	687b      	ldr	r3, [r7, #4]
9000c746:	2200      	movs	r2, #0
9000c748:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
9000c74a:	687b      	ldr	r3, [r7, #4]
9000c74c:	2203      	movs	r2, #3
9000c74e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
9000c750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c752:	2b00      	cmp	r3, #0
9000c754:	d009      	beq.n	9000c76a <_tx_thread_system_resume+0x316>
    {
    
        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
9000c756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c758:	68db      	ldr	r3, [r3, #12]
9000c75a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
9000c75c:	429a      	cmp	r2, r3
9000c75e:	d104      	bne.n	9000c76a <_tx_thread_system_resume+0x316>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
9000c760:	4b18      	ldr	r3, [pc, #96]	; (9000c7c4 <_tx_thread_system_resume+0x370>)
9000c762:	681b      	ldr	r3, [r3, #0]
9000c764:	461a      	mov	r2, r3
9000c766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c768:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
9000c76a:	4b17      	ldr	r3, [pc, #92]	; (9000c7c8 <_tx_thread_system_resume+0x374>)
9000c76c:	681b      	ldr	r3, [r3, #0]
9000c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
9000c770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000c772:	61fb      	str	r3, [r7, #28]
9000c774:	69fb      	ldr	r3, [r7, #28]
9000c776:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
9000c77a:	4b12      	ldr	r3, [pc, #72]	; (9000c7c4 <_tx_thread_system_resume+0x370>)
9000c77c:	681b      	ldr	r3, [r3, #0]
9000c77e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000c780:	429a      	cmp	r2, r3
9000c782:	d01c      	beq.n	9000c7be <_tx_thread_system_resume+0x36a>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
9000c784:	4b11      	ldr	r3, [pc, #68]	; (9000c7cc <_tx_thread_system_resume+0x378>)
9000c786:	681b      	ldr	r3, [r3, #0]
9000c788:	643b      	str	r3, [r7, #64]	; 0x40
        if (combined_flags == ((ULONG) 0))
9000c78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000c78c:	2b00      	cmp	r3, #0
9000c78e:	d116      	bne.n	9000c7be <_tx_thread_system_resume+0x36a>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
9000c790:	4b0f      	ldr	r3, [pc, #60]	; (9000c7d0 <_tx_thread_system_resume+0x37c>)
9000c792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c796:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000c798:	f3ef 8305 	mrs	r3, IPSR
9000c79c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
9000c79e:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
9000c7a0:	2b00      	cmp	r3, #0
9000c7a2:	d10c      	bne.n	9000c7be <_tx_thread_system_resume+0x36a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c7a4:	f3ef 8310 	mrs	r3, PRIMASK
9000c7a8:	617b      	str	r3, [r7, #20]
    return(primask_value);
9000c7aa:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
9000c7ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
9000c7ae:	b662      	cpsie	i
9000c7b0:	693b      	ldr	r3, [r7, #16]
9000c7b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000c7b4:	68fb      	ldr	r3, [r7, #12]
9000c7b6:	f383 8810 	msr	PRIMASK, r3
9000c7ba:	e000      	b.n	9000c7be <_tx_thread_system_resume+0x36a>
                                return;
9000c7bc:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
9000c7be:	3770      	adds	r7, #112	; 0x70
9000c7c0:	46bd      	mov	sp, r7
9000c7c2:	bd80      	pop	{r7, pc}
9000c7c4:	2401c870 	.word	0x2401c870
9000c7c8:	2401c86c 	.word	0x2401c86c
9000c7cc:	2401c868 	.word	0x2401c868
9000c7d0:	e000ed04 	.word	0xe000ed04

9000c7d4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
9000c7d4:	b580      	push	{r7, lr}
9000c7d6:	b0a6      	sub	sp, #152	; 0x98
9000c7d8:	af00      	add	r7, sp, #0
9000c7da:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
9000c7dc:	2300      	movs	r3, #0
9000c7de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
9000c7e2:	4b79      	ldr	r3, [pc, #484]	; (9000c9c8 <_tx_thread_system_suspend+0x1f4>)
9000c7e4:	681b      	ldr	r3, [r3, #0]
9000c7e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000c7ea:	f3ef 8310 	mrs	r3, PRIMASK
9000c7ee:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile (" CPSID i" : : : "memory" );
9000c7f0:	b672      	cpsid	i
    return(primask_value);
9000c7f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
9000c7f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
9000c7f8:	687a      	ldr	r2, [r7, #4]
9000c7fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
9000c7fe:	429a      	cmp	r2, r3
9000c800:	d115      	bne.n	9000c82e <_tx_thread_system_suspend+0x5a>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
9000c802:	687b      	ldr	r3, [r7, #4]
9000c804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000c806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
9000c80a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
9000c80e:	2b00      	cmp	r3, #0
9000c810:	d009      	beq.n	9000c826 <_tx_thread_system_suspend+0x52>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
9000c812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
9000c816:	f1b3 3fff 	cmp.w	r3, #4294967295
9000c81a:	d004      	beq.n	9000c826 <_tx_thread_system_suspend+0x52>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
9000c81c:	687b      	ldr	r3, [r7, #4]
9000c81e:	334c      	adds	r3, #76	; 0x4c
9000c820:	4618      	mov	r0, r3
9000c822:	f000 fbd9 	bl	9000cfd8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
9000c826:	687b      	ldr	r3, [r7, #4]
9000c828:	69db      	ldr	r3, [r3, #28]
9000c82a:	4a68      	ldr	r2, [pc, #416]	; (9000c9cc <_tx_thread_system_suspend+0x1f8>)
9000c82c:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
9000c82e:	4b68      	ldr	r3, [pc, #416]	; (9000c9d0 <_tx_thread_system_suspend+0x1fc>)
9000c830:	681b      	ldr	r3, [r3, #0]
9000c832:	3b01      	subs	r3, #1
9000c834:	4a66      	ldr	r2, [pc, #408]	; (9000c9d0 <_tx_thread_system_suspend+0x1fc>)
9000c836:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
9000c838:	687b      	ldr	r3, [r7, #4]
9000c83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000c83c:	2b01      	cmp	r3, #1
9000c83e:	f040 81dc 	bne.w	9000cbfa <_tx_thread_system_suspend+0x426>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
9000c842:	4b64      	ldr	r3, [pc, #400]	; (9000c9d4 <_tx_thread_system_suspend+0x200>)
9000c844:	681b      	ldr	r3, [r3, #0]
9000c846:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
9000c848:	4b62      	ldr	r3, [pc, #392]	; (9000c9d4 <_tx_thread_system_suspend+0x200>)
9000c84a:	681b      	ldr	r3, [r3, #0]
9000c84c:	67bb      	str	r3, [r7, #120]	; 0x78
9000c84e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c850:	2b00      	cmp	r3, #0
9000c852:	d07c      	beq.n	9000c94e <_tx_thread_system_suspend+0x17a>
9000c854:	4b60      	ldr	r3, [pc, #384]	; (9000c9d8 <_tx_thread_system_suspend+0x204>)
9000c856:	681b      	ldr	r3, [r3, #0]
9000c858:	f003 0301 	and.w	r3, r3, #1
9000c85c:	2b00      	cmp	r3, #0
9000c85e:	d076      	beq.n	9000c94e <_tx_thread_system_suspend+0x17a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000c860:	f3ef 8305 	mrs	r3, IPSR
9000c864:	657b      	str	r3, [r7, #84]	; 0x54
    return(ipsr_value);
9000c866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
9000c868:	4b5c      	ldr	r3, [pc, #368]	; (9000c9dc <_tx_thread_system_suspend+0x208>)
9000c86a:	681b      	ldr	r3, [r3, #0]
9000c86c:	4313      	orrs	r3, r2
9000c86e:	677b      	str	r3, [r7, #116]	; 0x74
9000c870:	4b55      	ldr	r3, [pc, #340]	; (9000c9c8 <_tx_thread_system_suspend+0x1f4>)
9000c872:	681b      	ldr	r3, [r3, #0]
9000c874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
9000c878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
9000c87a:	2b00      	cmp	r3, #0
9000c87c:	d110      	bne.n	9000c8a0 <_tx_thread_system_suspend+0xcc>
9000c87e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
9000c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
9000c888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
9000c88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000c88e:	041a      	lsls	r2, r3, #16
9000c890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
9000c894:	4313      	orrs	r3, r2
9000c896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000c89a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
9000c89e:	e013      	b.n	9000c8c8 <_tx_thread_system_suspend+0xf4>
9000c8a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
9000c8a2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000c8a6:	d208      	bcs.n	9000c8ba <_tx_thread_system_suspend+0xe6>
9000c8a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
9000c8ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
9000c8b0:	f04f 33ff 	mov.w	r3, #4294967295
9000c8b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
9000c8b8:	e006      	b.n	9000c8c8 <_tx_thread_system_suspend+0xf4>
9000c8ba:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000c8be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
9000c8c2:	2300      	movs	r3, #0
9000c8c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
9000c8c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
9000c8cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c8ce:	601a      	str	r2, [r3, #0]
9000c8d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c8d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
9000c8d6:	605a      	str	r2, [r3, #4]
9000c8d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c8da:	2202      	movs	r2, #2
9000c8dc:	609a      	str	r2, [r3, #8]
9000c8de:	4b40      	ldr	r3, [pc, #256]	; (9000c9e0 <_tx_thread_system_suspend+0x20c>)
9000c8e0:	681a      	ldr	r2, [r3, #0]
9000c8e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c8e4:	60da      	str	r2, [r3, #12]
9000c8e6:	687a      	ldr	r2, [r7, #4]
9000c8e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c8ea:	611a      	str	r2, [r3, #16]
9000c8ec:	687b      	ldr	r3, [r7, #4]
9000c8ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c8f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c8f2:	615a      	str	r2, [r3, #20]
9000c8f4:	f107 020c 	add.w	r2, r7, #12
9000c8f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c8fa:	619a      	str	r2, [r3, #24]
9000c8fc:	4b39      	ldr	r3, [pc, #228]	; (9000c9e4 <_tx_thread_system_suspend+0x210>)
9000c8fe:	681b      	ldr	r3, [r3, #0]
9000c900:	461a      	mov	r2, r3
9000c902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c904:	61da      	str	r2, [r3, #28]
9000c906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c908:	3320      	adds	r3, #32
9000c90a:	67bb      	str	r3, [r7, #120]	; 0x78
9000c90c:	4b36      	ldr	r3, [pc, #216]	; (9000c9e8 <_tx_thread_system_suspend+0x214>)
9000c90e:	681b      	ldr	r3, [r3, #0]
9000c910:	6fba      	ldr	r2, [r7, #120]	; 0x78
9000c912:	429a      	cmp	r2, r3
9000c914:	d314      	bcc.n	9000c940 <_tx_thread_system_suspend+0x16c>
9000c916:	4b35      	ldr	r3, [pc, #212]	; (9000c9ec <_tx_thread_system_suspend+0x218>)
9000c918:	681b      	ldr	r3, [r3, #0]
9000c91a:	67bb      	str	r3, [r7, #120]	; 0x78
9000c91c:	4a2d      	ldr	r2, [pc, #180]	; (9000c9d4 <_tx_thread_system_suspend+0x200>)
9000c91e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c920:	6013      	str	r3, [r2, #0]
9000c922:	4b33      	ldr	r3, [pc, #204]	; (9000c9f0 <_tx_thread_system_suspend+0x21c>)
9000c924:	681b      	ldr	r3, [r3, #0]
9000c926:	6fba      	ldr	r2, [r7, #120]	; 0x78
9000c928:	621a      	str	r2, [r3, #32]
9000c92a:	4b32      	ldr	r3, [pc, #200]	; (9000c9f4 <_tx_thread_system_suspend+0x220>)
9000c92c:	681b      	ldr	r3, [r3, #0]
9000c92e:	2b00      	cmp	r3, #0
9000c930:	d00d      	beq.n	9000c94e <_tx_thread_system_suspend+0x17a>
9000c932:	4b30      	ldr	r3, [pc, #192]	; (9000c9f4 <_tx_thread_system_suspend+0x220>)
9000c934:	681b      	ldr	r3, [r3, #0]
9000c936:	4a2e      	ldr	r2, [pc, #184]	; (9000c9f0 <_tx_thread_system_suspend+0x21c>)
9000c938:	6812      	ldr	r2, [r2, #0]
9000c93a:	4610      	mov	r0, r2
9000c93c:	4798      	blx	r3
9000c93e:	e006      	b.n	9000c94e <_tx_thread_system_suspend+0x17a>
9000c940:	4a24      	ldr	r2, [pc, #144]	; (9000c9d4 <_tx_thread_system_suspend+0x200>)
9000c942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c944:	6013      	str	r3, [r2, #0]
9000c946:	4b2a      	ldr	r3, [pc, #168]	; (9000c9f0 <_tx_thread_system_suspend+0x21c>)
9000c948:	681b      	ldr	r3, [r3, #0]
9000c94a:	6fba      	ldr	r2, [r7, #120]	; 0x78
9000c94c:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have 
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
9000c94e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000c950:	2b00      	cmp	r3, #0
9000c952:	d003      	beq.n	9000c95c <_tx_thread_system_suspend+0x188>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
9000c954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000c956:	68db      	ldr	r3, [r3, #12]
9000c958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
9000c95c:	687b      	ldr	r3, [r7, #4]
9000c95e:	2200      	movs	r2, #0
9000c960:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
9000c962:	687b      	ldr	r3, [r7, #4]
9000c964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c966:	60fb      	str	r3, [r7, #12]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
9000c968:	687b      	ldr	r3, [r7, #4]
9000c96a:	6a1b      	ldr	r3, [r3, #32]
9000c96c:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
9000c96e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
9000c970:	687b      	ldr	r3, [r7, #4]
9000c972:	429a      	cmp	r2, r3
9000c974:	d044      	beq.n	9000ca00 <_tx_thread_system_suspend+0x22c>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
9000c976:	687b      	ldr	r3, [r7, #4]
9000c978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000c97a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
9000c97c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000c97e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
9000c980:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
9000c982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c984:	6f3a      	ldr	r2, [r7, #112]	; 0x70
9000c986:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
9000c988:	68fb      	ldr	r3, [r7, #12]
9000c98a:	4a1b      	ldr	r2, [pc, #108]	; (9000c9f8 <_tx_thread_system_suspend+0x224>)
9000c98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000c990:	687a      	ldr	r2, [r7, #4]
9000c992:	429a      	cmp	r2, r3
9000c994:	f040 80a0 	bne.w	9000cad8 <_tx_thread_system_suspend+0x304>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
9000c998:	68fb      	ldr	r3, [r7, #12]
9000c99a:	4917      	ldr	r1, [pc, #92]	; (9000c9f8 <_tx_thread_system_suspend+0x224>)
9000c99c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
9000c99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
9000c9a2:	4b16      	ldr	r3, [pc, #88]	; (9000c9fc <_tx_thread_system_suspend+0x228>)
9000c9a4:	681b      	ldr	r3, [r3, #0]
9000c9a6:	2b00      	cmp	r3, #0
9000c9a8:	f000 8096 	beq.w	9000cad8 <_tx_thread_system_suspend+0x304>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
9000c9ac:	68fb      	ldr	r3, [r7, #12]
9000c9ae:	2201      	movs	r2, #1
9000c9b0:	fa02 f303 	lsl.w	r3, r2, r3
9000c9b4:	66fb      	str	r3, [r7, #108]	; 0x6c
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
9000c9b6:	4b11      	ldr	r3, [pc, #68]	; (9000c9fc <_tx_thread_system_suspend+0x228>)
9000c9b8:	681a      	ldr	r2, [r3, #0]
9000c9ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000c9bc:	43db      	mvns	r3, r3
9000c9be:	4013      	ands	r3, r2
9000c9c0:	4a0e      	ldr	r2, [pc, #56]	; (9000c9fc <_tx_thread_system_suspend+0x228>)
9000c9c2:	6013      	str	r3, [r2, #0]
9000c9c4:	e088      	b.n	9000cad8 <_tx_thread_system_suspend+0x304>
9000c9c6:	bf00      	nop
9000c9c8:	2401c86c 	.word	0x2401c86c
9000c9cc:	2401c904 	.word	0x2401c904
9000c9d0:	2401c868 	.word	0x2401c868
9000c9d4:	2401cdf4 	.word	0x2401cdf4
9000c9d8:	2401ce00 	.word	0x2401ce00
9000c9dc:	2400a010 	.word	0x2400a010
9000c9e0:	e0001004 	.word	0xe0001004
9000c9e4:	2401c870 	.word	0x2401c870
9000c9e8:	2401cdec 	.word	0x2401cdec
9000c9ec:	2401ce08 	.word	0x2401ce08
9000c9f0:	2401cdfc 	.word	0x2401cdfc
9000c9f4:	2401cdf8 	.word	0x2401cdf8
9000c9f8:	2401c7d0 	.word	0x2401c7d0
9000c9fc:	2401c878 	.word	0x2401c878
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
9000ca00:	68fb      	ldr	r3, [r7, #12]
9000ca02:	4a96      	ldr	r2, [pc, #600]	; (9000cc5c <_tx_thread_system_suspend+0x488>)
9000ca04:	2100      	movs	r1, #0
9000ca06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
9000ca0a:	68fb      	ldr	r3, [r7, #12]
9000ca0c:	2201      	movs	r2, #1
9000ca0e:	fa02 f303 	lsl.w	r3, r2, r3
9000ca12:	66fb      	str	r3, [r7, #108]	; 0x6c
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
9000ca14:	4b92      	ldr	r3, [pc, #584]	; (9000cc60 <_tx_thread_system_suspend+0x48c>)
9000ca16:	681a      	ldr	r2, [r3, #0]
9000ca18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000ca1a:	43db      	mvns	r3, r3
9000ca1c:	4013      	ands	r3, r2
9000ca1e:	4a90      	ldr	r2, [pc, #576]	; (9000cc60 <_tx_thread_system_suspend+0x48c>)
9000ca20:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
9000ca22:	4b90      	ldr	r3, [pc, #576]	; (9000cc64 <_tx_thread_system_suspend+0x490>)
9000ca24:	681b      	ldr	r3, [r3, #0]
9000ca26:	2b00      	cmp	r3, #0
9000ca28:	d00b      	beq.n	9000ca42 <_tx_thread_system_suspend+0x26e>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
9000ca2a:	68fb      	ldr	r3, [r7, #12]
9000ca2c:	2201      	movs	r2, #1
9000ca2e:	fa02 f303 	lsl.w	r3, r2, r3
9000ca32:	66fb      	str	r3, [r7, #108]	; 0x6c
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
9000ca34:	4b8b      	ldr	r3, [pc, #556]	; (9000cc64 <_tx_thread_system_suspend+0x490>)
9000ca36:	681a      	ldr	r2, [r3, #0]
9000ca38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000ca3a:	43db      	mvns	r3, r3
9000ca3c:	4013      	ands	r3, r2
9000ca3e:	4a89      	ldr	r2, [pc, #548]	; (9000cc64 <_tx_thread_system_suspend+0x490>)
9000ca40:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
9000ca42:	2300      	movs	r3, #0
9000ca44:	66bb      	str	r3, [r7, #104]	; 0x68
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
9000ca46:	4b86      	ldr	r3, [pc, #536]	; (9000cc60 <_tx_thread_system_suspend+0x48c>)
9000ca48:	681b      	ldr	r3, [r3, #0]
9000ca4a:	667b      	str	r3, [r7, #100]	; 0x64

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
9000ca4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000ca4e:	2b00      	cmp	r3, #0
9000ca50:	d135      	bne.n	9000cabe <_tx_thread_system_suspend+0x2ea>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
9000ca52:	4b85      	ldr	r3, [pc, #532]	; (9000cc68 <_tx_thread_system_suspend+0x494>)
9000ca54:	2220      	movs	r2, #32
9000ca56:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
9000ca58:	4b84      	ldr	r3, [pc, #528]	; (9000cc6c <_tx_thread_system_suspend+0x498>)
9000ca5a:	2200      	movs	r2, #0
9000ca5c:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
9000ca5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000ca60:	2b00      	cmp	r3, #0
9000ca62:	d008      	beq.n	9000ca76 <_tx_thread_system_suspend+0x2a2>
                {
            
                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
9000ca64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000ca66:	68db      	ldr	r3, [r3, #12]
9000ca68:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
9000ca6c:	429a      	cmp	r2, r3
9000ca6e:	d102      	bne.n	9000ca76 <_tx_thread_system_suspend+0x2a2>
                    {
    
                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep 
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
9000ca70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000ca72:	2200      	movs	r2, #0
9000ca74:	61da      	str	r2, [r3, #28]
9000ca76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
9000ca7a:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000ca7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ca7e:	f383 8810 	msr	PRIMASK, r3
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
9000ca82:	4b7b      	ldr	r3, [pc, #492]	; (9000cc70 <_tx_thread_system_suspend+0x49c>)
9000ca84:	681b      	ldr	r3, [r3, #0]
9000ca86:	663b      	str	r3, [r7, #96]	; 0x60
                if (combined_flags == ((ULONG) 0))
9000ca88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000ca8a:	2b00      	cmp	r3, #0
9000ca8c:	f040 80de 	bne.w	9000cc4c <_tx_thread_system_suspend+0x478>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
9000ca90:	4b78      	ldr	r3, [pc, #480]	; (9000cc74 <_tx_thread_system_suspend+0x4a0>)
9000ca92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ca96:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000ca98:	f3ef 8305 	mrs	r3, IPSR
9000ca9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(ipsr_value);
9000ca9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    if (__get_ipsr_value() == 0)
9000caa0:	2b00      	cmp	r3, #0
9000caa2:	f040 80d3 	bne.w	9000cc4c <_tx_thread_system_suspend+0x478>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000caa6:	f3ef 8310 	mrs	r3, PRIMASK
9000caaa:	64bb      	str	r3, [r7, #72]	; 0x48
    return(primask_value);
9000caac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
        interrupt_save = __get_primask_value();
9000caae:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSIE  i": : : "memory" );
9000cab0:	b662      	cpsie	i
9000cab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000cab4:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000cab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000cab8:	f383 8810 	msr	PRIMASK, r3
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
9000cabc:	e0c6      	b.n	9000cc4c <_tx_thread_system_suspend+0x478>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
9000cabe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000cac0:	fa93 f3a3 	rbit	r3, r3
9000cac4:	667b      	str	r3, [r7, #100]	; 0x64
9000cac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000cac8:	fab3 f383 	clz	r3, r3
9000cacc:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
9000cace:	6eba      	ldr	r2, [r7, #104]	; 0x68
9000cad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000cad2:	4413      	add	r3, r2
9000cad4:	4a64      	ldr	r2, [pc, #400]	; (9000cc68 <_tx_thread_system_suspend+0x494>)
9000cad6:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
9000cad8:	4b64      	ldr	r3, [pc, #400]	; (9000cc6c <_tx_thread_system_suspend+0x498>)
9000cada:	681b      	ldr	r3, [r3, #0]
9000cadc:	687a      	ldr	r2, [r7, #4]
9000cade:	429a      	cmp	r2, r3
9000cae0:	d17d      	bne.n	9000cbde <_tx_thread_system_suspend+0x40a>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
9000cae2:	4b61      	ldr	r3, [pc, #388]	; (9000cc68 <_tx_thread_system_suspend+0x494>)
9000cae4:	681b      	ldr	r3, [r3, #0]
9000cae6:	4a5d      	ldr	r2, [pc, #372]	; (9000cc5c <_tx_thread_system_suspend+0x488>)
9000cae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000caec:	4a5f      	ldr	r2, [pc, #380]	; (9000cc6c <_tx_thread_system_suspend+0x498>)
9000caee:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
9000caf0:	4b5c      	ldr	r3, [pc, #368]	; (9000cc64 <_tx_thread_system_suspend+0x490>)
9000caf2:	681b      	ldr	r3, [r3, #0]
9000caf4:	2b00      	cmp	r3, #0
9000caf6:	d042      	beq.n	9000cb7e <_tx_thread_system_suspend+0x3aa>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
9000caf8:	4b5d      	ldr	r3, [pc, #372]	; (9000cc70 <_tx_thread_system_suspend+0x49c>)
9000cafa:	681b      	ldr	r3, [r3, #0]
9000cafc:	3301      	adds	r3, #1
9000cafe:	4a5c      	ldr	r2, [pc, #368]	; (9000cc70 <_tx_thread_system_suspend+0x49c>)
9000cb00:	6013      	str	r3, [r2, #0]
9000cb02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
9000cb06:	63bb      	str	r3, [r7, #56]	; 0x38
9000cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000cb0a:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000cb0e:	f3ef 8310 	mrs	r3, PRIMASK
9000cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
9000cb14:	b672      	cpsid	i
    return(primask_value);
9000cb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
9000cb18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
9000cb1c:	4b54      	ldr	r3, [pc, #336]	; (9000cc70 <_tx_thread_system_suspend+0x49c>)
9000cb1e:	681b      	ldr	r3, [r3, #0]
9000cb20:	3b01      	subs	r3, #1
9000cb22:	4a53      	ldr	r2, [pc, #332]	; (9000cc70 <_tx_thread_system_suspend+0x49c>)
9000cb24:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
9000cb26:	2300      	movs	r3, #0
9000cb28:	66bb      	str	r3, [r7, #104]	; 0x68
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
9000cb2a:	4b4e      	ldr	r3, [pc, #312]	; (9000cc64 <_tx_thread_system_suspend+0x490>)
9000cb2c:	681b      	ldr	r3, [r3, #0]
9000cb2e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
9000cb30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000cb32:	fa93 f3a3 	rbit	r3, r3
9000cb36:	667b      	str	r3, [r7, #100]	; 0x64
9000cb38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000cb3a:	fab3 f383 	clz	r3, r3
9000cb3e:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
9000cb40:	6eba      	ldr	r2, [r7, #104]	; 0x68
9000cb42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000cb44:	4413      	add	r3, r2
9000cb46:	60fb      	str	r3, [r7, #12]

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
9000cb48:	68fb      	ldr	r3, [r7, #12]
9000cb4a:	4a44      	ldr	r2, [pc, #272]	; (9000cc5c <_tx_thread_system_suspend+0x488>)
9000cb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000cb50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000cb52:	4b45      	ldr	r3, [pc, #276]	; (9000cc68 <_tx_thread_system_suspend+0x494>)
9000cb54:	681b      	ldr	r3, [r3, #0]
9000cb56:	429a      	cmp	r2, r3
9000cb58:	d811      	bhi.n	9000cb7e <_tx_thread_system_suspend+0x3aa>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its 
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
9000cb5a:	68fb      	ldr	r3, [r7, #12]
9000cb5c:	4a3f      	ldr	r2, [pc, #252]	; (9000cc5c <_tx_thread_system_suspend+0x488>)
9000cb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000cb62:	4a42      	ldr	r2, [pc, #264]	; (9000cc6c <_tx_thread_system_suspend+0x498>)
9000cb64:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
9000cb66:	68fb      	ldr	r3, [r7, #12]
9000cb68:	2201      	movs	r2, #1
9000cb6a:	fa02 f303 	lsl.w	r3, r2, r3
9000cb6e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
9000cb70:	4b3c      	ldr	r3, [pc, #240]	; (9000cc64 <_tx_thread_system_suspend+0x490>)
9000cb72:	681a      	ldr	r2, [r3, #0]
9000cb74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000cb76:	43db      	mvns	r3, r3
9000cb78:	4013      	ands	r3, r2
9000cb7a:	4a3a      	ldr	r2, [pc, #232]	; (9000cc64 <_tx_thread_system_suspend+0x490>)
9000cb7c:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
9000cb7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000cb80:	2b00      	cmp	r3, #0
9000cb82:	d00a      	beq.n	9000cb9a <_tx_thread_system_suspend+0x3c6>
            {
            
                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
9000cb84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000cb86:	68db      	ldr	r3, [r3, #12]
9000cb88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
9000cb8c:	429a      	cmp	r2, r3
9000cb8e:	d104      	bne.n	9000cb9a <_tx_thread_system_suspend+0x3c6>
                {
    
                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep 
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
9000cb90:	4b36      	ldr	r3, [pc, #216]	; (9000cc6c <_tx_thread_system_suspend+0x498>)
9000cb92:	681b      	ldr	r3, [r3, #0]
9000cb94:	461a      	mov	r2, r3
9000cb96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000cb98:	61da      	str	r2, [r3, #28]
9000cb9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
9000cb9e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000cba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000cba2:	f383 8810 	msr	PRIMASK, r3
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
9000cba6:	4b32      	ldr	r3, [pc, #200]	; (9000cc70 <_tx_thread_system_suspend+0x49c>)
9000cba8:	681b      	ldr	r3, [r3, #0]
9000cbaa:	663b      	str	r3, [r7, #96]	; 0x60
            if (combined_flags == ((ULONG) 0))
9000cbac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000cbae:	2b00      	cmp	r3, #0
9000cbb0:	d14e      	bne.n	9000cc50 <_tx_thread_system_suspend+0x47c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
9000cbb2:	4b30      	ldr	r3, [pc, #192]	; (9000cc74 <_tx_thread_system_suspend+0x4a0>)
9000cbb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cbb8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000cbba:	f3ef 8305 	mrs	r3, IPSR
9000cbbe:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
9000cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
9000cbc2:	2b00      	cmp	r3, #0
9000cbc4:	d144      	bne.n	9000cc50 <_tx_thread_system_suspend+0x47c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000cbc6:	f3ef 8310 	mrs	r3, PRIMASK
9000cbca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(primask_value);
9000cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_primask_value();
9000cbce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSIE  i": : : "memory" );
9000cbd0:	b662      	cpsie	i
9000cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000cbd4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cbd8:	f383 8810 	msr	PRIMASK, r3
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
9000cbdc:	e038      	b.n	9000cc50 <_tx_thread_system_suspend+0x47c>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
9000cbde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000cbe0:	2b00      	cmp	r3, #0
9000cbe2:	d00a      	beq.n	9000cbfa <_tx_thread_system_suspend+0x426>
         {
            
            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
9000cbe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000cbe6:	68db      	ldr	r3, [r3, #12]
9000cbe8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
9000cbec:	429a      	cmp	r2, r3
9000cbee:	d104      	bne.n	9000cbfa <_tx_thread_system_suspend+0x426>
                   next thread to execute. This can be used by the trace analysis tool to keep 
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
9000cbf0:	4b1e      	ldr	r3, [pc, #120]	; (9000cc6c <_tx_thread_system_suspend+0x498>)
9000cbf2:	681b      	ldr	r3, [r3, #0]
9000cbf4:	461a      	mov	r2, r3
9000cbf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000cbf8:	61da      	str	r2, [r3, #28]
9000cbfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
9000cbfe:	623b      	str	r3, [r7, #32]
9000cc00:	6a3b      	ldr	r3, [r7, #32]
9000cc02:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
9000cc06:	4b19      	ldr	r3, [pc, #100]	; (9000cc6c <_tx_thread_system_suspend+0x498>)
9000cc08:	681b      	ldr	r3, [r3, #0]
9000cc0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
9000cc0e:	429a      	cmp	r2, r3
9000cc10:	d020      	beq.n	9000cc54 <_tx_thread_system_suspend+0x480>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
9000cc12:	4b17      	ldr	r3, [pc, #92]	; (9000cc70 <_tx_thread_system_suspend+0x49c>)
9000cc14:	681b      	ldr	r3, [r3, #0]
9000cc16:	663b      	str	r3, [r7, #96]	; 0x60
        if (combined_flags == ((ULONG) 0))
9000cc18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000cc1a:	2b00      	cmp	r3, #0
9000cc1c:	d11a      	bne.n	9000cc54 <_tx_thread_system_suspend+0x480>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
9000cc1e:	4b15      	ldr	r3, [pc, #84]	; (9000cc74 <_tx_thread_system_suspend+0x4a0>)
9000cc20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cc24:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000cc26:	f3ef 8305 	mrs	r3, IPSR
9000cc2a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
9000cc2c:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
9000cc2e:	2b00      	cmp	r3, #0
9000cc30:	d110      	bne.n	9000cc54 <_tx_thread_system_suspend+0x480>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000cc32:	f3ef 8310 	mrs	r3, PRIMASK
9000cc36:	61bb      	str	r3, [r7, #24]
    return(primask_value);
9000cc38:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_primask_value();
9000cc3a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSIE  i": : : "memory" );
9000cc3c:	b662      	cpsie	i
9000cc3e:	697b      	ldr	r3, [r7, #20]
9000cc40:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000cc42:	693b      	ldr	r3, [r7, #16]
9000cc44:	f383 8810 	msr	PRIMASK, r3
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
9000cc48:	bf00      	nop
9000cc4a:	e003      	b.n	9000cc54 <_tx_thread_system_suspend+0x480>
                return;
9000cc4c:	bf00      	nop
9000cc4e:	e002      	b.n	9000cc56 <_tx_thread_system_suspend+0x482>
            return;
9000cc50:	bf00      	nop
9000cc52:	e000      	b.n	9000cc56 <_tx_thread_system_suspend+0x482>
    return;
9000cc54:	bf00      	nop
}
9000cc56:	3798      	adds	r7, #152	; 0x98
9000cc58:	46bd      	mov	sp, r7
9000cc5a:	bd80      	pop	{r7, pc}
9000cc5c:	2401c7d0 	.word	0x2401c7d0
9000cc60:	2401c854 	.word	0x2401c854
9000cc64:	2401c878 	.word	0x2401c878
9000cc68:	2401c874 	.word	0x2401c874
9000cc6c:	2401c870 	.word	0x2401c870
9000cc70:	2401c868 	.word	0x2401c868
9000cc74:	e000ed04 	.word	0xe000ed04

9000cc78 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
9000cc78:	b580      	push	{r7, lr}
9000cc7a:	b08c      	sub	sp, #48	; 0x30
9000cc7c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
9000cc7e:	4b5e      	ldr	r3, [pc, #376]	; (9000cdf8 <_tx_thread_time_slice+0x180>)
9000cc80:	681b      	ldr	r3, [r3, #0]
9000cc82:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000cc84:	f3ef 8310 	mrs	r3, PRIMASK
9000cc88:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000cc8a:	b672      	cpsid	i
    return(primask_value);
9000cc8c:	693b      	ldr	r3, [r7, #16]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
9000cc8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
9000cc90:	4b5a      	ldr	r3, [pc, #360]	; (9000cdfc <_tx_thread_time_slice+0x184>)
9000cc92:	2200      	movs	r2, #0
9000cc94:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
9000cc96:	683b      	ldr	r3, [r7, #0]
9000cc98:	2b00      	cmp	r3, #0
9000cc9a:	d024      	beq.n	9000cce6 <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
9000cc9c:	683b      	ldr	r3, [r7, #0]
9000cc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000cca0:	2b00      	cmp	r3, #0
9000cca2:	d120      	bne.n	9000cce6 <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
9000cca4:	683a      	ldr	r2, [r7, #0]
9000cca6:	683b      	ldr	r3, [r7, #0]
9000cca8:	69d2      	ldr	r2, [r2, #28]
9000ccaa:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
9000ccac:	683b      	ldr	r3, [r7, #0]
9000ccae:	699b      	ldr	r3, [r3, #24]
9000ccb0:	4a53      	ldr	r2, [pc, #332]	; (9000ce00 <_tx_thread_time_slice+0x188>)
9000ccb2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
9000ccb4:	683b      	ldr	r3, [r7, #0]
9000ccb6:	6a1a      	ldr	r2, [r3, #32]
9000ccb8:	683b      	ldr	r3, [r7, #0]
9000ccba:	429a      	cmp	r2, r3
9000ccbc:	d013      	beq.n	9000cce6 <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
9000ccbe:	683b      	ldr	r3, [r7, #0]
9000ccc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000ccc2:	683b      	ldr	r3, [r7, #0]
9000ccc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000ccc6:	429a      	cmp	r2, r3
9000ccc8:	d10d      	bne.n	9000cce6 <_tx_thread_time_slice+0x6e>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
9000ccca:	683a      	ldr	r2, [r7, #0]
9000cccc:	683b      	ldr	r3, [r7, #0]
9000ccce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ccd0:	6a12      	ldr	r2, [r2, #32]
9000ccd2:	494c      	ldr	r1, [pc, #304]	; (9000ce04 <_tx_thread_time_slice+0x18c>)
9000ccd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
9000ccd8:	4b4b      	ldr	r3, [pc, #300]	; (9000ce08 <_tx_thread_time_slice+0x190>)
9000ccda:	681b      	ldr	r3, [r3, #0]
9000ccdc:	4a49      	ldr	r2, [pc, #292]	; (9000ce04 <_tx_thread_time_slice+0x18c>)
9000ccde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000cce2:	4a4a      	ldr	r2, [pc, #296]	; (9000ce0c <_tx_thread_time_slice+0x194>)
9000cce4:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000cce6:	f3ef 8305 	mrs	r3, IPSR
9000ccea:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
9000ccec:	68fa      	ldr	r2, [r7, #12]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
9000ccee:	4b48      	ldr	r3, [pc, #288]	; (9000ce10 <_tx_thread_time_slice+0x198>)
9000ccf0:	681b      	ldr	r3, [r3, #0]
9000ccf2:	4313      	orrs	r3, r2
9000ccf4:	623b      	str	r3, [r7, #32]
    preempt_disable =  _tx_thread_preempt_disable;
9000ccf6:	4b47      	ldr	r3, [pc, #284]	; (9000ce14 <_tx_thread_time_slice+0x19c>)
9000ccf8:	681b      	ldr	r3, [r3, #0]
9000ccfa:	61fb      	str	r3, [r7, #28]
   
    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
9000ccfc:	4b46      	ldr	r3, [pc, #280]	; (9000ce18 <_tx_thread_time_slice+0x1a0>)
9000ccfe:	681b      	ldr	r3, [r3, #0]
9000cd00:	61bb      	str	r3, [r7, #24]
9000cd02:	69bb      	ldr	r3, [r7, #24]
9000cd04:	2b00      	cmp	r3, #0
9000cd06:	d06d      	beq.n	9000cde4 <_tx_thread_time_slice+0x16c>
9000cd08:	4b44      	ldr	r3, [pc, #272]	; (9000ce1c <_tx_thread_time_slice+0x1a4>)
9000cd0a:	681b      	ldr	r3, [r3, #0]
9000cd0c:	f003 0301 	and.w	r3, r3, #1
9000cd10:	2b00      	cmp	r3, #0
9000cd12:	d067      	beq.n	9000cde4 <_tx_thread_time_slice+0x16c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000cd14:	f3ef 8305 	mrs	r3, IPSR
9000cd18:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
9000cd1a:	68ba      	ldr	r2, [r7, #8]
9000cd1c:	4b3c      	ldr	r3, [pc, #240]	; (9000ce10 <_tx_thread_time_slice+0x198>)
9000cd1e:	681b      	ldr	r3, [r3, #0]
9000cd20:	4313      	orrs	r3, r2
9000cd22:	617b      	str	r3, [r7, #20]
9000cd24:	4b34      	ldr	r3, [pc, #208]	; (9000cdf8 <_tx_thread_time_slice+0x180>)
9000cd26:	681b      	ldr	r3, [r3, #0]
9000cd28:	62bb      	str	r3, [r7, #40]	; 0x28
9000cd2a:	697b      	ldr	r3, [r7, #20]
9000cd2c:	2b00      	cmp	r3, #0
9000cd2e:	d10b      	bne.n	9000cd48 <_tx_thread_time_slice+0xd0>
9000cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000cd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000cd34:	62fb      	str	r3, [r7, #44]	; 0x2c
9000cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000cd3a:	041a      	lsls	r2, r3, #16
9000cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000cd3e:	4313      	orrs	r3, r2
9000cd40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000cd44:	62fb      	str	r3, [r7, #44]	; 0x2c
9000cd46:	e00e      	b.n	9000cd66 <_tx_thread_time_slice+0xee>
9000cd48:	697b      	ldr	r3, [r7, #20]
9000cd4a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000cd4e:	d205      	bcs.n	9000cd5c <_tx_thread_time_slice+0xe4>
9000cd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000cd52:	62fb      	str	r3, [r7, #44]	; 0x2c
9000cd54:	f04f 33ff 	mov.w	r3, #4294967295
9000cd58:	62bb      	str	r3, [r7, #40]	; 0x28
9000cd5a:	e004      	b.n	9000cd66 <_tx_thread_time_slice+0xee>
9000cd5c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000cd60:	62bb      	str	r3, [r7, #40]	; 0x28
9000cd62:	2300      	movs	r3, #0
9000cd64:	62fb      	str	r3, [r7, #44]	; 0x2c
9000cd66:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000cd68:	69bb      	ldr	r3, [r7, #24]
9000cd6a:	601a      	str	r2, [r3, #0]
9000cd6c:	69bb      	ldr	r3, [r7, #24]
9000cd6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000cd70:	605a      	str	r2, [r3, #4]
9000cd72:	69bb      	ldr	r3, [r7, #24]
9000cd74:	2205      	movs	r2, #5
9000cd76:	609a      	str	r2, [r3, #8]
9000cd78:	4b29      	ldr	r3, [pc, #164]	; (9000ce20 <_tx_thread_time_slice+0x1a8>)
9000cd7a:	681a      	ldr	r2, [r3, #0]
9000cd7c:	69bb      	ldr	r3, [r7, #24]
9000cd7e:	60da      	str	r2, [r3, #12]
9000cd80:	4b22      	ldr	r3, [pc, #136]	; (9000ce0c <_tx_thread_time_slice+0x194>)
9000cd82:	681b      	ldr	r3, [r3, #0]
9000cd84:	461a      	mov	r2, r3
9000cd86:	69bb      	ldr	r3, [r7, #24]
9000cd88:	611a      	str	r2, [r3, #16]
9000cd8a:	69bb      	ldr	r3, [r7, #24]
9000cd8c:	6a3a      	ldr	r2, [r7, #32]
9000cd8e:	615a      	str	r2, [r3, #20]
9000cd90:	69bb      	ldr	r3, [r7, #24]
9000cd92:	69fa      	ldr	r2, [r7, #28]
9000cd94:	619a      	str	r2, [r3, #24]
9000cd96:	463a      	mov	r2, r7
9000cd98:	69bb      	ldr	r3, [r7, #24]
9000cd9a:	61da      	str	r2, [r3, #28]
9000cd9c:	69bb      	ldr	r3, [r7, #24]
9000cd9e:	3320      	adds	r3, #32
9000cda0:	61bb      	str	r3, [r7, #24]
9000cda2:	4b20      	ldr	r3, [pc, #128]	; (9000ce24 <_tx_thread_time_slice+0x1ac>)
9000cda4:	681b      	ldr	r3, [r3, #0]
9000cda6:	69ba      	ldr	r2, [r7, #24]
9000cda8:	429a      	cmp	r2, r3
9000cdaa:	d314      	bcc.n	9000cdd6 <_tx_thread_time_slice+0x15e>
9000cdac:	4b1e      	ldr	r3, [pc, #120]	; (9000ce28 <_tx_thread_time_slice+0x1b0>)
9000cdae:	681b      	ldr	r3, [r3, #0]
9000cdb0:	61bb      	str	r3, [r7, #24]
9000cdb2:	4a19      	ldr	r2, [pc, #100]	; (9000ce18 <_tx_thread_time_slice+0x1a0>)
9000cdb4:	69bb      	ldr	r3, [r7, #24]
9000cdb6:	6013      	str	r3, [r2, #0]
9000cdb8:	4b1c      	ldr	r3, [pc, #112]	; (9000ce2c <_tx_thread_time_slice+0x1b4>)
9000cdba:	681b      	ldr	r3, [r3, #0]
9000cdbc:	69ba      	ldr	r2, [r7, #24]
9000cdbe:	621a      	str	r2, [r3, #32]
9000cdc0:	4b1b      	ldr	r3, [pc, #108]	; (9000ce30 <_tx_thread_time_slice+0x1b8>)
9000cdc2:	681b      	ldr	r3, [r3, #0]
9000cdc4:	2b00      	cmp	r3, #0
9000cdc6:	d00d      	beq.n	9000cde4 <_tx_thread_time_slice+0x16c>
9000cdc8:	4b19      	ldr	r3, [pc, #100]	; (9000ce30 <_tx_thread_time_slice+0x1b8>)
9000cdca:	681b      	ldr	r3, [r3, #0]
9000cdcc:	4a17      	ldr	r2, [pc, #92]	; (9000ce2c <_tx_thread_time_slice+0x1b4>)
9000cdce:	6812      	ldr	r2, [r2, #0]
9000cdd0:	4610      	mov	r0, r2
9000cdd2:	4798      	blx	r3
9000cdd4:	e006      	b.n	9000cde4 <_tx_thread_time_slice+0x16c>
9000cdd6:	4a10      	ldr	r2, [pc, #64]	; (9000ce18 <_tx_thread_time_slice+0x1a0>)
9000cdd8:	69bb      	ldr	r3, [r7, #24]
9000cdda:	6013      	str	r3, [r2, #0]
9000cddc:	4b13      	ldr	r3, [pc, #76]	; (9000ce2c <_tx_thread_time_slice+0x1b4>)
9000cdde:	681b      	ldr	r3, [r3, #0]
9000cde0:	69ba      	ldr	r2, [r7, #24]
9000cde2:	621a      	str	r2, [r3, #32]
9000cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cde6:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000cde8:	687b      	ldr	r3, [r7, #4]
9000cdea:	f383 8810 	msr	PRIMASK, r3

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
9000cdee:	bf00      	nop
9000cdf0:	3730      	adds	r7, #48	; 0x30
9000cdf2:	46bd      	mov	sp, r7
9000cdf4:	bd80      	pop	{r7, pc}
9000cdf6:	bf00      	nop
9000cdf8:	2401c86c 	.word	0x2401c86c
9000cdfc:	2401cddc 	.word	0x2401cddc
9000ce00:	2401c904 	.word	0x2401c904
9000ce04:	2401c7d0 	.word	0x2401c7d0
9000ce08:	2401c874 	.word	0x2401c874
9000ce0c:	2401c870 	.word	0x2401c870
9000ce10:	2400a010 	.word	0x2400a010
9000ce14:	2401c868 	.word	0x2401c868
9000ce18:	2401cdf4 	.word	0x2401cdf4
9000ce1c:	2401ce00 	.word	0x2401ce00
9000ce20:	e0001004 	.word	0xe0001004
9000ce24:	2401cdec 	.word	0x2401cdec
9000ce28:	2401ce08 	.word	0x2401ce08
9000ce2c:	2401cdfc 	.word	0x2401cdfc
9000ce30:	2401cdf8 	.word	0x2401cdf8

9000ce34 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
9000ce34:	b580      	push	{r7, lr}
9000ce36:	b08a      	sub	sp, #40	; 0x28
9000ce38:	af00      	add	r7, sp, #0
9000ce3a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
9000ce3c:	687b      	ldr	r3, [r7, #4]
9000ce3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000ce40:	f3ef 8310 	mrs	r3, PRIMASK
9000ce44:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000ce46:	b672      	cpsid	i
    return(primask_value);
9000ce48:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
9000ce4a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
9000ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ce4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ce50:	2b04      	cmp	r3, #4
9000ce52:	d10d      	bne.n	9000ce70 <_tx_thread_timeout+0x3c>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
9000ce54:	4b12      	ldr	r3, [pc, #72]	; (9000cea0 <_tx_thread_timeout+0x6c>)
9000ce56:	681b      	ldr	r3, [r3, #0]
9000ce58:	3301      	adds	r3, #1
9000ce5a:	4a11      	ldr	r2, [pc, #68]	; (9000cea0 <_tx_thread_timeout+0x6c>)
9000ce5c:	6013      	str	r3, [r2, #0]
9000ce5e:	6a3b      	ldr	r3, [r7, #32]
9000ce60:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000ce62:	693b      	ldr	r3, [r7, #16]
9000ce64:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
9000ce68:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000ce6a:	f7ff faf3 	bl	9000c454 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
9000ce6e:	e012      	b.n	9000ce96 <_tx_thread_timeout+0x62>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
9000ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ce72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000ce74:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
9000ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ce78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000ce7c:	61bb      	str	r3, [r7, #24]
9000ce7e:	6a3b      	ldr	r3, [r7, #32]
9000ce80:	60fb      	str	r3, [r7, #12]
9000ce82:	68fb      	ldr	r3, [r7, #12]
9000ce84:	f383 8810 	msr	PRIMASK, r3
        if (suspend_cleanup != TX_NULL)
9000ce88:	69fb      	ldr	r3, [r7, #28]
9000ce8a:	2b00      	cmp	r3, #0
9000ce8c:	d003      	beq.n	9000ce96 <_tx_thread_timeout+0x62>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
9000ce8e:	69fb      	ldr	r3, [r7, #28]
9000ce90:	69b9      	ldr	r1, [r7, #24]
9000ce92:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000ce94:	4798      	blx	r3
}
9000ce96:	bf00      	nop
9000ce98:	3728      	adds	r7, #40	; 0x28
9000ce9a:	46bd      	mov	sp, r7
9000ce9c:	bd80      	pop	{r7, pc}
9000ce9e:	bf00      	nop
9000cea0:	2401c868 	.word	0x2401c868

9000cea4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
9000cea4:	b580      	push	{r7, lr}
9000cea6:	b084      	sub	sp, #16
9000cea8:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000ceaa:	f3ef 8310 	mrs	r3, PRIMASK
9000ceae:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000ceb0:	b672      	cpsid	i
    return(primask_value);
9000ceb2:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
9000ceb4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
9000ceb6:	4b08      	ldr	r3, [pc, #32]	; (9000ced8 <_tx_timer_expiration_process+0x34>)
9000ceb8:	681b      	ldr	r3, [r3, #0]
9000ceba:	3301      	adds	r3, #1
9000cebc:	4a06      	ldr	r2, [pc, #24]	; (9000ced8 <_tx_timer_expiration_process+0x34>)
9000cebe:	6013      	str	r3, [r2, #0]
9000cec0:	68fb      	ldr	r3, [r7, #12]
9000cec2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000cec4:	68bb      	ldr	r3, [r7, #8]
9000cec6:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
9000ceca:	4804      	ldr	r0, [pc, #16]	; (9000cedc <_tx_timer_expiration_process+0x38>)
9000cecc:	f7ff fac2 	bl	9000c454 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
9000ced0:	bf00      	nop
9000ced2:	3710      	adds	r7, #16
9000ced4:	46bd      	mov	sp, r7
9000ced6:	bd80      	pop	{r7, pc}
9000ced8:	2401c868 	.word	0x2401c868
9000cedc:	2401c910 	.word	0x2401c910

9000cee0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
9000cee0:	b590      	push	{r4, r7, lr}
9000cee2:	b089      	sub	sp, #36	; 0x24
9000cee4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
9000cee6:	4b28      	ldr	r3, [pc, #160]	; (9000cf88 <_tx_timer_initialize+0xa8>)
9000cee8:	2200      	movs	r2, #0
9000ceea:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
9000ceec:	4b27      	ldr	r3, [pc, #156]	; (9000cf8c <_tx_timer_initialize+0xac>)
9000ceee:	2200      	movs	r2, #0
9000cef0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
9000cef2:	4b27      	ldr	r3, [pc, #156]	; (9000cf90 <_tx_timer_initialize+0xb0>)
9000cef4:	2200      	movs	r2, #0
9000cef6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
9000cef8:	4b26      	ldr	r3, [pc, #152]	; (9000cf94 <_tx_timer_initialize+0xb4>)
9000cefa:	2200      	movs	r2, #0
9000cefc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
9000cefe:	4b26      	ldr	r3, [pc, #152]	; (9000cf98 <_tx_timer_initialize+0xb8>)
9000cf00:	2200      	movs	r2, #0
9000cf02:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
9000cf04:	2280      	movs	r2, #128	; 0x80
9000cf06:	2100      	movs	r1, #0
9000cf08:	4824      	ldr	r0, [pc, #144]	; (9000cf9c <_tx_timer_initialize+0xbc>)
9000cf0a:	f001 f847 	bl	9000df9c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
9000cf0e:	4b24      	ldr	r3, [pc, #144]	; (9000cfa0 <_tx_timer_initialize+0xc0>)
9000cf10:	4a22      	ldr	r2, [pc, #136]	; (9000cf9c <_tx_timer_initialize+0xbc>)
9000cf12:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
9000cf14:	4b23      	ldr	r3, [pc, #140]	; (9000cfa4 <_tx_timer_initialize+0xc4>)
9000cf16:	4a21      	ldr	r2, [pc, #132]	; (9000cf9c <_tx_timer_initialize+0xbc>)
9000cf18:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
9000cf1a:	4b23      	ldr	r3, [pc, #140]	; (9000cfa8 <_tx_timer_initialize+0xc8>)
9000cf1c:	4a23      	ldr	r2, [pc, #140]	; (9000cfac <_tx_timer_initialize+0xcc>)
9000cf1e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
9000cf20:	4b21      	ldr	r3, [pc, #132]	; (9000cfa8 <_tx_timer_initialize+0xc8>)
9000cf22:	681b      	ldr	r3, [r3, #0]
9000cf24:	3304      	adds	r3, #4
9000cf26:	4a20      	ldr	r2, [pc, #128]	; (9000cfa8 <_tx_timer_initialize+0xc8>)
9000cf28:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
9000cf2a:	4b21      	ldr	r3, [pc, #132]	; (9000cfb0 <_tx_timer_initialize+0xd0>)
9000cf2c:	4a21      	ldr	r2, [pc, #132]	; (9000cfb4 <_tx_timer_initialize+0xd4>)
9000cf2e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
9000cf30:	4b21      	ldr	r3, [pc, #132]	; (9000cfb8 <_tx_timer_initialize+0xd8>)
9000cf32:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000cf36:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
9000cf38:	4b20      	ldr	r3, [pc, #128]	; (9000cfbc <_tx_timer_initialize+0xdc>)
9000cf3a:	2200      	movs	r2, #0
9000cf3c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
9000cf3e:	4b1c      	ldr	r3, [pc, #112]	; (9000cfb0 <_tx_timer_initialize+0xd0>)
9000cf40:	681b      	ldr	r3, [r3, #0]
9000cf42:	4a1d      	ldr	r2, [pc, #116]	; (9000cfb8 <_tx_timer_initialize+0xd8>)
9000cf44:	6812      	ldr	r2, [r2, #0]
9000cf46:	491d      	ldr	r1, [pc, #116]	; (9000cfbc <_tx_timer_initialize+0xdc>)
9000cf48:	6809      	ldr	r1, [r1, #0]
9000cf4a:	481c      	ldr	r0, [pc, #112]	; (9000cfbc <_tx_timer_initialize+0xdc>)
9000cf4c:	6800      	ldr	r0, [r0, #0]
9000cf4e:	2400      	movs	r4, #0
9000cf50:	9405      	str	r4, [sp, #20]
9000cf52:	2400      	movs	r4, #0
9000cf54:	9404      	str	r4, [sp, #16]
9000cf56:	9003      	str	r0, [sp, #12]
9000cf58:	9102      	str	r1, [sp, #8]
9000cf5a:	9201      	str	r2, [sp, #4]
9000cf5c:	9300      	str	r3, [sp, #0]
9000cf5e:	4b18      	ldr	r3, [pc, #96]	; (9000cfc0 <_tx_timer_initialize+0xe0>)
9000cf60:	4a18      	ldr	r2, [pc, #96]	; (9000cfc4 <_tx_timer_initialize+0xe4>)
9000cf62:	4919      	ldr	r1, [pc, #100]	; (9000cfc8 <_tx_timer_initialize+0xe8>)
9000cf64:	4819      	ldr	r0, [pc, #100]	; (9000cfcc <_tx_timer_initialize+0xec>)
9000cf66:	f7fe ff3b 	bl	9000bde0 <_tx_thread_create>
9000cf6a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
9000cf6c:	687b      	ldr	r3, [r7, #4]
9000cf6e:	2b00      	cmp	r3, #0
9000cf70:	d1e5      	bne.n	9000cf3e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
9000cf72:	4b17      	ldr	r3, [pc, #92]	; (9000cfd0 <_tx_timer_initialize+0xf0>)
9000cf74:	2200      	movs	r2, #0
9000cf76:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
9000cf78:	4b16      	ldr	r3, [pc, #88]	; (9000cfd4 <_tx_timer_initialize+0xf4>)
9000cf7a:	2200      	movs	r2, #0
9000cf7c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
9000cf7e:	bf00      	nop
9000cf80:	370c      	adds	r7, #12
9000cf82:	46bd      	mov	sp, r7
9000cf84:	bd90      	pop	{r4, r7, pc}
9000cf86:	bf00      	nop
9000cf88:	2401cde0 	.word	0x2401cde0
9000cf8c:	2401c904 	.word	0x2401c904
9000cf90:	2401cddc 	.word	0x2401cddc
9000cf94:	2401c900 	.word	0x2401c900
9000cf98:	2401c9c4 	.word	0x2401c9c4
9000cf9c:	2401c880 	.word	0x2401c880
9000cfa0:	2401c9c8 	.word	0x2401c9c8
9000cfa4:	2401c87c 	.word	0x2401c87c
9000cfa8:	2401c90c 	.word	0x2401c90c
9000cfac:	2401c8fc 	.word	0x2401c8fc
9000cfb0:	2401cdd4 	.word	0x2401cdd4
9000cfb4:	2401c9d4 	.word	0x2401c9d4
9000cfb8:	2401c9d0 	.word	0x2401c9d0
9000cfbc:	2401c908 	.word	0x2401c908
9000cfc0:	4154494d 	.word	0x4154494d
9000cfc4:	9000d10d 	.word	0x9000d10d
9000cfc8:	9000eff0 	.word	0x9000eff0
9000cfcc:	2401c910 	.word	0x2401c910
9000cfd0:	2401c9cc 	.word	0x2401c9cc
9000cfd4:	2401cdd8 	.word	0x2401cdd8

9000cfd8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
9000cfd8:	b480      	push	{r7}
9000cfda:	b089      	sub	sp, #36	; 0x24
9000cfdc:	af00      	add	r7, sp, #0
9000cfde:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
9000cfe0:	687b      	ldr	r3, [r7, #4]
9000cfe2:	681b      	ldr	r3, [r3, #0]
9000cfe4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
9000cfe6:	697b      	ldr	r3, [r7, #20]
9000cfe8:	2b00      	cmp	r3, #0
9000cfea:	d04a      	beq.n	9000d082 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
9000cfec:	697b      	ldr	r3, [r7, #20]
9000cfee:	f1b3 3fff 	cmp.w	r3, #4294967295
9000cff2:	d046      	beq.n	9000d082 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
9000cff4:	687b      	ldr	r3, [r7, #4]
9000cff6:	699b      	ldr	r3, [r3, #24]
9000cff8:	2b00      	cmp	r3, #0
9000cffa:	d142      	bne.n	9000d082 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
9000cffc:	697b      	ldr	r3, [r7, #20]
9000cffe:	2b20      	cmp	r3, #32
9000d000:	d902      	bls.n	9000d008 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
9000d002:	231f      	movs	r3, #31
9000d004:	61bb      	str	r3, [r7, #24]
9000d006:	e002      	b.n	9000d00e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
9000d008:	697b      	ldr	r3, [r7, #20]
9000d00a:	3b01      	subs	r3, #1
9000d00c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
9000d00e:	4b20      	ldr	r3, [pc, #128]	; (9000d090 <_tx_timer_system_activate+0xb8>)
9000d010:	681a      	ldr	r2, [r3, #0]
9000d012:	69bb      	ldr	r3, [r7, #24]
9000d014:	009b      	lsls	r3, r3, #2
9000d016:	4413      	add	r3, r2
9000d018:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
9000d01a:	4b1e      	ldr	r3, [pc, #120]	; (9000d094 <_tx_timer_system_activate+0xbc>)
9000d01c:	681b      	ldr	r3, [r3, #0]
9000d01e:	69fa      	ldr	r2, [r7, #28]
9000d020:	429a      	cmp	r2, r3
9000d022:	d30b      	bcc.n	9000d03c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
9000d024:	69fb      	ldr	r3, [r7, #28]
9000d026:	4a1b      	ldr	r2, [pc, #108]	; (9000d094 <_tx_timer_system_activate+0xbc>)
9000d028:	6812      	ldr	r2, [r2, #0]
9000d02a:	1a9b      	subs	r3, r3, r2
9000d02c:	109b      	asrs	r3, r3, #2
9000d02e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
9000d030:	4b19      	ldr	r3, [pc, #100]	; (9000d098 <_tx_timer_system_activate+0xc0>)
9000d032:	681a      	ldr	r2, [r3, #0]
9000d034:	693b      	ldr	r3, [r7, #16]
9000d036:	009b      	lsls	r3, r3, #2
9000d038:	4413      	add	r3, r2
9000d03a:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
9000d03c:	69fb      	ldr	r3, [r7, #28]
9000d03e:	681b      	ldr	r3, [r3, #0]
9000d040:	2b00      	cmp	r3, #0
9000d042:	d109      	bne.n	9000d058 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
9000d044:	687b      	ldr	r3, [r7, #4]
9000d046:	687a      	ldr	r2, [r7, #4]
9000d048:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
9000d04a:	687b      	ldr	r3, [r7, #4]
9000d04c:	687a      	ldr	r2, [r7, #4]
9000d04e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
9000d050:	69fb      	ldr	r3, [r7, #28]
9000d052:	687a      	ldr	r2, [r7, #4]
9000d054:	601a      	str	r2, [r3, #0]
9000d056:	e011      	b.n	9000d07c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
9000d058:	69fb      	ldr	r3, [r7, #28]
9000d05a:	681b      	ldr	r3, [r3, #0]
9000d05c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
9000d05e:	68fb      	ldr	r3, [r7, #12]
9000d060:	695b      	ldr	r3, [r3, #20]
9000d062:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
9000d064:	68bb      	ldr	r3, [r7, #8]
9000d066:	687a      	ldr	r2, [r7, #4]
9000d068:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
9000d06a:	68fb      	ldr	r3, [r7, #12]
9000d06c:	687a      	ldr	r2, [r7, #4]
9000d06e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
9000d070:	687b      	ldr	r3, [r7, #4]
9000d072:	68fa      	ldr	r2, [r7, #12]
9000d074:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
9000d076:	687b      	ldr	r3, [r7, #4]
9000d078:	68ba      	ldr	r2, [r7, #8]
9000d07a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
9000d07c:	687b      	ldr	r3, [r7, #4]
9000d07e:	69fa      	ldr	r2, [r7, #28]
9000d080:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
9000d082:	bf00      	nop
9000d084:	3724      	adds	r7, #36	; 0x24
9000d086:	46bd      	mov	sp, r7
9000d088:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d08c:	4770      	bx	lr
9000d08e:	bf00      	nop
9000d090:	2401c87c 	.word	0x2401c87c
9000d094:	2401c90c 	.word	0x2401c90c
9000d098:	2401c9c8 	.word	0x2401c9c8

9000d09c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
9000d09c:	b480      	push	{r7}
9000d09e:	b087      	sub	sp, #28
9000d0a0:	af00      	add	r7, sp, #0
9000d0a2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
9000d0a4:	687b      	ldr	r3, [r7, #4]
9000d0a6:	699b      	ldr	r3, [r3, #24]
9000d0a8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
9000d0aa:	697b      	ldr	r3, [r7, #20]
9000d0ac:	2b00      	cmp	r3, #0
9000d0ae:	d026      	beq.n	9000d0fe <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
9000d0b0:	687b      	ldr	r3, [r7, #4]
9000d0b2:	691b      	ldr	r3, [r3, #16]
9000d0b4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
9000d0b6:	687a      	ldr	r2, [r7, #4]
9000d0b8:	693b      	ldr	r3, [r7, #16]
9000d0ba:	429a      	cmp	r2, r3
9000d0bc:	d108      	bne.n	9000d0d0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
9000d0be:	697b      	ldr	r3, [r7, #20]
9000d0c0:	681b      	ldr	r3, [r3, #0]
9000d0c2:	687a      	ldr	r2, [r7, #4]
9000d0c4:	429a      	cmp	r2, r3
9000d0c6:	d117      	bne.n	9000d0f8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
9000d0c8:	697b      	ldr	r3, [r7, #20]
9000d0ca:	2200      	movs	r2, #0
9000d0cc:	601a      	str	r2, [r3, #0]
9000d0ce:	e013      	b.n	9000d0f8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
9000d0d0:	687b      	ldr	r3, [r7, #4]
9000d0d2:	695b      	ldr	r3, [r3, #20]
9000d0d4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
9000d0d6:	693b      	ldr	r3, [r7, #16]
9000d0d8:	68fa      	ldr	r2, [r7, #12]
9000d0da:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
9000d0dc:	68fb      	ldr	r3, [r7, #12]
9000d0de:	693a      	ldr	r2, [r7, #16]
9000d0e0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
9000d0e2:	697b      	ldr	r3, [r7, #20]
9000d0e4:	681b      	ldr	r3, [r3, #0]
9000d0e6:	687a      	ldr	r2, [r7, #4]
9000d0e8:	429a      	cmp	r2, r3
9000d0ea:	d105      	bne.n	9000d0f8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
9000d0ec:	693b      	ldr	r3, [r7, #16]
9000d0ee:	697a      	ldr	r2, [r7, #20]
9000d0f0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
9000d0f2:	697b      	ldr	r3, [r7, #20]
9000d0f4:	693a      	ldr	r2, [r7, #16]
9000d0f6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
9000d0f8:	687b      	ldr	r3, [r7, #4]
9000d0fa:	2200      	movs	r2, #0
9000d0fc:	619a      	str	r2, [r3, #24]
    }
}
9000d0fe:	bf00      	nop
9000d100:	371c      	adds	r7, #28
9000d102:	46bd      	mov	sp, r7
9000d104:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d108:	4770      	bx	lr
	...

9000d10c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
9000d10c:	b580      	push	{r7, lr}
9000d10e:	b094      	sub	sp, #80	; 0x50
9000d110:	af00      	add	r7, sp, #0
9000d112:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
9000d114:	2300      	movs	r3, #0
9000d116:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
9000d118:	687b      	ldr	r3, [r7, #4]
9000d11a:	4a6c      	ldr	r2, [pc, #432]	; (9000d2cc <_tx_timer_thread_entry+0x1c0>)
9000d11c:	4293      	cmp	r3, r2
9000d11e:	f040 80d0 	bne.w	9000d2c2 <_tx_timer_thread_entry+0x1b6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000d122:	f3ef 8310 	mrs	r3, PRIMASK
9000d126:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
9000d128:	b672      	cpsid	i
    return(primask_value);
9000d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
9000d12c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
9000d12e:	4b68      	ldr	r3, [pc, #416]	; (9000d2d0 <_tx_timer_thread_entry+0x1c4>)
9000d130:	681b      	ldr	r3, [r3, #0]
9000d132:	681b      	ldr	r3, [r3, #0]
9000d134:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
9000d136:	68fb      	ldr	r3, [r7, #12]
9000d138:	2b00      	cmp	r3, #0
9000d13a:	d003      	beq.n	9000d144 <_tx_timer_thread_entry+0x38>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
9000d13c:	68fb      	ldr	r3, [r7, #12]
9000d13e:	f107 020c 	add.w	r2, r7, #12
9000d142:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
9000d144:	4b62      	ldr	r3, [pc, #392]	; (9000d2d0 <_tx_timer_thread_entry+0x1c4>)
9000d146:	681b      	ldr	r3, [r3, #0]
9000d148:	2200      	movs	r2, #0
9000d14a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
9000d14c:	4b60      	ldr	r3, [pc, #384]	; (9000d2d0 <_tx_timer_thread_entry+0x1c4>)
9000d14e:	681b      	ldr	r3, [r3, #0]
9000d150:	3304      	adds	r3, #4
9000d152:	4a5f      	ldr	r2, [pc, #380]	; (9000d2d0 <_tx_timer_thread_entry+0x1c4>)
9000d154:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
9000d156:	4b5e      	ldr	r3, [pc, #376]	; (9000d2d0 <_tx_timer_thread_entry+0x1c4>)
9000d158:	681a      	ldr	r2, [r3, #0]
9000d15a:	4b5e      	ldr	r3, [pc, #376]	; (9000d2d4 <_tx_timer_thread_entry+0x1c8>)
9000d15c:	681b      	ldr	r3, [r3, #0]
9000d15e:	429a      	cmp	r2, r3
9000d160:	d103      	bne.n	9000d16a <_tx_timer_thread_entry+0x5e>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
9000d162:	4b5d      	ldr	r3, [pc, #372]	; (9000d2d8 <_tx_timer_thread_entry+0x1cc>)
9000d164:	681b      	ldr	r3, [r3, #0]
9000d166:	4a5a      	ldr	r2, [pc, #360]	; (9000d2d0 <_tx_timer_thread_entry+0x1c4>)
9000d168:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
9000d16a:	4b5c      	ldr	r3, [pc, #368]	; (9000d2dc <_tx_timer_thread_entry+0x1d0>)
9000d16c:	2200      	movs	r2, #0
9000d16e:	601a      	str	r2, [r3, #0]
9000d170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d172:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d176:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000d17a:	f3ef 8310 	mrs	r3, PRIMASK
9000d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
9000d180:	b672      	cpsid	i
    return(primask_value);
9000d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
9000d184:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
9000d186:	e079      	b.n	9000d27c <_tx_timer_thread_entry+0x170>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
9000d188:	68fb      	ldr	r3, [r7, #12]
9000d18a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
9000d18c:	68fb      	ldr	r3, [r7, #12]
9000d18e:	691b      	ldr	r3, [r3, #16]
9000d190:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
9000d192:	2300      	movs	r3, #0
9000d194:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
9000d196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d19a:	429a      	cmp	r2, r3
9000d19c:	d102      	bne.n	9000d1a4 <_tx_timer_thread_entry+0x98>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
9000d19e:	2300      	movs	r3, #0
9000d1a0:	60fb      	str	r3, [r7, #12]
9000d1a2:	e00e      	b.n	9000d1c2 <_tx_timer_thread_entry+0xb6>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
9000d1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1a6:	695b      	ldr	r3, [r3, #20]
9000d1a8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
9000d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d1ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000d1ae:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
9000d1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000d1b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000d1b4:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
9000d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d1b8:	f107 020c 	add.w	r2, r7, #12
9000d1bc:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
9000d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d1c0:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
9000d1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1c4:	681b      	ldr	r3, [r3, #0]
9000d1c6:	2b20      	cmp	r3, #32
9000d1c8:	d911      	bls.n	9000d1ee <_tx_timer_thread_entry+0xe2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
9000d1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1cc:	681b      	ldr	r3, [r3, #0]
9000d1ce:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
9000d1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1d4:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
9000d1d6:	2300      	movs	r3, #0
9000d1d8:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
9000d1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1dc:	f107 0208 	add.w	r2, r7, #8
9000d1e0:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
9000d1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000d1e6:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
9000d1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1ea:	60bb      	str	r3, [r7, #8]
9000d1ec:	e01a      	b.n	9000d224 <_tx_timer_thread_entry+0x118>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
9000d1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1f0:	689b      	ldr	r3, [r3, #8]
9000d1f2:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
9000d1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1f6:	68db      	ldr	r3, [r3, #12]
9000d1f8:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
9000d1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d1fc:	685a      	ldr	r2, [r3, #4]
9000d1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d200:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
9000d202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d204:	681b      	ldr	r3, [r3, #0]
9000d206:	2b00      	cmp	r3, #0
9000d208:	d009      	beq.n	9000d21e <_tx_timer_thread_entry+0x112>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
9000d20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d20c:	f107 0208 	add.w	r2, r7, #8
9000d210:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
9000d212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000d216:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
9000d218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d21a:	60bb      	str	r3, [r7, #8]
9000d21c:	e002      	b.n	9000d224 <_tx_timer_thread_entry+0x118>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
9000d21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d220:	2200      	movs	r2, #0
9000d222:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
9000d224:	4a2e      	ldr	r2, [pc, #184]	; (9000d2e0 <_tx_timer_thread_entry+0x1d4>)
9000d226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d228:	6013      	str	r3, [r2, #0]
9000d22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d22c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000d230:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
9000d234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000d236:	2b00      	cmp	r3, #0
9000d238:	d002      	beq.n	9000d240 <_tx_timer_thread_entry+0x134>
                {
            
                    (timeout_function) (timeout_param);
9000d23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000d23c:	6c78      	ldr	r0, [r7, #68]	; 0x44
9000d23e:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000d240:	f3ef 8310 	mrs	r3, PRIMASK
9000d244:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000d246:	b672      	cpsid	i
    return(primask_value);
9000d248:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
9000d24a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
9000d24c:	4b24      	ldr	r3, [pc, #144]	; (9000d2e0 <_tx_timer_thread_entry+0x1d4>)
9000d24e:	2200      	movs	r2, #0
9000d250:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
9000d252:	68bb      	ldr	r3, [r7, #8]
9000d254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000d256:	429a      	cmp	r2, r3
9000d258:	d105      	bne.n	9000d266 <_tx_timer_thread_entry+0x15a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
9000d25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d25c:	2200      	movs	r2, #0
9000d25e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
9000d260:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
9000d262:	f7ff feb9 	bl	9000cfd8 <_tx_timer_system_activate>
9000d266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d268:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000d26a:	69bb      	ldr	r3, [r7, #24]
9000d26c:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000d270:	f3ef 8310 	mrs	r3, PRIMASK
9000d274:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000d276:	b672      	cpsid	i
    return(primask_value);
9000d278:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
9000d27a:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
9000d27c:	68fb      	ldr	r3, [r7, #12]
9000d27e:	2b00      	cmp	r3, #0
9000d280:	d182      	bne.n	9000d188 <_tx_timer_thread_entry+0x7c>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
9000d282:	4b16      	ldr	r3, [pc, #88]	; (9000d2dc <_tx_timer_thread_entry+0x1d0>)
9000d284:	681b      	ldr	r3, [r3, #0]
9000d286:	2b00      	cmp	r3, #0
9000d288:	d115      	bne.n	9000d2b6 <_tx_timer_thread_entry+0x1aa>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
9000d28a:	4b16      	ldr	r3, [pc, #88]	; (9000d2e4 <_tx_timer_thread_entry+0x1d8>)
9000d28c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
9000d28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d290:	2203      	movs	r2, #3
9000d292:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
9000d294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d296:	2201      	movs	r2, #1
9000d298:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
9000d29a:	4b13      	ldr	r3, [pc, #76]	; (9000d2e8 <_tx_timer_thread_entry+0x1dc>)
9000d29c:	681b      	ldr	r3, [r3, #0]
9000d29e:	3301      	adds	r3, #1
9000d2a0:	4a11      	ldr	r2, [pc, #68]	; (9000d2e8 <_tx_timer_thread_entry+0x1dc>)
9000d2a2:	6013      	str	r3, [r2, #0]
9000d2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d2a6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000d2a8:	697b      	ldr	r3, [r7, #20]
9000d2aa:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
9000d2ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
9000d2b0:	f7ff fa90 	bl	9000c7d4 <_tx_thread_system_suspend>
9000d2b4:	e735      	b.n	9000d122 <_tx_timer_thread_entry+0x16>
9000d2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d2b8:	613b      	str	r3, [r7, #16]
9000d2ba:	693b      	ldr	r3, [r7, #16]
9000d2bc:	f383 8810 	msr	PRIMASK, r3
            TX_DISABLE
9000d2c0:	e72f      	b.n	9000d122 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
9000d2c2:	bf00      	nop
9000d2c4:	3750      	adds	r7, #80	; 0x50
9000d2c6:	46bd      	mov	sp, r7
9000d2c8:	bd80      	pop	{r7, pc}
9000d2ca:	bf00      	nop
9000d2cc:	4154494d 	.word	0x4154494d
9000d2d0:	2401c87c 	.word	0x2401c87c
9000d2d4:	2401c90c 	.word	0x2401c90c
9000d2d8:	2401c9c8 	.word	0x2401c9c8
9000d2dc:	2401c900 	.word	0x2401c900
9000d2e0:	2401c9c4 	.word	0x2401c9c4
9000d2e4:	2401c910 	.word	0x2401c910
9000d2e8:	2401c868 	.word	0x2401c868

9000d2ec <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
9000d2ec:	b580      	push	{r7, lr}
9000d2ee:	b0a4      	sub	sp, #144	; 0x90
9000d2f0:	af02      	add	r7, sp, #8
9000d2f2:	60f8      	str	r0, [r7, #12]
9000d2f4:	60b9      	str	r1, [r7, #8]
9000d2f6:	607a      	str	r2, [r7, #4]
UINT                            status;


    /* First, see if there is enough room for the control header, the registry entries, and at least one event in 
       memory supplied to this call.  */
    if (trace_buffer_size < ((sizeof(TX_TRACE_HEADER)) + ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) + (sizeof(TX_TRACE_BUFFER_ENTRY))))
9000d2f8:	687b      	ldr	r3, [r7, #4]
9000d2fa:	1c5a      	adds	r2, r3, #1
9000d2fc:	4613      	mov	r3, r2
9000d2fe:	005b      	lsls	r3, r3, #1
9000d300:	4413      	add	r3, r2
9000d302:	011b      	lsls	r3, r3, #4
9000d304:	3320      	adds	r3, #32
9000d306:	68ba      	ldr	r2, [r7, #8]
9000d308:	429a      	cmp	r2, r3
9000d30a:	d202      	bcs.n	9000d312 <_tx_trace_enable+0x26>
    {

        /* No, the memory isn't big enough to hold one trace buffer entry.  Return an error.  */
        status =  TX_SIZE_ERROR;
9000d30c:	2305      	movs	r3, #5
9000d30e:	663b      	str	r3, [r7, #96]	; 0x60
9000d310:	e2fd      	b.n	9000d90e <_tx_trace_enable+0x622>
    }

    /* Determine if trace is already enabled.  */
    else if (_tx_trace_buffer_current_ptr != TX_NULL)
9000d312:	4b9a      	ldr	r3, [pc, #616]	; (9000d57c <_tx_trace_enable+0x290>)
9000d314:	681b      	ldr	r3, [r3, #0]
9000d316:	2b00      	cmp	r3, #0
9000d318:	d002      	beq.n	9000d320 <_tx_trace_enable+0x34>
    {
    
        /* Yes, trace is already enabled.  */
        status =  TX_NOT_DONE;
9000d31a:	2320      	movs	r3, #32
9000d31c:	663b      	str	r3, [r7, #96]	; 0x60
9000d31e:	e2f6      	b.n	9000d90e <_tx_trace_enable+0x622>
    }
    else
    {

        /* Set the enable bits for all events enabled.  */
        _tx_trace_event_enable_bits =  0xFFFFFFFFUL;
9000d320:	4b97      	ldr	r3, [pc, #604]	; (9000d580 <_tx_trace_enable+0x294>)
9000d322:	f04f 32ff 	mov.w	r2, #4294967295
9000d326:	601a      	str	r2, [r3, #0]

        /* Setup working pointer to the supplied memory.  */
        work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(trace_buffer_start);
9000d328:	68fb      	ldr	r3, [r7, #12]
9000d32a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Setup pointer to the trace control area.  */
        _tx_trace_header_ptr =  TX_UCHAR_TO_HEADER_POINTER_CONVERT(work_ptr);
9000d32c:	4a95      	ldr	r2, [pc, #596]	; (9000d584 <_tx_trace_enable+0x298>)
9000d32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d330:	6013      	str	r3, [r2, #0]

        /* Move the working pointer past the control area.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_HEADER)));
9000d332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d334:	3330      	adds	r3, #48	; 0x30
9000d336:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Save the start of the trace object registry.  */
        _tx_trace_registry_start_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
9000d338:	4a93      	ldr	r2, [pc, #588]	; (9000d588 <_tx_trace_enable+0x29c>)
9000d33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d33c:	6013      	str	r3, [r2, #0]

        /* Setup the end of the trace object registry.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*registry_entries);
9000d33e:	687a      	ldr	r2, [r7, #4]
9000d340:	4613      	mov	r3, r2
9000d342:	005b      	lsls	r3, r3, #1
9000d344:	4413      	add	r3, r2
9000d346:	011b      	lsls	r3, r3, #4
9000d348:	461a      	mov	r2, r3
9000d34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d34c:	4413      	add	r3, r2
9000d34e:	64fb      	str	r3, [r7, #76]	; 0x4c
        _tx_trace_registry_end_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
9000d350:	4a8e      	ldr	r2, [pc, #568]	; (9000d58c <_tx_trace_enable+0x2a0>)
9000d352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d354:	6013      	str	r3, [r2, #0]

        /* Loop to make all trace object registry entries empty and valid.  */
        for (i = ((ULONG) 0); i < registry_entries; i++)
9000d356:	2300      	movs	r3, #0
9000d358:	667b      	str	r3, [r7, #100]	; 0x64
9000d35a:	e01f      	b.n	9000d39c <_tx_trace_enable+0xb0>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
9000d35c:	4b8a      	ldr	r3, [pc, #552]	; (9000d588 <_tx_trace_enable+0x29c>)
9000d35e:	681b      	ldr	r3, [r3, #0]
9000d360:	64fb      	str	r3, [r7, #76]	; 0x4c
            work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*i);
9000d362:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000d364:	4613      	mov	r3, r2
9000d366:	005b      	lsls	r3, r3, #1
9000d368:	4413      	add	r3, r2
9000d36a:	011b      	lsls	r3, r3, #4
9000d36c:	461a      	mov	r2, r3
9000d36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d370:	4413      	add	r3, r2
9000d372:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Convert to a registry entry pointer.  */
            entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
9000d374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d376:	62fb      	str	r3, [r7, #44]	; 0x2c
            
            /* Initialize object registry entry.  */
            entry_ptr -> tx_trace_object_entry_available =         (UCHAR) TX_TRUE;
9000d378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d37a:	2201      	movs	r2, #1
9000d37c:	701a      	strb	r2, [r3, #0]
            entry_ptr -> tx_trace_object_entry_type =              (UCHAR) TX_TRACE_OBJECT_TYPE_NOT_VALID;
9000d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d380:	2200      	movs	r2, #0
9000d382:	705a      	strb	r2, [r3, #1]
            entry_ptr -> tx_trace_object_entry_reserved1 =         (UCHAR) 0;
9000d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d386:	2200      	movs	r2, #0
9000d388:	709a      	strb	r2, [r3, #2]
            entry_ptr -> tx_trace_object_entry_reserved2 =         (UCHAR) 0;
9000d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d38c:	2200      	movs	r2, #0
9000d38e:	70da      	strb	r2, [r3, #3]
            entry_ptr -> tx_trace_object_entry_thread_pointer =    (ULONG) 0;
9000d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d392:	2200      	movs	r2, #0
9000d394:	605a      	str	r2, [r3, #4]
        for (i = ((ULONG) 0); i < registry_entries; i++)
9000d396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d398:	3301      	adds	r3, #1
9000d39a:	667b      	str	r3, [r7, #100]	; 0x64
9000d39c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000d39e:	687b      	ldr	r3, [r7, #4]
9000d3a0:	429a      	cmp	r2, r3
9000d3a2:	d3db      	bcc.n	9000d35c <_tx_trace_enable+0x70>
        }

        /* Setup the total number of registry entries.  */
        _tx_trace_total_registry_entries =  registry_entries;
9000d3a4:	4a7a      	ldr	r2, [pc, #488]	; (9000d590 <_tx_trace_enable+0x2a4>)
9000d3a6:	687b      	ldr	r3, [r7, #4]
9000d3a8:	6013      	str	r3, [r2, #0]
     
        /* Setup the object registry available count to the total number of registry entries.  */
        _tx_trace_available_registry_entries =  registry_entries;
9000d3aa:	4a7a      	ldr	r2, [pc, #488]	; (9000d594 <_tx_trace_enable+0x2a8>)
9000d3ac:	687b      	ldr	r3, [r7, #4]
9000d3ae:	6013      	str	r3, [r2, #0]
    
        /* Setup the search starting index to the first entry.  */
        _tx_trace_registry_search_start =  ((ULONG) 0);
9000d3b0:	4b79      	ldr	r3, [pc, #484]	; (9000d598 <_tx_trace_enable+0x2ac>)
9000d3b2:	2200      	movs	r2, #0
9000d3b4:	601a      	str	r2, [r3, #0]

        /* Setup the work pointer to after the trace object registry.  */
        work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_end_ptr);
9000d3b6:	4b75      	ldr	r3, [pc, #468]	; (9000d58c <_tx_trace_enable+0x2a0>)
9000d3b8:	681b      	ldr	r3, [r3, #0]
9000d3ba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the remaining trace buffer size.  */
        trace_buffer_size =  trace_buffer_size - ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) - (sizeof(TX_TRACE_HEADER));
9000d3bc:	687a      	ldr	r2, [r7, #4]
9000d3be:	4613      	mov	r3, r2
9000d3c0:	005b      	lsls	r3, r3, #1
9000d3c2:	4413      	add	r3, r2
9000d3c4:	011b      	lsls	r3, r3, #4
9000d3c6:	461a      	mov	r2, r3
9000d3c8:	68bb      	ldr	r3, [r7, #8]
9000d3ca:	1a9b      	subs	r3, r3, r2
9000d3cc:	3b30      	subs	r3, #48	; 0x30
9000d3ce:	60bb      	str	r3, [r7, #8]

        /* Setup pointer to the start of the actual event trace log.  */
        _tx_trace_buffer_start_ptr =      TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
9000d3d0:	4a72      	ldr	r2, [pc, #456]	; (9000d59c <_tx_trace_enable+0x2b0>)
9000d3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d3d4:	6013      	str	r3, [r2, #0]
        
        /* Save the event trace log start address.  */
        event_start_ptr =  work_ptr;
9000d3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d3d8:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Calculate the end of the trace buffer.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, ((trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY)))*(sizeof(TX_TRACE_BUFFER_ENTRY))));
9000d3da:	68bb      	ldr	r3, [r7, #8]
9000d3dc:	f023 031f 	bic.w	r3, r3, #31
9000d3e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000d3e2:	4413      	add	r3, r2
9000d3e4:	64fb      	str	r3, [r7, #76]	; 0x4c
        _tx_trace_buffer_end_ptr =        TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
9000d3e6:	4a6e      	ldr	r2, [pc, #440]	; (9000d5a0 <_tx_trace_enable+0x2b4>)
9000d3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d3ea:	6013      	str	r3, [r2, #0]

        /* Loop to mark all entries in the trace buffer as invalid.  */
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
9000d3ec:	2300      	movs	r3, #0
9000d3ee:	667b      	str	r3, [r7, #100]	; 0x64
9000d3f0:	e00c      	b.n	9000d40c <_tx_trace_enable+0x120>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(event_start_ptr, (sizeof(TX_TRACE_BUFFER_ENTRY))*i);
9000d3f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d3f4:	015b      	lsls	r3, r3, #5
9000d3f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000d3f8:	4413      	add	r3, r2
9000d3fa:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Convert to a trace event pointer.  */
            event_ptr =  TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
9000d3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d3fe:	633b      	str	r3, [r7, #48]	; 0x30
          
            /* Mark this trace event as invalid.  */
            event_ptr -> tx_trace_buffer_entry_thread_pointer =  ((ULONG) 0);
9000d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000d402:	2200      	movs	r2, #0
9000d404:	601a      	str	r2, [r3, #0]
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
9000d406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d408:	3301      	adds	r3, #1
9000d40a:	667b      	str	r3, [r7, #100]	; 0x64
9000d40c:	68bb      	ldr	r3, [r7, #8]
9000d40e:	095b      	lsrs	r3, r3, #5
9000d410:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000d412:	429a      	cmp	r2, r3
9000d414:	d3ed      	bcc.n	9000d3f2 <_tx_trace_enable+0x106>
        }

        /* Now, fill in the event trace control header.  */
        _tx_trace_header_ptr -> tx_trace_header_id =                             TX_TRACE_VALID;
9000d416:	4b5b      	ldr	r3, [pc, #364]	; (9000d584 <_tx_trace_enable+0x298>)
9000d418:	681b      	ldr	r3, [r3, #0]
9000d41a:	4a62      	ldr	r2, [pc, #392]	; (9000d5a4 <_tx_trace_enable+0x2b8>)
9000d41c:	601a      	str	r2, [r3, #0]
        _tx_trace_header_ptr -> tx_trace_header_timer_valid_mask =               TX_TRACE_TIME_MASK;
9000d41e:	4b59      	ldr	r3, [pc, #356]	; (9000d584 <_tx_trace_enable+0x298>)
9000d420:	681b      	ldr	r3, [r3, #0]
9000d422:	f04f 32ff 	mov.w	r2, #4294967295
9000d426:	605a      	str	r2, [r3, #4]
        _tx_trace_header_ptr -> tx_trace_header_trace_base_address =             TX_POINTER_TO_ULONG_CONVERT(trace_buffer_start);
9000d428:	4b56      	ldr	r3, [pc, #344]	; (9000d584 <_tx_trace_enable+0x298>)
9000d42a:	681b      	ldr	r3, [r3, #0]
9000d42c:	68fa      	ldr	r2, [r7, #12]
9000d42e:	609a      	str	r2, [r3, #8]
        _tx_trace_header_ptr -> tx_trace_header_registry_start_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_start_ptr);
9000d430:	4b55      	ldr	r3, [pc, #340]	; (9000d588 <_tx_trace_enable+0x29c>)
9000d432:	681a      	ldr	r2, [r3, #0]
9000d434:	4b53      	ldr	r3, [pc, #332]	; (9000d584 <_tx_trace_enable+0x298>)
9000d436:	681b      	ldr	r3, [r3, #0]
9000d438:	60da      	str	r2, [r3, #12]
        _tx_trace_header_ptr -> tx_trace_header_reserved1 =                      ((USHORT) 0);
9000d43a:	4b52      	ldr	r3, [pc, #328]	; (9000d584 <_tx_trace_enable+0x298>)
9000d43c:	681b      	ldr	r3, [r3, #0]
9000d43e:	2200      	movs	r2, #0
9000d440:	821a      	strh	r2, [r3, #16]
        _tx_trace_header_ptr -> tx_trace_header_object_name_size =               ((USHORT) TX_TRACE_OBJECT_REGISTRY_NAME);
9000d442:	4b50      	ldr	r3, [pc, #320]	; (9000d584 <_tx_trace_enable+0x298>)
9000d444:	681b      	ldr	r3, [r3, #0]
9000d446:	2220      	movs	r2, #32
9000d448:	825a      	strh	r2, [r3, #18]
        _tx_trace_header_ptr -> tx_trace_header_registry_end_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_end_ptr);
9000d44a:	4b50      	ldr	r3, [pc, #320]	; (9000d58c <_tx_trace_enable+0x2a0>)
9000d44c:	681a      	ldr	r2, [r3, #0]
9000d44e:	4b4d      	ldr	r3, [pc, #308]	; (9000d584 <_tx_trace_enable+0x298>)
9000d450:	681b      	ldr	r3, [r3, #0]
9000d452:	615a      	str	r2, [r3, #20]
        _tx_trace_header_ptr -> tx_trace_header_buffer_start_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
9000d454:	4b51      	ldr	r3, [pc, #324]	; (9000d59c <_tx_trace_enable+0x2b0>)
9000d456:	681a      	ldr	r2, [r3, #0]
9000d458:	4b4a      	ldr	r3, [pc, #296]	; (9000d584 <_tx_trace_enable+0x298>)
9000d45a:	681b      	ldr	r3, [r3, #0]
9000d45c:	619a      	str	r2, [r3, #24]
        _tx_trace_header_ptr -> tx_trace_header_buffer_end_pointer =             TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_end_ptr);
9000d45e:	4b50      	ldr	r3, [pc, #320]	; (9000d5a0 <_tx_trace_enable+0x2b4>)
9000d460:	681a      	ldr	r2, [r3, #0]
9000d462:	4b48      	ldr	r3, [pc, #288]	; (9000d584 <_tx_trace_enable+0x298>)
9000d464:	681b      	ldr	r3, [r3, #0]
9000d466:	61da      	str	r2, [r3, #28]
        _tx_trace_header_ptr -> tx_trace_header_buffer_current_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
9000d468:	4b4c      	ldr	r3, [pc, #304]	; (9000d59c <_tx_trace_enable+0x2b0>)
9000d46a:	681a      	ldr	r2, [r3, #0]
9000d46c:	4b45      	ldr	r3, [pc, #276]	; (9000d584 <_tx_trace_enable+0x298>)
9000d46e:	681b      	ldr	r3, [r3, #0]
9000d470:	621a      	str	r2, [r3, #32]
        _tx_trace_header_ptr -> tx_trace_header_reserved2 =                      0xAAAAAAAAUL;
9000d472:	4b44      	ldr	r3, [pc, #272]	; (9000d584 <_tx_trace_enable+0x298>)
9000d474:	681b      	ldr	r3, [r3, #0]
9000d476:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
9000d47a:	625a      	str	r2, [r3, #36]	; 0x24
        _tx_trace_header_ptr -> tx_trace_header_reserved3 =                      0xBBBBBBBBUL;
9000d47c:	4b41      	ldr	r3, [pc, #260]	; (9000d584 <_tx_trace_enable+0x298>)
9000d47e:	681b      	ldr	r3, [r3, #0]
9000d480:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
9000d484:	629a      	str	r2, [r3, #40]	; 0x28
        _tx_trace_header_ptr -> tx_trace_header_reserved4 =                      0xCCCCCCCCUL;
9000d486:	4b3f      	ldr	r3, [pc, #252]	; (9000d584 <_tx_trace_enable+0x298>)
9000d488:	681b      	ldr	r3, [r3, #0]
9000d48a:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
9000d48e:	62da      	str	r2, [r3, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000d490:	f3ef 8310 	mrs	r3, PRIMASK
9000d494:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
9000d496:	b672      	cpsid	i
    return(primask_value);
9000d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        /* Now, loop through all existing ThreadX objects and register them in the newly setup trace buffer.  */

        /* Disable interrupts.  */
        TX_DISABLE
9000d49a:	647b      	str	r3, [r7, #68]	; 0x44

        /* First, disable preemption.  */
        _tx_thread_preempt_disable++;
9000d49c:	4b42      	ldr	r3, [pc, #264]	; (9000d5a8 <_tx_trace_enable+0x2bc>)
9000d49e:	681b      	ldr	r3, [r3, #0]
9000d4a0:	3301      	adds	r3, #1
9000d4a2:	4a41      	ldr	r2, [pc, #260]	; (9000d5a8 <_tx_trace_enable+0x2bc>)
9000d4a4:	6013      	str	r3, [r2, #0]
9000d4a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000d4a8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d4ac:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Pickup the first thread and the number of created threads.  */
        thread_ptr =  _tx_thread_created_ptr;
9000d4b0:	4b3e      	ldr	r3, [pc, #248]	; (9000d5ac <_tx_trace_enable+0x2c0>)
9000d4b2:	681b      	ldr	r3, [r3, #0]
9000d4b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        i =           _tx_thread_created_count;
9000d4b8:	4b3d      	ldr	r3, [pc, #244]	; (9000d5b0 <_tx_trace_enable+0x2c4>)
9000d4ba:	681b      	ldr	r3, [r3, #0]
9000d4bc:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all threads.  */
        while (i != ((ULONG) 0))
9000d4be:	e019      	b.n	9000d4f4 <_tx_trace_enable+0x208>
        {

            /* Decrement the counter.  */
            i--;
9000d4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d4c2:	3b01      	subs	r3, #1
9000d4c4:	667b      	str	r3, [r7, #100]	; 0x64
          
            /* Register this thread.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
9000d4c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
9000d4ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
9000d4cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
9000d4d0:	68db      	ldr	r3, [r3, #12]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
9000d4d2:	4619      	mov	r1, r3
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
9000d4d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
9000d4d8:	695b      	ldr	r3, [r3, #20]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name, 
9000d4da:	9300      	str	r3, [sp, #0]
9000d4dc:	460b      	mov	r3, r1
9000d4de:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
9000d4e2:	2001      	movs	r0, #1
9000d4e4:	f000 fa4a 	bl	9000d97c <_tx_trace_object_register>

            /* Move to the next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
9000d4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
9000d4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000d4f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (i != ((ULONG) 0))
9000d4f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d4f6:	2b00      	cmp	r3, #0
9000d4f8:	d1e2      	bne.n	9000d4c0 <_tx_trace_enable+0x1d4>
        }

        /* Pickup the first timer and the number of created timers.  */
        timer_ptr =  _tx_timer_created_ptr;
9000d4fa:	4b2e      	ldr	r3, [pc, #184]	; (9000d5b4 <_tx_trace_enable+0x2c8>)
9000d4fc:	681b      	ldr	r3, [r3, #0]
9000d4fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        i =          _tx_timer_created_count;
9000d502:	4b2d      	ldr	r3, [pc, #180]	; (9000d5b8 <_tx_trace_enable+0x2cc>)
9000d504:	681b      	ldr	r3, [r3, #0]
9000d506:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all timers.  */
        while (i != ((ULONG) 0))
9000d508:	e014      	b.n	9000d534 <_tx_trace_enable+0x248>
        {

            /* Decrement the counter.  */
            i--;
9000d50a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d50c:	3b01      	subs	r3, #1
9000d50e:	667b      	str	r3, [r7, #100]	; 0x64

            /* Register this timer.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_TIMER, timer_ptr, timer_ptr -> tx_timer_name, 
9000d510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
9000d514:	685a      	ldr	r2, [r3, #4]
9000d516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
9000d51a:	68db      	ldr	r3, [r3, #12]
9000d51c:	9300      	str	r3, [sp, #0]
9000d51e:	2300      	movs	r3, #0
9000d520:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
9000d524:	2002      	movs	r0, #2
9000d526:	f000 fa29 	bl	9000d97c <_tx_trace_object_register>
                                                       ((ULONG) 0), timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks);

            /* Move to the next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
9000d52a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
9000d52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000d530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (i != ((ULONG) 0))
9000d534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d536:	2b00      	cmp	r3, #0
9000d538:	d1e7      	bne.n	9000d50a <_tx_trace_enable+0x21e>
        }


        /* Pickup the first event flag group and the number of created groups.  */
        event_flags_ptr =  _tx_event_flags_created_ptr;
9000d53a:	4b20      	ldr	r3, [pc, #128]	; (9000d5bc <_tx_trace_enable+0x2d0>)
9000d53c:	681b      	ldr	r3, [r3, #0]
9000d53e:	67fb      	str	r3, [r7, #124]	; 0x7c
        i =                _tx_event_flags_created_count;
9000d540:	4b1f      	ldr	r3, [pc, #124]	; (9000d5c0 <_tx_trace_enable+0x2d4>)
9000d542:	681b      	ldr	r3, [r3, #0]
9000d544:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all event flags groups.  */
        while (i != ((ULONG) 0))
9000d546:	e00e      	b.n	9000d566 <_tx_trace_enable+0x27a>
        {

            /* Decrement the counter.  */
            i--;
9000d548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d54a:	3b01      	subs	r3, #1
9000d54c:	667b      	str	r3, [r7, #100]	; 0x64

            /* Register this event flags group.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_EVENT_FLAGS, event_flags_ptr, event_flags_ptr -> tx_event_flags_group_name, ((ULONG) 0), ((ULONG) 0));
9000d54e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000d550:	685a      	ldr	r2, [r3, #4]
9000d552:	2300      	movs	r3, #0
9000d554:	9300      	str	r3, [sp, #0]
9000d556:	2300      	movs	r3, #0
9000d558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
9000d55a:	2006      	movs	r0, #6
9000d55c:	f000 fa0e 	bl	9000d97c <_tx_trace_object_register>

            /* Move to the next event flags group.  */
            event_flags_ptr =  event_flags_ptr -> tx_event_flags_group_created_next;
9000d560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
9000d562:	699b      	ldr	r3, [r3, #24]
9000d564:	67fb      	str	r3, [r7, #124]	; 0x7c
        while (i != ((ULONG) 0))
9000d566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d568:	2b00      	cmp	r3, #0
9000d56a:	d1ed      	bne.n	9000d548 <_tx_trace_enable+0x25c>
        }

        /* Pickup the first queue and the number of created queues.  */
        queue_ptr =  _tx_queue_created_ptr;
9000d56c:	4b15      	ldr	r3, [pc, #84]	; (9000d5c4 <_tx_trace_enable+0x2d8>)
9000d56e:	681b      	ldr	r3, [r3, #0]
9000d570:	67bb      	str	r3, [r7, #120]	; 0x78
        i =          _tx_queue_created_count;
9000d572:	4b15      	ldr	r3, [pc, #84]	; (9000d5c8 <_tx_trace_enable+0x2dc>)
9000d574:	681b      	ldr	r3, [r3, #0]
9000d576:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all queues.  */
        while (i != ((ULONG) 0))
9000d578:	e03a      	b.n	9000d5f0 <_tx_trace_enable+0x304>
9000d57a:	bf00      	nop
9000d57c:	2401cdf4 	.word	0x2401cdf4
9000d580:	2401ce00 	.word	0x2401ce00
9000d584:	2401cdfc 	.word	0x2401cdfc
9000d588:	2401cdf0 	.word	0x2401cdf0
9000d58c:	2401ce04 	.word	0x2401ce04
9000d590:	2401ce10 	.word	0x2401ce10
9000d594:	2401cde8 	.word	0x2401cde8
9000d598:	2401ce0c 	.word	0x2401ce0c
9000d59c:	2401ce08 	.word	0x2401ce08
9000d5a0:	2401cdec 	.word	0x2401cdec
9000d5a4:	54585442 	.word	0x54585442
9000d5a8:	2401c868 	.word	0x2401c868
9000d5ac:	2401c858 	.word	0x2401c858
9000d5b0:	2401c860 	.word	0x2401c860
9000d5b4:	2401c9cc 	.word	0x2401c9cc
9000d5b8:	2401cdd8 	.word	0x2401cdd8
9000d5bc:	2401c79c 	.word	0x2401c79c
9000d5c0:	2401c7c0 	.word	0x2401c7c0
9000d5c4:	2401c7c8 	.word	0x2401c7c8
9000d5c8:	2401c7a8 	.word	0x2401c7a8
        {

            /* Decrement the counter.  */
            i--;
9000d5cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d5ce:	3b01      	subs	r3, #1
9000d5d0:	667b      	str	r3, [r7, #100]	; 0x64

            /* Register this queue.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name, 
9000d5d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000d5d4:	685a      	ldr	r2, [r3, #4]
                                                                    (queue_ptr -> tx_queue_capacity * (sizeof(ULONG))), ((ULONG) 0));
9000d5d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000d5d8:	68db      	ldr	r3, [r3, #12]
9000d5da:	0099      	lsls	r1, r3, #2
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name, 
9000d5dc:	2300      	movs	r3, #0
9000d5de:	9300      	str	r3, [sp, #0]
9000d5e0:	460b      	mov	r3, r1
9000d5e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
9000d5e4:	2003      	movs	r0, #3
9000d5e6:	f000 f9c9 	bl	9000d97c <_tx_trace_object_register>

            /* Move to the next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
9000d5ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000d5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000d5ee:	67bb      	str	r3, [r7, #120]	; 0x78
        while (i != ((ULONG) 0))
9000d5f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d5f2:	2b00      	cmp	r3, #0
9000d5f4:	d1ea      	bne.n	9000d5cc <_tx_trace_enable+0x2e0>
        }

        /* Pickup the first semaphore and the number of created semaphores.  */
        semaphore_ptr =  _tx_semaphore_created_ptr;
9000d5f6:	4b8e      	ldr	r3, [pc, #568]	; (9000d830 <_tx_trace_enable+0x544>)
9000d5f8:	681b      	ldr	r3, [r3, #0]
9000d5fa:	677b      	str	r3, [r7, #116]	; 0x74
        i =              _tx_semaphore_created_count;
9000d5fc:	4b8d      	ldr	r3, [pc, #564]	; (9000d834 <_tx_trace_enable+0x548>)
9000d5fe:	681b      	ldr	r3, [r3, #0]
9000d600:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all semaphores.  */
        while (i != ((ULONG) 0))
9000d602:	e00e      	b.n	9000d622 <_tx_trace_enable+0x336>
        {

            /* Decrement the counter.  */
            i--;
9000d604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d606:	3b01      	subs	r3, #1
9000d608:	667b      	str	r3, [r7, #100]	; 0x64

            /* Register this semaphore.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, semaphore_ptr -> tx_semaphore_name, ((ULONG) 0), ((ULONG) 0));
9000d60a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
9000d60c:	685a      	ldr	r2, [r3, #4]
9000d60e:	2300      	movs	r3, #0
9000d610:	9300      	str	r3, [sp, #0]
9000d612:	2300      	movs	r3, #0
9000d614:	6f79      	ldr	r1, [r7, #116]	; 0x74
9000d616:	2004      	movs	r0, #4
9000d618:	f000 f9b0 	bl	9000d97c <_tx_trace_object_register>

            /* Move to the next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
9000d61c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
9000d61e:	695b      	ldr	r3, [r3, #20]
9000d620:	677b      	str	r3, [r7, #116]	; 0x74
        while (i != ((ULONG) 0))
9000d622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d624:	2b00      	cmp	r3, #0
9000d626:	d1ed      	bne.n	9000d604 <_tx_trace_enable+0x318>
        }

        /* Pickup the first mutex and the number of created mutexes.  */
        mutex_ptr =  _tx_mutex_created_ptr;
9000d628:	4b83      	ldr	r3, [pc, #524]	; (9000d838 <_tx_trace_enable+0x54c>)
9000d62a:	681b      	ldr	r3, [r3, #0]
9000d62c:	673b      	str	r3, [r7, #112]	; 0x70
        i =          _tx_mutex_created_count;
9000d62e:	4b83      	ldr	r3, [pc, #524]	; (9000d83c <_tx_trace_enable+0x550>)
9000d630:	681b      	ldr	r3, [r3, #0]
9000d632:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all mutexes.  */
        while (i != ((ULONG) 0))
9000d634:	e010      	b.n	9000d658 <_tx_trace_enable+0x36c>
        {

            /* Decrement the counter.  */
            i--;
9000d636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d638:	3b01      	subs	r3, #1
9000d63a:	667b      	str	r3, [r7, #100]	; 0x64

            /* Register this mutex.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name, 
9000d63c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000d63e:	685a      	ldr	r2, [r3, #4]
                                                                        (ULONG) mutex_ptr -> tx_mutex_inherit, ((ULONG) 0));
9000d640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000d642:	6919      	ldr	r1, [r3, #16]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name, 
9000d644:	2300      	movs	r3, #0
9000d646:	9300      	str	r3, [sp, #0]
9000d648:	460b      	mov	r3, r1
9000d64a:	6f39      	ldr	r1, [r7, #112]	; 0x70
9000d64c:	2005      	movs	r0, #5
9000d64e:	f000 f995 	bl	9000d97c <_tx_trace_object_register>

            /* Move to the next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
9000d652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000d654:	6a1b      	ldr	r3, [r3, #32]
9000d656:	673b      	str	r3, [r7, #112]	; 0x70
        while (i != ((ULONG) 0))
9000d658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d65a:	2b00      	cmp	r3, #0
9000d65c:	d1eb      	bne.n	9000d636 <_tx_trace_enable+0x34a>
        }

        /* Pickup the first block pool and the number of created block pools.  */
        block_pool_ptr =  _tx_block_pool_created_ptr;
9000d65e:	4b78      	ldr	r3, [pc, #480]	; (9000d840 <_tx_trace_enable+0x554>)
9000d660:	681b      	ldr	r3, [r3, #0]
9000d662:	66fb      	str	r3, [r7, #108]	; 0x6c
        i =               _tx_block_pool_created_count;
9000d664:	4b77      	ldr	r3, [pc, #476]	; (9000d844 <_tx_trace_enable+0x558>)
9000d666:	681b      	ldr	r3, [r3, #0]
9000d668:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all block pools.  */
        while (i != ((ULONG) 0))
9000d66a:	e010      	b.n	9000d68e <_tx_trace_enable+0x3a2>
        {

             /* Decrement the counter.  */
            i--;
9000d66c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d66e:	3b01      	subs	r3, #1
9000d670:	667b      	str	r3, [r7, #100]	; 0x64

            /* Register this block pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BLOCK_POOL, block_pool_ptr, block_pool_ptr -> tx_block_pool_name, 
9000d672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d674:	685a      	ldr	r2, [r3, #4]
9000d676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d678:	6999      	ldr	r1, [r3, #24]
9000d67a:	2300      	movs	r3, #0
9000d67c:	9300      	str	r3, [sp, #0]
9000d67e:	460b      	mov	r3, r1
9000d680:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
9000d682:	2007      	movs	r0, #7
9000d684:	f000 f97a 	bl	9000d97c <_tx_trace_object_register>
                                                                            block_pool_ptr -> tx_block_pool_size, ((ULONG) 0));

            /* Move to the next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
9000d688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d68c:	66fb      	str	r3, [r7, #108]	; 0x6c
        while (i != ((ULONG) 0))
9000d68e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d690:	2b00      	cmp	r3, #0
9000d692:	d1eb      	bne.n	9000d66c <_tx_trace_enable+0x380>
        }

        /* Pickup the first byte pool and the number of created byte pools.  */
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
9000d694:	4b6c      	ldr	r3, [pc, #432]	; (9000d848 <_tx_trace_enable+0x55c>)
9000d696:	681b      	ldr	r3, [r3, #0]
9000d698:	66bb      	str	r3, [r7, #104]	; 0x68
        i =              _tx_byte_pool_created_count;
9000d69a:	4b6c      	ldr	r3, [pc, #432]	; (9000d84c <_tx_trace_enable+0x560>)
9000d69c:	681b      	ldr	r3, [r3, #0]
9000d69e:	667b      	str	r3, [r7, #100]	; 0x64

        /* Loop to register all byte pools.  */
        while (i != ((ULONG) 0))
9000d6a0:	e010      	b.n	9000d6c4 <_tx_trace_enable+0x3d8>
        {

            /* Decrement the counter.  */
            i--;
9000d6a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d6a4:	3b01      	subs	r3, #1
9000d6a6:	667b      	str	r3, [r7, #100]	; 0x64

            /* Register this byte pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BYTE_POOL, byte_pool_ptr, byte_pool_ptr -> tx_byte_pool_name, 
9000d6a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
9000d6aa:	685a      	ldr	r2, [r3, #4]
9000d6ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
9000d6ae:	69d9      	ldr	r1, [r3, #28]
9000d6b0:	2300      	movs	r3, #0
9000d6b2:	9300      	str	r3, [sp, #0]
9000d6b4:	460b      	mov	r3, r1
9000d6b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
9000d6b8:	2008      	movs	r0, #8
9000d6ba:	f000 f95f 	bl	9000d97c <_tx_trace_object_register>
                                                                            byte_pool_ptr -> tx_byte_pool_size, ((ULONG) 0));

            /* Move to the next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
9000d6be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
9000d6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000d6c2:	66bb      	str	r3, [r7, #104]	; 0x68
        while (i != ((ULONG) 0))
9000d6c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d6c6:	2b00      	cmp	r3, #0
9000d6c8:	d1eb      	bne.n	9000d6a2 <_tx_trace_enable+0x3b6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000d6ca:	f3ef 8310 	mrs	r3, PRIMASK
9000d6ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000d6d0:	b672      	cpsid	i
    return(primask_value);
9000d6d2:	6a3b      	ldr	r3, [r7, #32]
        }

        /* Disable interrupts.  */
        TX_DISABLE
9000d6d4:	647b      	str	r3, [r7, #68]	; 0x44

        /* Release the preeemption.  */
        _tx_thread_preempt_disable--;
9000d6d6:	4b5e      	ldr	r3, [pc, #376]	; (9000d850 <_tx_trace_enable+0x564>)
9000d6d8:	681b      	ldr	r3, [r3, #0]
9000d6da:	3b01      	subs	r3, #1
9000d6dc:	4a5c      	ldr	r2, [pc, #368]	; (9000d850 <_tx_trace_enable+0x564>)
9000d6de:	6013      	str	r3, [r2, #0]

        /* Finally, setup the current buffer pointer, which effectively enables the trace!  */
        _tx_trace_buffer_current_ptr =    (TX_TRACE_BUFFER_ENTRY *) _tx_trace_buffer_start_ptr;
9000d6e0:	4b5c      	ldr	r3, [pc, #368]	; (9000d854 <_tx_trace_enable+0x568>)
9000d6e2:	681b      	ldr	r3, [r3, #0]
9000d6e4:	4a5c      	ldr	r2, [pc, #368]	; (9000d858 <_tx_trace_enable+0x56c>)
9000d6e6:	6013      	str	r3, [r2, #0]

        /* Insert two RUNNING events so the buffer is not empty.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
9000d6e8:	4b5b      	ldr	r3, [pc, #364]	; (9000d858 <_tx_trace_enable+0x56c>)
9000d6ea:	681b      	ldr	r3, [r3, #0]
9000d6ec:	643b      	str	r3, [r7, #64]	; 0x40
9000d6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d6f0:	2b00      	cmp	r3, #0
9000d6f2:	d06b      	beq.n	9000d7cc <_tx_trace_enable+0x4e0>
9000d6f4:	4b59      	ldr	r3, [pc, #356]	; (9000d85c <_tx_trace_enable+0x570>)
9000d6f6:	681b      	ldr	r3, [r3, #0]
9000d6f8:	f003 0301 	and.w	r3, r3, #1
9000d6fc:	2b00      	cmp	r3, #0
9000d6fe:	d065      	beq.n	9000d7cc <_tx_trace_enable+0x4e0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000d700:	f3ef 8305 	mrs	r3, IPSR
9000d704:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
9000d706:	69fa      	ldr	r2, [r7, #28]
9000d708:	4b55      	ldr	r3, [pc, #340]	; (9000d860 <_tx_trace_enable+0x574>)
9000d70a:	681b      	ldr	r3, [r3, #0]
9000d70c:	4313      	orrs	r3, r2
9000d70e:	63fb      	str	r3, [r7, #60]	; 0x3c
9000d710:	4b54      	ldr	r3, [pc, #336]	; (9000d864 <_tx_trace_enable+0x578>)
9000d712:	681b      	ldr	r3, [r3, #0]
9000d714:	65bb      	str	r3, [r7, #88]	; 0x58
9000d716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d718:	2b00      	cmp	r3, #0
9000d71a:	d10b      	bne.n	9000d734 <_tx_trace_enable+0x448>
9000d71c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000d720:	65fb      	str	r3, [r7, #92]	; 0x5c
9000d722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000d724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000d726:	041a      	lsls	r2, r3, #16
9000d728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000d72a:	4313      	orrs	r3, r2
9000d72c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000d730:	65fb      	str	r3, [r7, #92]	; 0x5c
9000d732:	e00e      	b.n	9000d752 <_tx_trace_enable+0x466>
9000d734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d736:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000d73a:	d205      	bcs.n	9000d748 <_tx_trace_enable+0x45c>
9000d73c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000d73e:	65fb      	str	r3, [r7, #92]	; 0x5c
9000d740:	f04f 33ff 	mov.w	r3, #4294967295
9000d744:	65bb      	str	r3, [r7, #88]	; 0x58
9000d746:	e004      	b.n	9000d752 <_tx_trace_enable+0x466>
9000d748:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000d74c:	65bb      	str	r3, [r7, #88]	; 0x58
9000d74e:	2300      	movs	r3, #0
9000d750:	65fb      	str	r3, [r7, #92]	; 0x5c
9000d752:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000d754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d756:	601a      	str	r2, [r3, #0]
9000d758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d75a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
9000d75c:	605a      	str	r2, [r3, #4]
9000d75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d760:	2206      	movs	r2, #6
9000d762:	609a      	str	r2, [r3, #8]
9000d764:	4b40      	ldr	r3, [pc, #256]	; (9000d868 <_tx_trace_enable+0x57c>)
9000d766:	681a      	ldr	r2, [r3, #0]
9000d768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d76a:	60da      	str	r2, [r3, #12]
9000d76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d76e:	2200      	movs	r2, #0
9000d770:	611a      	str	r2, [r3, #16]
9000d772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d774:	2200      	movs	r2, #0
9000d776:	615a      	str	r2, [r3, #20]
9000d778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d77a:	2200      	movs	r2, #0
9000d77c:	619a      	str	r2, [r3, #24]
9000d77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d780:	2200      	movs	r2, #0
9000d782:	61da      	str	r2, [r3, #28]
9000d784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d786:	3320      	adds	r3, #32
9000d788:	643b      	str	r3, [r7, #64]	; 0x40
9000d78a:	4b38      	ldr	r3, [pc, #224]	; (9000d86c <_tx_trace_enable+0x580>)
9000d78c:	681b      	ldr	r3, [r3, #0]
9000d78e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
9000d790:	429a      	cmp	r2, r3
9000d792:	d314      	bcc.n	9000d7be <_tx_trace_enable+0x4d2>
9000d794:	4b2f      	ldr	r3, [pc, #188]	; (9000d854 <_tx_trace_enable+0x568>)
9000d796:	681b      	ldr	r3, [r3, #0]
9000d798:	643b      	str	r3, [r7, #64]	; 0x40
9000d79a:	4a2f      	ldr	r2, [pc, #188]	; (9000d858 <_tx_trace_enable+0x56c>)
9000d79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d79e:	6013      	str	r3, [r2, #0]
9000d7a0:	4b33      	ldr	r3, [pc, #204]	; (9000d870 <_tx_trace_enable+0x584>)
9000d7a2:	681b      	ldr	r3, [r3, #0]
9000d7a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
9000d7a6:	621a      	str	r2, [r3, #32]
9000d7a8:	4b32      	ldr	r3, [pc, #200]	; (9000d874 <_tx_trace_enable+0x588>)
9000d7aa:	681b      	ldr	r3, [r3, #0]
9000d7ac:	2b00      	cmp	r3, #0
9000d7ae:	d00d      	beq.n	9000d7cc <_tx_trace_enable+0x4e0>
9000d7b0:	4b30      	ldr	r3, [pc, #192]	; (9000d874 <_tx_trace_enable+0x588>)
9000d7b2:	681b      	ldr	r3, [r3, #0]
9000d7b4:	4a2e      	ldr	r2, [pc, #184]	; (9000d870 <_tx_trace_enable+0x584>)
9000d7b6:	6812      	ldr	r2, [r2, #0]
9000d7b8:	4610      	mov	r0, r2
9000d7ba:	4798      	blx	r3
9000d7bc:	e006      	b.n	9000d7cc <_tx_trace_enable+0x4e0>
9000d7be:	4a26      	ldr	r2, [pc, #152]	; (9000d858 <_tx_trace_enable+0x56c>)
9000d7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d7c2:	6013      	str	r3, [r2, #0]
9000d7c4:	4b2a      	ldr	r3, [pc, #168]	; (9000d870 <_tx_trace_enable+0x584>)
9000d7c6:	681b      	ldr	r3, [r3, #0]
9000d7c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
9000d7ca:	621a      	str	r2, [r3, #32]
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
9000d7cc:	4b22      	ldr	r3, [pc, #136]	; (9000d858 <_tx_trace_enable+0x56c>)
9000d7ce:	681b      	ldr	r3, [r3, #0]
9000d7d0:	63bb      	str	r3, [r7, #56]	; 0x38
9000d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d7d4:	2b00      	cmp	r3, #0
9000d7d6:	f000 8091 	beq.w	9000d8fc <_tx_trace_enable+0x610>
9000d7da:	4b20      	ldr	r3, [pc, #128]	; (9000d85c <_tx_trace_enable+0x570>)
9000d7dc:	681b      	ldr	r3, [r3, #0]
9000d7de:	f003 0301 	and.w	r3, r3, #1
9000d7e2:	2b00      	cmp	r3, #0
9000d7e4:	f000 808a 	beq.w	9000d8fc <_tx_trace_enable+0x610>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000d7e8:	f3ef 8305 	mrs	r3, IPSR
9000d7ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
9000d7ee:	69ba      	ldr	r2, [r7, #24]
9000d7f0:	4b1b      	ldr	r3, [pc, #108]	; (9000d860 <_tx_trace_enable+0x574>)
9000d7f2:	681b      	ldr	r3, [r3, #0]
9000d7f4:	4313      	orrs	r3, r2
9000d7f6:	637b      	str	r3, [r7, #52]	; 0x34
9000d7f8:	4b1a      	ldr	r3, [pc, #104]	; (9000d864 <_tx_trace_enable+0x578>)
9000d7fa:	681b      	ldr	r3, [r3, #0]
9000d7fc:	653b      	str	r3, [r7, #80]	; 0x50
9000d7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000d800:	2b00      	cmp	r3, #0
9000d802:	d10b      	bne.n	9000d81c <_tx_trace_enable+0x530>
9000d804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000d806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000d808:	657b      	str	r3, [r7, #84]	; 0x54
9000d80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000d80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000d80e:	041a      	lsls	r2, r3, #16
9000d810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000d812:	4313      	orrs	r3, r2
9000d814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000d818:	657b      	str	r3, [r7, #84]	; 0x54
9000d81a:	e032      	b.n	9000d882 <_tx_trace_enable+0x596>
9000d81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000d81e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000d822:	d229      	bcs.n	9000d878 <_tx_trace_enable+0x58c>
9000d824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000d826:	657b      	str	r3, [r7, #84]	; 0x54
9000d828:	f04f 33ff 	mov.w	r3, #4294967295
9000d82c:	653b      	str	r3, [r7, #80]	; 0x50
9000d82e:	e028      	b.n	9000d882 <_tx_trace_enable+0x596>
9000d830:	2401c7ac 	.word	0x2401c7ac
9000d834:	2401c7bc 	.word	0x2401c7bc
9000d838:	2401c7a4 	.word	0x2401c7a4
9000d83c:	2401c7a0 	.word	0x2401c7a0
9000d840:	2401c7c4 	.word	0x2401c7c4
9000d844:	2401c7b8 	.word	0x2401c7b8
9000d848:	2401c7b0 	.word	0x2401c7b0
9000d84c:	2401c7cc 	.word	0x2401c7cc
9000d850:	2401c868 	.word	0x2401c868
9000d854:	2401ce08 	.word	0x2401ce08
9000d858:	2401cdf4 	.word	0x2401cdf4
9000d85c:	2401ce00 	.word	0x2401ce00
9000d860:	2400a010 	.word	0x2400a010
9000d864:	2401c86c 	.word	0x2401c86c
9000d868:	e0001004 	.word	0xe0001004
9000d86c:	2401cdec 	.word	0x2401cdec
9000d870:	2401cdfc 	.word	0x2401cdfc
9000d874:	2401cdf8 	.word	0x2401cdf8
9000d878:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
9000d87c:	653b      	str	r3, [r7, #80]	; 0x50
9000d87e:	2300      	movs	r3, #0
9000d880:	657b      	str	r3, [r7, #84]	; 0x54
9000d882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000d884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d886:	601a      	str	r2, [r3, #0]
9000d888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d88a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
9000d88c:	605a      	str	r2, [r3, #4]
9000d88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d890:	2206      	movs	r2, #6
9000d892:	609a      	str	r2, [r3, #8]
9000d894:	4b20      	ldr	r3, [pc, #128]	; (9000d918 <_tx_trace_enable+0x62c>)
9000d896:	681a      	ldr	r2, [r3, #0]
9000d898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d89a:	60da      	str	r2, [r3, #12]
9000d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d89e:	2200      	movs	r2, #0
9000d8a0:	611a      	str	r2, [r3, #16]
9000d8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d8a4:	2200      	movs	r2, #0
9000d8a6:	615a      	str	r2, [r3, #20]
9000d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d8aa:	2200      	movs	r2, #0
9000d8ac:	619a      	str	r2, [r3, #24]
9000d8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d8b0:	2200      	movs	r2, #0
9000d8b2:	61da      	str	r2, [r3, #28]
9000d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d8b6:	3320      	adds	r3, #32
9000d8b8:	63bb      	str	r3, [r7, #56]	; 0x38
9000d8ba:	4b18      	ldr	r3, [pc, #96]	; (9000d91c <_tx_trace_enable+0x630>)
9000d8bc:	681b      	ldr	r3, [r3, #0]
9000d8be:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000d8c0:	429a      	cmp	r2, r3
9000d8c2:	d314      	bcc.n	9000d8ee <_tx_trace_enable+0x602>
9000d8c4:	4b16      	ldr	r3, [pc, #88]	; (9000d920 <_tx_trace_enable+0x634>)
9000d8c6:	681b      	ldr	r3, [r3, #0]
9000d8c8:	63bb      	str	r3, [r7, #56]	; 0x38
9000d8ca:	4a16      	ldr	r2, [pc, #88]	; (9000d924 <_tx_trace_enable+0x638>)
9000d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d8ce:	6013      	str	r3, [r2, #0]
9000d8d0:	4b15      	ldr	r3, [pc, #84]	; (9000d928 <_tx_trace_enable+0x63c>)
9000d8d2:	681b      	ldr	r3, [r3, #0]
9000d8d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000d8d6:	621a      	str	r2, [r3, #32]
9000d8d8:	4b14      	ldr	r3, [pc, #80]	; (9000d92c <_tx_trace_enable+0x640>)
9000d8da:	681b      	ldr	r3, [r3, #0]
9000d8dc:	2b00      	cmp	r3, #0
9000d8de:	d00d      	beq.n	9000d8fc <_tx_trace_enable+0x610>
9000d8e0:	4b12      	ldr	r3, [pc, #72]	; (9000d92c <_tx_trace_enable+0x640>)
9000d8e2:	681b      	ldr	r3, [r3, #0]
9000d8e4:	4a10      	ldr	r2, [pc, #64]	; (9000d928 <_tx_trace_enable+0x63c>)
9000d8e6:	6812      	ldr	r2, [r2, #0]
9000d8e8:	4610      	mov	r0, r2
9000d8ea:	4798      	blx	r3
9000d8ec:	e006      	b.n	9000d8fc <_tx_trace_enable+0x610>
9000d8ee:	4a0d      	ldr	r2, [pc, #52]	; (9000d924 <_tx_trace_enable+0x638>)
9000d8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d8f2:	6013      	str	r3, [r2, #0]
9000d8f4:	4b0c      	ldr	r3, [pc, #48]	; (9000d928 <_tx_trace_enable+0x63c>)
9000d8f6:	681b      	ldr	r3, [r3, #0]
9000d8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000d8fa:	621a      	str	r2, [r3, #32]
9000d8fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000d8fe:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000d900:	697b      	ldr	r3, [r7, #20]
9000d902:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
9000d906:	f7fe fd6f 	bl	9000c3e8 <_tx_thread_system_preempt_check>

        /* Return successful completion.  */
        status =  TX_SUCCESS;
9000d90a:	2300      	movs	r3, #0
9000d90c:	663b      	str	r3, [r7, #96]	; 0x60
    }
    
    /* Return completion status.  */
    return(status);
9000d90e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    }

    /* Return completion status.  */
    return(status);
#endif
}
9000d910:	4618      	mov	r0, r3
9000d912:	3788      	adds	r7, #136	; 0x88
9000d914:	46bd      	mov	sp, r7
9000d916:	bd80      	pop	{r7, pc}
9000d918:	e0001004 	.word	0xe0001004
9000d91c:	2401cdec 	.word	0x2401cdec
9000d920:	2401ce08 	.word	0x2401ce08
9000d924:	2401cdf4 	.word	0x2401cdf4
9000d928:	2401cdfc 	.word	0x2401cdfc
9000d92c:	2401cdf8 	.word	0x2401cdf8

9000d930 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
9000d930:	b480      	push	{r7}
9000d932:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
9000d934:	4b0b      	ldr	r3, [pc, #44]	; (9000d964 <_tx_trace_initialize+0x34>)
9000d936:	2200      	movs	r2, #0
9000d938:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
9000d93a:	4b0b      	ldr	r3, [pc, #44]	; (9000d968 <_tx_trace_initialize+0x38>)
9000d93c:	2200      	movs	r2, #0
9000d93e:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
9000d940:	4b0a      	ldr	r3, [pc, #40]	; (9000d96c <_tx_trace_initialize+0x3c>)
9000d942:	2200      	movs	r2, #0
9000d944:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
9000d946:	4b0a      	ldr	r3, [pc, #40]	; (9000d970 <_tx_trace_initialize+0x40>)
9000d948:	2200      	movs	r2, #0
9000d94a:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
9000d94c:	4b09      	ldr	r3, [pc, #36]	; (9000d974 <_tx_trace_initialize+0x44>)
9000d94e:	2200      	movs	r2, #0
9000d950:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
9000d952:	4b09      	ldr	r3, [pc, #36]	; (9000d978 <_tx_trace_initialize+0x48>)
9000d954:	2200      	movs	r2, #0
9000d956:	601a      	str	r2, [r3, #0]
#endif
#endif
}
9000d958:	bf00      	nop
9000d95a:	46bd      	mov	sp, r7
9000d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d960:	4770      	bx	lr
9000d962:	bf00      	nop
9000d964:	2401cdfc 	.word	0x2401cdfc
9000d968:	2401cdf0 	.word	0x2401cdf0
9000d96c:	2401ce04 	.word	0x2401ce04
9000d970:	2401ce08 	.word	0x2401ce08
9000d974:	2401cdec 	.word	0x2401cdec
9000d978:	2401cdf4 	.word	0x2401cdf4

9000d97c <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
9000d97c:	b480      	push	{r7}
9000d97e:	b08d      	sub	sp, #52	; 0x34
9000d980:	af00      	add	r7, sp, #0
9000d982:	60b9      	str	r1, [r7, #8]
9000d984:	607a      	str	r2, [r7, #4]
9000d986:	603b      	str	r3, [r7, #0]
9000d988:	4603      	mov	r3, r0
9000d98a:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
9000d98c:	4b6d      	ldr	r3, [pc, #436]	; (9000db44 <_tx_trace_object_register+0x1c8>)
9000d98e:	681b      	ldr	r3, [r3, #0]
9000d990:	2b00      	cmp	r3, #0
9000d992:	f000 80d0 	beq.w	9000db36 <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
9000d996:	4b6c      	ldr	r3, [pc, #432]	; (9000db48 <_tx_trace_object_register+0x1cc>)
9000d998:	681b      	ldr	r3, [r3, #0]
9000d99a:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
9000d99c:	4b6b      	ldr	r3, [pc, #428]	; (9000db4c <_tx_trace_object_register+0x1d0>)
9000d99e:	681b      	ldr	r3, [r3, #0]
9000d9a0:	2b00      	cmp	r3, #0
9000d9a2:	f000 80c8 	beq.w	9000db36 <_tx_trace_object_register+0x1ba>
        {
    
            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
9000d9a6:	6a3b      	ldr	r3, [r7, #32]
9000d9a8:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
9000d9aa:	2300      	movs	r3, #0
9000d9ac:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
9000d9ae:	4b68      	ldr	r3, [pc, #416]	; (9000db50 <_tx_trace_object_register+0x1d4>)
9000d9b0:	681b      	ldr	r3, [r3, #0]
9000d9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
9000d9b4:	4b63      	ldr	r3, [pc, #396]	; (9000db44 <_tx_trace_object_register+0x1c8>)
9000d9b6:	681b      	ldr	r3, [r3, #0]
9000d9b8:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
9000d9ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d9bc:	4613      	mov	r3, r2
9000d9be:	005b      	lsls	r3, r3, #1
9000d9c0:	4413      	add	r3, r2
9000d9c2:	011b      	lsls	r3, r3, #4
9000d9c4:	461a      	mov	r2, r3
9000d9c6:	69fb      	ldr	r3, [r7, #28]
9000d9c8:	4413      	add	r3, r2
9000d9ca:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
9000d9cc:	69fb      	ldr	r3, [r7, #28]
9000d9ce:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
9000d9d0:	69bb      	ldr	r3, [r7, #24]
9000d9d2:	685b      	ldr	r3, [r3, #4]
9000d9d4:	2b00      	cmp	r3, #0
9000d9d6:	d103      	bne.n	9000d9e0 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
9000d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d9da:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
9000d9dc:	2301      	movs	r3, #1
9000d9de:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the 
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
9000d9e0:	69bb      	ldr	r3, [r7, #24]
9000d9e2:	685a      	ldr	r2, [r3, #4]
9000d9e4:	68bb      	ldr	r3, [r7, #8]
9000d9e6:	429a      	cmp	r2, r3
9000d9e8:	d103      	bne.n	9000d9f2 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
9000d9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d9ec:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
9000d9ee:	2301      	movs	r3, #1
9000d9f0:	627b      	str	r3, [r7, #36]	; 0x24
                }
                
                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
9000d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000d9f4:	2b01      	cmp	r3, #1
9000d9f6:	d02d      	beq.n	9000da54 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
9000d9f8:	69bb      	ldr	r3, [r7, #24]
9000d9fa:	781b      	ldrb	r3, [r3, #0]
9000d9fc:	2b01      	cmp	r3, #1
9000d9fe:	d11a      	bne.n	9000da36 <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
9000da00:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000da02:	6a3b      	ldr	r3, [r7, #32]
9000da04:	429a      	cmp	r2, r3
9000da06:	d102      	bne.n	9000da0e <_tx_trace_object_register+0x92>
                    {
                        found =  i;
9000da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000da0a:	62bb      	str	r3, [r7, #40]	; 0x28
9000da0c:	e013      	b.n	9000da36 <_tx_trace_object_register+0xba>
                    }
                    else
                    {
                    
                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
9000da0e:	4b4d      	ldr	r3, [pc, #308]	; (9000db44 <_tx_trace_object_register+0x1c8>)
9000da10:	681b      	ldr	r3, [r3, #0]
9000da12:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
9000da14:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000da16:	4613      	mov	r3, r2
9000da18:	005b      	lsls	r3, r3, #1
9000da1a:	4413      	add	r3, r2
9000da1c:	011b      	lsls	r3, r3, #4
9000da1e:	461a      	mov	r2, r3
9000da20:	69fb      	ldr	r3, [r7, #28]
9000da22:	4413      	add	r3, r2
9000da24:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
9000da26:	69fb      	ldr	r3, [r7, #28]
9000da28:	61bb      	str	r3, [r7, #24]
                
                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
9000da2a:	69bb      	ldr	r3, [r7, #24]
9000da2c:	785b      	ldrb	r3, [r3, #1]
9000da2e:	2b00      	cmp	r3, #0
9000da30:	d001      	beq.n	9000da36 <_tx_trace_object_register+0xba>
                         {
                            found =  i;
9000da32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000da34:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }
        
                /* Move to the next entry.  */
                i++;
9000da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000da38:	3301      	adds	r3, #1
9000da3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        
                /* Determine if we have wrapped the list.  */
                if (i >= entries)
9000da3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000da3e:	6a3b      	ldr	r3, [r7, #32]
9000da40:	429a      	cmp	r2, r3
9000da42:	d301      	bcc.n	9000da48 <_tx_trace_object_register+0xcc>
                {
        
                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
9000da44:	2300      	movs	r3, #0
9000da46:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
        
            } while (i != _tx_trace_registry_search_start);
9000da48:	4b41      	ldr	r3, [pc, #260]	; (9000db50 <_tx_trace_object_register+0x1d4>)
9000da4a:	681b      	ldr	r3, [r3, #0]
9000da4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000da4e:	429a      	cmp	r2, r3
9000da50:	d1b0      	bne.n	9000d9b4 <_tx_trace_object_register+0x38>
9000da52:	e000      	b.n	9000da56 <_tx_trace_object_register+0xda>
                    break;
9000da54:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
9000da56:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000da58:	6a3b      	ldr	r3, [r7, #32]
9000da5a:	429a      	cmp	r2, r3
9000da5c:	d26b      	bcs.n	9000db36 <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
9000da5e:	4b3b      	ldr	r3, [pc, #236]	; (9000db4c <_tx_trace_object_register+0x1d0>)
9000da60:	681b      	ldr	r3, [r3, #0]
9000da62:	3b01      	subs	r3, #1
9000da64:	4a39      	ldr	r2, [pc, #228]	; (9000db4c <_tx_trace_object_register+0x1d0>)
9000da66:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
9000da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000da6a:	3301      	adds	r3, #1
9000da6c:	6a3a      	ldr	r2, [r7, #32]
9000da6e:	429a      	cmp	r2, r3
9000da70:	d904      	bls.n	9000da7c <_tx_trace_object_register+0x100>
                {
                    
                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
9000da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000da74:	3301      	adds	r3, #1
9000da76:	4a36      	ldr	r2, [pc, #216]	; (9000db50 <_tx_trace_object_register+0x1d4>)
9000da78:	6013      	str	r3, [r2, #0]
9000da7a:	e002      	b.n	9000da82 <_tx_trace_object_register+0x106>
                }
                else
                {
                
                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
9000da7c:	4b34      	ldr	r3, [pc, #208]	; (9000db50 <_tx_trace_object_register+0x1d4>)
9000da7e:	2200      	movs	r2, #0
9000da80:	601a      	str	r2, [r3, #0]
                }
        
                /* Yes, an entry has been found...  */
                
                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
9000da82:	4b30      	ldr	r3, [pc, #192]	; (9000db44 <_tx_trace_object_register+0x1c8>)
9000da84:	681b      	ldr	r3, [r3, #0]
9000da86:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
9000da88:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000da8a:	4613      	mov	r3, r2
9000da8c:	005b      	lsls	r3, r3, #1
9000da8e:	4413      	add	r3, r2
9000da90:	011b      	lsls	r3, r3, #4
9000da92:	461a      	mov	r2, r3
9000da94:	69fb      	ldr	r3, [r7, #28]
9000da96:	4413      	add	r3, r2
9000da98:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
9000da9a:	69fb      	ldr	r3, [r7, #28]
9000da9c:	61bb      	str	r3, [r7, #24]
                
                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
9000da9e:	69bb      	ldr	r3, [r7, #24]
9000daa0:	2200      	movs	r2, #0
9000daa2:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
9000daa4:	69bb      	ldr	r3, [r7, #24]
9000daa6:	7bfa      	ldrb	r2, [r7, #15]
9000daa8:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
9000daaa:	68ba      	ldr	r2, [r7, #8]
9000daac:	69bb      	ldr	r3, [r7, #24]
9000daae:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
9000dab0:	69bb      	ldr	r3, [r7, #24]
9000dab2:	683a      	ldr	r2, [r7, #0]
9000dab4:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
9000dab6:	69bb      	ldr	r3, [r7, #24]
9000dab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000daba:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
9000dabc:	2300      	movs	r3, #0
9000dabe:	62fb      	str	r3, [r7, #44]	; 0x2c
9000dac0:	e014      	b.n	9000daec <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
9000dac2:	687b      	ldr	r3, [r7, #4]
9000dac4:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
9000dac6:	69fa      	ldr	r2, [r7, #28]
9000dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000daca:	4413      	add	r3, r2
9000dacc:	61fb      	str	r3, [r7, #28]
                  
                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
9000dace:	69fb      	ldr	r3, [r7, #28]
9000dad0:	7819      	ldrb	r1, [r3, #0]
9000dad2:	69ba      	ldr	r2, [r7, #24]
9000dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000dad6:	4413      	add	r3, r2
9000dad8:	3310      	adds	r3, #16
9000dada:	460a      	mov	r2, r1
9000dadc:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
9000dade:	69fb      	ldr	r3, [r7, #28]
9000dae0:	781b      	ldrb	r3, [r3, #0]
9000dae2:	2b00      	cmp	r3, #0
9000dae4:	d006      	beq.n	9000daf4 <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
9000dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000dae8:	3301      	adds	r3, #1
9000daea:	62fb      	str	r3, [r7, #44]	; 0x2c
9000daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000daee:	2b1e      	cmp	r3, #30
9000daf0:	d9e7      	bls.n	9000dac2 <_tx_trace_object_register+0x146>
9000daf2:	e000      	b.n	9000daf6 <_tx_trace_object_register+0x17a>
                    {
                        break;
9000daf4:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
9000daf6:	69ba      	ldr	r2, [r7, #24]
9000daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000dafa:	4413      	add	r3, r2
9000dafc:	3310      	adds	r3, #16
9000dafe:	2200      	movs	r2, #0
9000db00:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
9000db02:	7bfb      	ldrb	r3, [r7, #15]
9000db04:	2b01      	cmp	r3, #1
9000db06:	d110      	bne.n	9000db2a <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */
            
                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
9000db08:	68bb      	ldr	r3, [r7, #8]
9000db0a:	617b      	str	r3, [r7, #20]
            
                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
9000db0c:	697b      	ldr	r3, [r7, #20]
9000db0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000db10:	0a1b      	lsrs	r3, r3, #8
9000db12:	b2db      	uxtb	r3, r3
9000db14:	f063 037f 	orn	r3, r3, #127	; 0x7f
9000db18:	b2da      	uxtb	r2, r3
9000db1a:	69bb      	ldr	r3, [r7, #24]
9000db1c:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
9000db1e:	697b      	ldr	r3, [r7, #20]
9000db20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000db22:	b2da      	uxtb	r2, r3
9000db24:	69bb      	ldr	r3, [r7, #24]
9000db26:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
9000db28:	e005      	b.n	9000db36 <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
9000db2a:	69bb      	ldr	r3, [r7, #24]
9000db2c:	2200      	movs	r2, #0
9000db2e:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
9000db30:	69bb      	ldr	r3, [r7, #24]
9000db32:	2200      	movs	r2, #0
9000db34:	70da      	strb	r2, [r3, #3]
}
9000db36:	bf00      	nop
9000db38:	3734      	adds	r7, #52	; 0x34
9000db3a:	46bd      	mov	sp, r7
9000db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000db40:	4770      	bx	lr
9000db42:	bf00      	nop
9000db44:	2401cdf0 	.word	0x2401cdf0
9000db48:	2401ce10 	.word	0x2401ce10
9000db4c:	2401cde8 	.word	0x2401cde8
9000db50:	2401ce0c 	.word	0x2401ce0c

9000db54 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
9000db54:	b580      	push	{r7, lr}
9000db56:	b08a      	sub	sp, #40	; 0x28
9000db58:	af00      	add	r7, sp, #0
9000db5a:	60f8      	str	r0, [r7, #12]
9000db5c:	60b9      	str	r1, [r7, #8]
9000db5e:	607a      	str	r2, [r7, #4]
9000db60:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
9000db62:	2300      	movs	r3, #0
9000db64:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
9000db66:	68fb      	ldr	r3, [r7, #12]
9000db68:	2b00      	cmp	r3, #0
9000db6a:	d102      	bne.n	9000db72 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
9000db6c:	2302      	movs	r3, #2
9000db6e:	627b      	str	r3, [r7, #36]	; 0x24
9000db70:	e029      	b.n	9000dbc6 <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
9000db72:	68fb      	ldr	r3, [r7, #12]
9000db74:	681b      	ldr	r3, [r3, #0]
9000db76:	4a2d      	ldr	r2, [pc, #180]	; (9000dc2c <_txe_byte_allocate+0xd8>)
9000db78:	4293      	cmp	r3, r2
9000db7a:	d002      	beq.n	9000db82 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
9000db7c:	2302      	movs	r3, #2
9000db7e:	627b      	str	r3, [r7, #36]	; 0x24
9000db80:	e021      	b.n	9000dbc6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
9000db82:	68bb      	ldr	r3, [r7, #8]
9000db84:	2b00      	cmp	r3, #0
9000db86:	d102      	bne.n	9000db8e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
9000db88:	2303      	movs	r3, #3
9000db8a:	627b      	str	r3, [r7, #36]	; 0x24
9000db8c:	e01b      	b.n	9000dbc6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
9000db8e:	687b      	ldr	r3, [r7, #4]
9000db90:	2b00      	cmp	r3, #0
9000db92:	d102      	bne.n	9000db9a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
9000db94:	2305      	movs	r3, #5
9000db96:	627b      	str	r3, [r7, #36]	; 0x24
9000db98:	e015      	b.n	9000dbc6 <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
9000db9a:	68fb      	ldr	r3, [r7, #12]
9000db9c:	69db      	ldr	r3, [r3, #28]
9000db9e:	687a      	ldr	r2, [r7, #4]
9000dba0:	429a      	cmp	r2, r3
9000dba2:	d902      	bls.n	9000dbaa <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
9000dba4:	2305      	movs	r3, #5
9000dba6:	627b      	str	r3, [r7, #36]	; 0x24
9000dba8:	e00d      	b.n	9000dbc6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
9000dbaa:	683b      	ldr	r3, [r7, #0]
9000dbac:	2b00      	cmp	r3, #0
9000dbae:	d00a      	beq.n	9000dbc6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000dbb0:	f3ef 8305 	mrs	r3, IPSR
9000dbb4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
9000dbb6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
9000dbb8:	4b1d      	ldr	r3, [pc, #116]	; (9000dc30 <_txe_byte_allocate+0xdc>)
9000dbba:	681b      	ldr	r3, [r3, #0]
9000dbbc:	4313      	orrs	r3, r2
9000dbbe:	2b00      	cmp	r3, #0
9000dbc0:	d001      	beq.n	9000dbc6 <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
9000dbc2:	2304      	movs	r3, #4
9000dbc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
9000dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dbc8:	2b00      	cmp	r3, #0
9000dbca:	d108      	bne.n	9000dbde <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
9000dbcc:	4b19      	ldr	r3, [pc, #100]	; (9000dc34 <_txe_byte_allocate+0xe0>)
9000dbce:	681b      	ldr	r3, [r3, #0]
9000dbd0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
9000dbd2:	6a3b      	ldr	r3, [r7, #32]
9000dbd4:	4a18      	ldr	r2, [pc, #96]	; (9000dc38 <_txe_byte_allocate+0xe4>)
9000dbd6:	4293      	cmp	r3, r2
9000dbd8:	d101      	bne.n	9000dbde <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
9000dbda:	2313      	movs	r3, #19
9000dbdc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
9000dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dbe0:	2b00      	cmp	r3, #0
9000dbe2:	d114      	bne.n	9000dc0e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000dbe4:	f3ef 8305 	mrs	r3, IPSR
9000dbe8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
9000dbea:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
9000dbec:	4b10      	ldr	r3, [pc, #64]	; (9000dc30 <_txe_byte_allocate+0xdc>)
9000dbee:	681b      	ldr	r3, [r3, #0]
9000dbf0:	4313      	orrs	r3, r2
9000dbf2:	2b00      	cmp	r3, #0
9000dbf4:	d00b      	beq.n	9000dc0e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000dbf6:	f3ef 8305 	mrs	r3, IPSR
9000dbfa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
9000dbfc:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
9000dbfe:	4b0c      	ldr	r3, [pc, #48]	; (9000dc30 <_txe_byte_allocate+0xdc>)
9000dc00:	681b      	ldr	r3, [r3, #0]
9000dc02:	4313      	orrs	r3, r2
9000dc04:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000dc08:	d201      	bcs.n	9000dc0e <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
9000dc0a:	2313      	movs	r3, #19
9000dc0c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
9000dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dc10:	2b00      	cmp	r3, #0
9000dc12:	d106      	bne.n	9000dc22 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
9000dc14:	683b      	ldr	r3, [r7, #0]
9000dc16:	687a      	ldr	r2, [r7, #4]
9000dc18:	68b9      	ldr	r1, [r7, #8]
9000dc1a:	68f8      	ldr	r0, [r7, #12]
9000dc1c:	f7fd fc74 	bl	9000b508 <_tx_byte_allocate>
9000dc20:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
9000dc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000dc24:	4618      	mov	r0, r3
9000dc26:	3728      	adds	r7, #40	; 0x28
9000dc28:	46bd      	mov	sp, r7
9000dc2a:	bd80      	pop	{r7, pc}
9000dc2c:	42595445 	.word	0x42595445
9000dc30:	2400a010 	.word	0x2400a010
9000dc34:	2401c86c 	.word	0x2401c86c
9000dc38:	2401c910 	.word	0x2401c910

9000dc3c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
9000dc3c:	b580      	push	{r7, lr}
9000dc3e:	b090      	sub	sp, #64	; 0x40
9000dc40:	af00      	add	r7, sp, #0
9000dc42:	60f8      	str	r0, [r7, #12]
9000dc44:	60b9      	str	r1, [r7, #8]
9000dc46:	607a      	str	r2, [r7, #4]
9000dc48:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
9000dc4a:	2300      	movs	r3, #0
9000dc4c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
9000dc4e:	68fb      	ldr	r3, [r7, #12]
9000dc50:	2b00      	cmp	r3, #0
9000dc52:	d102      	bne.n	9000dc5a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
9000dc54:	2302      	movs	r3, #2
9000dc56:	63fb      	str	r3, [r7, #60]	; 0x3c
9000dc58:	e06f      	b.n	9000dd3a <_txe_byte_pool_create+0xfe>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
9000dc5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000dc5c:	2b34      	cmp	r3, #52	; 0x34
9000dc5e:	d002      	beq.n	9000dc66 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
9000dc60:	2302      	movs	r3, #2
9000dc62:	63fb      	str	r3, [r7, #60]	; 0x3c
9000dc64:	e069      	b.n	9000dd3a <_txe_byte_pool_create+0xfe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000dc66:	f3ef 8310 	mrs	r3, PRIMASK
9000dc6a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
9000dc6c:	b672      	cpsid	i
    return(primask_value);
9000dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
9000dc70:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
9000dc72:	4b39      	ldr	r3, [pc, #228]	; (9000dd58 <_txe_byte_pool_create+0x11c>)
9000dc74:	681b      	ldr	r3, [r3, #0]
9000dc76:	3301      	adds	r3, #1
9000dc78:	4a37      	ldr	r2, [pc, #220]	; (9000dd58 <_txe_byte_pool_create+0x11c>)
9000dc7a:	6013      	str	r3, [r2, #0]
9000dc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000dc7e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000dc82:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
9000dc86:	4b35      	ldr	r3, [pc, #212]	; (9000dd5c <_txe_byte_pool_create+0x120>)
9000dc88:	681b      	ldr	r3, [r3, #0]
9000dc8a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
9000dc8c:	2300      	movs	r3, #0
9000dc8e:	63bb      	str	r3, [r7, #56]	; 0x38
9000dc90:	e009      	b.n	9000dca6 <_txe_byte_pool_create+0x6a>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
9000dc92:	68fa      	ldr	r2, [r7, #12]
9000dc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000dc96:	429a      	cmp	r2, r3
9000dc98:	d00b      	beq.n	9000dcb2 <_txe_byte_pool_create+0x76>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
9000dc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000dc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000dc9e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
9000dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000dca2:	3301      	adds	r3, #1
9000dca4:	63bb      	str	r3, [r7, #56]	; 0x38
9000dca6:	4b2e      	ldr	r3, [pc, #184]	; (9000dd60 <_txe_byte_pool_create+0x124>)
9000dca8:	681b      	ldr	r3, [r3, #0]
9000dcaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000dcac:	429a      	cmp	r2, r3
9000dcae:	d3f0      	bcc.n	9000dc92 <_txe_byte_pool_create+0x56>
9000dcb0:	e000      	b.n	9000dcb4 <_txe_byte_pool_create+0x78>
                break;
9000dcb2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000dcb4:	f3ef 8310 	mrs	r3, PRIMASK
9000dcb8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000dcba:	b672      	cpsid	i
    return(primask_value);
9000dcbc:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
9000dcbe:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
9000dcc0:	4b25      	ldr	r3, [pc, #148]	; (9000dd58 <_txe_byte_pool_create+0x11c>)
9000dcc2:	681b      	ldr	r3, [r3, #0]
9000dcc4:	3b01      	subs	r3, #1
9000dcc6:	4a24      	ldr	r2, [pc, #144]	; (9000dd58 <_txe_byte_pool_create+0x11c>)
9000dcc8:	6013      	str	r3, [r2, #0]
9000dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000dccc:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000dcce:	6a3b      	ldr	r3, [r7, #32]
9000dcd0:	f383 8810 	msr	PRIMASK, r3
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
9000dcd4:	f7fe fb88 	bl	9000c3e8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
9000dcd8:	68fa      	ldr	r2, [r7, #12]
9000dcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000dcdc:	429a      	cmp	r2, r3
9000dcde:	d102      	bne.n	9000dce6 <_txe_byte_pool_create+0xaa>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
9000dce0:	2302      	movs	r3, #2
9000dce2:	63fb      	str	r3, [r7, #60]	; 0x3c
9000dce4:	e029      	b.n	9000dd3a <_txe_byte_pool_create+0xfe>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
9000dce6:	687b      	ldr	r3, [r7, #4]
9000dce8:	2b00      	cmp	r3, #0
9000dcea:	d102      	bne.n	9000dcf2 <_txe_byte_pool_create+0xb6>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
9000dcec:	2303      	movs	r3, #3
9000dcee:	63fb      	str	r3, [r7, #60]	; 0x3c
9000dcf0:	e023      	b.n	9000dd3a <_txe_byte_pool_create+0xfe>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
9000dcf2:	683b      	ldr	r3, [r7, #0]
9000dcf4:	2b63      	cmp	r3, #99	; 0x63
9000dcf6:	d802      	bhi.n	9000dcfe <_txe_byte_pool_create+0xc2>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
9000dcf8:	2305      	movs	r3, #5
9000dcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
9000dcfc:	e01d      	b.n	9000dd3a <_txe_byte_pool_create+0xfe>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
9000dcfe:	4b19      	ldr	r3, [pc, #100]	; (9000dd64 <_txe_byte_pool_create+0x128>)
9000dd00:	681b      	ldr	r3, [r3, #0]
9000dd02:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
9000dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000dd06:	4a18      	ldr	r2, [pc, #96]	; (9000dd68 <_txe_byte_pool_create+0x12c>)
9000dd08:	4293      	cmp	r3, r2
9000dd0a:	d101      	bne.n	9000dd10 <_txe_byte_pool_create+0xd4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
9000dd0c:	2313      	movs	r3, #19
9000dd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000dd10:	f3ef 8305 	mrs	r3, IPSR
9000dd14:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
9000dd16:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
9000dd18:	4b14      	ldr	r3, [pc, #80]	; (9000dd6c <_txe_byte_pool_create+0x130>)
9000dd1a:	681b      	ldr	r3, [r3, #0]
9000dd1c:	4313      	orrs	r3, r2
9000dd1e:	2b00      	cmp	r3, #0
9000dd20:	d00b      	beq.n	9000dd3a <_txe_byte_pool_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000dd22:	f3ef 8305 	mrs	r3, IPSR
9000dd26:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
9000dd28:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
9000dd2a:	4b10      	ldr	r3, [pc, #64]	; (9000dd6c <_txe_byte_pool_create+0x130>)
9000dd2c:	681b      	ldr	r3, [r3, #0]
9000dd2e:	4313      	orrs	r3, r2
9000dd30:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000dd34:	d201      	bcs.n	9000dd3a <_txe_byte_pool_create+0xfe>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
9000dd36:	2313      	movs	r3, #19
9000dd38:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
9000dd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000dd3c:	2b00      	cmp	r3, #0
9000dd3e:	d106      	bne.n	9000dd4e <_txe_byte_pool_create+0x112>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
9000dd40:	683b      	ldr	r3, [r7, #0]
9000dd42:	687a      	ldr	r2, [r7, #4]
9000dd44:	68b9      	ldr	r1, [r7, #8]
9000dd46:	68f8      	ldr	r0, [r7, #12]
9000dd48:	f7fd fdbc 	bl	9000b8c4 <_tx_byte_pool_create>
9000dd4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
9000dd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
9000dd50:	4618      	mov	r0, r3
9000dd52:	3740      	adds	r7, #64	; 0x40
9000dd54:	46bd      	mov	sp, r7
9000dd56:	bd80      	pop	{r7, pc}
9000dd58:	2401c868 	.word	0x2401c868
9000dd5c:	2401c7b0 	.word	0x2401c7b0
9000dd60:	2401c7cc 	.word	0x2401c7cc
9000dd64:	2401c86c 	.word	0x2401c86c
9000dd68:	2401c910 	.word	0x2401c910
9000dd6c:	2400a010 	.word	0x2400a010

9000dd70 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
9000dd70:	b580      	push	{r7, lr}
9000dd72:	b098      	sub	sp, #96	; 0x60
9000dd74:	af06      	add	r7, sp, #24
9000dd76:	60f8      	str	r0, [r7, #12]
9000dd78:	60b9      	str	r1, [r7, #8]
9000dd7a:	607a      	str	r2, [r7, #4]
9000dd7c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
9000dd7e:	2300      	movs	r3, #0
9000dd80:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
9000dd82:	68fb      	ldr	r3, [r7, #12]
9000dd84:	2b00      	cmp	r3, #0
9000dd86:	d102      	bne.n	9000dd8e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
9000dd88:	230e      	movs	r3, #14
9000dd8a:	647b      	str	r3, [r7, #68]	; 0x44
9000dd8c:	e0b5      	b.n	9000defa <_txe_thread_create+0x18a>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
9000dd8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
9000dd90:	2bb4      	cmp	r3, #180	; 0xb4
9000dd92:	d002      	beq.n	9000dd9a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
9000dd94:	230e      	movs	r3, #14
9000dd96:	647b      	str	r3, [r7, #68]	; 0x44
9000dd98:	e0af      	b.n	9000defa <_txe_thread_create+0x18a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000dd9a:	f3ef 8310 	mrs	r3, PRIMASK
9000dd9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000dda0:	b672      	cpsid	i
    return(primask_value);
9000dda2:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
9000dda4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
9000dda6:	4b62      	ldr	r3, [pc, #392]	; (9000df30 <_txe_thread_create+0x1c0>)
9000dda8:	681b      	ldr	r3, [r3, #0]
9000ddaa:	3301      	adds	r3, #1
9000ddac:	4a60      	ldr	r2, [pc, #384]	; (9000df30 <_txe_thread_create+0x1c0>)
9000ddae:	6013      	str	r3, [r2, #0]
9000ddb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000ddb2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ddb6:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
9000ddba:	2300      	movs	r3, #0
9000ddbc:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
9000ddbe:	4b5d      	ldr	r3, [pc, #372]	; (9000df34 <_txe_thread_create+0x1c4>)
9000ddc0:	681b      	ldr	r3, [r3, #0]
9000ddc2:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
9000ddc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ddc6:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
9000ddc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000ddca:	3b01      	subs	r3, #1
9000ddcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ddce:	4413      	add	r3, r2
9000ddd0:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
9000ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ddd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
9000ddd6:	2300      	movs	r3, #0
9000ddd8:	63fb      	str	r3, [r7, #60]	; 0x3c
9000ddda:	e02b      	b.n	9000de34 <_txe_thread_create+0xc4>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
9000dddc:	68fa      	ldr	r2, [r7, #12]
9000ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000dde0:	429a      	cmp	r2, r3
9000dde2:	d101      	bne.n	9000dde8 <_txe_thread_create+0x78>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
9000dde4:	2301      	movs	r3, #1
9000dde6:	643b      	str	r3, [r7, #64]	; 0x40
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
9000dde8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000ddea:	2b01      	cmp	r3, #1
9000ddec:	d028      	beq.n	9000de40 <_txe_thread_create+0xd0>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
9000ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ddf0:	68db      	ldr	r3, [r3, #12]
9000ddf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000ddf4:	429a      	cmp	r2, r3
9000ddf6:	d308      	bcc.n	9000de0a <_txe_thread_create+0x9a>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
9000ddf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ddfa:	691b      	ldr	r3, [r3, #16]
9000ddfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000ddfe:	429a      	cmp	r2, r3
9000de00:	d203      	bcs.n	9000de0a <_txe_thread_create+0x9a>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
9000de02:	2300      	movs	r3, #0
9000de04:	653b      	str	r3, [r7, #80]	; 0x50
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
9000de06:	2301      	movs	r3, #1
9000de08:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
9000de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000de0c:	68db      	ldr	r3, [r3, #12]
9000de0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000de10:	429a      	cmp	r2, r3
9000de12:	d308      	bcc.n	9000de26 <_txe_thread_create+0xb6>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
9000de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000de16:	691b      	ldr	r3, [r3, #16]
9000de18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000de1a:	429a      	cmp	r2, r3
9000de1c:	d203      	bcs.n	9000de26 <_txe_thread_create+0xb6>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
9000de1e:	2300      	movs	r3, #0
9000de20:	653b      	str	r3, [r7, #80]	; 0x50
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
9000de22:	2301      	movs	r3, #1
9000de24:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
9000de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000de28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000de2c:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
9000de2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de30:	3301      	adds	r3, #1
9000de32:	63fb      	str	r3, [r7, #60]	; 0x3c
9000de34:	4b40      	ldr	r3, [pc, #256]	; (9000df38 <_txe_thread_create+0x1c8>)
9000de36:	681b      	ldr	r3, [r3, #0]
9000de38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000de3a:	429a      	cmp	r2, r3
9000de3c:	d3ce      	bcc.n	9000dddc <_txe_thread_create+0x6c>
9000de3e:	e000      	b.n	9000de42 <_txe_thread_create+0xd2>
                break;
9000de40:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
9000de42:	f3ef 8310 	mrs	r3, PRIMASK
9000de46:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
9000de48:	b672      	cpsid	i
    return(primask_value);
9000de4a:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
9000de4c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
9000de4e:	4b38      	ldr	r3, [pc, #224]	; (9000df30 <_txe_thread_create+0x1c0>)
9000de50:	681b      	ldr	r3, [r3, #0]
9000de52:	3b01      	subs	r3, #1
9000de54:	4a36      	ldr	r2, [pc, #216]	; (9000df30 <_txe_thread_create+0x1c0>)
9000de56:	6013      	str	r3, [r2, #0]
9000de58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000de5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
9000de5c:	69fb      	ldr	r3, [r7, #28]
9000de5e:	f383 8810 	msr	PRIMASK, r3
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
9000de62:	f7fe fac1 	bl	9000c3e8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
9000de66:	68fa      	ldr	r2, [r7, #12]
9000de68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000de6a:	429a      	cmp	r2, r3
9000de6c:	d102      	bne.n	9000de74 <_txe_thread_create+0x104>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
9000de6e:	230e      	movs	r3, #14
9000de70:	647b      	str	r3, [r7, #68]	; 0x44
9000de72:	e042      	b.n	9000defa <_txe_thread_create+0x18a>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
9000de74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000de76:	2b00      	cmp	r3, #0
9000de78:	d102      	bne.n	9000de80 <_txe_thread_create+0x110>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
9000de7a:	2303      	movs	r3, #3
9000de7c:	647b      	str	r3, [r7, #68]	; 0x44
9000de7e:	e03c      	b.n	9000defa <_txe_thread_create+0x18a>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
9000de80:	687b      	ldr	r3, [r7, #4]
9000de82:	2b00      	cmp	r3, #0
9000de84:	d102      	bne.n	9000de8c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
9000de86:	2303      	movs	r3, #3
9000de88:	647b      	str	r3, [r7, #68]	; 0x44
9000de8a:	e036      	b.n	9000defa <_txe_thread_create+0x18a>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
9000de8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000de8e:	2bc7      	cmp	r3, #199	; 0xc7
9000de90:	d802      	bhi.n	9000de98 <_txe_thread_create+0x128>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
9000de92:	2305      	movs	r3, #5
9000de94:	647b      	str	r3, [r7, #68]	; 0x44
9000de96:	e030      	b.n	9000defa <_txe_thread_create+0x18a>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
9000de98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000de9a:	2b1f      	cmp	r3, #31
9000de9c:	d902      	bls.n	9000dea4 <_txe_thread_create+0x134>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
9000de9e:	230f      	movs	r3, #15
9000dea0:	647b      	str	r3, [r7, #68]	; 0x44
9000dea2:	e02a      	b.n	9000defa <_txe_thread_create+0x18a>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
9000dea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
9000dea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000dea8:	429a      	cmp	r2, r3
9000deaa:	d902      	bls.n	9000deb2 <_txe_thread_create+0x142>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
9000deac:	2318      	movs	r3, #24
9000deae:	647b      	str	r3, [r7, #68]	; 0x44
9000deb0:	e023      	b.n	9000defa <_txe_thread_create+0x18a>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
9000deb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000deb4:	2b01      	cmp	r3, #1
9000deb6:	d902      	bls.n	9000debe <_txe_thread_create+0x14e>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
9000deb8:	2310      	movs	r3, #16
9000deba:	647b      	str	r3, [r7, #68]	; 0x44
9000debc:	e01d      	b.n	9000defa <_txe_thread_create+0x18a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
9000debe:	4b1f      	ldr	r3, [pc, #124]	; (9000df3c <_txe_thread_create+0x1cc>)
9000dec0:	681b      	ldr	r3, [r3, #0]
9000dec2:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
9000dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000dec6:	4a1e      	ldr	r2, [pc, #120]	; (9000df40 <_txe_thread_create+0x1d0>)
9000dec8:	4293      	cmp	r3, r2
9000deca:	d101      	bne.n	9000ded0 <_txe_thread_create+0x160>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
9000decc:	2313      	movs	r3, #19
9000dece:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000ded0:	f3ef 8305 	mrs	r3, IPSR
9000ded4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
9000ded6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
9000ded8:	4b1a      	ldr	r3, [pc, #104]	; (9000df44 <_txe_thread_create+0x1d4>)
9000deda:	681b      	ldr	r3, [r3, #0]
9000dedc:	4313      	orrs	r3, r2
9000dede:	2b00      	cmp	r3, #0
9000dee0:	d00b      	beq.n	9000defa <_txe_thread_create+0x18a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
9000dee2:	f3ef 8305 	mrs	r3, IPSR
9000dee6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
9000dee8:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
9000deea:	4b16      	ldr	r3, [pc, #88]	; (9000df44 <_txe_thread_create+0x1d4>)
9000deec:	681b      	ldr	r3, [r3, #0]
9000deee:	4313      	orrs	r3, r2
9000def0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
9000def4:	d201      	bcs.n	9000defa <_txe_thread_create+0x18a>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
9000def6:	2313      	movs	r3, #19
9000def8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
9000defa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000defc:	2b00      	cmp	r3, #0
9000defe:	d112      	bne.n	9000df26 <_txe_thread_create+0x1b6>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
9000df00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000df02:	9305      	str	r3, [sp, #20]
9000df04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000df06:	9304      	str	r3, [sp, #16]
9000df08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000df0a:	9303      	str	r3, [sp, #12]
9000df0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
9000df0e:	9302      	str	r3, [sp, #8]
9000df10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000df12:	9301      	str	r3, [sp, #4]
9000df14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000df16:	9300      	str	r3, [sp, #0]
9000df18:	683b      	ldr	r3, [r7, #0]
9000df1a:	687a      	ldr	r2, [r7, #4]
9000df1c:	68b9      	ldr	r1, [r7, #8]
9000df1e:	68f8      	ldr	r0, [r7, #12]
9000df20:	f7fd ff5e 	bl	9000bde0 <_tx_thread_create>
9000df24:	6478      	str	r0, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
9000df26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
9000df28:	4618      	mov	r0, r3
9000df2a:	3748      	adds	r7, #72	; 0x48
9000df2c:	46bd      	mov	sp, r7
9000df2e:	bd80      	pop	{r7, pc}
9000df30:	2401c868 	.word	0x2401c868
9000df34:	2401c858 	.word	0x2401c858
9000df38:	2401c860 	.word	0x2401c860
9000df3c:	2401c86c 	.word	0x2401c86c
9000df40:	2401c910 	.word	0x2401c910
9000df44:	2400a010 	.word	0x2400a010

9000df48 <__errno>:
9000df48:	4b01      	ldr	r3, [pc, #4]	; (9000df50 <__errno+0x8>)
9000df4a:	6818      	ldr	r0, [r3, #0]
9000df4c:	4770      	bx	lr
9000df4e:	bf00      	nop
9000df50:	2400a014 	.word	0x2400a014

9000df54 <__libc_init_array>:
9000df54:	b570      	push	{r4, r5, r6, lr}
9000df56:	4e0d      	ldr	r6, [pc, #52]	; (9000df8c <__libc_init_array+0x38>)
9000df58:	4c0d      	ldr	r4, [pc, #52]	; (9000df90 <__libc_init_array+0x3c>)
9000df5a:	1ba4      	subs	r4, r4, r6
9000df5c:	10a4      	asrs	r4, r4, #2
9000df5e:	2500      	movs	r5, #0
9000df60:	42a5      	cmp	r5, r4
9000df62:	d109      	bne.n	9000df78 <__libc_init_array+0x24>
9000df64:	4e0b      	ldr	r6, [pc, #44]	; (9000df94 <__libc_init_array+0x40>)
9000df66:	4c0c      	ldr	r4, [pc, #48]	; (9000df98 <__libc_init_array+0x44>)
9000df68:	f000 ff68 	bl	9000ee3c <_init>
9000df6c:	1ba4      	subs	r4, r4, r6
9000df6e:	10a4      	asrs	r4, r4, #2
9000df70:	2500      	movs	r5, #0
9000df72:	42a5      	cmp	r5, r4
9000df74:	d105      	bne.n	9000df82 <__libc_init_array+0x2e>
9000df76:	bd70      	pop	{r4, r5, r6, pc}
9000df78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
9000df7c:	4798      	blx	r3
9000df7e:	3501      	adds	r5, #1
9000df80:	e7ee      	b.n	9000df60 <__libc_init_array+0xc>
9000df82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
9000df86:	4798      	blx	r3
9000df88:	3501      	adds	r5, #1
9000df8a:	e7f2      	b.n	9000df72 <__libc_init_array+0x1e>
9000df8c:	9000f0cc 	.word	0x9000f0cc
9000df90:	9000f0cc 	.word	0x9000f0cc
9000df94:	9000f0cc 	.word	0x9000f0cc
9000df98:	9000f0d0 	.word	0x9000f0d0

9000df9c <memset>:
9000df9c:	4402      	add	r2, r0
9000df9e:	4603      	mov	r3, r0
9000dfa0:	4293      	cmp	r3, r2
9000dfa2:	d100      	bne.n	9000dfa6 <memset+0xa>
9000dfa4:	4770      	bx	lr
9000dfa6:	f803 1b01 	strb.w	r1, [r3], #1
9000dfaa:	e7f9      	b.n	9000dfa0 <memset+0x4>

9000dfac <iprintf>:
9000dfac:	b40f      	push	{r0, r1, r2, r3}
9000dfae:	4b0a      	ldr	r3, [pc, #40]	; (9000dfd8 <iprintf+0x2c>)
9000dfb0:	b513      	push	{r0, r1, r4, lr}
9000dfb2:	681c      	ldr	r4, [r3, #0]
9000dfb4:	b124      	cbz	r4, 9000dfc0 <iprintf+0x14>
9000dfb6:	69a3      	ldr	r3, [r4, #24]
9000dfb8:	b913      	cbnz	r3, 9000dfc0 <iprintf+0x14>
9000dfba:	4620      	mov	r0, r4
9000dfbc:	f000 fa22 	bl	9000e404 <__sinit>
9000dfc0:	ab05      	add	r3, sp, #20
9000dfc2:	9a04      	ldr	r2, [sp, #16]
9000dfc4:	68a1      	ldr	r1, [r4, #8]
9000dfc6:	9301      	str	r3, [sp, #4]
9000dfc8:	4620      	mov	r0, r4
9000dfca:	f000 fbdb 	bl	9000e784 <_vfiprintf_r>
9000dfce:	b002      	add	sp, #8
9000dfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000dfd4:	b004      	add	sp, #16
9000dfd6:	4770      	bx	lr
9000dfd8:	2400a014 	.word	0x2400a014

9000dfdc <_puts_r>:
9000dfdc:	b570      	push	{r4, r5, r6, lr}
9000dfde:	460e      	mov	r6, r1
9000dfe0:	4605      	mov	r5, r0
9000dfe2:	b118      	cbz	r0, 9000dfec <_puts_r+0x10>
9000dfe4:	6983      	ldr	r3, [r0, #24]
9000dfe6:	b90b      	cbnz	r3, 9000dfec <_puts_r+0x10>
9000dfe8:	f000 fa0c 	bl	9000e404 <__sinit>
9000dfec:	69ab      	ldr	r3, [r5, #24]
9000dfee:	68ac      	ldr	r4, [r5, #8]
9000dff0:	b913      	cbnz	r3, 9000dff8 <_puts_r+0x1c>
9000dff2:	4628      	mov	r0, r5
9000dff4:	f000 fa06 	bl	9000e404 <__sinit>
9000dff8:	4b23      	ldr	r3, [pc, #140]	; (9000e088 <_puts_r+0xac>)
9000dffa:	429c      	cmp	r4, r3
9000dffc:	d117      	bne.n	9000e02e <_puts_r+0x52>
9000dffe:	686c      	ldr	r4, [r5, #4]
9000e000:	89a3      	ldrh	r3, [r4, #12]
9000e002:	071b      	lsls	r3, r3, #28
9000e004:	d51d      	bpl.n	9000e042 <_puts_r+0x66>
9000e006:	6923      	ldr	r3, [r4, #16]
9000e008:	b1db      	cbz	r3, 9000e042 <_puts_r+0x66>
9000e00a:	3e01      	subs	r6, #1
9000e00c:	68a3      	ldr	r3, [r4, #8]
9000e00e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000e012:	3b01      	subs	r3, #1
9000e014:	60a3      	str	r3, [r4, #8]
9000e016:	b9e9      	cbnz	r1, 9000e054 <_puts_r+0x78>
9000e018:	2b00      	cmp	r3, #0
9000e01a:	da2e      	bge.n	9000e07a <_puts_r+0x9e>
9000e01c:	4622      	mov	r2, r4
9000e01e:	210a      	movs	r1, #10
9000e020:	4628      	mov	r0, r5
9000e022:	f000 f83f 	bl	9000e0a4 <__swbuf_r>
9000e026:	3001      	adds	r0, #1
9000e028:	d011      	beq.n	9000e04e <_puts_r+0x72>
9000e02a:	200a      	movs	r0, #10
9000e02c:	e011      	b.n	9000e052 <_puts_r+0x76>
9000e02e:	4b17      	ldr	r3, [pc, #92]	; (9000e08c <_puts_r+0xb0>)
9000e030:	429c      	cmp	r4, r3
9000e032:	d101      	bne.n	9000e038 <_puts_r+0x5c>
9000e034:	68ac      	ldr	r4, [r5, #8]
9000e036:	e7e3      	b.n	9000e000 <_puts_r+0x24>
9000e038:	4b15      	ldr	r3, [pc, #84]	; (9000e090 <_puts_r+0xb4>)
9000e03a:	429c      	cmp	r4, r3
9000e03c:	bf08      	it	eq
9000e03e:	68ec      	ldreq	r4, [r5, #12]
9000e040:	e7de      	b.n	9000e000 <_puts_r+0x24>
9000e042:	4621      	mov	r1, r4
9000e044:	4628      	mov	r0, r5
9000e046:	f000 f87f 	bl	9000e148 <__swsetup_r>
9000e04a:	2800      	cmp	r0, #0
9000e04c:	d0dd      	beq.n	9000e00a <_puts_r+0x2e>
9000e04e:	f04f 30ff 	mov.w	r0, #4294967295
9000e052:	bd70      	pop	{r4, r5, r6, pc}
9000e054:	2b00      	cmp	r3, #0
9000e056:	da04      	bge.n	9000e062 <_puts_r+0x86>
9000e058:	69a2      	ldr	r2, [r4, #24]
9000e05a:	429a      	cmp	r2, r3
9000e05c:	dc06      	bgt.n	9000e06c <_puts_r+0x90>
9000e05e:	290a      	cmp	r1, #10
9000e060:	d004      	beq.n	9000e06c <_puts_r+0x90>
9000e062:	6823      	ldr	r3, [r4, #0]
9000e064:	1c5a      	adds	r2, r3, #1
9000e066:	6022      	str	r2, [r4, #0]
9000e068:	7019      	strb	r1, [r3, #0]
9000e06a:	e7cf      	b.n	9000e00c <_puts_r+0x30>
9000e06c:	4622      	mov	r2, r4
9000e06e:	4628      	mov	r0, r5
9000e070:	f000 f818 	bl	9000e0a4 <__swbuf_r>
9000e074:	3001      	adds	r0, #1
9000e076:	d1c9      	bne.n	9000e00c <_puts_r+0x30>
9000e078:	e7e9      	b.n	9000e04e <_puts_r+0x72>
9000e07a:	6823      	ldr	r3, [r4, #0]
9000e07c:	200a      	movs	r0, #10
9000e07e:	1c5a      	adds	r2, r3, #1
9000e080:	6022      	str	r2, [r4, #0]
9000e082:	7018      	strb	r0, [r3, #0]
9000e084:	e7e5      	b.n	9000e052 <_puts_r+0x76>
9000e086:	bf00      	nop
9000e088:	9000f050 	.word	0x9000f050
9000e08c:	9000f070 	.word	0x9000f070
9000e090:	9000f030 	.word	0x9000f030

9000e094 <puts>:
9000e094:	4b02      	ldr	r3, [pc, #8]	; (9000e0a0 <puts+0xc>)
9000e096:	4601      	mov	r1, r0
9000e098:	6818      	ldr	r0, [r3, #0]
9000e09a:	f7ff bf9f 	b.w	9000dfdc <_puts_r>
9000e09e:	bf00      	nop
9000e0a0:	2400a014 	.word	0x2400a014

9000e0a4 <__swbuf_r>:
9000e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000e0a6:	460e      	mov	r6, r1
9000e0a8:	4614      	mov	r4, r2
9000e0aa:	4605      	mov	r5, r0
9000e0ac:	b118      	cbz	r0, 9000e0b6 <__swbuf_r+0x12>
9000e0ae:	6983      	ldr	r3, [r0, #24]
9000e0b0:	b90b      	cbnz	r3, 9000e0b6 <__swbuf_r+0x12>
9000e0b2:	f000 f9a7 	bl	9000e404 <__sinit>
9000e0b6:	4b21      	ldr	r3, [pc, #132]	; (9000e13c <__swbuf_r+0x98>)
9000e0b8:	429c      	cmp	r4, r3
9000e0ba:	d12a      	bne.n	9000e112 <__swbuf_r+0x6e>
9000e0bc:	686c      	ldr	r4, [r5, #4]
9000e0be:	69a3      	ldr	r3, [r4, #24]
9000e0c0:	60a3      	str	r3, [r4, #8]
9000e0c2:	89a3      	ldrh	r3, [r4, #12]
9000e0c4:	071a      	lsls	r2, r3, #28
9000e0c6:	d52e      	bpl.n	9000e126 <__swbuf_r+0x82>
9000e0c8:	6923      	ldr	r3, [r4, #16]
9000e0ca:	b363      	cbz	r3, 9000e126 <__swbuf_r+0x82>
9000e0cc:	6923      	ldr	r3, [r4, #16]
9000e0ce:	6820      	ldr	r0, [r4, #0]
9000e0d0:	1ac0      	subs	r0, r0, r3
9000e0d2:	6963      	ldr	r3, [r4, #20]
9000e0d4:	b2f6      	uxtb	r6, r6
9000e0d6:	4283      	cmp	r3, r0
9000e0d8:	4637      	mov	r7, r6
9000e0da:	dc04      	bgt.n	9000e0e6 <__swbuf_r+0x42>
9000e0dc:	4621      	mov	r1, r4
9000e0de:	4628      	mov	r0, r5
9000e0e0:	f000 f926 	bl	9000e330 <_fflush_r>
9000e0e4:	bb28      	cbnz	r0, 9000e132 <__swbuf_r+0x8e>
9000e0e6:	68a3      	ldr	r3, [r4, #8]
9000e0e8:	3b01      	subs	r3, #1
9000e0ea:	60a3      	str	r3, [r4, #8]
9000e0ec:	6823      	ldr	r3, [r4, #0]
9000e0ee:	1c5a      	adds	r2, r3, #1
9000e0f0:	6022      	str	r2, [r4, #0]
9000e0f2:	701e      	strb	r6, [r3, #0]
9000e0f4:	6963      	ldr	r3, [r4, #20]
9000e0f6:	3001      	adds	r0, #1
9000e0f8:	4283      	cmp	r3, r0
9000e0fa:	d004      	beq.n	9000e106 <__swbuf_r+0x62>
9000e0fc:	89a3      	ldrh	r3, [r4, #12]
9000e0fe:	07db      	lsls	r3, r3, #31
9000e100:	d519      	bpl.n	9000e136 <__swbuf_r+0x92>
9000e102:	2e0a      	cmp	r6, #10
9000e104:	d117      	bne.n	9000e136 <__swbuf_r+0x92>
9000e106:	4621      	mov	r1, r4
9000e108:	4628      	mov	r0, r5
9000e10a:	f000 f911 	bl	9000e330 <_fflush_r>
9000e10e:	b190      	cbz	r0, 9000e136 <__swbuf_r+0x92>
9000e110:	e00f      	b.n	9000e132 <__swbuf_r+0x8e>
9000e112:	4b0b      	ldr	r3, [pc, #44]	; (9000e140 <__swbuf_r+0x9c>)
9000e114:	429c      	cmp	r4, r3
9000e116:	d101      	bne.n	9000e11c <__swbuf_r+0x78>
9000e118:	68ac      	ldr	r4, [r5, #8]
9000e11a:	e7d0      	b.n	9000e0be <__swbuf_r+0x1a>
9000e11c:	4b09      	ldr	r3, [pc, #36]	; (9000e144 <__swbuf_r+0xa0>)
9000e11e:	429c      	cmp	r4, r3
9000e120:	bf08      	it	eq
9000e122:	68ec      	ldreq	r4, [r5, #12]
9000e124:	e7cb      	b.n	9000e0be <__swbuf_r+0x1a>
9000e126:	4621      	mov	r1, r4
9000e128:	4628      	mov	r0, r5
9000e12a:	f000 f80d 	bl	9000e148 <__swsetup_r>
9000e12e:	2800      	cmp	r0, #0
9000e130:	d0cc      	beq.n	9000e0cc <__swbuf_r+0x28>
9000e132:	f04f 37ff 	mov.w	r7, #4294967295
9000e136:	4638      	mov	r0, r7
9000e138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000e13a:	bf00      	nop
9000e13c:	9000f050 	.word	0x9000f050
9000e140:	9000f070 	.word	0x9000f070
9000e144:	9000f030 	.word	0x9000f030

9000e148 <__swsetup_r>:
9000e148:	4b32      	ldr	r3, [pc, #200]	; (9000e214 <__swsetup_r+0xcc>)
9000e14a:	b570      	push	{r4, r5, r6, lr}
9000e14c:	681d      	ldr	r5, [r3, #0]
9000e14e:	4606      	mov	r6, r0
9000e150:	460c      	mov	r4, r1
9000e152:	b125      	cbz	r5, 9000e15e <__swsetup_r+0x16>
9000e154:	69ab      	ldr	r3, [r5, #24]
9000e156:	b913      	cbnz	r3, 9000e15e <__swsetup_r+0x16>
9000e158:	4628      	mov	r0, r5
9000e15a:	f000 f953 	bl	9000e404 <__sinit>
9000e15e:	4b2e      	ldr	r3, [pc, #184]	; (9000e218 <__swsetup_r+0xd0>)
9000e160:	429c      	cmp	r4, r3
9000e162:	d10f      	bne.n	9000e184 <__swsetup_r+0x3c>
9000e164:	686c      	ldr	r4, [r5, #4]
9000e166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e16a:	b29a      	uxth	r2, r3
9000e16c:	0715      	lsls	r5, r2, #28
9000e16e:	d42c      	bmi.n	9000e1ca <__swsetup_r+0x82>
9000e170:	06d0      	lsls	r0, r2, #27
9000e172:	d411      	bmi.n	9000e198 <__swsetup_r+0x50>
9000e174:	2209      	movs	r2, #9
9000e176:	6032      	str	r2, [r6, #0]
9000e178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000e17c:	81a3      	strh	r3, [r4, #12]
9000e17e:	f04f 30ff 	mov.w	r0, #4294967295
9000e182:	e03e      	b.n	9000e202 <__swsetup_r+0xba>
9000e184:	4b25      	ldr	r3, [pc, #148]	; (9000e21c <__swsetup_r+0xd4>)
9000e186:	429c      	cmp	r4, r3
9000e188:	d101      	bne.n	9000e18e <__swsetup_r+0x46>
9000e18a:	68ac      	ldr	r4, [r5, #8]
9000e18c:	e7eb      	b.n	9000e166 <__swsetup_r+0x1e>
9000e18e:	4b24      	ldr	r3, [pc, #144]	; (9000e220 <__swsetup_r+0xd8>)
9000e190:	429c      	cmp	r4, r3
9000e192:	bf08      	it	eq
9000e194:	68ec      	ldreq	r4, [r5, #12]
9000e196:	e7e6      	b.n	9000e166 <__swsetup_r+0x1e>
9000e198:	0751      	lsls	r1, r2, #29
9000e19a:	d512      	bpl.n	9000e1c2 <__swsetup_r+0x7a>
9000e19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000e19e:	b141      	cbz	r1, 9000e1b2 <__swsetup_r+0x6a>
9000e1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000e1a4:	4299      	cmp	r1, r3
9000e1a6:	d002      	beq.n	9000e1ae <__swsetup_r+0x66>
9000e1a8:	4630      	mov	r0, r6
9000e1aa:	f000 fa19 	bl	9000e5e0 <_free_r>
9000e1ae:	2300      	movs	r3, #0
9000e1b0:	6363      	str	r3, [r4, #52]	; 0x34
9000e1b2:	89a3      	ldrh	r3, [r4, #12]
9000e1b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000e1b8:	81a3      	strh	r3, [r4, #12]
9000e1ba:	2300      	movs	r3, #0
9000e1bc:	6063      	str	r3, [r4, #4]
9000e1be:	6923      	ldr	r3, [r4, #16]
9000e1c0:	6023      	str	r3, [r4, #0]
9000e1c2:	89a3      	ldrh	r3, [r4, #12]
9000e1c4:	f043 0308 	orr.w	r3, r3, #8
9000e1c8:	81a3      	strh	r3, [r4, #12]
9000e1ca:	6923      	ldr	r3, [r4, #16]
9000e1cc:	b94b      	cbnz	r3, 9000e1e2 <__swsetup_r+0x9a>
9000e1ce:	89a3      	ldrh	r3, [r4, #12]
9000e1d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
9000e1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000e1d8:	d003      	beq.n	9000e1e2 <__swsetup_r+0x9a>
9000e1da:	4621      	mov	r1, r4
9000e1dc:	4630      	mov	r0, r6
9000e1de:	f000 f9bf 	bl	9000e560 <__smakebuf_r>
9000e1e2:	89a2      	ldrh	r2, [r4, #12]
9000e1e4:	f012 0301 	ands.w	r3, r2, #1
9000e1e8:	d00c      	beq.n	9000e204 <__swsetup_r+0xbc>
9000e1ea:	2300      	movs	r3, #0
9000e1ec:	60a3      	str	r3, [r4, #8]
9000e1ee:	6963      	ldr	r3, [r4, #20]
9000e1f0:	425b      	negs	r3, r3
9000e1f2:	61a3      	str	r3, [r4, #24]
9000e1f4:	6923      	ldr	r3, [r4, #16]
9000e1f6:	b953      	cbnz	r3, 9000e20e <__swsetup_r+0xc6>
9000e1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e1fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
9000e200:	d1ba      	bne.n	9000e178 <__swsetup_r+0x30>
9000e202:	bd70      	pop	{r4, r5, r6, pc}
9000e204:	0792      	lsls	r2, r2, #30
9000e206:	bf58      	it	pl
9000e208:	6963      	ldrpl	r3, [r4, #20]
9000e20a:	60a3      	str	r3, [r4, #8]
9000e20c:	e7f2      	b.n	9000e1f4 <__swsetup_r+0xac>
9000e20e:	2000      	movs	r0, #0
9000e210:	e7f7      	b.n	9000e202 <__swsetup_r+0xba>
9000e212:	bf00      	nop
9000e214:	2400a014 	.word	0x2400a014
9000e218:	9000f050 	.word	0x9000f050
9000e21c:	9000f070 	.word	0x9000f070
9000e220:	9000f030 	.word	0x9000f030

9000e224 <__sflush_r>:
9000e224:	898a      	ldrh	r2, [r1, #12]
9000e226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e22a:	4605      	mov	r5, r0
9000e22c:	0710      	lsls	r0, r2, #28
9000e22e:	460c      	mov	r4, r1
9000e230:	d458      	bmi.n	9000e2e4 <__sflush_r+0xc0>
9000e232:	684b      	ldr	r3, [r1, #4]
9000e234:	2b00      	cmp	r3, #0
9000e236:	dc05      	bgt.n	9000e244 <__sflush_r+0x20>
9000e238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000e23a:	2b00      	cmp	r3, #0
9000e23c:	dc02      	bgt.n	9000e244 <__sflush_r+0x20>
9000e23e:	2000      	movs	r0, #0
9000e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000e244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000e246:	2e00      	cmp	r6, #0
9000e248:	d0f9      	beq.n	9000e23e <__sflush_r+0x1a>
9000e24a:	2300      	movs	r3, #0
9000e24c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9000e250:	682f      	ldr	r7, [r5, #0]
9000e252:	6a21      	ldr	r1, [r4, #32]
9000e254:	602b      	str	r3, [r5, #0]
9000e256:	d032      	beq.n	9000e2be <__sflush_r+0x9a>
9000e258:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000e25a:	89a3      	ldrh	r3, [r4, #12]
9000e25c:	075a      	lsls	r2, r3, #29
9000e25e:	d505      	bpl.n	9000e26c <__sflush_r+0x48>
9000e260:	6863      	ldr	r3, [r4, #4]
9000e262:	1ac0      	subs	r0, r0, r3
9000e264:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000e266:	b10b      	cbz	r3, 9000e26c <__sflush_r+0x48>
9000e268:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000e26a:	1ac0      	subs	r0, r0, r3
9000e26c:	2300      	movs	r3, #0
9000e26e:	4602      	mov	r2, r0
9000e270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000e272:	6a21      	ldr	r1, [r4, #32]
9000e274:	4628      	mov	r0, r5
9000e276:	47b0      	blx	r6
9000e278:	1c43      	adds	r3, r0, #1
9000e27a:	89a3      	ldrh	r3, [r4, #12]
9000e27c:	d106      	bne.n	9000e28c <__sflush_r+0x68>
9000e27e:	6829      	ldr	r1, [r5, #0]
9000e280:	291d      	cmp	r1, #29
9000e282:	d848      	bhi.n	9000e316 <__sflush_r+0xf2>
9000e284:	4a29      	ldr	r2, [pc, #164]	; (9000e32c <__sflush_r+0x108>)
9000e286:	40ca      	lsrs	r2, r1
9000e288:	07d6      	lsls	r6, r2, #31
9000e28a:	d544      	bpl.n	9000e316 <__sflush_r+0xf2>
9000e28c:	2200      	movs	r2, #0
9000e28e:	6062      	str	r2, [r4, #4]
9000e290:	04d9      	lsls	r1, r3, #19
9000e292:	6922      	ldr	r2, [r4, #16]
9000e294:	6022      	str	r2, [r4, #0]
9000e296:	d504      	bpl.n	9000e2a2 <__sflush_r+0x7e>
9000e298:	1c42      	adds	r2, r0, #1
9000e29a:	d101      	bne.n	9000e2a0 <__sflush_r+0x7c>
9000e29c:	682b      	ldr	r3, [r5, #0]
9000e29e:	b903      	cbnz	r3, 9000e2a2 <__sflush_r+0x7e>
9000e2a0:	6560      	str	r0, [r4, #84]	; 0x54
9000e2a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000e2a4:	602f      	str	r7, [r5, #0]
9000e2a6:	2900      	cmp	r1, #0
9000e2a8:	d0c9      	beq.n	9000e23e <__sflush_r+0x1a>
9000e2aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000e2ae:	4299      	cmp	r1, r3
9000e2b0:	d002      	beq.n	9000e2b8 <__sflush_r+0x94>
9000e2b2:	4628      	mov	r0, r5
9000e2b4:	f000 f994 	bl	9000e5e0 <_free_r>
9000e2b8:	2000      	movs	r0, #0
9000e2ba:	6360      	str	r0, [r4, #52]	; 0x34
9000e2bc:	e7c0      	b.n	9000e240 <__sflush_r+0x1c>
9000e2be:	2301      	movs	r3, #1
9000e2c0:	4628      	mov	r0, r5
9000e2c2:	47b0      	blx	r6
9000e2c4:	1c41      	adds	r1, r0, #1
9000e2c6:	d1c8      	bne.n	9000e25a <__sflush_r+0x36>
9000e2c8:	682b      	ldr	r3, [r5, #0]
9000e2ca:	2b00      	cmp	r3, #0
9000e2cc:	d0c5      	beq.n	9000e25a <__sflush_r+0x36>
9000e2ce:	2b1d      	cmp	r3, #29
9000e2d0:	d001      	beq.n	9000e2d6 <__sflush_r+0xb2>
9000e2d2:	2b16      	cmp	r3, #22
9000e2d4:	d101      	bne.n	9000e2da <__sflush_r+0xb6>
9000e2d6:	602f      	str	r7, [r5, #0]
9000e2d8:	e7b1      	b.n	9000e23e <__sflush_r+0x1a>
9000e2da:	89a3      	ldrh	r3, [r4, #12]
9000e2dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000e2e0:	81a3      	strh	r3, [r4, #12]
9000e2e2:	e7ad      	b.n	9000e240 <__sflush_r+0x1c>
9000e2e4:	690f      	ldr	r7, [r1, #16]
9000e2e6:	2f00      	cmp	r7, #0
9000e2e8:	d0a9      	beq.n	9000e23e <__sflush_r+0x1a>
9000e2ea:	0793      	lsls	r3, r2, #30
9000e2ec:	680e      	ldr	r6, [r1, #0]
9000e2ee:	bf08      	it	eq
9000e2f0:	694b      	ldreq	r3, [r1, #20]
9000e2f2:	600f      	str	r7, [r1, #0]
9000e2f4:	bf18      	it	ne
9000e2f6:	2300      	movne	r3, #0
9000e2f8:	eba6 0807 	sub.w	r8, r6, r7
9000e2fc:	608b      	str	r3, [r1, #8]
9000e2fe:	f1b8 0f00 	cmp.w	r8, #0
9000e302:	dd9c      	ble.n	9000e23e <__sflush_r+0x1a>
9000e304:	4643      	mov	r3, r8
9000e306:	463a      	mov	r2, r7
9000e308:	6a21      	ldr	r1, [r4, #32]
9000e30a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000e30c:	4628      	mov	r0, r5
9000e30e:	47b0      	blx	r6
9000e310:	2800      	cmp	r0, #0
9000e312:	dc06      	bgt.n	9000e322 <__sflush_r+0xfe>
9000e314:	89a3      	ldrh	r3, [r4, #12]
9000e316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000e31a:	81a3      	strh	r3, [r4, #12]
9000e31c:	f04f 30ff 	mov.w	r0, #4294967295
9000e320:	e78e      	b.n	9000e240 <__sflush_r+0x1c>
9000e322:	4407      	add	r7, r0
9000e324:	eba8 0800 	sub.w	r8, r8, r0
9000e328:	e7e9      	b.n	9000e2fe <__sflush_r+0xda>
9000e32a:	bf00      	nop
9000e32c:	20400001 	.word	0x20400001

9000e330 <_fflush_r>:
9000e330:	b538      	push	{r3, r4, r5, lr}
9000e332:	690b      	ldr	r3, [r1, #16]
9000e334:	4605      	mov	r5, r0
9000e336:	460c      	mov	r4, r1
9000e338:	b1db      	cbz	r3, 9000e372 <_fflush_r+0x42>
9000e33a:	b118      	cbz	r0, 9000e344 <_fflush_r+0x14>
9000e33c:	6983      	ldr	r3, [r0, #24]
9000e33e:	b90b      	cbnz	r3, 9000e344 <_fflush_r+0x14>
9000e340:	f000 f860 	bl	9000e404 <__sinit>
9000e344:	4b0c      	ldr	r3, [pc, #48]	; (9000e378 <_fflush_r+0x48>)
9000e346:	429c      	cmp	r4, r3
9000e348:	d109      	bne.n	9000e35e <_fflush_r+0x2e>
9000e34a:	686c      	ldr	r4, [r5, #4]
9000e34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e350:	b17b      	cbz	r3, 9000e372 <_fflush_r+0x42>
9000e352:	4621      	mov	r1, r4
9000e354:	4628      	mov	r0, r5
9000e356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000e35a:	f7ff bf63 	b.w	9000e224 <__sflush_r>
9000e35e:	4b07      	ldr	r3, [pc, #28]	; (9000e37c <_fflush_r+0x4c>)
9000e360:	429c      	cmp	r4, r3
9000e362:	d101      	bne.n	9000e368 <_fflush_r+0x38>
9000e364:	68ac      	ldr	r4, [r5, #8]
9000e366:	e7f1      	b.n	9000e34c <_fflush_r+0x1c>
9000e368:	4b05      	ldr	r3, [pc, #20]	; (9000e380 <_fflush_r+0x50>)
9000e36a:	429c      	cmp	r4, r3
9000e36c:	bf08      	it	eq
9000e36e:	68ec      	ldreq	r4, [r5, #12]
9000e370:	e7ec      	b.n	9000e34c <_fflush_r+0x1c>
9000e372:	2000      	movs	r0, #0
9000e374:	bd38      	pop	{r3, r4, r5, pc}
9000e376:	bf00      	nop
9000e378:	9000f050 	.word	0x9000f050
9000e37c:	9000f070 	.word	0x9000f070
9000e380:	9000f030 	.word	0x9000f030

9000e384 <std>:
9000e384:	2300      	movs	r3, #0
9000e386:	b510      	push	{r4, lr}
9000e388:	4604      	mov	r4, r0
9000e38a:	e9c0 3300 	strd	r3, r3, [r0]
9000e38e:	6083      	str	r3, [r0, #8]
9000e390:	8181      	strh	r1, [r0, #12]
9000e392:	6643      	str	r3, [r0, #100]	; 0x64
9000e394:	81c2      	strh	r2, [r0, #14]
9000e396:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000e39a:	6183      	str	r3, [r0, #24]
9000e39c:	4619      	mov	r1, r3
9000e39e:	2208      	movs	r2, #8
9000e3a0:	305c      	adds	r0, #92	; 0x5c
9000e3a2:	f7ff fdfb 	bl	9000df9c <memset>
9000e3a6:	4b05      	ldr	r3, [pc, #20]	; (9000e3bc <std+0x38>)
9000e3a8:	6263      	str	r3, [r4, #36]	; 0x24
9000e3aa:	4b05      	ldr	r3, [pc, #20]	; (9000e3c0 <std+0x3c>)
9000e3ac:	62a3      	str	r3, [r4, #40]	; 0x28
9000e3ae:	4b05      	ldr	r3, [pc, #20]	; (9000e3c4 <std+0x40>)
9000e3b0:	62e3      	str	r3, [r4, #44]	; 0x2c
9000e3b2:	4b05      	ldr	r3, [pc, #20]	; (9000e3c8 <std+0x44>)
9000e3b4:	6224      	str	r4, [r4, #32]
9000e3b6:	6323      	str	r3, [r4, #48]	; 0x30
9000e3b8:	bd10      	pop	{r4, pc}
9000e3ba:	bf00      	nop
9000e3bc:	9000ece1 	.word	0x9000ece1
9000e3c0:	9000ed03 	.word	0x9000ed03
9000e3c4:	9000ed3b 	.word	0x9000ed3b
9000e3c8:	9000ed5f 	.word	0x9000ed5f

9000e3cc <_cleanup_r>:
9000e3cc:	4901      	ldr	r1, [pc, #4]	; (9000e3d4 <_cleanup_r+0x8>)
9000e3ce:	f000 b885 	b.w	9000e4dc <_fwalk_reent>
9000e3d2:	bf00      	nop
9000e3d4:	9000e331 	.word	0x9000e331

9000e3d8 <__sfmoreglue>:
9000e3d8:	b570      	push	{r4, r5, r6, lr}
9000e3da:	1e4a      	subs	r2, r1, #1
9000e3dc:	2568      	movs	r5, #104	; 0x68
9000e3de:	4355      	muls	r5, r2
9000e3e0:	460e      	mov	r6, r1
9000e3e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
9000e3e6:	f000 f949 	bl	9000e67c <_malloc_r>
9000e3ea:	4604      	mov	r4, r0
9000e3ec:	b140      	cbz	r0, 9000e400 <__sfmoreglue+0x28>
9000e3ee:	2100      	movs	r1, #0
9000e3f0:	e9c0 1600 	strd	r1, r6, [r0]
9000e3f4:	300c      	adds	r0, #12
9000e3f6:	60a0      	str	r0, [r4, #8]
9000e3f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
9000e3fc:	f7ff fdce 	bl	9000df9c <memset>
9000e400:	4620      	mov	r0, r4
9000e402:	bd70      	pop	{r4, r5, r6, pc}

9000e404 <__sinit>:
9000e404:	6983      	ldr	r3, [r0, #24]
9000e406:	b510      	push	{r4, lr}
9000e408:	4604      	mov	r4, r0
9000e40a:	bb33      	cbnz	r3, 9000e45a <__sinit+0x56>
9000e40c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
9000e410:	6503      	str	r3, [r0, #80]	; 0x50
9000e412:	4b12      	ldr	r3, [pc, #72]	; (9000e45c <__sinit+0x58>)
9000e414:	4a12      	ldr	r2, [pc, #72]	; (9000e460 <__sinit+0x5c>)
9000e416:	681b      	ldr	r3, [r3, #0]
9000e418:	6282      	str	r2, [r0, #40]	; 0x28
9000e41a:	4298      	cmp	r0, r3
9000e41c:	bf04      	itt	eq
9000e41e:	2301      	moveq	r3, #1
9000e420:	6183      	streq	r3, [r0, #24]
9000e422:	f000 f81f 	bl	9000e464 <__sfp>
9000e426:	6060      	str	r0, [r4, #4]
9000e428:	4620      	mov	r0, r4
9000e42a:	f000 f81b 	bl	9000e464 <__sfp>
9000e42e:	60a0      	str	r0, [r4, #8]
9000e430:	4620      	mov	r0, r4
9000e432:	f000 f817 	bl	9000e464 <__sfp>
9000e436:	2200      	movs	r2, #0
9000e438:	60e0      	str	r0, [r4, #12]
9000e43a:	2104      	movs	r1, #4
9000e43c:	6860      	ldr	r0, [r4, #4]
9000e43e:	f7ff ffa1 	bl	9000e384 <std>
9000e442:	2201      	movs	r2, #1
9000e444:	2109      	movs	r1, #9
9000e446:	68a0      	ldr	r0, [r4, #8]
9000e448:	f7ff ff9c 	bl	9000e384 <std>
9000e44c:	2202      	movs	r2, #2
9000e44e:	2112      	movs	r1, #18
9000e450:	68e0      	ldr	r0, [r4, #12]
9000e452:	f7ff ff97 	bl	9000e384 <std>
9000e456:	2301      	movs	r3, #1
9000e458:	61a3      	str	r3, [r4, #24]
9000e45a:	bd10      	pop	{r4, pc}
9000e45c:	9000f02c 	.word	0x9000f02c
9000e460:	9000e3cd 	.word	0x9000e3cd

9000e464 <__sfp>:
9000e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000e466:	4b1b      	ldr	r3, [pc, #108]	; (9000e4d4 <__sfp+0x70>)
9000e468:	681e      	ldr	r6, [r3, #0]
9000e46a:	69b3      	ldr	r3, [r6, #24]
9000e46c:	4607      	mov	r7, r0
9000e46e:	b913      	cbnz	r3, 9000e476 <__sfp+0x12>
9000e470:	4630      	mov	r0, r6
9000e472:	f7ff ffc7 	bl	9000e404 <__sinit>
9000e476:	3648      	adds	r6, #72	; 0x48
9000e478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
9000e47c:	3b01      	subs	r3, #1
9000e47e:	d503      	bpl.n	9000e488 <__sfp+0x24>
9000e480:	6833      	ldr	r3, [r6, #0]
9000e482:	b133      	cbz	r3, 9000e492 <__sfp+0x2e>
9000e484:	6836      	ldr	r6, [r6, #0]
9000e486:	e7f7      	b.n	9000e478 <__sfp+0x14>
9000e488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
9000e48c:	b16d      	cbz	r5, 9000e4aa <__sfp+0x46>
9000e48e:	3468      	adds	r4, #104	; 0x68
9000e490:	e7f4      	b.n	9000e47c <__sfp+0x18>
9000e492:	2104      	movs	r1, #4
9000e494:	4638      	mov	r0, r7
9000e496:	f7ff ff9f 	bl	9000e3d8 <__sfmoreglue>
9000e49a:	6030      	str	r0, [r6, #0]
9000e49c:	2800      	cmp	r0, #0
9000e49e:	d1f1      	bne.n	9000e484 <__sfp+0x20>
9000e4a0:	230c      	movs	r3, #12
9000e4a2:	603b      	str	r3, [r7, #0]
9000e4a4:	4604      	mov	r4, r0
9000e4a6:	4620      	mov	r0, r4
9000e4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000e4aa:	4b0b      	ldr	r3, [pc, #44]	; (9000e4d8 <__sfp+0x74>)
9000e4ac:	6665      	str	r5, [r4, #100]	; 0x64
9000e4ae:	e9c4 5500 	strd	r5, r5, [r4]
9000e4b2:	60a5      	str	r5, [r4, #8]
9000e4b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
9000e4b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
9000e4bc:	2208      	movs	r2, #8
9000e4be:	4629      	mov	r1, r5
9000e4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
9000e4c4:	f7ff fd6a 	bl	9000df9c <memset>
9000e4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
9000e4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
9000e4d0:	e7e9      	b.n	9000e4a6 <__sfp+0x42>
9000e4d2:	bf00      	nop
9000e4d4:	9000f02c 	.word	0x9000f02c
9000e4d8:	ffff0001 	.word	0xffff0001

9000e4dc <_fwalk_reent>:
9000e4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000e4e0:	4680      	mov	r8, r0
9000e4e2:	4689      	mov	r9, r1
9000e4e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
9000e4e8:	2600      	movs	r6, #0
9000e4ea:	b914      	cbnz	r4, 9000e4f2 <_fwalk_reent+0x16>
9000e4ec:	4630      	mov	r0, r6
9000e4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000e4f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
9000e4f6:	3f01      	subs	r7, #1
9000e4f8:	d501      	bpl.n	9000e4fe <_fwalk_reent+0x22>
9000e4fa:	6824      	ldr	r4, [r4, #0]
9000e4fc:	e7f5      	b.n	9000e4ea <_fwalk_reent+0xe>
9000e4fe:	89ab      	ldrh	r3, [r5, #12]
9000e500:	2b01      	cmp	r3, #1
9000e502:	d907      	bls.n	9000e514 <_fwalk_reent+0x38>
9000e504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000e508:	3301      	adds	r3, #1
9000e50a:	d003      	beq.n	9000e514 <_fwalk_reent+0x38>
9000e50c:	4629      	mov	r1, r5
9000e50e:	4640      	mov	r0, r8
9000e510:	47c8      	blx	r9
9000e512:	4306      	orrs	r6, r0
9000e514:	3568      	adds	r5, #104	; 0x68
9000e516:	e7ee      	b.n	9000e4f6 <_fwalk_reent+0x1a>

9000e518 <__swhatbuf_r>:
9000e518:	b570      	push	{r4, r5, r6, lr}
9000e51a:	460e      	mov	r6, r1
9000e51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000e520:	2900      	cmp	r1, #0
9000e522:	b096      	sub	sp, #88	; 0x58
9000e524:	4614      	mov	r4, r2
9000e526:	461d      	mov	r5, r3
9000e528:	da07      	bge.n	9000e53a <__swhatbuf_r+0x22>
9000e52a:	2300      	movs	r3, #0
9000e52c:	602b      	str	r3, [r5, #0]
9000e52e:	89b3      	ldrh	r3, [r6, #12]
9000e530:	061a      	lsls	r2, r3, #24
9000e532:	d410      	bmi.n	9000e556 <__swhatbuf_r+0x3e>
9000e534:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000e538:	e00e      	b.n	9000e558 <__swhatbuf_r+0x40>
9000e53a:	466a      	mov	r2, sp
9000e53c:	f000 fc36 	bl	9000edac <_fstat_r>
9000e540:	2800      	cmp	r0, #0
9000e542:	dbf2      	blt.n	9000e52a <__swhatbuf_r+0x12>
9000e544:	9a01      	ldr	r2, [sp, #4]
9000e546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
9000e54a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
9000e54e:	425a      	negs	r2, r3
9000e550:	415a      	adcs	r2, r3
9000e552:	602a      	str	r2, [r5, #0]
9000e554:	e7ee      	b.n	9000e534 <__swhatbuf_r+0x1c>
9000e556:	2340      	movs	r3, #64	; 0x40
9000e558:	2000      	movs	r0, #0
9000e55a:	6023      	str	r3, [r4, #0]
9000e55c:	b016      	add	sp, #88	; 0x58
9000e55e:	bd70      	pop	{r4, r5, r6, pc}

9000e560 <__smakebuf_r>:
9000e560:	898b      	ldrh	r3, [r1, #12]
9000e562:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000e564:	079d      	lsls	r5, r3, #30
9000e566:	4606      	mov	r6, r0
9000e568:	460c      	mov	r4, r1
9000e56a:	d507      	bpl.n	9000e57c <__smakebuf_r+0x1c>
9000e56c:	f104 0347 	add.w	r3, r4, #71	; 0x47
9000e570:	6023      	str	r3, [r4, #0]
9000e572:	6123      	str	r3, [r4, #16]
9000e574:	2301      	movs	r3, #1
9000e576:	6163      	str	r3, [r4, #20]
9000e578:	b002      	add	sp, #8
9000e57a:	bd70      	pop	{r4, r5, r6, pc}
9000e57c:	ab01      	add	r3, sp, #4
9000e57e:	466a      	mov	r2, sp
9000e580:	f7ff ffca 	bl	9000e518 <__swhatbuf_r>
9000e584:	9900      	ldr	r1, [sp, #0]
9000e586:	4605      	mov	r5, r0
9000e588:	4630      	mov	r0, r6
9000e58a:	f000 f877 	bl	9000e67c <_malloc_r>
9000e58e:	b948      	cbnz	r0, 9000e5a4 <__smakebuf_r+0x44>
9000e590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e594:	059a      	lsls	r2, r3, #22
9000e596:	d4ef      	bmi.n	9000e578 <__smakebuf_r+0x18>
9000e598:	f023 0303 	bic.w	r3, r3, #3
9000e59c:	f043 0302 	orr.w	r3, r3, #2
9000e5a0:	81a3      	strh	r3, [r4, #12]
9000e5a2:	e7e3      	b.n	9000e56c <__smakebuf_r+0xc>
9000e5a4:	4b0d      	ldr	r3, [pc, #52]	; (9000e5dc <__smakebuf_r+0x7c>)
9000e5a6:	62b3      	str	r3, [r6, #40]	; 0x28
9000e5a8:	89a3      	ldrh	r3, [r4, #12]
9000e5aa:	6020      	str	r0, [r4, #0]
9000e5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000e5b0:	81a3      	strh	r3, [r4, #12]
9000e5b2:	9b00      	ldr	r3, [sp, #0]
9000e5b4:	6163      	str	r3, [r4, #20]
9000e5b6:	9b01      	ldr	r3, [sp, #4]
9000e5b8:	6120      	str	r0, [r4, #16]
9000e5ba:	b15b      	cbz	r3, 9000e5d4 <__smakebuf_r+0x74>
9000e5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000e5c0:	4630      	mov	r0, r6
9000e5c2:	f000 fc05 	bl	9000edd0 <_isatty_r>
9000e5c6:	b128      	cbz	r0, 9000e5d4 <__smakebuf_r+0x74>
9000e5c8:	89a3      	ldrh	r3, [r4, #12]
9000e5ca:	f023 0303 	bic.w	r3, r3, #3
9000e5ce:	f043 0301 	orr.w	r3, r3, #1
9000e5d2:	81a3      	strh	r3, [r4, #12]
9000e5d4:	89a3      	ldrh	r3, [r4, #12]
9000e5d6:	431d      	orrs	r5, r3
9000e5d8:	81a5      	strh	r5, [r4, #12]
9000e5da:	e7cd      	b.n	9000e578 <__smakebuf_r+0x18>
9000e5dc:	9000e3cd 	.word	0x9000e3cd

9000e5e0 <_free_r>:
9000e5e0:	b538      	push	{r3, r4, r5, lr}
9000e5e2:	4605      	mov	r5, r0
9000e5e4:	2900      	cmp	r1, #0
9000e5e6:	d045      	beq.n	9000e674 <_free_r+0x94>
9000e5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000e5ec:	1f0c      	subs	r4, r1, #4
9000e5ee:	2b00      	cmp	r3, #0
9000e5f0:	bfb8      	it	lt
9000e5f2:	18e4      	addlt	r4, r4, r3
9000e5f4:	f000 fc0e 	bl	9000ee14 <__malloc_lock>
9000e5f8:	4a1f      	ldr	r2, [pc, #124]	; (9000e678 <_free_r+0x98>)
9000e5fa:	6813      	ldr	r3, [r2, #0]
9000e5fc:	4610      	mov	r0, r2
9000e5fe:	b933      	cbnz	r3, 9000e60e <_free_r+0x2e>
9000e600:	6063      	str	r3, [r4, #4]
9000e602:	6014      	str	r4, [r2, #0]
9000e604:	4628      	mov	r0, r5
9000e606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000e60a:	f000 bc04 	b.w	9000ee16 <__malloc_unlock>
9000e60e:	42a3      	cmp	r3, r4
9000e610:	d90c      	bls.n	9000e62c <_free_r+0x4c>
9000e612:	6821      	ldr	r1, [r4, #0]
9000e614:	1862      	adds	r2, r4, r1
9000e616:	4293      	cmp	r3, r2
9000e618:	bf04      	itt	eq
9000e61a:	681a      	ldreq	r2, [r3, #0]
9000e61c:	685b      	ldreq	r3, [r3, #4]
9000e61e:	6063      	str	r3, [r4, #4]
9000e620:	bf04      	itt	eq
9000e622:	1852      	addeq	r2, r2, r1
9000e624:	6022      	streq	r2, [r4, #0]
9000e626:	6004      	str	r4, [r0, #0]
9000e628:	e7ec      	b.n	9000e604 <_free_r+0x24>
9000e62a:	4613      	mov	r3, r2
9000e62c:	685a      	ldr	r2, [r3, #4]
9000e62e:	b10a      	cbz	r2, 9000e634 <_free_r+0x54>
9000e630:	42a2      	cmp	r2, r4
9000e632:	d9fa      	bls.n	9000e62a <_free_r+0x4a>
9000e634:	6819      	ldr	r1, [r3, #0]
9000e636:	1858      	adds	r0, r3, r1
9000e638:	42a0      	cmp	r0, r4
9000e63a:	d10b      	bne.n	9000e654 <_free_r+0x74>
9000e63c:	6820      	ldr	r0, [r4, #0]
9000e63e:	4401      	add	r1, r0
9000e640:	1858      	adds	r0, r3, r1
9000e642:	4282      	cmp	r2, r0
9000e644:	6019      	str	r1, [r3, #0]
9000e646:	d1dd      	bne.n	9000e604 <_free_r+0x24>
9000e648:	6810      	ldr	r0, [r2, #0]
9000e64a:	6852      	ldr	r2, [r2, #4]
9000e64c:	605a      	str	r2, [r3, #4]
9000e64e:	4401      	add	r1, r0
9000e650:	6019      	str	r1, [r3, #0]
9000e652:	e7d7      	b.n	9000e604 <_free_r+0x24>
9000e654:	d902      	bls.n	9000e65c <_free_r+0x7c>
9000e656:	230c      	movs	r3, #12
9000e658:	602b      	str	r3, [r5, #0]
9000e65a:	e7d3      	b.n	9000e604 <_free_r+0x24>
9000e65c:	6820      	ldr	r0, [r4, #0]
9000e65e:	1821      	adds	r1, r4, r0
9000e660:	428a      	cmp	r2, r1
9000e662:	bf04      	itt	eq
9000e664:	6811      	ldreq	r1, [r2, #0]
9000e666:	6852      	ldreq	r2, [r2, #4]
9000e668:	6062      	str	r2, [r4, #4]
9000e66a:	bf04      	itt	eq
9000e66c:	1809      	addeq	r1, r1, r0
9000e66e:	6021      	streq	r1, [r4, #0]
9000e670:	605c      	str	r4, [r3, #4]
9000e672:	e7c7      	b.n	9000e604 <_free_r+0x24>
9000e674:	bd38      	pop	{r3, r4, r5, pc}
9000e676:	bf00      	nop
9000e678:	2400a0ac 	.word	0x2400a0ac

9000e67c <_malloc_r>:
9000e67c:	b570      	push	{r4, r5, r6, lr}
9000e67e:	1ccd      	adds	r5, r1, #3
9000e680:	f025 0503 	bic.w	r5, r5, #3
9000e684:	3508      	adds	r5, #8
9000e686:	2d0c      	cmp	r5, #12
9000e688:	bf38      	it	cc
9000e68a:	250c      	movcc	r5, #12
9000e68c:	2d00      	cmp	r5, #0
9000e68e:	4606      	mov	r6, r0
9000e690:	db01      	blt.n	9000e696 <_malloc_r+0x1a>
9000e692:	42a9      	cmp	r1, r5
9000e694:	d903      	bls.n	9000e69e <_malloc_r+0x22>
9000e696:	230c      	movs	r3, #12
9000e698:	6033      	str	r3, [r6, #0]
9000e69a:	2000      	movs	r0, #0
9000e69c:	bd70      	pop	{r4, r5, r6, pc}
9000e69e:	f000 fbb9 	bl	9000ee14 <__malloc_lock>
9000e6a2:	4a21      	ldr	r2, [pc, #132]	; (9000e728 <_malloc_r+0xac>)
9000e6a4:	6814      	ldr	r4, [r2, #0]
9000e6a6:	4621      	mov	r1, r4
9000e6a8:	b991      	cbnz	r1, 9000e6d0 <_malloc_r+0x54>
9000e6aa:	4c20      	ldr	r4, [pc, #128]	; (9000e72c <_malloc_r+0xb0>)
9000e6ac:	6823      	ldr	r3, [r4, #0]
9000e6ae:	b91b      	cbnz	r3, 9000e6b8 <_malloc_r+0x3c>
9000e6b0:	4630      	mov	r0, r6
9000e6b2:	f000 fb05 	bl	9000ecc0 <_sbrk_r>
9000e6b6:	6020      	str	r0, [r4, #0]
9000e6b8:	4629      	mov	r1, r5
9000e6ba:	4630      	mov	r0, r6
9000e6bc:	f000 fb00 	bl	9000ecc0 <_sbrk_r>
9000e6c0:	1c43      	adds	r3, r0, #1
9000e6c2:	d124      	bne.n	9000e70e <_malloc_r+0x92>
9000e6c4:	230c      	movs	r3, #12
9000e6c6:	6033      	str	r3, [r6, #0]
9000e6c8:	4630      	mov	r0, r6
9000e6ca:	f000 fba4 	bl	9000ee16 <__malloc_unlock>
9000e6ce:	e7e4      	b.n	9000e69a <_malloc_r+0x1e>
9000e6d0:	680b      	ldr	r3, [r1, #0]
9000e6d2:	1b5b      	subs	r3, r3, r5
9000e6d4:	d418      	bmi.n	9000e708 <_malloc_r+0x8c>
9000e6d6:	2b0b      	cmp	r3, #11
9000e6d8:	d90f      	bls.n	9000e6fa <_malloc_r+0x7e>
9000e6da:	600b      	str	r3, [r1, #0]
9000e6dc:	50cd      	str	r5, [r1, r3]
9000e6de:	18cc      	adds	r4, r1, r3
9000e6e0:	4630      	mov	r0, r6
9000e6e2:	f000 fb98 	bl	9000ee16 <__malloc_unlock>
9000e6e6:	f104 000b 	add.w	r0, r4, #11
9000e6ea:	1d23      	adds	r3, r4, #4
9000e6ec:	f020 0007 	bic.w	r0, r0, #7
9000e6f0:	1ac3      	subs	r3, r0, r3
9000e6f2:	d0d3      	beq.n	9000e69c <_malloc_r+0x20>
9000e6f4:	425a      	negs	r2, r3
9000e6f6:	50e2      	str	r2, [r4, r3]
9000e6f8:	e7d0      	b.n	9000e69c <_malloc_r+0x20>
9000e6fa:	428c      	cmp	r4, r1
9000e6fc:	684b      	ldr	r3, [r1, #4]
9000e6fe:	bf16      	itet	ne
9000e700:	6063      	strne	r3, [r4, #4]
9000e702:	6013      	streq	r3, [r2, #0]
9000e704:	460c      	movne	r4, r1
9000e706:	e7eb      	b.n	9000e6e0 <_malloc_r+0x64>
9000e708:	460c      	mov	r4, r1
9000e70a:	6849      	ldr	r1, [r1, #4]
9000e70c:	e7cc      	b.n	9000e6a8 <_malloc_r+0x2c>
9000e70e:	1cc4      	adds	r4, r0, #3
9000e710:	f024 0403 	bic.w	r4, r4, #3
9000e714:	42a0      	cmp	r0, r4
9000e716:	d005      	beq.n	9000e724 <_malloc_r+0xa8>
9000e718:	1a21      	subs	r1, r4, r0
9000e71a:	4630      	mov	r0, r6
9000e71c:	f000 fad0 	bl	9000ecc0 <_sbrk_r>
9000e720:	3001      	adds	r0, #1
9000e722:	d0cf      	beq.n	9000e6c4 <_malloc_r+0x48>
9000e724:	6025      	str	r5, [r4, #0]
9000e726:	e7db      	b.n	9000e6e0 <_malloc_r+0x64>
9000e728:	2400a0ac 	.word	0x2400a0ac
9000e72c:	2400a0b0 	.word	0x2400a0b0

9000e730 <__sfputc_r>:
9000e730:	6893      	ldr	r3, [r2, #8]
9000e732:	3b01      	subs	r3, #1
9000e734:	2b00      	cmp	r3, #0
9000e736:	b410      	push	{r4}
9000e738:	6093      	str	r3, [r2, #8]
9000e73a:	da08      	bge.n	9000e74e <__sfputc_r+0x1e>
9000e73c:	6994      	ldr	r4, [r2, #24]
9000e73e:	42a3      	cmp	r3, r4
9000e740:	db01      	blt.n	9000e746 <__sfputc_r+0x16>
9000e742:	290a      	cmp	r1, #10
9000e744:	d103      	bne.n	9000e74e <__sfputc_r+0x1e>
9000e746:	f85d 4b04 	ldr.w	r4, [sp], #4
9000e74a:	f7ff bcab 	b.w	9000e0a4 <__swbuf_r>
9000e74e:	6813      	ldr	r3, [r2, #0]
9000e750:	1c58      	adds	r0, r3, #1
9000e752:	6010      	str	r0, [r2, #0]
9000e754:	7019      	strb	r1, [r3, #0]
9000e756:	4608      	mov	r0, r1
9000e758:	f85d 4b04 	ldr.w	r4, [sp], #4
9000e75c:	4770      	bx	lr

9000e75e <__sfputs_r>:
9000e75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000e760:	4606      	mov	r6, r0
9000e762:	460f      	mov	r7, r1
9000e764:	4614      	mov	r4, r2
9000e766:	18d5      	adds	r5, r2, r3
9000e768:	42ac      	cmp	r4, r5
9000e76a:	d101      	bne.n	9000e770 <__sfputs_r+0x12>
9000e76c:	2000      	movs	r0, #0
9000e76e:	e007      	b.n	9000e780 <__sfputs_r+0x22>
9000e770:	463a      	mov	r2, r7
9000e772:	f814 1b01 	ldrb.w	r1, [r4], #1
9000e776:	4630      	mov	r0, r6
9000e778:	f7ff ffda 	bl	9000e730 <__sfputc_r>
9000e77c:	1c43      	adds	r3, r0, #1
9000e77e:	d1f3      	bne.n	9000e768 <__sfputs_r+0xa>
9000e780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000e784 <_vfiprintf_r>:
9000e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000e788:	460c      	mov	r4, r1
9000e78a:	b09d      	sub	sp, #116	; 0x74
9000e78c:	4617      	mov	r7, r2
9000e78e:	461d      	mov	r5, r3
9000e790:	4606      	mov	r6, r0
9000e792:	b118      	cbz	r0, 9000e79c <_vfiprintf_r+0x18>
9000e794:	6983      	ldr	r3, [r0, #24]
9000e796:	b90b      	cbnz	r3, 9000e79c <_vfiprintf_r+0x18>
9000e798:	f7ff fe34 	bl	9000e404 <__sinit>
9000e79c:	4b7c      	ldr	r3, [pc, #496]	; (9000e990 <_vfiprintf_r+0x20c>)
9000e79e:	429c      	cmp	r4, r3
9000e7a0:	d158      	bne.n	9000e854 <_vfiprintf_r+0xd0>
9000e7a2:	6874      	ldr	r4, [r6, #4]
9000e7a4:	89a3      	ldrh	r3, [r4, #12]
9000e7a6:	0718      	lsls	r0, r3, #28
9000e7a8:	d55e      	bpl.n	9000e868 <_vfiprintf_r+0xe4>
9000e7aa:	6923      	ldr	r3, [r4, #16]
9000e7ac:	2b00      	cmp	r3, #0
9000e7ae:	d05b      	beq.n	9000e868 <_vfiprintf_r+0xe4>
9000e7b0:	2300      	movs	r3, #0
9000e7b2:	9309      	str	r3, [sp, #36]	; 0x24
9000e7b4:	2320      	movs	r3, #32
9000e7b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000e7ba:	2330      	movs	r3, #48	; 0x30
9000e7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000e7c0:	9503      	str	r5, [sp, #12]
9000e7c2:	f04f 0b01 	mov.w	fp, #1
9000e7c6:	46b8      	mov	r8, r7
9000e7c8:	4645      	mov	r5, r8
9000e7ca:	f815 3b01 	ldrb.w	r3, [r5], #1
9000e7ce:	b10b      	cbz	r3, 9000e7d4 <_vfiprintf_r+0x50>
9000e7d0:	2b25      	cmp	r3, #37	; 0x25
9000e7d2:	d154      	bne.n	9000e87e <_vfiprintf_r+0xfa>
9000e7d4:	ebb8 0a07 	subs.w	sl, r8, r7
9000e7d8:	d00b      	beq.n	9000e7f2 <_vfiprintf_r+0x6e>
9000e7da:	4653      	mov	r3, sl
9000e7dc:	463a      	mov	r2, r7
9000e7de:	4621      	mov	r1, r4
9000e7e0:	4630      	mov	r0, r6
9000e7e2:	f7ff ffbc 	bl	9000e75e <__sfputs_r>
9000e7e6:	3001      	adds	r0, #1
9000e7e8:	f000 80c2 	beq.w	9000e970 <_vfiprintf_r+0x1ec>
9000e7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000e7ee:	4453      	add	r3, sl
9000e7f0:	9309      	str	r3, [sp, #36]	; 0x24
9000e7f2:	f898 3000 	ldrb.w	r3, [r8]
9000e7f6:	2b00      	cmp	r3, #0
9000e7f8:	f000 80ba 	beq.w	9000e970 <_vfiprintf_r+0x1ec>
9000e7fc:	2300      	movs	r3, #0
9000e7fe:	f04f 32ff 	mov.w	r2, #4294967295
9000e802:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000e806:	9304      	str	r3, [sp, #16]
9000e808:	9307      	str	r3, [sp, #28]
9000e80a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000e80e:	931a      	str	r3, [sp, #104]	; 0x68
9000e810:	46a8      	mov	r8, r5
9000e812:	2205      	movs	r2, #5
9000e814:	f818 1b01 	ldrb.w	r1, [r8], #1
9000e818:	485e      	ldr	r0, [pc, #376]	; (9000e994 <_vfiprintf_r+0x210>)
9000e81a:	f7f1 fe89 	bl	90000530 <memchr>
9000e81e:	9b04      	ldr	r3, [sp, #16]
9000e820:	bb78      	cbnz	r0, 9000e882 <_vfiprintf_r+0xfe>
9000e822:	06d9      	lsls	r1, r3, #27
9000e824:	bf44      	itt	mi
9000e826:	2220      	movmi	r2, #32
9000e828:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
9000e82c:	071a      	lsls	r2, r3, #28
9000e82e:	bf44      	itt	mi
9000e830:	222b      	movmi	r2, #43	; 0x2b
9000e832:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
9000e836:	782a      	ldrb	r2, [r5, #0]
9000e838:	2a2a      	cmp	r2, #42	; 0x2a
9000e83a:	d02a      	beq.n	9000e892 <_vfiprintf_r+0x10e>
9000e83c:	9a07      	ldr	r2, [sp, #28]
9000e83e:	46a8      	mov	r8, r5
9000e840:	2000      	movs	r0, #0
9000e842:	250a      	movs	r5, #10
9000e844:	4641      	mov	r1, r8
9000e846:	f811 3b01 	ldrb.w	r3, [r1], #1
9000e84a:	3b30      	subs	r3, #48	; 0x30
9000e84c:	2b09      	cmp	r3, #9
9000e84e:	d969      	bls.n	9000e924 <_vfiprintf_r+0x1a0>
9000e850:	b360      	cbz	r0, 9000e8ac <_vfiprintf_r+0x128>
9000e852:	e024      	b.n	9000e89e <_vfiprintf_r+0x11a>
9000e854:	4b50      	ldr	r3, [pc, #320]	; (9000e998 <_vfiprintf_r+0x214>)
9000e856:	429c      	cmp	r4, r3
9000e858:	d101      	bne.n	9000e85e <_vfiprintf_r+0xda>
9000e85a:	68b4      	ldr	r4, [r6, #8]
9000e85c:	e7a2      	b.n	9000e7a4 <_vfiprintf_r+0x20>
9000e85e:	4b4f      	ldr	r3, [pc, #316]	; (9000e99c <_vfiprintf_r+0x218>)
9000e860:	429c      	cmp	r4, r3
9000e862:	bf08      	it	eq
9000e864:	68f4      	ldreq	r4, [r6, #12]
9000e866:	e79d      	b.n	9000e7a4 <_vfiprintf_r+0x20>
9000e868:	4621      	mov	r1, r4
9000e86a:	4630      	mov	r0, r6
9000e86c:	f7ff fc6c 	bl	9000e148 <__swsetup_r>
9000e870:	2800      	cmp	r0, #0
9000e872:	d09d      	beq.n	9000e7b0 <_vfiprintf_r+0x2c>
9000e874:	f04f 30ff 	mov.w	r0, #4294967295
9000e878:	b01d      	add	sp, #116	; 0x74
9000e87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000e87e:	46a8      	mov	r8, r5
9000e880:	e7a2      	b.n	9000e7c8 <_vfiprintf_r+0x44>
9000e882:	4a44      	ldr	r2, [pc, #272]	; (9000e994 <_vfiprintf_r+0x210>)
9000e884:	1a80      	subs	r0, r0, r2
9000e886:	fa0b f000 	lsl.w	r0, fp, r0
9000e88a:	4318      	orrs	r0, r3
9000e88c:	9004      	str	r0, [sp, #16]
9000e88e:	4645      	mov	r5, r8
9000e890:	e7be      	b.n	9000e810 <_vfiprintf_r+0x8c>
9000e892:	9a03      	ldr	r2, [sp, #12]
9000e894:	1d11      	adds	r1, r2, #4
9000e896:	6812      	ldr	r2, [r2, #0]
9000e898:	9103      	str	r1, [sp, #12]
9000e89a:	2a00      	cmp	r2, #0
9000e89c:	db01      	blt.n	9000e8a2 <_vfiprintf_r+0x11e>
9000e89e:	9207      	str	r2, [sp, #28]
9000e8a0:	e004      	b.n	9000e8ac <_vfiprintf_r+0x128>
9000e8a2:	4252      	negs	r2, r2
9000e8a4:	f043 0302 	orr.w	r3, r3, #2
9000e8a8:	9207      	str	r2, [sp, #28]
9000e8aa:	9304      	str	r3, [sp, #16]
9000e8ac:	f898 3000 	ldrb.w	r3, [r8]
9000e8b0:	2b2e      	cmp	r3, #46	; 0x2e
9000e8b2:	d10e      	bne.n	9000e8d2 <_vfiprintf_r+0x14e>
9000e8b4:	f898 3001 	ldrb.w	r3, [r8, #1]
9000e8b8:	2b2a      	cmp	r3, #42	; 0x2a
9000e8ba:	d138      	bne.n	9000e92e <_vfiprintf_r+0x1aa>
9000e8bc:	9b03      	ldr	r3, [sp, #12]
9000e8be:	1d1a      	adds	r2, r3, #4
9000e8c0:	681b      	ldr	r3, [r3, #0]
9000e8c2:	9203      	str	r2, [sp, #12]
9000e8c4:	2b00      	cmp	r3, #0
9000e8c6:	bfb8      	it	lt
9000e8c8:	f04f 33ff 	movlt.w	r3, #4294967295
9000e8cc:	f108 0802 	add.w	r8, r8, #2
9000e8d0:	9305      	str	r3, [sp, #20]
9000e8d2:	4d33      	ldr	r5, [pc, #204]	; (9000e9a0 <_vfiprintf_r+0x21c>)
9000e8d4:	f898 1000 	ldrb.w	r1, [r8]
9000e8d8:	2203      	movs	r2, #3
9000e8da:	4628      	mov	r0, r5
9000e8dc:	f7f1 fe28 	bl	90000530 <memchr>
9000e8e0:	b140      	cbz	r0, 9000e8f4 <_vfiprintf_r+0x170>
9000e8e2:	2340      	movs	r3, #64	; 0x40
9000e8e4:	1b40      	subs	r0, r0, r5
9000e8e6:	fa03 f000 	lsl.w	r0, r3, r0
9000e8ea:	9b04      	ldr	r3, [sp, #16]
9000e8ec:	4303      	orrs	r3, r0
9000e8ee:	f108 0801 	add.w	r8, r8, #1
9000e8f2:	9304      	str	r3, [sp, #16]
9000e8f4:	f898 1000 	ldrb.w	r1, [r8]
9000e8f8:	482a      	ldr	r0, [pc, #168]	; (9000e9a4 <_vfiprintf_r+0x220>)
9000e8fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000e8fe:	2206      	movs	r2, #6
9000e900:	f108 0701 	add.w	r7, r8, #1
9000e904:	f7f1 fe14 	bl	90000530 <memchr>
9000e908:	2800      	cmp	r0, #0
9000e90a:	d037      	beq.n	9000e97c <_vfiprintf_r+0x1f8>
9000e90c:	4b26      	ldr	r3, [pc, #152]	; (9000e9a8 <_vfiprintf_r+0x224>)
9000e90e:	bb1b      	cbnz	r3, 9000e958 <_vfiprintf_r+0x1d4>
9000e910:	9b03      	ldr	r3, [sp, #12]
9000e912:	3307      	adds	r3, #7
9000e914:	f023 0307 	bic.w	r3, r3, #7
9000e918:	3308      	adds	r3, #8
9000e91a:	9303      	str	r3, [sp, #12]
9000e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000e91e:	444b      	add	r3, r9
9000e920:	9309      	str	r3, [sp, #36]	; 0x24
9000e922:	e750      	b.n	9000e7c6 <_vfiprintf_r+0x42>
9000e924:	fb05 3202 	mla	r2, r5, r2, r3
9000e928:	2001      	movs	r0, #1
9000e92a:	4688      	mov	r8, r1
9000e92c:	e78a      	b.n	9000e844 <_vfiprintf_r+0xc0>
9000e92e:	2300      	movs	r3, #0
9000e930:	f108 0801 	add.w	r8, r8, #1
9000e934:	9305      	str	r3, [sp, #20]
9000e936:	4619      	mov	r1, r3
9000e938:	250a      	movs	r5, #10
9000e93a:	4640      	mov	r0, r8
9000e93c:	f810 2b01 	ldrb.w	r2, [r0], #1
9000e940:	3a30      	subs	r2, #48	; 0x30
9000e942:	2a09      	cmp	r2, #9
9000e944:	d903      	bls.n	9000e94e <_vfiprintf_r+0x1ca>
9000e946:	2b00      	cmp	r3, #0
9000e948:	d0c3      	beq.n	9000e8d2 <_vfiprintf_r+0x14e>
9000e94a:	9105      	str	r1, [sp, #20]
9000e94c:	e7c1      	b.n	9000e8d2 <_vfiprintf_r+0x14e>
9000e94e:	fb05 2101 	mla	r1, r5, r1, r2
9000e952:	2301      	movs	r3, #1
9000e954:	4680      	mov	r8, r0
9000e956:	e7f0      	b.n	9000e93a <_vfiprintf_r+0x1b6>
9000e958:	ab03      	add	r3, sp, #12
9000e95a:	9300      	str	r3, [sp, #0]
9000e95c:	4622      	mov	r2, r4
9000e95e:	4b13      	ldr	r3, [pc, #76]	; (9000e9ac <_vfiprintf_r+0x228>)
9000e960:	a904      	add	r1, sp, #16
9000e962:	4630      	mov	r0, r6
9000e964:	f3af 8000 	nop.w
9000e968:	f1b0 3fff 	cmp.w	r0, #4294967295
9000e96c:	4681      	mov	r9, r0
9000e96e:	d1d5      	bne.n	9000e91c <_vfiprintf_r+0x198>
9000e970:	89a3      	ldrh	r3, [r4, #12]
9000e972:	065b      	lsls	r3, r3, #25
9000e974:	f53f af7e 	bmi.w	9000e874 <_vfiprintf_r+0xf0>
9000e978:	9809      	ldr	r0, [sp, #36]	; 0x24
9000e97a:	e77d      	b.n	9000e878 <_vfiprintf_r+0xf4>
9000e97c:	ab03      	add	r3, sp, #12
9000e97e:	9300      	str	r3, [sp, #0]
9000e980:	4622      	mov	r2, r4
9000e982:	4b0a      	ldr	r3, [pc, #40]	; (9000e9ac <_vfiprintf_r+0x228>)
9000e984:	a904      	add	r1, sp, #16
9000e986:	4630      	mov	r0, r6
9000e988:	f000 f888 	bl	9000ea9c <_printf_i>
9000e98c:	e7ec      	b.n	9000e968 <_vfiprintf_r+0x1e4>
9000e98e:	bf00      	nop
9000e990:	9000f050 	.word	0x9000f050
9000e994:	9000f090 	.word	0x9000f090
9000e998:	9000f070 	.word	0x9000f070
9000e99c:	9000f030 	.word	0x9000f030
9000e9a0:	9000f096 	.word	0x9000f096
9000e9a4:	9000f09a 	.word	0x9000f09a
9000e9a8:	00000000 	.word	0x00000000
9000e9ac:	9000e75f 	.word	0x9000e75f

9000e9b0 <_printf_common>:
9000e9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000e9b4:	4691      	mov	r9, r2
9000e9b6:	461f      	mov	r7, r3
9000e9b8:	688a      	ldr	r2, [r1, #8]
9000e9ba:	690b      	ldr	r3, [r1, #16]
9000e9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000e9c0:	4293      	cmp	r3, r2
9000e9c2:	bfb8      	it	lt
9000e9c4:	4613      	movlt	r3, r2
9000e9c6:	f8c9 3000 	str.w	r3, [r9]
9000e9ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9000e9ce:	4606      	mov	r6, r0
9000e9d0:	460c      	mov	r4, r1
9000e9d2:	b112      	cbz	r2, 9000e9da <_printf_common+0x2a>
9000e9d4:	3301      	adds	r3, #1
9000e9d6:	f8c9 3000 	str.w	r3, [r9]
9000e9da:	6823      	ldr	r3, [r4, #0]
9000e9dc:	0699      	lsls	r1, r3, #26
9000e9de:	bf42      	ittt	mi
9000e9e0:	f8d9 3000 	ldrmi.w	r3, [r9]
9000e9e4:	3302      	addmi	r3, #2
9000e9e6:	f8c9 3000 	strmi.w	r3, [r9]
9000e9ea:	6825      	ldr	r5, [r4, #0]
9000e9ec:	f015 0506 	ands.w	r5, r5, #6
9000e9f0:	d107      	bne.n	9000ea02 <_printf_common+0x52>
9000e9f2:	f104 0a19 	add.w	sl, r4, #25
9000e9f6:	68e3      	ldr	r3, [r4, #12]
9000e9f8:	f8d9 2000 	ldr.w	r2, [r9]
9000e9fc:	1a9b      	subs	r3, r3, r2
9000e9fe:	42ab      	cmp	r3, r5
9000ea00:	dc28      	bgt.n	9000ea54 <_printf_common+0xa4>
9000ea02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
9000ea06:	6822      	ldr	r2, [r4, #0]
9000ea08:	3300      	adds	r3, #0
9000ea0a:	bf18      	it	ne
9000ea0c:	2301      	movne	r3, #1
9000ea0e:	0692      	lsls	r2, r2, #26
9000ea10:	d42d      	bmi.n	9000ea6e <_printf_common+0xbe>
9000ea12:	f104 0243 	add.w	r2, r4, #67	; 0x43
9000ea16:	4639      	mov	r1, r7
9000ea18:	4630      	mov	r0, r6
9000ea1a:	47c0      	blx	r8
9000ea1c:	3001      	adds	r0, #1
9000ea1e:	d020      	beq.n	9000ea62 <_printf_common+0xb2>
9000ea20:	6823      	ldr	r3, [r4, #0]
9000ea22:	68e5      	ldr	r5, [r4, #12]
9000ea24:	f8d9 2000 	ldr.w	r2, [r9]
9000ea28:	f003 0306 	and.w	r3, r3, #6
9000ea2c:	2b04      	cmp	r3, #4
9000ea2e:	bf08      	it	eq
9000ea30:	1aad      	subeq	r5, r5, r2
9000ea32:	68a3      	ldr	r3, [r4, #8]
9000ea34:	6922      	ldr	r2, [r4, #16]
9000ea36:	bf0c      	ite	eq
9000ea38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000ea3c:	2500      	movne	r5, #0
9000ea3e:	4293      	cmp	r3, r2
9000ea40:	bfc4      	itt	gt
9000ea42:	1a9b      	subgt	r3, r3, r2
9000ea44:	18ed      	addgt	r5, r5, r3
9000ea46:	f04f 0900 	mov.w	r9, #0
9000ea4a:	341a      	adds	r4, #26
9000ea4c:	454d      	cmp	r5, r9
9000ea4e:	d11a      	bne.n	9000ea86 <_printf_common+0xd6>
9000ea50:	2000      	movs	r0, #0
9000ea52:	e008      	b.n	9000ea66 <_printf_common+0xb6>
9000ea54:	2301      	movs	r3, #1
9000ea56:	4652      	mov	r2, sl
9000ea58:	4639      	mov	r1, r7
9000ea5a:	4630      	mov	r0, r6
9000ea5c:	47c0      	blx	r8
9000ea5e:	3001      	adds	r0, #1
9000ea60:	d103      	bne.n	9000ea6a <_printf_common+0xba>
9000ea62:	f04f 30ff 	mov.w	r0, #4294967295
9000ea66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000ea6a:	3501      	adds	r5, #1
9000ea6c:	e7c3      	b.n	9000e9f6 <_printf_common+0x46>
9000ea6e:	18e1      	adds	r1, r4, r3
9000ea70:	1c5a      	adds	r2, r3, #1
9000ea72:	2030      	movs	r0, #48	; 0x30
9000ea74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9000ea78:	4422      	add	r2, r4
9000ea7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000ea7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9000ea82:	3302      	adds	r3, #2
9000ea84:	e7c5      	b.n	9000ea12 <_printf_common+0x62>
9000ea86:	2301      	movs	r3, #1
9000ea88:	4622      	mov	r2, r4
9000ea8a:	4639      	mov	r1, r7
9000ea8c:	4630      	mov	r0, r6
9000ea8e:	47c0      	blx	r8
9000ea90:	3001      	adds	r0, #1
9000ea92:	d0e6      	beq.n	9000ea62 <_printf_common+0xb2>
9000ea94:	f109 0901 	add.w	r9, r9, #1
9000ea98:	e7d8      	b.n	9000ea4c <_printf_common+0x9c>
	...

9000ea9c <_printf_i>:
9000ea9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000eaa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
9000eaa4:	460c      	mov	r4, r1
9000eaa6:	7e09      	ldrb	r1, [r1, #24]
9000eaa8:	b085      	sub	sp, #20
9000eaaa:	296e      	cmp	r1, #110	; 0x6e
9000eaac:	4617      	mov	r7, r2
9000eaae:	4606      	mov	r6, r0
9000eab0:	4698      	mov	r8, r3
9000eab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9000eab4:	f000 80b3 	beq.w	9000ec1e <_printf_i+0x182>
9000eab8:	d822      	bhi.n	9000eb00 <_printf_i+0x64>
9000eaba:	2963      	cmp	r1, #99	; 0x63
9000eabc:	d036      	beq.n	9000eb2c <_printf_i+0x90>
9000eabe:	d80a      	bhi.n	9000ead6 <_printf_i+0x3a>
9000eac0:	2900      	cmp	r1, #0
9000eac2:	f000 80b9 	beq.w	9000ec38 <_printf_i+0x19c>
9000eac6:	2958      	cmp	r1, #88	; 0x58
9000eac8:	f000 8083 	beq.w	9000ebd2 <_printf_i+0x136>
9000eacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000ead0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
9000ead4:	e032      	b.n	9000eb3c <_printf_i+0xa0>
9000ead6:	2964      	cmp	r1, #100	; 0x64
9000ead8:	d001      	beq.n	9000eade <_printf_i+0x42>
9000eada:	2969      	cmp	r1, #105	; 0x69
9000eadc:	d1f6      	bne.n	9000eacc <_printf_i+0x30>
9000eade:	6820      	ldr	r0, [r4, #0]
9000eae0:	6813      	ldr	r3, [r2, #0]
9000eae2:	0605      	lsls	r5, r0, #24
9000eae4:	f103 0104 	add.w	r1, r3, #4
9000eae8:	d52a      	bpl.n	9000eb40 <_printf_i+0xa4>
9000eaea:	681b      	ldr	r3, [r3, #0]
9000eaec:	6011      	str	r1, [r2, #0]
9000eaee:	2b00      	cmp	r3, #0
9000eaf0:	da03      	bge.n	9000eafa <_printf_i+0x5e>
9000eaf2:	222d      	movs	r2, #45	; 0x2d
9000eaf4:	425b      	negs	r3, r3
9000eaf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
9000eafa:	486f      	ldr	r0, [pc, #444]	; (9000ecb8 <_printf_i+0x21c>)
9000eafc:	220a      	movs	r2, #10
9000eafe:	e039      	b.n	9000eb74 <_printf_i+0xd8>
9000eb00:	2973      	cmp	r1, #115	; 0x73
9000eb02:	f000 809d 	beq.w	9000ec40 <_printf_i+0x1a4>
9000eb06:	d808      	bhi.n	9000eb1a <_printf_i+0x7e>
9000eb08:	296f      	cmp	r1, #111	; 0x6f
9000eb0a:	d020      	beq.n	9000eb4e <_printf_i+0xb2>
9000eb0c:	2970      	cmp	r1, #112	; 0x70
9000eb0e:	d1dd      	bne.n	9000eacc <_printf_i+0x30>
9000eb10:	6823      	ldr	r3, [r4, #0]
9000eb12:	f043 0320 	orr.w	r3, r3, #32
9000eb16:	6023      	str	r3, [r4, #0]
9000eb18:	e003      	b.n	9000eb22 <_printf_i+0x86>
9000eb1a:	2975      	cmp	r1, #117	; 0x75
9000eb1c:	d017      	beq.n	9000eb4e <_printf_i+0xb2>
9000eb1e:	2978      	cmp	r1, #120	; 0x78
9000eb20:	d1d4      	bne.n	9000eacc <_printf_i+0x30>
9000eb22:	2378      	movs	r3, #120	; 0x78
9000eb24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000eb28:	4864      	ldr	r0, [pc, #400]	; (9000ecbc <_printf_i+0x220>)
9000eb2a:	e055      	b.n	9000ebd8 <_printf_i+0x13c>
9000eb2c:	6813      	ldr	r3, [r2, #0]
9000eb2e:	1d19      	adds	r1, r3, #4
9000eb30:	681b      	ldr	r3, [r3, #0]
9000eb32:	6011      	str	r1, [r2, #0]
9000eb34:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000eb38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000eb3c:	2301      	movs	r3, #1
9000eb3e:	e08c      	b.n	9000ec5a <_printf_i+0x1be>
9000eb40:	681b      	ldr	r3, [r3, #0]
9000eb42:	6011      	str	r1, [r2, #0]
9000eb44:	f010 0f40 	tst.w	r0, #64	; 0x40
9000eb48:	bf18      	it	ne
9000eb4a:	b21b      	sxthne	r3, r3
9000eb4c:	e7cf      	b.n	9000eaee <_printf_i+0x52>
9000eb4e:	6813      	ldr	r3, [r2, #0]
9000eb50:	6825      	ldr	r5, [r4, #0]
9000eb52:	1d18      	adds	r0, r3, #4
9000eb54:	6010      	str	r0, [r2, #0]
9000eb56:	0628      	lsls	r0, r5, #24
9000eb58:	d501      	bpl.n	9000eb5e <_printf_i+0xc2>
9000eb5a:	681b      	ldr	r3, [r3, #0]
9000eb5c:	e002      	b.n	9000eb64 <_printf_i+0xc8>
9000eb5e:	0668      	lsls	r0, r5, #25
9000eb60:	d5fb      	bpl.n	9000eb5a <_printf_i+0xbe>
9000eb62:	881b      	ldrh	r3, [r3, #0]
9000eb64:	4854      	ldr	r0, [pc, #336]	; (9000ecb8 <_printf_i+0x21c>)
9000eb66:	296f      	cmp	r1, #111	; 0x6f
9000eb68:	bf14      	ite	ne
9000eb6a:	220a      	movne	r2, #10
9000eb6c:	2208      	moveq	r2, #8
9000eb6e:	2100      	movs	r1, #0
9000eb70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9000eb74:	6865      	ldr	r5, [r4, #4]
9000eb76:	60a5      	str	r5, [r4, #8]
9000eb78:	2d00      	cmp	r5, #0
9000eb7a:	f2c0 8095 	blt.w	9000eca8 <_printf_i+0x20c>
9000eb7e:	6821      	ldr	r1, [r4, #0]
9000eb80:	f021 0104 	bic.w	r1, r1, #4
9000eb84:	6021      	str	r1, [r4, #0]
9000eb86:	2b00      	cmp	r3, #0
9000eb88:	d13d      	bne.n	9000ec06 <_printf_i+0x16a>
9000eb8a:	2d00      	cmp	r5, #0
9000eb8c:	f040 808e 	bne.w	9000ecac <_printf_i+0x210>
9000eb90:	4665      	mov	r5, ip
9000eb92:	2a08      	cmp	r2, #8
9000eb94:	d10b      	bne.n	9000ebae <_printf_i+0x112>
9000eb96:	6823      	ldr	r3, [r4, #0]
9000eb98:	07db      	lsls	r3, r3, #31
9000eb9a:	d508      	bpl.n	9000ebae <_printf_i+0x112>
9000eb9c:	6923      	ldr	r3, [r4, #16]
9000eb9e:	6862      	ldr	r2, [r4, #4]
9000eba0:	429a      	cmp	r2, r3
9000eba2:	bfde      	ittt	le
9000eba4:	2330      	movle	r3, #48	; 0x30
9000eba6:	f805 3c01 	strble.w	r3, [r5, #-1]
9000ebaa:	f105 35ff 	addle.w	r5, r5, #4294967295
9000ebae:	ebac 0305 	sub.w	r3, ip, r5
9000ebb2:	6123      	str	r3, [r4, #16]
9000ebb4:	f8cd 8000 	str.w	r8, [sp]
9000ebb8:	463b      	mov	r3, r7
9000ebba:	aa03      	add	r2, sp, #12
9000ebbc:	4621      	mov	r1, r4
9000ebbe:	4630      	mov	r0, r6
9000ebc0:	f7ff fef6 	bl	9000e9b0 <_printf_common>
9000ebc4:	3001      	adds	r0, #1
9000ebc6:	d14d      	bne.n	9000ec64 <_printf_i+0x1c8>
9000ebc8:	f04f 30ff 	mov.w	r0, #4294967295
9000ebcc:	b005      	add	sp, #20
9000ebce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000ebd2:	4839      	ldr	r0, [pc, #228]	; (9000ecb8 <_printf_i+0x21c>)
9000ebd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
9000ebd8:	6813      	ldr	r3, [r2, #0]
9000ebda:	6821      	ldr	r1, [r4, #0]
9000ebdc:	1d1d      	adds	r5, r3, #4
9000ebde:	681b      	ldr	r3, [r3, #0]
9000ebe0:	6015      	str	r5, [r2, #0]
9000ebe2:	060a      	lsls	r2, r1, #24
9000ebe4:	d50b      	bpl.n	9000ebfe <_printf_i+0x162>
9000ebe6:	07ca      	lsls	r2, r1, #31
9000ebe8:	bf44      	itt	mi
9000ebea:	f041 0120 	orrmi.w	r1, r1, #32
9000ebee:	6021      	strmi	r1, [r4, #0]
9000ebf0:	b91b      	cbnz	r3, 9000ebfa <_printf_i+0x15e>
9000ebf2:	6822      	ldr	r2, [r4, #0]
9000ebf4:	f022 0220 	bic.w	r2, r2, #32
9000ebf8:	6022      	str	r2, [r4, #0]
9000ebfa:	2210      	movs	r2, #16
9000ebfc:	e7b7      	b.n	9000eb6e <_printf_i+0xd2>
9000ebfe:	064d      	lsls	r5, r1, #25
9000ec00:	bf48      	it	mi
9000ec02:	b29b      	uxthmi	r3, r3
9000ec04:	e7ef      	b.n	9000ebe6 <_printf_i+0x14a>
9000ec06:	4665      	mov	r5, ip
9000ec08:	fbb3 f1f2 	udiv	r1, r3, r2
9000ec0c:	fb02 3311 	mls	r3, r2, r1, r3
9000ec10:	5cc3      	ldrb	r3, [r0, r3]
9000ec12:	f805 3d01 	strb.w	r3, [r5, #-1]!
9000ec16:	460b      	mov	r3, r1
9000ec18:	2900      	cmp	r1, #0
9000ec1a:	d1f5      	bne.n	9000ec08 <_printf_i+0x16c>
9000ec1c:	e7b9      	b.n	9000eb92 <_printf_i+0xf6>
9000ec1e:	6813      	ldr	r3, [r2, #0]
9000ec20:	6825      	ldr	r5, [r4, #0]
9000ec22:	6961      	ldr	r1, [r4, #20]
9000ec24:	1d18      	adds	r0, r3, #4
9000ec26:	6010      	str	r0, [r2, #0]
9000ec28:	0628      	lsls	r0, r5, #24
9000ec2a:	681b      	ldr	r3, [r3, #0]
9000ec2c:	d501      	bpl.n	9000ec32 <_printf_i+0x196>
9000ec2e:	6019      	str	r1, [r3, #0]
9000ec30:	e002      	b.n	9000ec38 <_printf_i+0x19c>
9000ec32:	066a      	lsls	r2, r5, #25
9000ec34:	d5fb      	bpl.n	9000ec2e <_printf_i+0x192>
9000ec36:	8019      	strh	r1, [r3, #0]
9000ec38:	2300      	movs	r3, #0
9000ec3a:	6123      	str	r3, [r4, #16]
9000ec3c:	4665      	mov	r5, ip
9000ec3e:	e7b9      	b.n	9000ebb4 <_printf_i+0x118>
9000ec40:	6813      	ldr	r3, [r2, #0]
9000ec42:	1d19      	adds	r1, r3, #4
9000ec44:	6011      	str	r1, [r2, #0]
9000ec46:	681d      	ldr	r5, [r3, #0]
9000ec48:	6862      	ldr	r2, [r4, #4]
9000ec4a:	2100      	movs	r1, #0
9000ec4c:	4628      	mov	r0, r5
9000ec4e:	f7f1 fc6f 	bl	90000530 <memchr>
9000ec52:	b108      	cbz	r0, 9000ec58 <_printf_i+0x1bc>
9000ec54:	1b40      	subs	r0, r0, r5
9000ec56:	6060      	str	r0, [r4, #4]
9000ec58:	6863      	ldr	r3, [r4, #4]
9000ec5a:	6123      	str	r3, [r4, #16]
9000ec5c:	2300      	movs	r3, #0
9000ec5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000ec62:	e7a7      	b.n	9000ebb4 <_printf_i+0x118>
9000ec64:	6923      	ldr	r3, [r4, #16]
9000ec66:	462a      	mov	r2, r5
9000ec68:	4639      	mov	r1, r7
9000ec6a:	4630      	mov	r0, r6
9000ec6c:	47c0      	blx	r8
9000ec6e:	3001      	adds	r0, #1
9000ec70:	d0aa      	beq.n	9000ebc8 <_printf_i+0x12c>
9000ec72:	6823      	ldr	r3, [r4, #0]
9000ec74:	079b      	lsls	r3, r3, #30
9000ec76:	d413      	bmi.n	9000eca0 <_printf_i+0x204>
9000ec78:	68e0      	ldr	r0, [r4, #12]
9000ec7a:	9b03      	ldr	r3, [sp, #12]
9000ec7c:	4298      	cmp	r0, r3
9000ec7e:	bfb8      	it	lt
9000ec80:	4618      	movlt	r0, r3
9000ec82:	e7a3      	b.n	9000ebcc <_printf_i+0x130>
9000ec84:	2301      	movs	r3, #1
9000ec86:	464a      	mov	r2, r9
9000ec88:	4639      	mov	r1, r7
9000ec8a:	4630      	mov	r0, r6
9000ec8c:	47c0      	blx	r8
9000ec8e:	3001      	adds	r0, #1
9000ec90:	d09a      	beq.n	9000ebc8 <_printf_i+0x12c>
9000ec92:	3501      	adds	r5, #1
9000ec94:	68e3      	ldr	r3, [r4, #12]
9000ec96:	9a03      	ldr	r2, [sp, #12]
9000ec98:	1a9b      	subs	r3, r3, r2
9000ec9a:	42ab      	cmp	r3, r5
9000ec9c:	dcf2      	bgt.n	9000ec84 <_printf_i+0x1e8>
9000ec9e:	e7eb      	b.n	9000ec78 <_printf_i+0x1dc>
9000eca0:	2500      	movs	r5, #0
9000eca2:	f104 0919 	add.w	r9, r4, #25
9000eca6:	e7f5      	b.n	9000ec94 <_printf_i+0x1f8>
9000eca8:	2b00      	cmp	r3, #0
9000ecaa:	d1ac      	bne.n	9000ec06 <_printf_i+0x16a>
9000ecac:	7803      	ldrb	r3, [r0, #0]
9000ecae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000ecb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000ecb6:	e76c      	b.n	9000eb92 <_printf_i+0xf6>
9000ecb8:	9000f0a1 	.word	0x9000f0a1
9000ecbc:	9000f0b2 	.word	0x9000f0b2

9000ecc0 <_sbrk_r>:
9000ecc0:	b538      	push	{r3, r4, r5, lr}
9000ecc2:	4c06      	ldr	r4, [pc, #24]	; (9000ecdc <_sbrk_r+0x1c>)
9000ecc4:	2300      	movs	r3, #0
9000ecc6:	4605      	mov	r5, r0
9000ecc8:	4608      	mov	r0, r1
9000ecca:	6023      	str	r3, [r4, #0]
9000eccc:	f7f2 ffa0 	bl	90001c10 <_sbrk>
9000ecd0:	1c43      	adds	r3, r0, #1
9000ecd2:	d102      	bne.n	9000ecda <_sbrk_r+0x1a>
9000ecd4:	6823      	ldr	r3, [r4, #0]
9000ecd6:	b103      	cbz	r3, 9000ecda <_sbrk_r+0x1a>
9000ecd8:	602b      	str	r3, [r5, #0]
9000ecda:	bd38      	pop	{r3, r4, r5, pc}
9000ecdc:	2401ce14 	.word	0x2401ce14

9000ece0 <__sread>:
9000ece0:	b510      	push	{r4, lr}
9000ece2:	460c      	mov	r4, r1
9000ece4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ece8:	f000 f896 	bl	9000ee18 <_read_r>
9000ecec:	2800      	cmp	r0, #0
9000ecee:	bfab      	itete	ge
9000ecf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000ecf2:	89a3      	ldrhlt	r3, [r4, #12]
9000ecf4:	181b      	addge	r3, r3, r0
9000ecf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000ecfa:	bfac      	ite	ge
9000ecfc:	6563      	strge	r3, [r4, #84]	; 0x54
9000ecfe:	81a3      	strhlt	r3, [r4, #12]
9000ed00:	bd10      	pop	{r4, pc}

9000ed02 <__swrite>:
9000ed02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ed06:	461f      	mov	r7, r3
9000ed08:	898b      	ldrh	r3, [r1, #12]
9000ed0a:	05db      	lsls	r3, r3, #23
9000ed0c:	4605      	mov	r5, r0
9000ed0e:	460c      	mov	r4, r1
9000ed10:	4616      	mov	r6, r2
9000ed12:	d505      	bpl.n	9000ed20 <__swrite+0x1e>
9000ed14:	2302      	movs	r3, #2
9000ed16:	2200      	movs	r2, #0
9000ed18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ed1c:	f000 f868 	bl	9000edf0 <_lseek_r>
9000ed20:	89a3      	ldrh	r3, [r4, #12]
9000ed22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000ed26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000ed2a:	81a3      	strh	r3, [r4, #12]
9000ed2c:	4632      	mov	r2, r6
9000ed2e:	463b      	mov	r3, r7
9000ed30:	4628      	mov	r0, r5
9000ed32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000ed36:	f000 b817 	b.w	9000ed68 <_write_r>

9000ed3a <__sseek>:
9000ed3a:	b510      	push	{r4, lr}
9000ed3c:	460c      	mov	r4, r1
9000ed3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ed42:	f000 f855 	bl	9000edf0 <_lseek_r>
9000ed46:	1c43      	adds	r3, r0, #1
9000ed48:	89a3      	ldrh	r3, [r4, #12]
9000ed4a:	bf15      	itete	ne
9000ed4c:	6560      	strne	r0, [r4, #84]	; 0x54
9000ed4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000ed52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000ed56:	81a3      	strheq	r3, [r4, #12]
9000ed58:	bf18      	it	ne
9000ed5a:	81a3      	strhne	r3, [r4, #12]
9000ed5c:	bd10      	pop	{r4, pc}

9000ed5e <__sclose>:
9000ed5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ed62:	f000 b813 	b.w	9000ed8c <_close_r>
	...

9000ed68 <_write_r>:
9000ed68:	b538      	push	{r3, r4, r5, lr}
9000ed6a:	4c07      	ldr	r4, [pc, #28]	; (9000ed88 <_write_r+0x20>)
9000ed6c:	4605      	mov	r5, r0
9000ed6e:	4608      	mov	r0, r1
9000ed70:	4611      	mov	r1, r2
9000ed72:	2200      	movs	r2, #0
9000ed74:	6022      	str	r2, [r4, #0]
9000ed76:	461a      	mov	r2, r3
9000ed78:	f7f2 fef9 	bl	90001b6e <_write>
9000ed7c:	1c43      	adds	r3, r0, #1
9000ed7e:	d102      	bne.n	9000ed86 <_write_r+0x1e>
9000ed80:	6823      	ldr	r3, [r4, #0]
9000ed82:	b103      	cbz	r3, 9000ed86 <_write_r+0x1e>
9000ed84:	602b      	str	r3, [r5, #0]
9000ed86:	bd38      	pop	{r3, r4, r5, pc}
9000ed88:	2401ce14 	.word	0x2401ce14

9000ed8c <_close_r>:
9000ed8c:	b538      	push	{r3, r4, r5, lr}
9000ed8e:	4c06      	ldr	r4, [pc, #24]	; (9000eda8 <_close_r+0x1c>)
9000ed90:	2300      	movs	r3, #0
9000ed92:	4605      	mov	r5, r0
9000ed94:	4608      	mov	r0, r1
9000ed96:	6023      	str	r3, [r4, #0]
9000ed98:	f7f2 ff05 	bl	90001ba6 <_close>
9000ed9c:	1c43      	adds	r3, r0, #1
9000ed9e:	d102      	bne.n	9000eda6 <_close_r+0x1a>
9000eda0:	6823      	ldr	r3, [r4, #0]
9000eda2:	b103      	cbz	r3, 9000eda6 <_close_r+0x1a>
9000eda4:	602b      	str	r3, [r5, #0]
9000eda6:	bd38      	pop	{r3, r4, r5, pc}
9000eda8:	2401ce14 	.word	0x2401ce14

9000edac <_fstat_r>:
9000edac:	b538      	push	{r3, r4, r5, lr}
9000edae:	4c07      	ldr	r4, [pc, #28]	; (9000edcc <_fstat_r+0x20>)
9000edb0:	2300      	movs	r3, #0
9000edb2:	4605      	mov	r5, r0
9000edb4:	4608      	mov	r0, r1
9000edb6:	4611      	mov	r1, r2
9000edb8:	6023      	str	r3, [r4, #0]
9000edba:	f7f2 ff00 	bl	90001bbe <_fstat>
9000edbe:	1c43      	adds	r3, r0, #1
9000edc0:	d102      	bne.n	9000edc8 <_fstat_r+0x1c>
9000edc2:	6823      	ldr	r3, [r4, #0]
9000edc4:	b103      	cbz	r3, 9000edc8 <_fstat_r+0x1c>
9000edc6:	602b      	str	r3, [r5, #0]
9000edc8:	bd38      	pop	{r3, r4, r5, pc}
9000edca:	bf00      	nop
9000edcc:	2401ce14 	.word	0x2401ce14

9000edd0 <_isatty_r>:
9000edd0:	b538      	push	{r3, r4, r5, lr}
9000edd2:	4c06      	ldr	r4, [pc, #24]	; (9000edec <_isatty_r+0x1c>)
9000edd4:	2300      	movs	r3, #0
9000edd6:	4605      	mov	r5, r0
9000edd8:	4608      	mov	r0, r1
9000edda:	6023      	str	r3, [r4, #0]
9000eddc:	f7f2 feff 	bl	90001bde <_isatty>
9000ede0:	1c43      	adds	r3, r0, #1
9000ede2:	d102      	bne.n	9000edea <_isatty_r+0x1a>
9000ede4:	6823      	ldr	r3, [r4, #0]
9000ede6:	b103      	cbz	r3, 9000edea <_isatty_r+0x1a>
9000ede8:	602b      	str	r3, [r5, #0]
9000edea:	bd38      	pop	{r3, r4, r5, pc}
9000edec:	2401ce14 	.word	0x2401ce14

9000edf0 <_lseek_r>:
9000edf0:	b538      	push	{r3, r4, r5, lr}
9000edf2:	4c07      	ldr	r4, [pc, #28]	; (9000ee10 <_lseek_r+0x20>)
9000edf4:	4605      	mov	r5, r0
9000edf6:	4608      	mov	r0, r1
9000edf8:	4611      	mov	r1, r2
9000edfa:	2200      	movs	r2, #0
9000edfc:	6022      	str	r2, [r4, #0]
9000edfe:	461a      	mov	r2, r3
9000ee00:	f7f2 fef8 	bl	90001bf4 <_lseek>
9000ee04:	1c43      	adds	r3, r0, #1
9000ee06:	d102      	bne.n	9000ee0e <_lseek_r+0x1e>
9000ee08:	6823      	ldr	r3, [r4, #0]
9000ee0a:	b103      	cbz	r3, 9000ee0e <_lseek_r+0x1e>
9000ee0c:	602b      	str	r3, [r5, #0]
9000ee0e:	bd38      	pop	{r3, r4, r5, pc}
9000ee10:	2401ce14 	.word	0x2401ce14

9000ee14 <__malloc_lock>:
9000ee14:	4770      	bx	lr

9000ee16 <__malloc_unlock>:
9000ee16:	4770      	bx	lr

9000ee18 <_read_r>:
9000ee18:	b538      	push	{r3, r4, r5, lr}
9000ee1a:	4c07      	ldr	r4, [pc, #28]	; (9000ee38 <_read_r+0x20>)
9000ee1c:	4605      	mov	r5, r0
9000ee1e:	4608      	mov	r0, r1
9000ee20:	4611      	mov	r1, r2
9000ee22:	2200      	movs	r2, #0
9000ee24:	6022      	str	r2, [r4, #0]
9000ee26:	461a      	mov	r2, r3
9000ee28:	f7f2 fe84 	bl	90001b34 <_read>
9000ee2c:	1c43      	adds	r3, r0, #1
9000ee2e:	d102      	bne.n	9000ee36 <_read_r+0x1e>
9000ee30:	6823      	ldr	r3, [r4, #0]
9000ee32:	b103      	cbz	r3, 9000ee36 <_read_r+0x1e>
9000ee34:	602b      	str	r3, [r5, #0]
9000ee36:	bd38      	pop	{r3, r4, r5, pc}
9000ee38:	2401ce14 	.word	0x2401ce14

9000ee3c <_init>:
9000ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000ee3e:	bf00      	nop
9000ee40:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000ee42:	bc08      	pop	{r3}
9000ee44:	469e      	mov	lr, r3
9000ee46:	4770      	bx	lr

9000ee48 <_fini>:
9000ee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000ee4a:	bf00      	nop
9000ee4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000ee4e:	bc08      	pop	{r3}
9000ee50:	469e      	mov	lr, r3
9000ee52:	4770      	bx	lr
